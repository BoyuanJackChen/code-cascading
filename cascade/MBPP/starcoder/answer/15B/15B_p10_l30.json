[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in result:\n            result.append(element)\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as inputs and returns the common elements present in both tuples.\n    \"\"\"\n    # Using set intersection method to get common elements from both tuples\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared.append(elem)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared_elements:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns the common elements between the two tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(test_tup2))"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the common elements.\n    '''\n    common_elements = ()\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements += (element,)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set()\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.add(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create an empty set to store the shared elements\n    shared_elements = set()\n    \n    # Iterate over the elements in the first tuple\n    for elem in test_tup1:\n        # Check if the element is present in the second tuple\n        if elem in test_tup2:\n            # If present, add it to the shared_elements set\n            shared_elements.add(elem)\n    \n    # Convert the set to a list and return it\n    return list(shared_elements)"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Identify non-prime numbers.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        True if the integer is not prime, False otherwise.\n    \"\"\"\n    # check if the number is less than 2\n    if n < 2:\n        return True\n    # check if the number is divisible by any integer from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number, else False.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nprint(is_not_prime(11))\nprint(is_not_prime(7))\nprint(is_not_prime(17))"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number, else False.\n    \"\"\"\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return True\n    \n    # Check if the number is divisible by any odd number up to its square root\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # If the number is not divisible by any number up to its square root, it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        sqrt_n = int(math.sqrt(n))\n        for i in range(3, sqrt_n + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is not a prime number,\n    and False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the number is not a prime number,\n    otherwise, it returns False.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is not prime,\n    and False if it is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a number as input and returns True if it's not prime, otherwise False.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    \n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(-hq.heappop(heap))\n    \n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes a list of numbers and returns the n largest integers from the list in descending order.\n    \"\"\"\n    hq.heapify(nums) # Convert the list into a heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums)) # Remove and return the largest element from the heap\n    largest_nums.reverse() # Reverse the order of the n largest integers\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    res = []\n    for i in range(n):\n        res.append(-hq.heappop(heap))\n    return res"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    largest = []\n    for num in nums:\n        if len(largest) < n:\n            hq.heappush(largest, num)\n        else:\n            if num > largest[0]:\n                hq.heappop(largest)\n                hq.heappush(largest, num)\n    return list(reversed(largest))"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max-heap from the input list\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # Iterate through the remaining elements of the list and add them to the heap if they are larger than the smallest element\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappushpop(heap, nums[i])\n\n    # Sort the heap in descending order and return the top n elements\n    heap.sort(reverse=True)\n    return heap[:n]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n\n    # Add the first n elements to the heap\n    for num in nums[:n]:\n        hq.heappush(heap, num)\n\n    # Add the remaining elements to the heap\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n\n    # Sort the heap in descending order and return the n largest integers\n    heap.sort(reverse=True)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max heap from the input list\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n\n    # Create a list to store the n largest integers\n    largest_nums = []\n\n    # Pop the largest n integers from the heap and append them to the list\n    for i in range(n):\n        largest_nums.append(-hq.heappop(heap))\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer as input and returns True if the number is a power of two,\n    otherwise it returns False.\n    '''\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x //= 2\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if the integer is a power of 2, else False.\n    '''\n    # First, check if x is a positive integer\n    if x <= 0:\n        return False\n    \n    # Next, check if x is a power of 2\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    This function takes an integer as input and returns True if the given number is a power of 2 and False otherwise.\n    \"\"\"\n    \n    if x <= 0:\n        return False\n    \n    # check if x is a power of 2\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n        \n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    # Check if x is a power of 2\n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    binary_string = bin(x)[2:]\n    if len(binary_string) == 1:\n        return False\n    diff_count = 0\n    for i in range(len(binary_string)-1):\n        if binary_string[i]!= binary_string[i+1]:\n            diff_count += 1\n    if diff_count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0: \n        if x & 1 == 0: \n            return False \n        x >>= 1\n    return True "
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if it is a power of two, else False.\n    '''\n    # Check if x is less than or equal to zero\n    if x <= 0:\n        return False\n    \n    # Check if x is a power of two\n    while x % 2 == 0:\n        x = x / 2\n    \n    # If x is 1 after dividing by 2, then x is a power of 2\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return (x & (x-1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Check whether a number is a power of two or not.\n\n    :param x: An integer.\n    :return: True if x is a power of two, False otherwise.\n    \"\"\"\n    # Check if x is a positive integer\n    if not isinstance(x, int) or x <= 0:\n        return False\n\n    # Check if x is a power of two by checking if the binary representation of x has only one '1' bit\n    # and the rest of the bits are '0'\n    binary = bin(x)[2:]\n    return binary.count('1') == 1 and binary.count('0') == len(binary) - 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function returns True if the given number is a power of 2, else it returns False.\n    \"\"\"\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x //= 2\n    if x == 1:\n        return True\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words with 4 or more characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all matches in the text and return them as a list\n    return pattern.findall(text)"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    \n    # Return all words with at least 4 characters\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # find all words in the text that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and finds all words which are at least 4 characters long in the string.\n    '''\n    # Use regular expression to find all words in the string\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    # Find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog is not amused.\"\nresult = find_char_long(text)\nprint(result)  # Output: ['quick', 'brown', 'jumps', 'lazy']"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    This function takes a list of numbers and returns a new list containing the squares of the individual elements.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    if len(str) == 1:\n        return 0\n    else:\n        # Check if the string is a palindrome\n        if str == str[::-1]:\n            return 0\n        else:\n            # Find the midpoint of the string\n            mid = len(str) // 2\n            # Check if the first half of the string is a palindrome\n            if str[:mid] == str[:mid][::-1]:\n                # Recursively call the function on the second half of the string\n                return 1 + find_Rotations(str[mid:])\n            else:\n                # Recursively call the function on the first half of the string\n                return 1 + find_Rotations(str[mid+1:]) + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    # Check if string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # Find midpoint of string\n    mid = len(str) // 2\n    \n    # Check if midpoint is a valid pivot point\n    if str[mid] == str[len(str)-1]:\n        return 1 + find_Rotations(str[mid+1:len(str)] + str[0:mid+1])\n    else:\n        return 1 + min(find_Rotations(str[mid+1:len(str)] + str[0:mid+1]), find_Rotations(str[mid:len(str)] + str[0:mid]))"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(str)\n    \n    # Find the longest substring in the list that is a rotation of the original string\n    longest_substring = \"\"\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = \"\".join(str_list[i:j])\n            if substring == str:\n                longest_substring = substring\n                break\n        if longest_substring!= \"\":\n            break\n    \n    # If the longest substring is not found, then the string is already a rotation of itself and no rotation is required\n    if longest_substring == \"\":\n        return 0\n    \n    # Find the number of rotations required to get the same string\n    rotations = 1\n    for i in range(len(str)):\n        if str_list[i]!= longest_substring[i]:\n            for j in range(i+1, len(str)):\n                if str_list[j] == longest_substring[0]:\n                    break\n            if j == len(str) - 1:\n                return \"No rotation is possible\"\n            else:\n                temp_list = str_list[i:j+1]\n                temp_list += str_list[0:i] + str_list[j+1:]\n                str_list = temp_list\n                rotations += 1\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str_list = list(str)\n    \n    # If string length is 1, return 1.\n    if n == 1:\n        return 1\n    \n    # If first and last characters are same, return the minimum of the left and right rotations.\n    if str_list[0] == str_list[n-1]:\n        return 1 + min(find_Rotations(str[1:n]), find_Rotations(str[n-1:n-1:-1]))\n    \n    # If first and last characters are different, return the minimum of the left and right rotations plus 1.\n    return 1 + min(find_Rotations(str[1:n]), find_Rotations(str[n-1:n-1:-1]))"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # check if string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    # Find the middle point\n    mid = n // 2\n    # Initialize count\n    count = 0\n    # Loop through the string\n    for i in range(mid, n):\n        # If the first half of the string is not a palindrome, then the minimum number of rotations is count + 1\n        if str[:i]!= str[:i][::-1]:\n            return count + 1\n        # If the middle element of the string is not the same as the first element, then the minimum number of rotations is count + 1\n        elif str[mid]!= str[0]:\n            return count + 1\n        # If the second half of the string is not a palindrome, then the minimum number of rotations is count + 1\n        elif str[i:]!= str[i:][::-1]:\n            return count + 1\n        # If none of the conditions are met, increment the count\n        else:\n            count += 1\n    # If the string is already a palindrome, then the minimum number of rotations is 0\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n <= 1:\n        return 0\n    elif str == str[::-1]:\n        return 0\n    else:\n        for i in range(n):\n            temp = str[i:] + str[:i]\n            if temp == str:\n                return i"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Finding length of the string\n    n = len(str)\n    \n    # Finding the ASCII value of first character of the string\n    ascii_value = ord(str[0])\n    \n    # Finding the ASCII value of last character of the string\n    ascii_value_last = ord(str[n-1])\n    \n    # Finding the minimum number of rotations required to get the same string\n    rotations = 0\n    \n    # If the first and last characters are same, then no rotation is required\n    if ascii_value == ascii_value_last:\n        rotations = 0\n        \n    else:\n        # If the first and last characters are different, then rotation is required\n        for i in range(1, n):\n            # Finding the ASCII value of current character of the string\n            ascii_value_current = ord(str[i])\n            \n            # If the ASCII value of current character is less than the ASCII value of first character, then rotation is required\n            if ascii_value_current < ascii_value:\n                rotations = i\n                break\n                \n        # If no rotation is required, then number of rotations will be equal to length of the string\n        if rotations == 0:\n            rotations = n\n            \n    # Returning the minimum number of rotations required to get the same string\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    for i in range(n):\n        if str == str[i:] + str[:i]:\n            return n - i\n    return n + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Concatenate the string with itself\n    str_concat = str + str\n    # Find the index of the original string in the concatenated string\n    index = str_concat.index(str)\n    # Calculate the number of rotations required\n    rotations = (index + n) // n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(s):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return 0\n    start = s.find(s[0])\n    if start == -1:\n        return n\n    end = start + 1\n    while end < n and s[start] == s[end]:\n        end += 1\n    if end == n:\n        return n\n    return min(end, n - start) + find_Rotations(s[start + 1:n] + s[:start])"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and returns the string without the first and last occurrence of the character.\n    '''\n    if s.count(ch) < 2:\n        return s\n    else:\n        s = s.replace(ch, \"\", 1)\n        s = s.replace(ch, \"\")\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two arguments, a string and a character. It removes the first and last occurrence of the character from the string and returns the modified string.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        return s[:s.index(ch)] + s[s.index(ch)+1:s.rindex(ch)] + s[s.rindex(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    \"\"\"\n    This function takes a string s and a character ch as input and removes first and last occurrence of ch from s.\n    \"\"\"\n    if ch in s:\n        s = s.replace(ch,\"\",1)\n        s = s[:-1].replace(ch,\"\",1)\n    else:\n        print(f\"{ch} is not present in {s}\")\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two arguments, s (string) and ch (character).\n    It removes the first and last occurrence of the given character from the string.\n    '''\n    # Check if the given character is present in the string\n    if ch not in s:\n        print(f\"{ch} not present in the string.\")\n        return s\n    \n    # Remove first occurrence of the character from the string\n    index = s.index(ch)\n    if index == 0:\n        s = s[1:]\n    else:\n        s = s[:index] + s[index+1:]\n    \n    # Remove last occurrence of the character from the string\n    index = s.rindex(ch)\n    if index == len(s)-1:\n        s = s[:-1]\n    else:\n        s = s[:index] + s[index+1:]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Removes the first and last occurrence of the given character from the string.\n    '''\n    if s.count(ch) < 2:\n        # If the character is not present or it's present only once, return the original string\n        return s\n    else:\n        # Split the string into two parts: the part before and after the first occurrence of the character\n        parts = s.split(ch, 1)\n        if len(parts) == 1:\n            # If the character is present but it's the first or last character of the string, return an empty string\n            return ''\n        else:\n            # Otherwise, return the concatenation of the two parts\n            return parts[0] + parts[-1]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and returns the string with first and last occurrence of the given character removed.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        s = s.replace(ch, \"\", 1)\n        s = s.replace(ch, \"\", -1)\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        if s.count(ch) == 1:\n            return s.replace(ch,'')\n        else:\n            return s[:s.index(ch)] + s[s.index(ch)+1:].replace(ch,'')\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function takes a string and a character as inputs and removes the first and last occurrence of the given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        if s[0]==ch and s[-1]==ch:\n            return s.replace(ch,'',1)[1:-1]\n        elif s[0]==ch:\n            return s[1:].replace(ch,'',1)[1:-1]\n        elif s[-1]==ch:\n            return s[:-1].replace(ch,'',1)[1:-1]\n        else:\n            return s.replace(ch,'',1)[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) >= 2:\n        return s[:s.index(ch)] + s[s.index(ch) + 1:-1].replace(ch, '', 1) + s[-1]\n    elif s.count(ch) == 1:\n        return s.replace(ch, '', 1)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from a string.\n    \"\"\"\n    if s.count(ch) >= 2:\n        s = s.replace(ch + s[s.index(ch) + 1:], \"\", 1)  # Remove first occurrence\n        s = s.replace(s[:s.rfind(ch)], \"\", 1)  # Remove last occurrence\n    else:\n        s = s.replace(ch, \"\")\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(i+1, rows):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_rows = sorted(M, key=lambda x: sum(x))\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    sorted_matrix = sorted(M, key=lambda row: sum(row))\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # convert the matrix to a list of tuples, where each tuple contains the row sum and the row itself\n    row_sums = [(sum(row), row) for row in M]\n    # sort the list of tuples by the row sum in ascending order\n    row_sums.sort()\n    # extract the sorted rows and return them as a matrix\n    return [row for row_sum, row in row_sums]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    num_rows = len(M)\n    num_cols = len(M[0])\n    \n    # Create a list of tuples, each containing the sum of a row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n    \n    # Sort the list of tuples in ascending order of the row sums\n    row_sums.sort()\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_rows = [row_tuple[1] for row_tuple in row_sums]\n    \n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[sorted_rows[j][i] for j in range(num_rows)] for i in range(num_cols)]\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # create a list of tuples containing the sum of each row and the corresponding row index\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n    \n    # sort the list in ascending order of sum of rows\n    row_sums.sort()\n    \n    # create a new matrix with the sorted rows\n    sorted_M = [[M[row_sums[i][1]][j] for j in range(cols)] for i in range(rows)]\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted(M, key=sum)\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted(M, key=sum)\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Computes the volume of a triangular prism given its dimensions.\n\n    Parameters:\n    l (float): the length of the base of the triangular prism\n    b (float): the width of the triangular prism\n    h (float): the height of the triangular prism\n\n    Returns:\n    float: the volume of the triangular prism\n    \"\"\"\n    return 0.5 * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism\n    and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes in the length, breadth, and height of a triangular prism as input and returns its volume.\n    \"\"\"\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*l*b*h"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the dimensions of a triangular prism as input and returns its volume.\n    \"\"\"\n    # calculate the volume of the triangular prism\n    volume = (l * b * h) / 3.0\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism (l, b, h) as inputs and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes the length, breadth and height of a triangular prism as inputs and returns the volume of the prism.\n    '''\n    volume = (1/3)*l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth, and height of a triangular prism as arguments and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return True if pattern.search(text) else False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.findall(pattern, text)\n    return len(result) > 0"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r\"[a-z]+_[a-z]+\")\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r\"[a-z]+_[a-z]+\"\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = re.compile('([a-z])_([a-z])')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string, string2):\n    '''\n    This function removes all the characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in string2:\n            result.append(char)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    char_set = set(string)\n    for i in range(len(string_list)):\n        if string_list[i] in char_set:\n            string_list[i] = \"\"\n    return \"\".join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        if chr(i) not in string:\n            char_list.append(chr(i))\n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    # Initialize the result list\n    result = []\n    \n    # Iterate through each character in the string\n    for char in string:\n        # Check if the character is present in the result list\n        if char not in result:\n            # If not, add the character to the result list\n            result.append(char)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_list = []\n    for char in string:\n        str_list.append(char)\n    str_list = [char for char in str_list if char not in second_string]\n    return str_list"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    # Create a list of all possible characters\n    all_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    \n    # Remove characters from the first string which are present in the second string\n    for char in string:\n        if char in all_chars:\n            all_chars.remove(char)\n    \n    # Return the resulting list of characters\n    return all_chars"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_chars(str1, str2):\n    # Convert both strings to lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Create a dictionary to store the index of each character in the second string\n    char_index = {}\n    for i in range(len(list2)):\n        char_index[list2[i]] = i\n\n    # Remove characters from the first string which are present in the second string\n    i = 0\n    while i < len(list1):\n        if list1[i] in char_index:\n            del list1[i]\n        else:\n            i += 1\n\n    # Convert the list back to a string\n    result = ''.join(list1)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_chars(string, chars):\n    \"\"\"\n    This function takes two strings as input: the first string `string` and the second string `chars`.\n    The function removes all the characters present in the `chars` string from the `string` string and returns the resulting string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char not in chars:\n            result += char\n    return result\n\ndef str_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a list of all the characters present in the string.\n    \"\"\"\n    result = []\n    for char in string:\n        if char not in result:\n            result.append(char)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_chars(string, chars):\n    return ''.join([char for char in string if char not in chars])\n\ndef str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Define the set of characters to remove\n    remove_chars_set = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    # Remove the characters from the string and return the resulting string\n    return remove_chars(string, remove_chars_set)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string, chars):\n    # Create a boolean array \"present\" of size NO_OF_CHARS and initialize all values as False\n    present = [False] * NO_OF_CHARS\n    \n    # Traverse through the characters in the second string and mark their presence in boolean array\n    for char in chars:\n        present[ord(char)] = True\n        \n    # Traverse through the characters in the first string and add only those which are not present in the second string\n    result = []\n    for char in string:\n        if not present[ord(char)]:\n            result.append(char)\n    \n    # Return the resultant list\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if there are any duplicate elements in the array, False otherwise.\n    '''\n    # Convert the list to a set to remove any duplicate elements and then back to a list\n    setnums = list(set(arraynums))\n    # If the length of the original list is greater than the length of the set, then there are duplicate elements in the original list\n    if len(arraynums) > len(setnums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if there is any duplicate element in the array and False otherwise.\n    \"\"\"\n    # Create an empty dictionary to store the occurrence of each element in the array\n    occurrence_dict = {}\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, it means it has been encountered before and hence, it is a duplicate\n        if num in occurrence_dict:\n            return True\n        # If the element is not in the dictionary, add it with an occurrence of 1\n        else:\n            occurrence_dict[num] = 1\n    # If all the elements have been encountered only once, it means there are no duplicates in the array\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    \n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                duplicate = True\n                break\n        if duplicate:\n            break\n    \n    return duplicate"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq_dict = {}\n\n    # Iterate through each element in the array and count its frequency\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Check if any frequency of an element is greater than 1\n    for freq in freq_dict.values():\n        if freq > 1:\n            return True\n\n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        print(\"No duplicate element found in the array.\")\n    else:\n        print(\"Duplicate element found in the array.\")"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    :param x: An integer number.\n    :return: True if x is a woodball number, False otherwise.\n    \"\"\"\n    # check if x is negative\n    if x < 0:\n        return False\n\n    # convert x to a string and reverse it\n    x_str = str(x)[::-1]\n\n    # check if x is a palindrome\n    if x_str == x_str[::-1]:\n        return True\n\n    # check if x has an even number of digits\n    if len(x_str) % 2 == 0:\n        # check if the sum of the digits of x is divisible by 3\n        if sum(int(digit) for digit in x_str) % 3 == 0:\n            return True\n\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0 and x > 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 11 == 0 or x % 13 == 0 or x % 17 == 0 or x % 19 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the range of woodball numbers\n    woodball_range = range(1, 10)\n\n    # Check if the given number is within the woodball range\n    if x in woodball_range:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        while x!= 2:\n            if x % 2 == 0:\n                x = x // 2\n            else:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if the given number is woodball or not.\n    \"\"\"\n    # Divide the number by 3 and check if the remainder is zero\n    if x % 3 == 0:\n        # If the remainder is zero, then the number is woodball\n        return True\n    else:\n        # If the remainder is not zero, then the number is not woodball\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1:\n        return False\n    elif x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        for i in range(3, x):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    sum_of_digits = sum(int(digit) for digit in str(x))\n    return sum_of_digits == x"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the number is positive\n    if x > 0: \n        # Check if the number is divisible by 4 but not by 100\n        if x % 4 == 0 and x % 100!= 0: \n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 1:\n        return False\n    elif x == 1:\n        return True\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    # Reverse the given number\n    rev_num = int(str(num)[::-1])\n\n    # Check if the difference between the original number and its reverse is one\n    if num - rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the given number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # check if the rev_num is one less than twice the original number\n    if rev_num == num-2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # reverse the number\n    rev_num = int(str(num)[::-1])\n    \n    # check if the number is one less than twice its reverse\n    if num == rev_num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    reverse_str = num_str[::-1]\n    if int(reverse_str) * 2 + 1 == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    This function takes an integer as input and returns True if the number is one less than twice its reverse, otherwise False.\n    '''\n    # Converting the integer to string and then reversing it using slicing\n    rev_num = str(num)[::-1]\n    \n    # Converting the reversed string back to integer and adding 1 to it\n    rev_num = int(rev_num) + 1\n    \n    # Comparing the original number with the rev_num\n    if num == rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n\n    while temp!= 0:\n        rem = temp % 10\n        rev_num = rev_num * 10 + rem\n        temp = temp // 10\n\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    # Convert the number into a string to reverse it\n    num = str(num)\n    reverse = num[::-1]\n\n    # Check if the reverse of the number is twice the original number minus one\n    if int(reverse)*2 == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    if rev_num == num-1 and num % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    \n    # Check if the original number plus the reversed number is equal to twice the original number\n    if int(num) + int(num_str) == 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) - 1"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    n = len(arr)\n    arr.sort(reverse=True)\n    max_num = arr[0]\n    for i in range(1, n):\n        max_num = max_num * 10 + arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # convert the list to a string to easily find the maximum number\n    arr_str = ''.join(str(num) for num in arr)\n    # find the maximum number that can be formed with the digits in the list\n    max_num = int(arr_str) + 1\n    # return the result as a string\n    return str(max_num)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        num = 1\n        for j in range(i, len(arr)):\n            num *= int(arr[j])\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the digits.\n    \"\"\"\n    arr.sort()\n    max_num = arr[-1]\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] * (len(arr)-i) > max_num:\n            max_num = arr[i] * (len(arr)-i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_num = max(arr[0], find_Max_Num(arr[1:]))\n        return max_num * 10 + arr[0]\n\narr = [3, 5, 7, 9]\nprint(find_Max_Num(arr))  # Output: 9573"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed using those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        current_num = 1\n        for j in range(i, len(arr)):\n            current_num = current_num * int(arr[j])\n        if current_num > max_num:\n            max_num = current_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed using those digits.\n    '''\n    max_num = 0\n    \n    # Find the maximum number by multiplying all the digits in the list\n    for digit in arr:\n        max_num = max_num * 10 + digit\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    \n    for i in range(len(arr)):\n        product = 1\n        for j in range(len(arr)):\n            if i!= j:\n                product *= int(arr[j])\n        product *= int(arr[i])\n        if product > max_num:\n            max_num = product\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    # Initialize max_num variable to the smallest possible integer value\n    max_num = float('-inf')\n    # Loop through the list and update the max_num variable if a larger number is found\n    for i in range(len(arr)):\n        num = arr[i]\n        if num > max_num:\n            max_num = num\n    # Return the max_num variable\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    result = 0\n    for i in arr:\n        result = result*10 + i\n    return result"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y >= 0:  # both positive\n        return False\n    elif x < 0 and y < 0:  # both negative\n        return False\n    else:  # one positive and one negative\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y < 0 or x < 0 and y >= 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs and False otherwise.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        print(\"Both integers have opposite sign.\")\n    elif x >= 0 and y < 0:\n        print(\"The first integer has negative sign while the second integer has positive sign.\")\n    elif x < 0 and y >= 0:\n        print(\"The first integer has positive sign while the second integer has negative sign.\")\n    else:\n        print(\"Both integers have the same sign.\")"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    count = 1\n    while count <= n:\n        octagonal += count\n        count += 1\n    return octagonal\n\nprint(is_octagonal(1))  # Output: 1\nprint(is_octagonal(2))  # Output: 2\nprint(is_octagonal(3))  # Output: 6\nprint(is_octagonal(4))  # Output: 12\nprint(is_octagonal(5))  # Output: 20"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        octagonal = i*(2*i - 1)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        oct_num = i*(2*i-1)\n        if oct_num == n:\n            return True\n        else:\n            i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    count = 1\n    while True:\n        octagonal = count*(3*count - 2)\n        if octagonal >= n:\n            return octagonal\n        count += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        if i * (2 * i - 1) == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        octagonal_num = num * (2 * num - 1)\n        if octagonal_num == n:\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonals = []\n    while len(octagonals) < n:\n        octagonals.append(i*(3*i - 1))\n        i += 1\n    return octagonals[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        current = i * (2 * i - 1)\n        if current > 0 and current % 10 == 8:\n            count += 1\n    return i * (2 * i - 1)"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    octagonal_num = 1\n    while i <= n:\n        octagonal_num += i\n        i += 1\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # initialize count to 1\n    count = 1\n    # initialize octagon number to 1\n    octagon = 1\n    # loop until the nth octagonal number is found\n    while count < n:\n        # calculate next octagon number\n        octagon += 2*(count+1)\n        # increment count\n        count += 1\n    # return the nth octagonal number\n    return octagon"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    seen = defaultdict(int)\n    for i in range(len(s)):\n        seen[s[i]] += 1\n        for j in range(i+1, len(s)+1):\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count += 1\n                seen[s[i:j]] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = s[i:j]\n            sum_digits = sum(int(digit) for digit in sub_str)\n            if sum_digits == len(sub_str):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    digit_count = defaultdict(int)\n    \n    for i in range(n):\n        digit_count[s[i]] += 1\n        \n        for j in range(i+1, n+1):\n            if sum(digit_count.values()) == j-i:\n                count += 1\n            \n            digit_count[s[i]] -= 1\n            if digit_count[s[i]] == 0:\n                del digit_count[s[i]]\n                \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of substrings\n    substring_count = defaultdict(int)\n\n    # iterate through each substring of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n\n            # calculate the sum of digits in the substring\n            digit_sum = sum(int(digit) for digit in substring)\n\n            # if the sum of digits is equal to the length of the substring, increment the count in the dictionary\n            if digit_sum == len(substring):\n                substring_count[substring] += 1\n\n    # return the count of substrings with the required condition\n    return len(substring_count)"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize a dictionary to store the count of substrings for each length\n    substrings_count = defaultdict(int)\n    # Initialize a set to store the digits of the length of the substring\n    digits = set()\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Loop through each length from 1 to the length of the string - i\n        for j in range(1, len(s)-i+1):\n            # Calculate the sum of digits in the substring\n            sum_digits = sum(int(digit) for digit in s[i:i+j])\n            # If the sum of digits equals the length of the substring, increment the count of substrings\n            if sum_digits == j:\n                substrings_count[j] += 1\n                # Add the set of digits to the set of digits of the length of the substring\n                digits.add(tuple(int(digit) for digit in s[i:i+j]))\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(count for length, count in substrings_count.items() if length == len(str(sum(digits))))"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_sum = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if i == j:\n                digit_sum[s[i]] += 1\n                count += digit_sum[s[i]]\n            else:\n                digit_sum[s[j]] += 1\n                digit_sum[s[j-i]] -= 1\n                count += digit_sum[s[j]] - digit_sum[s[j-i]]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if sum(int(digit) for digit in sub) == len(sub):\n                count += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if not xs:\n        return None\n    else:\n        smallest = xs[0]\n        for num in xs:\n            if num < smallest:\n                smallest = num\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Return the smallest number in a list of numbers.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = test_list[j][0] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[j][1] - test_list[i][1])\n            \n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples and returns the maximum difference between available pairs.\n    '''\n    # Sort the list in ascending order of the first element in the tuples.\n    test_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Initialize variables for the maximum difference and the current difference.\n    max_diff = 0\n    curr_diff = 0\n    \n    # Loop through the sorted list and calculate the difference between each pair of consecutive tuples.\n    for i in range(len(test_list) - 1):\n        curr_diff = test_list[i+1][0] - test_list[i][0]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = [(a, b) for a in test_list for b in test_list if a!= b]\n    return max(abs(a-b) for a, b in pairs)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and returns the maximum difference between available pairs.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subject_marks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subject_marks):\n    \"\"\"\n    Sorts a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_list = sorted(subject_marks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: if the input list is not empty,\n    # sum the first element with the sum of the rest of the list\n    first_element = data_list[0]\n    rest_of_list = data_list[1:]\n    return first_element + recursive_list_sum(rest_of_list)"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(elem) for elem in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list):  # recursive case: nested list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # leaf case: element in the list\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes a list as input and recursively flattens the list.\n    Then, it calculates the sum of all the elements of the flattened list.\n\n    Args:\n        data_list (list): A list of integers or floats.\n\n    Returns:\n        int or float: The sum of all the elements of the flattened list.\n    \"\"\"\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: if the list is not empty, sum the first element and call the function recursively on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes a list as input and recursively flattens the list and returns the sum of all the elements in the flattened list.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    else:\n        if type(data_list[0]) == list:\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        if len(data_list) == 0:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Recursively sums a list of integers.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as an argument and returns the number of positive numbers present in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function will count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        total = 0\n        for i in range(n):\n            total += bell_number(i) * bell_number(n-i-1)\n        return total"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[-1]\n\nprint(bell_number(5))  # Output: 5"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        total = 0\n        for i in range(n+1):\n            total += bell_number(i) * bell_number(n-i)\n        return total"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    This function finds the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n + 1):\n            bell.append(sum(bell))\n        return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers[-i:]))\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        b = [1, 1]\n        for i in range(2, n+1):\n            b.append(b[i-1] + b[i-2])\n        return b[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        bell_nums = [0] * (n+1)\n        bell_nums[0] = 1\n        bell_nums[1] = 1\n        for i in range(2, n+1):\n            bell_nums[i] = bell_nums[i-1] + bell_nums[i-2]\n        return bell_nums[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum(bell_number(i) * bell_number(n - i - 1) for i in range(n))"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_nums = [0, 1]\n    for i in range(2, n+1):\n        bell_nums.append(bell_nums[i-1] + bell_nums[i-2])\n    return bell_nums[n]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function returns True if the given array is monotonic, otherwise it returns False.\n    \"\"\"\n    n = len(A)\n    if n <= 2:\n        return True\n    if A[n-1] > A[n-2]:\n        for i in range(n-2, 0, -1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(n-2, 0, -1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and checks whether it is monotonic or not.\n    A monotonic array is an array where the elements are either all increasing or decreasing.\n    If A is monotonic, the function returns True, else it returns False.\n    '''\n    n = len(A)\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            is_increasing = False\n        elif A[i] < A[i-1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    If the array is monotonic, then it returns True, otherwise it returns False.\n    '''\n    if len(A) <= 1:\n        return True\n\n    # check if the array is strictly increasing\n    is_increasing = True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            is_increasing = False\n            break\n\n    # check if the array is strictly decreasing\n    is_decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            is_decreasing = False\n            break\n\n    # if the array is both strictly increasing and strictly decreasing, it is not monotonic\n    if is_increasing and is_decreasing:\n        return False\n\n    # otherwise, it is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    else:\n        flag = None\n        for i in range(n-1):\n            if A[i] < A[i+1]:\n                if flag == True or flag == None:\n                    pass\n                else:\n                    return False\n            elif A[i] > A[i+1]:\n                if flag == False or flag == None:\n                    pass\n                else:\n                    return False\n            else:\n                pass\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    if n == 2:\n        return A[0] <= A[1]\n    if A[0] <= A[1]:\n        for i in range(1, n-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, n-1):\n            if A[i] > A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    \n    direction = 0\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            direction = 1\n        elif A[i] < A[i-1]:\n            direction = -1\n        if direction == 0:\n            return True\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:  # base case\n        return True\n    \n    # check if the array is increasing or decreasing\n    if A[0] < A[-1]:\n        increasing = True\n    else:\n        increasing = False\n    \n    # check if the array is strictly increasing or decreasing\n    for i in range(len(A)-1):\n        if (increasing and A[i] > A[i+1]) or (not increasing and A[i] < A[i+1]):\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] <= A[1]\n    else:\n        if A[1] > A[0]:\n            for i in range(2, n):\n                if A[i] < A[i-1]:\n                    return False\n            return True\n        else:\n            for i in range(2, n):\n                if A[i] > A[i-1]:\n                    return False\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    if not A:\n        return True\n    increasing = True\n    decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    is_increasing = all(A[i] <= A[i+1] for i in range(n-1))\n    is_decreasing = all(A[i] >= A[i+1] for i in range(n-1))\n    \n    if is_increasing or is_decreasing:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    else:\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    :param l: The list to check.\n    :param s: The sublist to check for.\n    :return: True if the sublist is found, False otherwise.\n    \"\"\"\n    if s == []:\n        return True\n    if s == l:\n        return True\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n        \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \n    Args:\n    l (list): the list to check\n    s (list): the sublist to look for\n    \n    Returns:\n    bool: True if s is a sublist of l, False otherwise\n    \"\"\"\n    if s == []:  # If s is an empty list, return True\n        return True\n    if s == l:  # If s is the same as l, return True\n        return True\n    if s[0] not in l:  # If s[0] is not in l, s cannot be a sublist of l\n        return False\n    if s == l[:len(s)]:  # If s is a prefix of l, return True\n        return True\n    return is_sublist(l[1:], s)  # Recursively check the rest of l\n"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two arguments, a list 'l' and a sublist's', and returns True if's' is a sublist of 'l' and False otherwise.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return set(s).issubset(set(l))"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check if a list l contains the sublist s.\n\n    Args:\n    - l: the list to check\n    - s: the sublist to check for\n\n    Returns:\n    - True if l contains s, False otherwise\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have the same length, False otherwise.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_set = set(len(i) for i in Input)\n    return len(length_set) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set(len(t) for t in Input)\n    return len(lengths) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_length = True\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            equal_length = False\n            break\n    return equal_length"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as an input and returns True if all the tuples have equal length,\n    otherwise it returns False.\n    '''\n    lengths = [len(t) for t in Input]\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, else False.\n    '''\n    # get the length of the first tuple in the list\n    length = len(Input[0])\n\n    # loop through the list of tuples\n    for tuple in Input:\n        # check if the length of the current tuple is the same as the first tuple\n        if len(tuple)!= length:\n            return False\n\n    # if the loop completes without returning False, all the tuples have equal length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set(len(t) for t in Input)\n    return len(lengths) == 1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    \n    while gap!= 1 or swapped == 1:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        \n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n            \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            for i in range(n-gap):\n                if nums[i] > nums[i+gap]:\n                    nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                    sorted = False\n        else:\n            gap = 1\n            for i in range(n-gap):\n                if nums[i] > nums[i+gap]:\n                    nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                    sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    swapped = True\n    \n    while gap!= 1 or swapped:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Function to sort a list of elements using comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    import math\n    for i in range(2, int(math.sqrt(n))+1):\n        if n == i*i - (i-1)*(i-1):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    # Define the maximum value for a square number\n    max_square = int(n ** 0.5) ** 2\n    \n    # Check if the given number is a square number\n    if n == max_square:\n        return True\n    \n    # Check if the given number can be represented as the difference of two squares\n    for i in range(2, max_square):\n        if n == i ** 2 - (n - i ** 2):\n            return True\n    \n    # If the given number is not a square number and cannot be represented as the difference of two squares, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_square(n):\n    \"\"\"\n    Check whether a number is a perfect square.\n    \"\"\"\n    root = int(n**0.5)\n    return root**2 == n\n\ndef dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_square(n):\n        return False\n    for i in range(1, int(n**0.5)+1):\n        if is_square(n-i**2) and is_square(i**2):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_square(n):\n    \"\"\"\n    Check if a given number is a perfect square.\n    \"\"\"\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n\n\ndef dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    elif is_square(n):\n        return True\n    else:\n        for i in range(1, n//2 + 1):\n            if is_square(n-i*i) and is_square(i):\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    while (i * i) <= n:\n        j = i + 1\n        while (j * j) <= n:\n            if (i * i) + (j * j) == n:\n                return True\n            j += 1\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_square(n):\n    '''\n    Returns True if n is a perfect square, False otherwise.\n    '''\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n ** 2 == n\n\ndef dif_Square(n):\n    '''\n    Returns True if n can be represented as the difference of two squares, False otherwise.\n    '''\n    if is_square(n):\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_square(n - i * i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    \"\"\"\n    This function takes a number as input and checks whether it can be represented as the difference of two squares or not.\n    \"\"\"\n    # first, check whether the given number is a positive integer or not\n    if type(n)!= int or n <= 0:\n        return \"Invalid Input\"\n\n    # find the square root of the given number\n    root = int(n ** 0.5)\n\n    # check whether the square root is an integer or not\n    if root ** 2!= n:\n        return \"Not a difference of two squares\"\n\n    # if the given number is a perfect square, return \"No\"\n    return \"Yes\""
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_square(n):\n    return int(n ** 0.5) ** 2 == n\n\ndef is_diff_square(n):\n    for i in range(2, n):\n        if is_square(n - i) and is_square(i):\n            return True\n    return False\n\ndef dif_Square(n):\n    if is_square(n):\n        return \"The number is a perfect square\"\n    elif is_diff_square(n):\n        return \"The number can be represented as the difference of two squares\"\n    else:\n        return \"The number cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_square(n):\n    '''\n    Check if a number is a perfect square.\n    '''\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n\ndef dif_Square(n):\n    '''\n    Check whether a number can be represented as the difference of two squares.\n    '''\n    if n <= 0:\n        return False\n    \n    # Check if n is a perfect square\n    if is_square(n):\n        return False\n    \n    # Check if n can be written as the difference of two squares\n    for i in range(2, n):\n        if is_square(n - i) and is_square(i):\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # initialize the variables for the first and second squares\n    first_sq = 0\n    second_sq = 1\n    \n    # loop through the numbers until the first_sq is greater than or equal to n\n    while first_sq < n:\n        # calculate the difference between the squares\n        diff = first_sq - second_sq\n        \n        # check if the difference is equal to n\n        if diff == n:\n            return True\n        \n        # check if the difference is less than n\n        elif diff < n:\n            # update the first square and calculate the second square\n            first_sq += second_sq\n            second_sq += first_sq\n        \n        # if the difference is greater than n, check if n can be represented as the sum of two squares\n        else:\n            # calculate the difference between n and the second square\n            diff = n - second_sq\n            \n            # check if the difference is equal to the first square\n            if diff == first_sq:\n                return True\n            \n            # if the difference is less than the first square, update the second square\n            elif diff < first_sq:\n                second_sq += diff\n            \n            # if the difference is greater than the first square, update the first square and calculate the second square\n            else:\n                first_sq += diff\n                second_sq += first_sq\n    \n    # if the loop finishes without finding a difference, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if i == 0 or colors[i]!= colors[i-1]:\n            if patterns[i]!= colors[i]:\n                return False\n        else:\n            if patterns[i]!= patterns[i-1]:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns)):\n        if len(patterns[i])!= len(colors):\n            return False\n        for j in range(len(patterns[i])):\n            if patterns[i][j]!= colors[j]:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two input lists of strings and checks whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if i == 0:\n            if colors[i] == patterns[i][0]:\n                continue\n            else:\n                return False\n        else:\n            if colors[i] == patterns[i-1][-1]:\n                continue\n            else:\n                return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(patterns)):\n        if len(set(colors[i:i+len(patterns[i])]))!= len(patterns[i]):\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n    for i in range(n):\n        if patterns[i] == 'G':\n            if i == 0 or patterns[i-1] == 'R':\n                if i == n-1 or patterns[i+1] == 'B':\n                    continue\n        elif patterns[i] == 'R':\n            if i == 0 or patterns[i-1] == 'B':\n                if i == n-1 or patterns[i+1] == 'G':\n                    continue\n        elif patterns[i] == 'B':\n            if i == 0 or patterns[i-1] == 'G':\n                if i == n-1 or patterns[i+1] == 'R':\n                    continue\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i == 0 or i == len(colors) - 1:\n            # The first and last elements don't need to be checked\n            continue\n        if patterns[i - 1][0]!= colors[i]:\n            # The color of the previous element doesn't match the first color of the pattern\n            return False\n        if patterns[i][1]!= colors[i + 1]:\n            # The color of the next element doesn't match the second color of the pattern\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if i == 0:\n            continue\n        elif patterns[i] == 'G' and (colors[i]!= colors[i-1] or colors[i] == 'B'):\n            return False\n        elif patterns[i] == 'Y' and (colors[i]!= 'G' or colors[i-1]!= 'R'):\n            return False\n        elif patterns[i] == 'B' and (colors[i]!= 'Y' or colors[i-1]!= 'R'):\n            return False\n        elif patterns[i] == 'R' and (colors[i]!= 'B' or colors[i-1]!= 'G'):\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[0][0]:\n            return False\n        if colors[i] == 'G' and patterns[0][1] == 'Y':\n            return False\n        if colors[i] == 'Y' and patterns[0][1] == 'B':\n            return False\n        if colors[i] == 'B' and patterns[0][1] == 'R':\n            return False\n        if colors[i] == 'R' and patterns[0][1] == 'G':\n            return False\n        for j in range(1, len(patterns)):\n            if colors[i] == patterns[j][0]:\n                patterns[j] = patterns[j][1:]\n            else:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i]!= '*' and colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns a list of tuples which have all elements divisible by K.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i%K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple for tuple in test_list if all(num % K == 0 for num in tuple)]"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    This function checks if a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number n as input and returns True if n is divisible by 11,\n    else it returns False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        print(f\"{n} is divisible by 11\")\n    else:\n        print(f\"{n} is not divisible by 11\")"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11 otherwise False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    This function checks whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function checks whether a given number is divisible by 11 or not.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        print(f\"{s} has an odd length\")\n    else:\n        print(f\"{s} has an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    if len(s) % 2 == 1:\n        return \"Length of the word is odd.\"\n    else:\n        return \"Length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s): \n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} is an even length word.\")\n    else:\n        print(f\"{s} is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Check whether the length of the word is odd or not.\n\n    Args:\n    s (str): The string containing the word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    '''\n    return len(s) % 2 == 1"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        print(f\"{s} is an even length word\")\n    else:\n        print(f\"{s} is an odd length word\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function returns the nth tetrahedral number.\n    '''\n    return n * (n+1) * (n+2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return int((n*(n+1)*(n+2))/6)"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = (n * (n + 1) * (n + 2)) // 6\n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the variable\n    tetrahedral = 0\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the ith tetrahedral number to the variable\n        tetrahedral += (i**3)\n    \n    # Return the value of the nth tetrahedral number\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + 4*tetrahedral_number(n-2) + 4*tetrahedral_number(n-3) - 1"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * tetrahedral_number(n-1) + 4 * tetrahedral_number(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The nth tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    A tetrahedral number is the number of ordered triples of positive integers (a,b,c) such that a+b+c=n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(1, j+1):\n                if i+j+k == n:\n                    count += 1\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # initialize a variable to store the sum of the numbers\n    tetrahedral_sum = 0\n    \n    # iterate over the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the tetrahedral number of the current number to the sum\n        tetrahedral_sum += (i*(i+1)*(i+2)) // 6\n        \n    # return the final sum\n    return tetrahedral_sum"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nprint(\"The volume of a sphere with radius 5 is:\", volume_sphere(5))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes a radius of a sphere as input and returns its volume.\n    \"\"\"\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius value r and returns the volume of a sphere with that radius.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns its volume.\n    \"\"\"\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius of a sphere and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for i in strr:\n        sum_ascii += ord(i)\n    return chr((sum_ascii % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # initializing sum as 0\n    sum = 0\n    # iterating through the string\n    for i in strr:\n        # adding the ASCII value of each character to sum\n        sum += ord(i)\n    # returning the character made by sum modulo 26\n    return chr(sum % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char) - 96\n    \n    return chr((total % 26) + 96)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = sum(ord(i) - ord('a') + 1 for i in strr) % 26\n    return chr(ascii_sum + ord('a') - 1)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Initialize the result variable\n    result = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the result variable\n        result += ord(char)\n    # Return the character corresponding to the result modulo 26\n    return chr(result % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return chr(sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = 0\n    for i in strr:\n        s += ord(i)\n    s = s % 26\n    return chr(s+65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = sum([ord(i) - 96 for i in strr]) % 26\n    char = chr(ascii_sum + 97)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char) - 96\n        \n    return chr(sum_ascii % 26 + 96)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize the result variable to 0\n    result = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the result variable\n        result += ord(char)\n    # Return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(result % 26 + 65)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        for i in range(3, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return next_num"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    This function takes an integer n as input and returns the nth number in the Newman-Conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        sequence_list = [1, 1]\n        for i in range(3, n+1):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [0, 1]\n        for i in range(2, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        current = 0\n        for i in range(3, n+1):\n            current = prev + prev_prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"The first number in the newman conway sequence is 1.\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n]"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(radius)\nprint(\"The surface area of the sphere is:\", surface_area)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(radius)\nprint(\"The surface area of the sphere is\", surface_area, \"square units.\")"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the surface area of the sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*math.pi*r**2\n    return surfacearea"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((2*n*(2*n-1))+1)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = (2*n) - 1\n    return h*(h + 1)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i*(2*i-1) for i in range(1, n+1)]\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = n * 2\n    return int(k * (3*k - 1) / 2)\n\nn = int(input(\"Enter a value for n: \"))\nprint(\"The centered hexagonal number at position\", n, \"is\", centered_hexagonal_number(n))"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0\n    b = 1\n    count = 1\n    while count <= n:\n        c = 3 * a + 2 * b\n        a = b\n        b = c\n        count += 1\n    return c"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n and returns the nth centered hexagonal number.\n    '''\n    h = 2*n*(n+1)\n    return h"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal = 0\n    count = 1\n    while count <= n:\n        hexagonal += count\n        count += 1\n    return hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n * (2 * n - 1)\n    return hexagonal_number"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new dictionary to store the merged values\n    merged_dict = {}\n\n    # Combine all the dictionaries into one\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key in merged_dict:\n            merged_dict[key].extend(dict2[key])\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key in merged_dict:\n            merged_dict[key].extend(dict3[key])\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for i in [dict1, dict2, dict3]:\n        merged_dict.update(i)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for dict_ in [dict1, dict2, dict3]:\n        merged_dict.update(dict_)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function will take a list as input and return a dictionary containing the frequency of all the elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Return the frequency of all elements in the given list.\n    \"\"\"\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of all elements in the list.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as an input and returns a dictionary containing the frequency of all elements in the list.\n    '''\n    # Create an empty dictionary\n    freq_dict = {}\n\n    # Iterate over the list and count the frequency of each element\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    small = N-1\n    while small > 0:\n        if N%small == 0:\n            break\n        small -= 1\n    return small"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i\n    return -1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        # create a list of smaller numbers than n\n        smaller_nums = [i for i in range(1, n) if i < n]\n        # find the closest smaller number in the list\n        closest = min(smaller_nums, key=lambda x:abs(x-n))\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    small = None\n    for i in range(N-1, 0, -1):\n        if i < N:\n            small = i\n            break\n    return small"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(n):\n    \"\"\"\n    Returns the closest smaller number than n.\n    \"\"\"\n    # Find the closest smaller number than n\n    closest_smaller = None\n    for i in range(n-1, -1, -1):\n        if i < n:\n            closest_smaller = i\n            break\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = N\n    while smaller > 0:\n        if N % smaller == 0:\n            return smaller\n        smaller -= 1\n    return None"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Args:\n    - n: an integer\n\n    Returns:\n    - the closest smaller number\n    \"\"\"\n    closest = None\n    for i in range(n-1, -1, -1):\n        if i < n:\n            closest = i\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer as input and returns the closest smaller number than n.\n    '''\n    if n <= 1:\n        return 0\n    elif n % 10 == 0:\n        return n - 10\n    else:\n        return n - (n % 10)"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = N\n    while smaller_num > 0:\n        if N % smaller_num == 0:\n            break\n        smaller_num -= 1\n    return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = []\n    for i in range(1, n):\n        nums.append(i)\n    closest = max(nums, key=lambda x: abs(x-n))\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word in the list.\n    '''\n    longest_word_length = 0\n\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n\n    return longest_word_length"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes a string and a substring as input and returns True if the substring is present in the given string.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        str1 (list): List of strings to search in.\n        sub_str (str): Substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the strings in the list, False otherwise.\n    \"\"\"\n    return any(sub_str in s for s in str1)"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes in two arguments:\n    - str1: a list of string values\n    - sub_str: a string to search for in the list of string values\n    \n    The function checks if the sub_str is present as a substring in the list of string values.\n    If it is present, it returns True. If not, it returns False.\n    '''\n    \n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    Returns True if the given substring is found in any of the strings in the given list.\n    \"\"\"\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    for string in str1:\n        if sub_str in string:\n            result = True\n            break\n    return result"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Check whether the given number is undulating or not.\n    A number is called undulating if the absolute difference between the last digit and the second last digit is the same\n    as the absolute difference between the second last digit and the third last digit, and so on.\n    '''\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1):\n        if abs(digits[i]-digits[i+1])!= abs(digits[i+1]-digits[i+2]):\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # If the number is even, it cannot be undulating\n    if n % 2 == 0:\n        return False\n\n    # Check whether the sum of the first half of the digits is equal to the sum of the second half of the digits\n    # (The first half and second half are defined by their position in the number)\n    first_half = n // 10\n    second_half = n % 10\n    first_half_sum = sum(int(digit) for digit in str(first_half))\n    second_half_sum = sum(int(digit) for digit in str(second_half))\n    if first_half_sum!= second_half_sum:\n        return False\n\n    # Check whether the number is decreasing or increasing\n    prev_digit = first_half % 10\n    for digit in str(second_half):\n        if int(digit) < prev_digit:\n            return False\n        prev_digit = int(digit)\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is undulating, False otherwise.\n    An undulating number is a number whose digits are alternating from increasing to decreasing and then back to increasing.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Initialize variables to keep track of the increasing and decreasing substrings\n    increasing_substring = \"\"\n    decreasing_substring = \"\"\n    \n    # Loop through each character in the string\n    for i in range(len(num_str)):\n        \n        # If the current character is greater than the previous character, add it to the increasing substring\n        if i > 0 and int(num_str[i]) > int(num_str[i-1]):\n            increasing_substring += num_str[i]\n        # If the current character is less than the previous character, add it to the decreasing substring\n        elif i > 0 and int(num_str[i]) < int(num_str[i-1]):\n            decreasing_substring += num_str[i]\n            \n    # If there is no increasing substring or the length of the decreasing substring is greater than the increasing substring, return False\n    if len(increasing_substring) == 0 or len(decreasing_substring) > len(increasing_substring):\n        return False\n    \n    # If the length of the decreasing substring is the same as the increasing substring, return True\n    if len(decreasing_substring) == len(increasing_substring):\n        return True\n    \n    # If the length of the decreasing substring is one less than the length of the increasing substring, return True\n    if len(decreasing_substring) == len(increasing_substring) - 1:\n        return True\n    \n    # If the length of the decreasing substring is two less than the length of the increasing substring, return True\n    if len(decreasing_substring) == len(increasing_substring) - 2:\n        return True\n    \n    # If none of the above conditions are met, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if abs(int(s[i]) - int(s[i+1]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    A number is said to be undulating if the difference between the absolute values of its digits is constant.\n\n    Args:\n        n (int): A number to be checked.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n\n    digits = [int(d) for d in str(n)]\n\n    for i in range(1, len(digits)):\n        if abs(digits[i] - digits[i-1])!= abs(digits[i] - digits[i-2]):\n            return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer as input and checks if it is undulating or not.\n    A number is said to be undulating if it has a constant difference between consecutive terms.\n    \"\"\"\n    # Initialize a variable to keep track of the difference between consecutive terms\n    diff = n[1] - n[0]\n    # Loop through the list and check if all the differences are the same\n    for i in range(1, len(n)):\n        if n[i] - n[i-1]!= diff:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return False\n    \n    # Check if the number is divisible by 5\n    if n % 5 == 0:\n        return False\n    \n    # Check if the number is divisible by 7\n    if n % 7 == 0:\n        return False\n    \n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return False\n    \n    # Check if the number is divisible by 13\n    if n % 13 == 0:\n        return False\n    \n    # Check if the number is divisible by 17\n    if n % 17 == 0:\n        return False\n    \n    # Check if the number is divisible by 19\n    if n % 19 == 0:\n        return False\n    \n    # Check if the number is divisible by 23\n    if n % 23 == 0:\n        return False\n    \n    # Check if the number is divisible by 29\n    if n % 29 == 0:\n        return False\n    \n    # Check if the number is divisible by 31\n    if n % 31 == 0:\n        return False\n    \n    # Check if the number is divisible by 37\n    if n % 37 == 0:\n        return False\n    \n    # Check if the number is divisible by 41\n    if n % 41 == 0:\n        return False\n    \n    # Check if the number is divisible by 43\n    if n % 43 == 0:\n        return False\n    \n    # Check if the number is divisible by 47\n    if n % 47 == 0:\n        return False\n    \n    # Check if the number is divisible by 53\n    if n % 53 == 0:\n        return False\n    \n    # Check if the number is divisible by 59\n    if n % 59 == 0:\n        return False\n    \n    # Check if the number is divisible by 61\n    if n % 61 == 0:\n        return False\n    \n    # Check if the number is divisible by 67\n    if n % 67 == 0:\n        return False\n    \n    # Check if the number is divisible by 71\n    if n % 71 == 0:\n        return False\n    \n    # Check if the number is divisible by 73\n    if n % 73 == 0:\n        return False\n    \n    # Check if the number is divisible by 79\n    if n % 79 == 0:\n        return False\n    \n    # Check if the number is divisible by 83\n    if n % 83 == 0:\n        return False\n    \n    # Check if the number is divisible by 89\n    if n % 89 == 0:\n        return False\n    \n    # Check if the number is divisible by 97\n    if n % 97 == 0:\n        return False\n    \n    # If none of the conditions above are met, the number is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether a given number is undulating or not.\n    \n    Args:\n        n: An integer to check.\n    \n    Returns:\n        True if the number is undulating, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n    \n    # Initialize the count of distinct digits\n    count = 1\n    \n    # Initialize the previous digit to the first digit\n    prev_digit = n % 10\n    \n    # Iterate over the remaining digits\n    while n > 0:\n        # Extract the rightmost digit and check if it's different from the previous one\n        digit = n % 10\n        if digit!= prev_digit:\n            # If it's different, increment the count\n            count += 1\n        # Update the previous digit\n        prev_digit = digit\n        # Remove the rightmost digit from the number\n        n //= 10\n    \n    # Check if the count is odd\n    return count % 2 == 1"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether the given number is undulating or not.\n    '''\n    # Get the digits of the number\n    digits = list(map(int, str(n)))\n    \n    # Check if the digits are in an increasing or decreasing order\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i+1]:\n            return False\n        elif digits[i] < digits[i+1]:\n            continue\n        else:\n            return False\n        \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        num_str = str(n)\n        count = 1\n        prev_digit = num_str[0]\n        for i in range(1, len(num_str)):\n            if num_str[i] == prev_digit:\n                count += 1\n            else:\n                if count == 2:\n                    return False\n                prev_digit = num_str[i]\n                count = 1\n        if count == 2:\n            return False\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments - 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    This function takes two parameters, a and b, and returns the value of a to the power of b.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function to sort the list of tuples by the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, returns the index of the tuple with the smallest second value.\n    '''\n    # sort the list by the second element of each tuple (i.e. the minimum value)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # return the index of the first tuple with the smallest second value\n    return sorted_list.index(sorted(sorted_list, key=itemgetter(1))[0])"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = min(len(sublist) for sublist in lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function finds the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for lst in lst:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the input list.\n    '''\n    min_length = float('inf') # Initialize minimum length as infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist) # Update minimum length if the length of current sublist is smaller than current minimum length\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    # Loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            count += 1\n    # Return the number of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of the given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    This function takes a flattened list of lists as input and returns a dictionary where the keys are the unique elements\n    in the flattened list and the values are the frequency of each element in the flattened list.\n    '''\n    frequency = {}\n    for element in list1:\n        if element not in frequency:\n            frequency[element] = 1\n        else:\n            frequency[element] += 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Takes a list of lists and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in lst:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list\n\ndef frequency_lists(lst):\n    \"\"\"\n    Takes a list of lists and returns a dictionary with frequency of each element.\n    \"\"\"\n    flattened_list = flatten_list(lst)\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element not in freq_dict:\n                freq_dict[element] = 1\n            else:\n                freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if type(element) == list:\n            for sub_element in element:\n                if sub_element not in frequency:\n                    frequency[sub_element] = 1\n                else:\n                    frequency[sub_element] += 1\n        else:\n            if element not in frequency:\n                frequency[element] = 1\n            else:\n                frequency[element] += 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    This function finds the frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all the numbers in the list divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers)/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and returns the product of all the numbers in the list divided by the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:] # converting decimal to binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary representation as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:]\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n\nprint(decimal_to_binary(10))  # Output: '1010'\nprint(decimal_to_binary(25))  # Output: '11001'\nprint(decimal_to_binary(0))   # Output: '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary_str = ''\n        while n > 0:\n            binary_str = str(n % 2) + binary_str\n            n //= 2\n        return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    \n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input number is already a palindrome\n    if is_palindrome(num):\n        # If it is, add 1 and check the next number\n        return next_smallest_palindrome(num + 1)\n    else:\n        # If it's not a palindrome, check the next smallest palindrome\n        return is_palindrome(num + 1) and next_smallest_palindrome(num + 2) or num + 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return \"Input must be a positive integer.\"\n    \n    if num == 1:\n        return 2\n    \n    # Find the largest power of 10 that divides num\n    power = 0\n    while num // (10 ** power) >= 1:\n        power += 1\n    \n    # Convert the first half of the number to a palindrome\n    palindrome = int(str(num)[:power//2][::-1] + str(num)[:power//2])\n    \n    # If the number is already a palindrome, increment by 1 to get the next smallest palindrome\n    if str(palindrome) == str(palindrome)[::-1]:\n        palindrome += 1\n    \n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return \"Invalid input, please enter a non-negative integer.\"\n\n    # find the smallest odd integer greater than or equal to num\n    next_odd = num // 2 * 2 + 1\n    \n    # check if next_odd is a palindrome\n    while True:\n        palindrome = str(next_odd)\n        if palindrome == palindrome[::-1]:\n            break\n        next_odd += 2\n\n    return next_odd"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # If num is a palindrome itself, return next odd palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 2\n    \n    # Convert num to string and reverse it\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n\n    # Check if num is a palindrome\n    if num_str == num_str_rev:\n        # Find the length of the number\n        num_len = len(num_str)\n\n        # Iterate over odd digits from right to left\n        for i in range(num_len-1, 0, -2):\n            # Check if the current digit is less than the next digit\n            if int(num_str[i]) < int(num_str[i-1]):\n                # Replace the current digit with the next odd digit from right to left\n                num_str = num_str[:i] + str(int(num_str[i]) + 2) + num_str[i+1:]\n\n                # Reverse the modified string to get the final palindrome\n                palindrome = int(num_str[::-1])\n\n                # Return the palindrome if it's smaller than the original number\n                if palindrome < num:\n                    return palindrome\n\n    # If num is not a palindrome, return the next odd number\n    return num + 2"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num += 1\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the number to a string and reverse it\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n\n    # Check if the original number is a palindrome\n    if num_str == num_str_rev:\n        # If it is, add 1 to the number and return it as an integer\n        num += 1\n        return int(str(num) + str(num)[::-1])\n\n    # If the original number is not a palindrome, find the next smallest palindrome by adding 1 to the rightmost non-palindromic digit\n    else:\n        i = len(num_str) - 1\n        while i >= 0 and num_str[i] == num_str[len(num_str) - 1 - i]:\n            i -= 1\n        num_str = num_str[:i+1] + str(int(num_str[i+1:]) + 1) + num_str[i+1:][::-1]\n        return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(num)\n    # Check if the integer is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the integer is a palindrome, increment the number by 1 and check if the next number is a palindrome\n        next_num = num + 1\n        next_num_str = str(next_num)\n        while next_num_str!= next_num_str[::-1]:\n            next_num += 1\n            next_num_str = str(next_num)\n        return next_num\n    # If the integer is not a palindrome, find the next smallest palindrome by incrementing the number by 1\n    else:\n        next_num = num + 1\n        next_num_str = str(next_num)\n        # Check if the incremented number is a palindrome\n        while next_num_str!= next_num_str[::-1]:\n            next_num += 1\n            next_num_str = str(next_num)\n        return next_num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif num == 1:\n        return 2\n    else:\n        # Convert the number to a string to check for palindrome\n        num_str = str(num)\n        # Check if the number is already a palindrome\n        if num_str == num_str[::-1]:\n            # If it is, add 1 and then convert back to integer\n            return int(str(num + 1) + str(num + 1)[::-1])\n        else:\n            # If it's not a palindrome, find the next smallest palindrome by adding the next smallest odd number\n            next_odd = num + 1 if num % 2 == 0 else num + 2\n            # Convert the odd number to a string to check for palindrome\n            next_odd_str = str(next_odd)\n            # Check if the next odd number is a palindrome\n            if next_odd_str == next_odd_str[::-1]:\n                # If it is, return it as the next smallest palindrome\n                return next_odd\n            else:\n                # If it's not a palindrome, add 2 to the next odd number and repeat the process\n                next_odd += 2\n                while True:\n                    # Convert the new odd number to a string to check for palindrome\n                    new_odd_str = str(next_odd)\n                    # Check if the new odd number is a palindrome\n                    if new_odd_str == new_odd_str[::-1]:\n                        # If it is, return it as the next smallest palindrome\n                        return next_odd\n                    else:\n                        # If it's not a palindrome, add 2 to the new odd number and repeat the process\n                        next_odd += 2"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, increment the number by 1 and return the result\n        return num + 1\n\n    # Initialize the palindrome as the next smallest palindrome\n    palindrome = int(num_str) + 1\n\n    # Keep incrementing the palindrome until we find one that is a palindrome\n    while str(palindrome)!= str(palindrome)[::-1]:\n        palindrome += 1\n\n    # Return the next smallest palindrome\n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        num += 1\n    else:\n        num = int(str(num)[::-1]) + 1\n    return int(str(num)[::-1])"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Returns the kth element in the given array using 1-based indexing.\n    \"\"\"\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n    \n    # Sort the array in ascending order using the built-in sorted() function\n    sorted_arr = sorted(arr)\n    \n    # Find the index of the kth element in the sorted array (1-based indexing)\n    kth_index = k - 1\n    \n    if kth_index < 0 or kth_index >= len(sorted_arr):\n        return None\n    \n    # Return the kth element\n    return sorted_arr[kth_index]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    This function takes a snake case string and returns the same string in camel case format.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split(\"_\")\n    return words[0] + ''.join(x.title() for x in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string and converts it to camel case.\n\n    Args:\n    word: A string in snake case format.\n\n    Returns:\n    A string in camel case format.\n\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    This function converts a snake case string to camel case string.\n    '''\n    words = word.split(\"_\")\n    first_word = words[0]\n    rest_words = [word.capitalize() for word in words[1:]]\n    return first_word + \"\".join(rest_words)"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # check if n is even and m is odd\n    if n % 2 == 0 and m % 2!= 0:\n        # calculate the Eulerian number\n        a = n // 2 * m\n    elif n % 2!= 0 and m % 2 == 0:\n        # calculate the Eulerian number\n        a = m // 2 * n\n    else:\n        # calculate the Eulerian number\n        a = (n // 2 + 1) * m // 2\n    \n    # return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n and m are positive integers\n    if not isinstance(n, int) or not isinstance(m, int) or n <= 0 or m <= 0:\n        print(\"n and m should be positive integers.\")\n        return None\n    \n    # Find the Eulerian number a(n, m)\n    eulerian_num = (n ** 2 - m ** 2) / 2\n    \n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_num = 1\n    for i in range(n):\n        euler_num *= m\n    return euler_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Calculate the product of n and m\n    product = n * m\n    # Initialize a variable to store the Eulerian number\n    eulerian = 1\n    # Loop through each digit in the product\n    for digit in str(product):\n        # If the digit is not 0, add it to the Eulerian number\n        if digit!= \"0\":\n            eulerian += int(digit)\n    # Return the Eulerian number\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m < n:\n        n, m = m, n # swap n and m to ensure that m > n\n    \n    # Initialize the Eulerian number\n    a = 1\n    \n    # Compute the product of the first m natural numbers\n    for i in range(1, m+1):\n        a *= i\n        \n    # Multiply the result by n\n    a *= n\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n ** 2 + m ** 2 - n * m"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    return (n ** 2) // m\n"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Returns the Eulerian number a(n, m).\n    \"\"\"\n    if n < 2 or m < 2:\n        return 1\n    \n    # Initialize the table of odd numbers\n    odd_table = [1]\n    for i in range(1, m+1):\n        odd_table.append(odd_table[i-1] + 2)\n    \n    # Initialize the table of even numbers\n    even_table = [2]\n    for i in range(1, m+1):\n        even_table.append(even_table[i-1] + 2)\n    \n    # Initialize the result list\n    result = [0] * m\n    \n    # Loop through the columns\n    for j in range(m):\n        # Loop through the rows\n        for i in range(n):\n            # Check if the current element is odd or even\n            if i % 2 == 0:\n                result[j] += even_table[i+j]\n            else:\n                result[j] += odd_table[i+j]\n    \n    # Return the result\n    return result[-1]"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (m-1)*(m**n-1)//(m-n)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(n):\n        for j in range(m):\n            a *= (i + 1) * (j + 1)\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of True booleans in the list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_true_values(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of true values in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of true values in a list of boolean values.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in the list.\n\n    :param lst: A list of boolean values.\n    :return: An integer value indicating the number of True values in the list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_tup) + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes a list and a tuple as input and returns a tuple that contains the list appended to the tuple.\n    '''\n    return tuple(test_list + list(test_tup))"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuple.\n    \"\"\"\n    return tuple(test_list + list(test_tup))"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_tup) + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    return tuple(list(test_tup) + test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes a list and a tuple as input and returns the list appended to the tuple.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n\n    # Create a new empty list to store the merged sorted list\n    merged_list = []\n\n    # Create a min heap from the three lists\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    # Pop the smallest element from the heap and append it to the merged list\n    while len(heap) > 0:\n        smallest = heapq.heappop(heap)\n        merged_list.append(smallest)\n\n    # Merge the remaining elements from the three sorted lists into the merged list\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    # Append any remaining elements from the three sorted lists into the merged list\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n    for num in num1+num2+num3:\n        heapq.heappush(heap, num)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a heap and add the first element of each list to it\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    # Create a new list to store the merged list\n    merged_list = []\n\n    # Loop until the heap is empty\n    while heap:\n        # Pop the smallest element from the heap and append it to the new list\n        smallest = heapq.heappop(heap)\n        merged_list.append(smallest)\n\n        # If there are more elements in the list corresponding to the smallest element,\n        # add them to the heap\n        if smallest == num1[0]:\n            if len(num1) > 1:\n                heapq.heappush(heap, num1[1])\n            num1 = num1[1:]\n        elif smallest == num2[0]:\n            if len(num2) > 1:\n                heapq.heappush(heap, num2[1])\n            num2 = num2[1:]\n        elif smallest == num3[0]:\n            if len(num3) > 1:\n                heapq.heappush(heap, num3[1])\n            num3 = num3[1:]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while len(merged_list) < len(num1) + len(num2) + len(num3):\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif num2 and (not num1 or num2[0] < num1[0]):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n            \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 or num2 or num3:\n        if num1 and num2 and num3:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                merged.append(heapq.heappop(num1))\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                merged.append(heapq.heappop(num2))\n            else:\n                merged.append(heapq.heappop(num3))\n        elif num1 and num2:\n            if num1[0] < num2[0]:\n                merged.append(heapq.heappop(num1))\n            else:\n                merged.append(heapq.heappop(num2))\n        elif num1 and num3:\n            if num1[0] < num3[0]:\n                merged.append(heapq.heappop(num1))\n            else:\n                merged.append(heapq.heappop(num3))\n        elif num2 and num3:\n            if num2[0] < num3[0]:\n                merged.append(heapq.heappop(num2))\n            else:\n                merged.append(heapq.heappop(num3))\n        elif num1:\n            merged.append(heapq.heappop(num1))\n        elif num2:\n            merged.append(heapq.heappop(num2))\n        elif num3:\n            merged.append(heapq.heappop(num3))\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a heap to store the merged list\n    merged_list = []\n    heapq.heappush(merged_list, num1[0])\n    heapq.heappush(merged_list, num2[0])\n    heapq.heappush(merged_list, num3[0])\n    \n    # Merge the remaining elements of the three lists into the heap\n    for i in range(1, len(num1)):\n        heapq.heappush(merged_list, num1[i])\n    for i in range(1, len(num2)):\n        heapq.heappush(merged_list, num2[i])\n    for i in range(1, len(num3)):\n        heapq.heappush(merged_list, num3[i])\n    \n    # Extract the elements from the heap and store them in a list\n    result = []\n    while len(merged_list) > 0:\n        result.append(heapq.heappop(merged_list))\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # create a new empty list to store the merged and sorted elements\n    merged_list = []\n    \n    # create a min heap to store the first element of each list\n    heap1 = [num1[0], num2[0], num3[0]]\n    heapq.heapify(heap1)\n    \n    # loop through the lists and add the smallest element to the merged list\n    while heap1 or num1 or num2 or num3:\n        if heap1[0] < num1[0] and heap1[0] < num2[0] and heap1[0] < num3[0]:\n            merged_list.append(heap1[0])\n            heapq.heappop(heap1)\n        elif heap1[0] < num1[0]:\n            merged_list.append(heapq.heappop(heap1))\n            merged_list.append(num1[0])\n            num1.pop(0)\n        elif heap1[0] < num2[0]:\n            merged_list.append(heapq.heappop(heap1))\n            merged_list.append(num2[0])\n            num2.pop(0)\n        else:\n            merged_list.append(heapq.heappop(heap1))\n            merged_list.append(num3[0])\n            num3.pop(0)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    merged_list += num1\n    merged_list += num2\n    merged_list += num3\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a heap and add the first element of each list\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    # Create an empty list to store the merged sorted list\n    merged = []\n\n    # Loop through the lists until one of the lists is empty\n    while heap:\n        # Pop the minimum element from the heap and append it to the merged list\n        minimum = heapq.heappop(heap)\n        merged.append(minimum)\n\n        # If there are still elements in one of the lists, add the next element to the heap\n        if minimum == num1[0]:\n            heapq.heappush(heap, num1.pop(0))\n        elif minimum == num2[0]:\n            heapq.heappush(heap, num2.pop(0))\n        elif minimum == num3[0]:\n            heapq.heappush(heap, num3.pop(0))\n\n    # Return the merged sorted list\n    return merged"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to an integer\n    num = int(s, 2)\n    # Rotate the binary string n times\n    rotated = bin(num << n)[2:]\n    # Count the number of odd numbers in the rotated string\n    count = sum(int(digit) for digit in rotated)\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes two arguments: a binary string s and an integer n.\n    It returns the number of numbers with an odd value when rotating the binary string s the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n\n    # Rotate the binary string n times\n    rotated_s = s[-n:] + s[:-n]\n\n    # Count the number of odd values in the rotated binary string\n    odd_count = sum(rotated_s)\n\n    # Return the number of odd values in the rotated binary string\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string and a number n as inputs.\n    It rotates the binary string n times and then counts the number of odd values in the rotated string.\n    \"\"\"\n    # convert the binary string to a list of integers\n    s_list = [int(bit) for bit in s]\n\n    # rotate the list n times\n    s_list = s_list[-n:] + s_list[:-n]\n\n    # count the number of odd values in the rotated string\n    odd_count = 0\n    for bit in s_list:\n        if bit % 2 == 1:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of integers\n    s_list = [int(i) for i in s]\n    \n    # Rotate the list n times\n    s_list = s_list[-n:] + s_list[:-n]\n    \n    # Count the number of odd values in the rotated list\n    count = 0\n    for i in s_list:\n        if i % 2!= 0:\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        count += s.count('1')\n        s = s[-1] + s[:-1]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes two arguments:\n    - s (string): A binary string\n    - n (int): The number of times the binary string should be rotated\n\n    It returns the number of numbers with an odd value when rotating the binary string n times.\n    \"\"\"\n    s = s[n:] + s[:n]  # Rotate the binary string n times\n    count = 0\n    for i in s:\n        if int(i)%2!= 0:  # Check if the number is odd\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s (str): Binary string to be rotated.\n    n (int): Number of rotations.\n\n    Returns:\n    int: Number of numbers with an odd value when rotating the binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of integers.\n    s = [int(i) for i in s]\n\n    # Rotate the list n times.\n    for i in range(n):\n        s = s[1:] + s[:1]\n\n    # Count the number of odd numbers in the rotated list.\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n\n    # Return the count of odd numbers.\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Convert string to binary and remove '0b' prefix\n    s = bin(int(s, 2))[2:]\n    \n    # Pad binary string with zeros to make it equal to the length of n\n    s = s.zfill(n)\n    \n    # Rotate the string n times\n    s = s[n:] + s[:n]\n    \n    # Count the number of odd digits\n    count = 0\n    for digit in s:\n        if int(digit) % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Count the number of odd values in the rotated string.\n    count = 0\n    for i in range(n):\n        # Rotate the string and convert it to an integer.\n        rotated = int(s[i:] + s[:i], 2)\n        # Check if the rotated integer is odd.\n        if rotated % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the string to a list of integers\n    s = list(map(int, s))\n    \n    # Initialize the count variable to zero\n    count = 0\n    \n    # Iterate over each rotation of the binary string n times\n    for i in range(n):\n        # Convert the rotated binary string to a list of integers\n        rotated_s = list(map(int, bin(int(''.join(map(str, s[i:] + s[:i])), 2))[2:].zfill(len(s))))\n        \n        # Iterate over each digit in the rotated binary string\n        for j in rotated_s:\n            # If the digit is odd, increment the count variable\n            if j % 2!= 0:\n                count += 1\n    \n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        if len(common) == 0:\n            common = i\n        else:\n            for j in i:\n                if j in common:\n                    common.remove(j)\n                else:\n                    common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a nested list as input and returns a list of common elements in the nested list.\n    \"\"\"\n    common_elements = []\n    for outer_list in nestedlist:\n        for inner_list in nestedlist:\n            if outer_list == inner_list and outer_list not in common_elements:\n                common_elements.append(outer_list)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements\n    in all the nested lists. If there are no common elements, it returns an empty list.\n    '''\n\n    # Initialize an empty list to store common elements\n    common = []\n\n    # Loop through each list in the nested list and find common elements\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            # Find the common elements between two lists\n            temp = list(set(nestedlist[i]) & set(nestedlist[j]))\n            # Add the common elements to the common list\n            common.extend(temp)\n\n    # Remove duplicates from the common list and return it\n    return list(set(common))"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.add(nestedlist[i][j])\n            else:\n                return common\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for sublist in nestedlist:\n        if sublist not in common:\n            common.append(sublist)\n    for i in range(len(common)):\n        for j in range(i + 1, len(common)):\n            if len(set(common[i]) & set(common[j])) == 0:\n                common.pop(j)\n                j -= 1\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_elements = set()\n\n    # Loop through each list in the nested list\n    for lst in nestedlist:\n        # Convert the list to a set to remove duplicates and check if there are any common elements\n        set_lst = set(lst)\n        if common_elements.intersection(set_lst):\n            # If there are common elements, add them to the common_elements set\n            common_elements.update(set_lst.intersection(common_elements))\n        else:\n            # If there are no common elements, add the current set to the common_elements set\n            common_elements.update(set_lst)\n\n    # Convert the set back to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for inner_list in nestedlist:\n        common_elements.update(set(inner_list))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist:\n        common_elements &= set(sublist)\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        text (str): The string to check.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    Check if all dictionaries in a list are empty.\n\n    Args:\n        list1 (list): A list of dictionaries.\n\n    Returns:\n        bool: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dict_list(list1):\n    \"\"\"\n    This function takes a list of dictionaries as input and returns True if all dictionaries in the list are empty, else False.\n    \"\"\"\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n\n    :param list1: A list of dictionaries.\n    :return: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Converts a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as input and converts all possible convertible elements in the list to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as input and converts all possible convertible elements to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.','',1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.', '', 1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            try:\n                new_sublist.append(float(item))\n            except ValueError:\n                new_sublist.append(item)\n        result.append(new_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    new_list = []\n    for sub_list in test_list:\n        new_sub_list = []\n        for item in sub_list:\n            try:\n                new_item = float(item)\n                new_sub_list.append(new_item)\n            except ValueError:\n                pass\n        new_list.append(new_sub_list)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    n = len(arr)\n    if n < 2:\n        return None\n    \n    # Initialize variables for first and second element\n    first = arr[0]\n    second = arr[1]\n    \n    # If there are only two elements, return the first element if it is different from the second element\n    if n == 2:\n        return first if first!= second else None\n    \n    # If the first two elements are the same, return the second element\n    if first == second:\n        return second\n    \n    # If the first element is different from the second element, return None\n    if first!= second:\n        return None\n    \n    # If there are only three elements, return the first element if it is different from the second and third elements\n    if n == 3:\n        third = arr[2]\n        return first if first!= third else None\n    \n    # If the first three elements are the same, return the first element\n    if first == second == third:\n        return first\n    \n    # If the first element is different from the second element, return None\n    if first!= second:\n        return None\n    \n    # Initialize variables for the current element and its index\n    current = arr[2]\n    i = 2\n    \n    # Traverse the array and find the element that appears only once\n    while i < n:\n        if arr[i] == current:\n            i += 1\n        else:\n            if current!= first:\n                return current\n            else:\n                current = arr[i]\n                i = i + 1\n    \n    # If the element that appears only once is found, return it\n    if current!= first:\n        return current\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        elif arr[0] < arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        left_result = search(left_half)\n        right_result = search(right_half)\n        if left_result is not None and right_result is not None:\n            return None\n        elif left_result is not None:\n            return left_result\n        elif right_result is not None:\n            return right_result\n        else:\n            return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    # Initialize the variables\n    n = len(arr)\n    count = 0\n    prev_num = arr[0]\n    \n    # Traverse through the array\n    for i in range(1, n):\n        # If the current number is same as the previous number, increment the count\n        if arr[i] == prev_num:\n            count += 1\n        # If the current number is different from the previous number, decrement the count\n        else:\n            count -= 1\n        # If the count is 0 and the current number is not the last number in the array, update the previous number\n        if count == 0 and i!= n-1:\n            prev_num = arr[i]\n            \n    # Traverse through the array again and find the element that appears only once\n    for i in range(n):\n        if arr[i]!= prev_num:\n            return prev_num\n        \n"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    \n    if n == 1:\n        return arr[0]\n    \n    if arr[0] == arr[1]:\n        return search(arr[1:])\n    \n    if arr[0]!= arr[1]:\n        return search(arr[1:])"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    n = len(arr)\n    \n    # find the index of the element that appears only once\n    for i in range(n):\n        if arr[abs(arr[i])-1] < 0:\n            return abs(arr[i])\n        \n        arr[abs(arr[i])-1] *= -1\n        \n    return -1  # no element appears only once"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables\n    count = 0\n    prev_num = None\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number has not been seen before, increment the count\n        if num!= prev_num:\n            count += 1\n            prev_num = num\n    \n    # Iterate through the array again to find the element that appears only once\n    for num in arr:\n        # If the count is 1 for the current number, return it\n        if arr.count(num) == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # initialize variables\n    count = 0\n    num = 0\n    \n    # iterate through the array\n    for i in arr:\n        # if the element appears only once, store it in num\n        if arr.count(i) == 1:\n            num = i\n            break\n            \n    return num"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    else:\n        i = 0\n        j = n - 1\n        while i < j:\n            mid = (i + j) // 2\n            if arr[mid] == arr[mid - 1] and arr[mid] == arr[mid + 1]:\n                return arr[mid]\n            elif arr[mid] == arr[mid - 1]:\n                j = mid - 1\n            elif arr[mid] == arr[mid + 1]:\n                i = mid + 1\n            else:\n                return arr[mid]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None\n    if n == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return None\n    for i in range(n):\n        if arr[i]!= arr[i+1] and arr[i]!= arr[i-1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    \n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) + abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        if num == 1:\n            continue\n        div1 = sum_of_divisors(num)\n        div2 = sum_of_divisors(div1)\n        if div1 > limit:\n            break\n        if div2 == num and div1!= div2:\n            sum += num + div1\n    return sum\n\ndef sum_of_divisors(num):\n    '''\n    Returns the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(num/2)+1):\n        if num % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable_numbers = 0\n    for num in range(1, limit+1):\n        # find the sum of divisors of num\n        div_sum = sum([i for i in range(1, num//2+1) if num % i == 0])\n        # check if div_sum is equal to num\n        if div_sum == num:\n            # if div_sum is equal to num, check if num is divisible by its proper divisor\n            if num == sum([i for i in range(1, num) if num % i == 0]):\n                sum_amicable_numbers += num\n    return sum_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        div1 = sum_divisors(i)\n        div2 = sum_divisors(div1)\n        if div2 == i and div1!= i:\n            sum += div1 + i\n    return sum\n\ndef sum_divisors(n):\n    '''\n    Returns the sum of the divisors of n, including 1 and n.\n    '''\n    sum = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            sum += i\n            if i!= n // i:\n                sum += n // i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_amicable_numbers(limit):\n    \"\"\"\n    This function calculates the sum of all amicable numbers up to a given limit.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit):\n        if num!= 1:\n            # Check if num is divisible by the sum of proper divisors\n            div_sum = sum([i for i in range(2, num) if num % i == 0])\n            if div_sum!= num and num == sum([i for i in range(2, div_sum) if div_sum % i == 0]):\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    # Create a list of all numbers from 1 to the specified limit\n    numbers = list(range(1, limit+1))\n    \n    # Create a dictionary to store the sum of proper divisors for each number\n    div_sum = {num: sum(filter(lambda x: num % x == 0, numbers)) for num in numbers}\n    \n    # Iterate over the list of numbers and add up all amicable numbers\n    for num in numbers:\n        # Check if the number is amicable\n        if div_sum[num]!= num and div_sum[div_sum[num]] == num:\n            amicable_sum += num\n            \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for num in range(1, limit+1):\n        # Sum of divisors of the number\n        sum_div = sum([i for i in range(1, num//2+1) if num % i == 0])\n        # Check if the sum of divisors of the number is equal to the number itself\n        if sum_div == num and num!= sum(divisor(num)):\n            # If it is, add it to the total sum\n            total += num\n    return total\n\ndef divisor(num):\n    '''\n    A function to calculate the divisors of a number.\n    '''\n    divs = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divs.append(i)\n    return divs\n\nprint(amicable_numbers_sum(10000))"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        # Get the sum of divisors for the current number\n        div_sum = sum(x for x in range(1, i) if i % x == 0)\n        \n        # Check if the sum of divisors is equal to the current number itself\n        if div_sum == i and i!= 1:\n            # Check if the sum of divisors of the divisor sum is equal to the divisor sum itself\n            div_sum_of_div_sum = sum(x for x in range(1, div_sum) if div_sum % x == 0)\n            if div_sum_of_div_sum == div_sum:\n                # Add the current number and the divisor sum to the amicable sum\n                amicable_sum += i + div_sum\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisors(n):\n    divs = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    divs.remove(n)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if sum(divisors(num)) == num and num!= sum(divisors(sum(divisors(num)))):\n            amicable_sum += num\n    return amicable_sum\n\nprint(amicable_numbers_sum(10000))"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        j = sum_of_divisors(i)\n        if j > i and i == sum_of_divisors(j):\n            sum += i + j\n    return sum\n\ndef sum_of_divisors(n):\n    '''\n    Calculate the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return sum(divisors)\n\nlimit = int(input(\"Enter the limit: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", amicable_numbers_sum(limit))"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisors(n):\n    '''Return a list of all divisors of n, including 1 and n.'''\n    divs = [1, n]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    divs.sort()\n    return divs\n\ndef amicable_numbers_sum(limit):\n    '''Return the sum of all amicable numbers from 1 to the given limit.'''\n    total = 0\n    for n in range(2, limit+1):\n        div_sum = sum(divisors(n)) - n\n        if div_sum < limit and divisors(div_sum)[-1] == n:\n            total += div_sum\n    return total"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Returns the angle of a complex number in degrees.\n    '''\n    return cmath.phase(a)*180/cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Returns the angle of a complex number in degrees.\n    '''\n    angle = cmath.phase(a)\n    return round(angle * 180 / cmath.pi)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    This function takes a complex number as input and returns its angle in degrees.\n    '''\n    return cmath.phase(a)*180/cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle between them.\n    \"\"\"\n    num = a*b.conjugate()\n    den = abs(a) * abs(b)\n    angle = cmath.phase(num / den)\n    return round(angle,2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    This function takes in a complex number as an argument and returns its angle in degrees.\n    '''\n    return cmath.polar(a)[1] * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    # Initialize variables for tracking max length and current length\n    max_length = 0\n    current_length = 0\n    \n    # Iterate through the binary string\n    for i in range(len(string)):\n        # If the current character is 0, increment current_length\n        if string[i] == '0':\n            current_length += 1\n        # If the current character is 1, update max_length if necessary\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    \n    # Update max_length with the length of the final substring\n    max_length = max(max_length, current_length)\n    \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # count number of 0s and 1s in the current sub-string\n            count_0s = string[i:j].count('0')\n            count_1s = string[i:j].count('1')\n            # calculate the difference between 0s and 1s in the current sub-string\n            diff = abs(count_0s - count_1s)\n            # update max_length if the difference is greater\n            if diff > max_length:\n                max_length = diff\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    last_bit = string[0]\n    for bit in string:\n        if bit == last_bit:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n        last_bit = bit\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            diff = abs(sub_string.count('0') - sub_string.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        ones = 0\n        zeros = 0\n        for j in range(i, n):\n            if string[j] == '1':\n                ones += 1\n            else:\n                zeros += 1\n            diff = abs(ones - zeros)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    max_diff = 0\n    \n    # Iterate through all possible substrings\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            # Find the number of 0s and 1s in the substring\n            zeros = string[i:j].count('0')\n            ones = string[i:j].count('1')\n            \n            # Find the absolute difference between the number of 0s and 1s\n            diff = abs(zeros - ones)\n            \n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string) \n    max_len = 0\n    for i in range(n): \n        # Finding the length of all sub-strings ending at index i\n        for j in range(i+1, n+1): \n            sub_str = string[i:j] \n            # Counting the number of 0s and 1s in the sub-string\n            zero_count = sub_str.count('0') \n            one_count = sub_str.count('1') \n            # Finding the maximum difference between number of 0s and number of 1s in any sub-string\n            diff = abs(zero_count-one_count) \n            if diff > max_len: \n                max_len = diff \n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    max_length = 0\n    curr_length = 0\n    prev_digit = None\n    \n    for digit in string:\n        if digit == prev_digit:\n            continue\n        \n        curr_length += 1\n        \n        if digit == '0':\n            max_length = max(max_length, curr_length)\n        else:\n            max_length = max(max_length, curr_length - 1)\n        \n        prev_digit = digit\n    \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string): \n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Create a set of the factors of both numbers\n    factors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            factors.add(i)\n    \n    # Calculate the sum of the factors\n    return sum(factors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of common divisors of the two numbers.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Initialize the sum of common divisors\n    sum_of_divisors = 0\n\n    # Check for common divisors and add them to the sum\n    for i in range(1, smaller+1):\n        if a % i == 0 and b % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Finding the minimum number from the two input numbers\n    min_num = min(a, b)\n    \n    # Finding the maximum number from the two input numbers\n    max_num = max(a, b)\n    \n    # Initializing the sum of common divisors to zero\n    sum_of_divisors = 0\n    \n    # Looping through the numbers from min_num to max_num\n    for i in range(min_num, max_num+1):\n        # If both numbers have the same divisor, add it to the sum of divisors\n        if a%i == 0 and b%i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(x, y):\n        \"\"\"\n        Compute the greatest common divisor of two numbers using Euclid's algorithm.\n        \"\"\"\n        while y:\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        \"\"\"\n        Compute the least common multiple of two numbers using the formula:\n        lcm(x, y) = (x * y) // gcd(x, y)\n        \"\"\"\n        return (x * y) // gcd(x, y)\n\n    def count_divisors(n):\n        \"\"\"\n        Count the number of divisors of a given number n.\n        \"\"\"\n        count = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                count += 2\n        if int(n ** 0.5) ** 2 == n:\n            count -= 1\n        return count\n\n    def sum_divisors(n):\n        \"\"\"\n        Sum the divisors of a given number n.\n        \"\"\"\n        sum_div = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                sum_div += i + n // i\n        if int(n ** 0.5) ** 2 == n:\n            sum_div -= int(n ** 0.5)\n        return sum_div\n\n    def sum_common_divisors(a, b):\n        \"\"\"\n        Find the sum of common divisors of two given numbers using the formula:\n        sum_common_divisors(a, b) = sum_div(lcm(a, b)) - sum_div(a) - sum_div(b) + sum_div(gcd(a, b))\n        \"\"\"\n        lcm_ab = lcm(a, b)\n        gcd_ab = gcd(a, b)\n        sum_div_ab = sum_divisors(lcm_ab)\n        sum_div_a = sum_divisors(a)\n        sum_div_b = sum_divisors(b)\n        sum_div_gcd_ab = sum_divisors(gcd_ab)\n        return sum_div_ab - sum_div_a - sum_div_b + sum_div_gcd_ab\n\n    return sum_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of common divisors of the two numbers.\n    \"\"\"\n    divisor_list = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_list.append(i)\n    return sum(divisor_list)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #Find the maximum value of a and b\n    max_value = max(a,b)\n    #Create a list of all numbers from 1 to max_value\n    numbers = list(range(1,max_value+1))\n    #Create a set of common divisors of a and b\n    common_divisors = set(numbers) & set(set(a).intersection(set(b)))\n    #Calculate the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def gcd(a, b):\n    \"\"\"\n    This function finds the greatest common divisor of two numbers using the Euclidean algorithm.\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    \"\"\"\n    This function finds the least common multiple of two numbers using the formula: lcm(a,b) = (a*b) / gcd(a,b).\n    \"\"\"\n    return (a * b) / gcd(a, b)\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers using the formula: sum_of_common_divisors(a,b) = lcm(a,b) - 1.\n    \"\"\"\n    l = lcm(a, b)\n    return l - 1\n\ndef sum(a, b):\n    \"\"\"\n    This function calls the sum_of_common_divisors function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    return sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and finds the sum of common divisors of those numbers.\n    \"\"\"\n    def find_divisors(n):\n        \"\"\"\n        This function finds all the divisors of a given number n.\n        \"\"\"\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    div1 = find_divisors(a)\n    div2 = find_divisors(b)\n\n    common_divisors = set(div1) & set(div2)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integer arguments and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments, n and str.\n    n: is an integer that represents the maximum length of a word.\n    str: is a list of words.\n    \n    The function returns a list of words that are longer than n characters from the given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Finds words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n: An integer representing the maximum length of words to be returned.\n        words: A list of strings representing the words to be checked.\n\n    Returns:\n        A list of strings representing the words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n\n    # Create an empty list to store the long words\n    long_words = []\n\n    # Iterate over the words and check if they are longer than n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes in a matrix as input and returns True if it is a magic square, and False otherwise.\n    \"\"\"\n    # Calculate the sum of the first row\n    first_row_sum = sum(my_matrix[0])\n    \n    # Calculate the sum of the first column\n    first_col_sum = sum(my_matrix[i][0] for i in range(len(my_matrix)))\n    \n    # Calculate the sum of the secondary diagonal\n    sec_diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    # Calculate the sum of the primary diagonal\n    pri_diag_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if the sum of each row, column, diagonal, and antidiagonal is equal to the sum of the first row,\n    # and if the sum of the diagonal and antidiagonal is equal to twice the sum of the first row.\n    return (sum(sum(my_matrix[i]) for i in range(len(my_matrix))) == first_row_sum\n            and sum(sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix))) == first_col_sum\n            and sum(sum(my_matrix[i][i] for i in range(len(my_matrix))) for i in range(len(my_matrix))) == sec_diag_sum\n            and sum(sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))) for i in range(len(my_matrix))) == pri_diag_sum)"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function checks whether a matrix is a magic square or not.\n    A magic square is a square matrix of size n x n, where the sum of each row, column and diagonal is the same.\n    For example, the following matrix is a magic square:\n    8 1 6\n    3 5 7\n    4 9 2\n    \"\"\"\n    n = len(my_matrix)\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if row_sums == col_sums == [n*(n*n+1)//2]*n and diag_sum1 == diag_sum2 == n*(n*n+1)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    \n    # Check for magic square property\n    if n % 2 == 0:\n        magic_sum = n*n\n    else:\n        magic_sum = n*(n+1)\n    \n    # Calculate row and column sums\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum([my_matrix[j][i] for j in range(n)]) for i in range(n)]\n    \n    # Check if row and column sums are equal to magic sum\n    if row_sums == col_sums == [magic_sum]*n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the sum of each row and column\n    row_sum = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    col_sum = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n\n    # calculate the sum of the diagonal and anti-diagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    anti_diagonal_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    # check if the sums match the magic number\n    magic_number = (len(my_matrix) * (len(my_matrix) ** 2 + 1)) // 2\n    if row_sum == col_sum and diagonal_sum == magic_number and anti_diagonal_sum == magic_number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix[0]))]\n\n    # Check if the sum of each row and column is the same as the sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    return row_sums == col_sums and diag_sum1 == diag_sum2"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        print(\"Matrix is not square\")\n        return False\n\n    # calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    col_sums = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n\n    # check if the sum of each row and column is the same\n    if row_sums!= col_sums:\n        print(\"Matrix is not a magic square\")\n        return False\n\n    # calculate the sum of the diagonal and anti-diagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    anti_diagonal_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n\n    # check if the sum of the diagonal and anti-diagonal is the same\n    if diagonal_sum!= anti_diagonal_sum:\n        print(\"Matrix is not a magic square\")\n        return False\n\n    # matrix is a magic square\n    print(\"Matrix is a magic square\")\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Define the size of the matrix\n    size = len(my_matrix)\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(size)]\n    col_sums = [sum(my_matrix[j][i] for j in range(size)) for i in range(size)]\n    \n    # Check if all rows and columns have the same sum\n    if row_sums!= col_sums:\n        return False\n    \n    # Calculate the sum of the diags\n    diag_sum1 = sum(my_matrix[i][i] for i in range(size))\n    diag_sum2 = sum(my_matrix[i][size - i - 1] for i in range(size))\n    \n    # Check if the diags have the same sum\n    if diag_sum1!= diag_sum2:\n        return False\n    \n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    # check whether the sum of each row and column is the same as the sum of the diagonal\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n    antidiag_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if row_sums == col_sums == [n*(n*n+1)//2]*n and diag_sum == antidiag_sum == n*(n*n+1)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Check whether a given matrix is a magic square or not.\n    '''\n    size = len(my_matrix)\n    magic_sum = size * (size * size + 1) // 2\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(size)) for j in range(size)]\n    # Check if the sums of each row and column are equal to the magic sum\n    if row_sums == col_sums and sum(row_sums) == magic_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    \n    # Calculate the sum of the first column\n    col_sum = sum(my_matrix[i][0] for i in range(len(my_matrix)))\n    \n    # Calculate the sum of the diagonal\n    diag_sum_1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum_2 = sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix)))\n    \n    # Calculate the sum of the anti-diagonal\n    anti_diag_sum_1 = sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix)))\n    anti_diag_sum_2 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    # Check if all the sums are equal\n    return (row_sum == col_sum == diag_sum_1 == diag_sum_2 == anti_diag_sum_1 == anti_diag_sum_2)"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [num for num, count in freq.items() if count == max_freq]\n    return max_items"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in freq.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [key for key, value in freq.items() if value == max_freq]\n    return max_items[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)  # initialize a dictionary with default value 0\n    for num in nums:\n        freq[num] += 1  # count the occurrences of each item in the list\n        \n    max_freq = max(freq.values())  # find the maximum frequency\n    \n    for num, count in freq.items():\n        if count == max_freq:  # find the item with maximum frequency\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n\n    for num in nums:\n        count[num] += 1\n\n    max_count = max(count.values())\n\n    for num, freq in count.items():\n        if freq == max_count:\n            return num"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    vowel_indices = [i for i, char in enumerate(str1_list) if char in vowels]\n    for i in vowel_indices:\n        str1_list[i] = str1_list[i].lower()\n    vowel_indices.reverse()\n    for i in vowel_indices:\n        str1_list[i] = str1_list[i].upper()\n    return \"\".join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # Remove all the non-vowel characters from the string\n    str1 = ''.join([char for char in str1 if char.lower() in vowels])\n    # Reverse the vowels of the string\n    vowel_indices = [i for i in range(len(str1)) if str1[i].lower() in vowels]\n    vowel_indices.reverse()\n    str1 = ''.join([str1[i] for i in vowel_indices])\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    start = 0\n    end = len(str1) - 1\n    while start < end:\n        if str1[start] not in vowels:\n            start += 1\n        elif str1[end] not in vowels:\n            end -= 1\n        else:\n            str1[start], str1[end] = str1[end], str1[start]\n            start += 1\n            end -= 1\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_indexes = [i for i in range(len(str1)) if str1[i] in vowels]\n    for i in range(len(vowels_indexes)//2):\n        j = len(vowels_indexes) - i - 1\n        str1 = str1[:vowels_indexes[i]] + str1[vowels_indexes[j]:vowels_indexes[j]+1].lower() + str1[vowels_indexes[i]+1:vowels_indexes[j]] + str1[vowels_indexes[i]].lower() + str1[vowels_indexes[j]+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as input and returns the string with vowels reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    str_list = list(str1)\n    for i in vowel_indices:\n        str_list[i] = str_list[i][::-1]\n    return \"\".join(str_list)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            if str1[i] == 'y':\n                result += 'y'\n            else:\n                result = str1[i] + result + str1[i]\n        else:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = [i for i in s if i in vowels]\n    vowels_list.reverse()\n    vowels_set = set(vowels_list)\n    new_s = \"\"\n    for i in s:\n        if i in vowels_set:\n            new_s += vowels_list.pop()\n        else:\n            new_s += i\n    return new_s"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_in_str = [char for char in str1 if char in vowels]\n    vowels_in_str.reverse()\n    non_vowels = [char for char in str1 if char not in vowels]\n    reversed_str = ''.join(non_vowels) + ''.join(vowels_in_str)\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')  # create a set of vowels\n    str_list = list(str1)  # convert the string to a list of characters\n    i, j = 0, len(str1) - 1  # set two pointers, one at the beginning and one at the end\n    while i < j:\n        if str_list[i] not in vowels:  # if the current character is not a vowel, move the pointer to the left\n            i += 1\n        elif str_list[j] not in vowels:  # if the current character is not a vowel, move the pointer to the right\n            j -= 1\n        else:  # if both pointers point to vowels, swap them and move both pointers towards the middle\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    return ''.join(str_list)  # join the characters back to a string and return it"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = [str1[i] for i in reversed(vowel_indices)]\n    non_vowel_indices = [i for i, char in enumerate(str1) if char not in vowels]\n    non_vowel_chars = [str1[i] for i in non_vowel_indices]\n    reversed_str = ''.join(reversed_vowels + non_vowel_chars)\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''.join(tup1)\n    return tup_str"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string.\n    \"\"\"\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as an argument and returns a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    result = \"\"\n    for i in tup1:\n        result += str(i) + \",\"\n    return result[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for item in tup1:\n        tup_str += str(item) + ', '\n    return tup_str[:-2]"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(tup1)\n    return string"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function will return the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_negatives += num\n    return sum_negatives"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num\n\nprint(hexagonal_num(1))   # Output: 1\nprint(hexagonal_num(6))   # Output: 21\nprint(hexagonal_num(11))  # Output: 66"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    This function returns the nth hexagonal number.\n    '''\n    return n*(2*n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    hex_num = 1\n    while count < n:\n        hex_num += 6 * count\n        count += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = (2*n)**2\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n*(2*n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        hex_num = i * (2 * i - 1)\n        if count == n - 1:\n            return hex_num\n        i += 1\n        count += 1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n and returns the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    ratio = count_zeroes / count_non_zeroes\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_nonzero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    if count_nonzero == 0:\n        return \"All numbers are zeroes\"\n    else:\n        return count_zero / count_nonzero"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zeros = 0\n    count_non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n            \n    return count_zeros / count_non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    if count_zeroes == 0:\n        return float('nan')\n    else:\n        return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    \n    non_zeroes = len(nums) - zeroes\n    return float(zeroes) / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if non_zeroes == 0:\n        return None  # no non-zeroes found\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    return zeroes / non_zeroes if non_zeroes > 0 else 0"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    return zero_count / non_zero_count if non_zero_count > 0 else 0"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes a number n as input and returns True if the number can be represented as sum of non-zero powers of 2 and False otherwise.\n    '''\n\n    # Initialize a boolean variable to keep track of whether the number is a sum of non-zero powers of 2 or not\n    is_sum_of_powers_of_two = True\n\n    # Initialize a variable to keep track of the sum of powers of 2\n    power_sum = 0\n\n    # Loop through the range of possible powers of 2\n    for power in range(32):\n\n        # Check if the power of 2 is a factor of n\n        if n % (2**power) == 0:\n\n            # If the power is not zero, add it to the sum of powers of 2\n            if 2**power!= 0:\n                power_sum += 2**power\n\n        # If the power is greater than or equal to the sum of powers of 2, then the number can't be represented as sum of non-zero powers of 2\n        elif power >= power_sum:\n            is_sum_of_powers_of_two = False\n            break\n\n    return is_sum_of_powers_of_two"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    This function takes an integer n as input and returns True if the given number can be represented as sum of non-zero powers of 2 or False otherwise.\n    '''\n    if n == 0: \n        return True\n    for i in range(1, int(n ** 0.5) + 1): \n        if n % i == 0 and (i & (i - 1)) == 0: \n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the number to binary\n    binary_str = bin(n)[2:]\n\n    # Iterate over the bits and check if each one is a power of 2\n    for bit in binary_str:\n        if bit == '0':\n            continue\n        elif bit == '1':\n            if not is_power_of_two(int(binary_str, 2) - int(bit, 2)):\n                return False\n        else:\n            raise ValueError('Invalid binary string')\n\n    return True\n\ndef is_power_of_two(n):\n    return n!= 0 and (n & (n - 1)) == 0"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initializing the power of 2 to 1.\n    power_of_2 = 1\n    \n    # While the power of 2 is less than or equal to n,\n    while power_of_2 <= n:\n        \n        # If the n can be represented as sum of non-zero powers of 2,\n        if n == power_of_2:\n            return True\n        \n        # If the n is not equal to the power of 2 and the power of 2 is a non-zero number,\n        elif n!= power_of_2 and power_of_2!= 0:\n            \n            # Calculate the difference between n and the power of 2.\n            diff = n - power_of_2\n            \n            # Check if the difference can be represented as sum of non-zero powers of 2 or not.\n            if is_Sum_Of_Powers_Of_Two(diff):\n                return True\n        \n        # Increment the power of 2.\n        power_of_2 <<= 1\n        \n    # If the n can not be represented as sum of non-zero powers of 2,\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function returns True if the given number can be represented as sum of non-zero powers of 2, else False.\n    \"\"\"\n    if n < 0:\n        return False\n    # Convert the number to binary and split into its digits\n    binary = bin(n)[2:]\n    # Check if all the digits are zeros\n    if '0' not in binary:\n        return False\n    # Check if the number is a power of 2\n    if binary.count('0') == len(binary):\n        return True\n    # Check if the number can be represented as sum of non-zero powers of 2\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            if binary[:i].count('1') == 0:\n                return True\n            elif binary[i+1:].count('1') == 0:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number can be represented as sum of non-zero powers of 2, else returns False.\n    \"\"\"\n    if n == 0:  # If the number is 0, then it can be represented as sum of non-zero powers of 2\n        return True\n    else:\n        for i in range(1, n+1):  # Loop from 1 to n\n            if (n & i) == i:  # If n is a power of 2, then n can be represented as sum of non-zero powers of 2\n                return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base case\n    if n == 0:\n        return True\n    # Check if the last bit is 1 or not\n    if n & 1:\n        # If the last bit is 1, then the number can't be represented as sum of powers of 2\n        return False\n    # Recursively call the function for n // 2\n    return is_Sum_Of_Powers_Of_Two(n // 2)\n"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    while n % 2 == 0:\n        n /= 2\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return False\n        i *= 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a list to store the powers of 2\n    powers = [2**i for i in range(32)]\n\n    # Sort the list in decreasing order\n    powers.sort(reverse=True)\n\n    # Initialize a variable to store the sum of powers\n    total_sum = 0\n\n    # Iterate over the list and add the powers of 2 that are less than or equal to n to the total sum\n    for power in powers:\n        if power <= n:\n            total_sum += power\n            n -= power\n        else:\n            break\n\n    # If the total sum is equal to n, then n can be represented as sum of non-zero powers of 2\n    if total_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            result.extend(sublist)\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Extracts all the numbers from a list of lists.\n    \"\"\"\n    flattened = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flattened.extend(sublist)\n        else:\n            flattened.append(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists and returns a flattened list of single numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.append(num)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.append(num)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists as input and returns a flattened list of all the numbers in the list.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            for sub_item in item:\n                flattened_list.append(sub_item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists as input and returns a set of all the numbers in the list of lists.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    # Loop through the list from 0 to n-1\n    for i in range(len(nums)):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        \n        # If the maximum element is not at the end of the list, flip it to the end\n        if max_index!= i:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            \n            # Reverse the whole list from 0 to max_index\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function takes a list of integers as input and sorts it using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start from the last element and work our way up to the first element\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the maximum element is not at the beginning of the list, move it to the beginning\n        if max_index!= i:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Sort the array from 0 to n-1\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted portion of the array\n        max_index = nums.index(max(nums[:i+1]))\n        # Reverse the array up to the maximum index\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # Reverse the entire array\n        nums = nums[::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of elements as input and sorts them using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    \n    # Iterate through the list from 0 to n-1\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # If the maximum element is not at the beginning of the list, swap it with the first element of the unsorted part of the list\n        if max_index!= 0:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            nums[:i+1] = nums[:i+1][::-1]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    \n    # One pass of pancake sort algorithm\n    for i in range(n):\n        # Find index of the maximum element in the remaining unsorted list\n        max_index = nums.index(max(nums[i:]))\n        \n        # Move the maximum element to the end of the list\n        nums[i:max_index+1] = reversed(nums[i:max_index+1])\n        \n        # Reverse the entire list\n        nums[:i+1] = reversed(nums[:i+1])\n        \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Pancake Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted portion of the list.\n        max_index = nums.index(max(nums[:i+1]))\n        # If the maximum element is not at the end of the list,\n        # flip the elements at indices i and max_index,\n        # effectively placing the maximum element at the end of the list.\n        if max_index!= i:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            nums[:i+1] = reversed(nums[:i+1])\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # find index of the maximum element in the unsorted portion of the list\n        max_idx = nums.index(max(nums[i:]))\n        # flip the maximum element to the end of the list\n        nums[i:max_idx+1] = reversed(nums[i:max_idx+1])\n        # flip the entire list to get the largest element at the end of the list\n        nums[i:] = reversed(nums[i:])\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    A function to sort a list of elements using pancake sort.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # find the index of the maximum element in the unsorted part of the list\n        max_idx = nums.index(max(nums[:n]))\n        # reverse the list from 0 to max_idx\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        # reverse the whole list\n        nums = nums[::-1]\n        # reverse the list from max_idx+1 to n\n        nums[max_idx+1:] = reversed(nums[max_idx+1:])\n        # reverse the whole list\n        nums = nums[::-1]\n        n -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    A function to sort a list of elements using pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:n]))\n        # Move the maximum element to the end of the list\n        nums[n-1], nums[max_index] = nums[max_index], nums[n-1]\n        # Reverse the unsorted part of the list to sort it in ascending order\n        nums[:n-1] = nums[:n-1][::-1]\n        n -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of numbers as input and sorts them using the pancake sort algorithm.\n    '''\n    # Find the maximum element in the list\n    max_element = max(nums)\n    \n    # Iterate through the list from the maximum element to 1\n    for i in range(max_element, 0, -1):\n        \n        # Find the index of the maximum element in the list\n        max_index = nums.index(i)\n        \n        # If the maximum element is not at the end of the list, flip it to the end\n        if max_index!= len(nums)-1:\n            # Flip the maximum element to the end of the list\n            nums[max_index], nums[max_index+1:] = nums[max_index+1:][::-1], [nums[max_index]]\n            \n            # Flip the maximum element to the beginning of the list\n            nums[:max_index+1][::-1], [nums[max_index]] = nums[:max_index+1][::-1], [nums[max_index]]\n            \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as arguments and returns the number of items that are identical in the same position of the three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function finds the number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for item in Input:\n        if type(item) == list:\n            count += 1\n    \n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array must have at least two elements\"\n    else:\n        max_diff = arr[1] - arr[0]\n        for i in range(2, len(arr)):\n            diff = abs(arr[i] - arr[i-1])\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr) \n    if n == 0: \n        return 0\n    arr.sort() \n    max_diff = arr[n-1] - arr[0] \n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    min_elem = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - min_elem > max_diff:\n            max_diff = arr[i] - min_elem\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function finds the maximum difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    \n    max_diff = abs(arr[1] - arr[0])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        y = (n - a * x) // b\n        if y >= 0 and n == a * x + b * y:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    for x in range(n//a + 1):\n        for y in range(n//b + 1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if n is divisible by a and b\n    if n % a == 0 and n % b == 0:\n        # If n is divisible by both a and b, return None since there is no solution\n        return None\n    else:\n        # If n is not divisible by both a and b, find the solution\n        x = (n // a) * (-1 if a > b else 1)\n        y = (n // b) * (-1 if a > b else 1)\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a*i + b*j == n:\n                return (i, j)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == 0:\n            if n == 0:\n                return (0, 0)\n            else:\n                return None\n        elif n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    else:\n        x = n // (a * b)\n        y = (n - x * a * b) // b\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a or b is 0\n    if a == 0 and b == 0:\n        return None\n    # if a is 0, return y = n / b\n    if a == 0:\n        return (0, n // b)\n    # if b is 0, return x = n / a\n    if b == 0:\n        return (n // a, 0)\n    # if a and b are not zero, calculate gcd and return x and y\n    g = gcd(a, b)\n    x = (n // a // b) * b\n    y = n - x\n    return (x // g, y // g)\n\ndef gcd(a, b):\n    '''\n    Calculate the greatest common divisor of a and b.\n    '''\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (a*x) % b == 0:\n            return (x, n//a*x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    for x in range(n):\n        if (a*x) % n == b:\n            return (x, n // a)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and returns a new list which contains all elements from the first list except those that are present in the second list.\n    '''\n\n    # Using list comprehension to remove all elements from the first list that are present in the second list.\n    result = [item for item in list1 if item not in list2]\n\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input, list1 and list2.\n    It removes all elements present in list2 from list1 and returns the new list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are also present in list2.\n    '''\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all the elements from list1 that are present in list2.\n    '''\n    # Convert list2 to a set to improve lookup performance\n    set2 = set(list2)\n    # Iterate over the list1 and remove elements from list1 that are present in list2\n    for element in list1:\n        if element in set2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from list1 that are present in list2.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as inputs. It removes all the elements from the first list that are present in the second list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    # Iterate through each element in list2\n    for element in list2:\n        # Check if the element is present in list1\n        if element in list1:\n            # If it is, remove it from list1\n            list1.remove(element)\n    # Return the modified list1\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function returns the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    return (n * (n+1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        # if n is even, the series has an odd number of terms\n        num_terms = n // 2 + 1\n    else:\n        # if n is odd, the series has an even number of terms\n        num_terms = n // 2\n\n    return sum(n - 2*i for i in range(num_terms))"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2+1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n // 2 + 1):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function calculates the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter of the polygon\n    s = s/2\n    # calculate the area of the polygon using the formula A = (s*(s-l)*tan(pi/s))/2\n    area = (s*(s-l)*tan(pi/s))/2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the apothem using the law of cosines\n    apothem = l / (2 * tan(pi / s))\n    # calculate the area using the formula A = (s(s-3)/2) * apothem^2\n    area = (s * (s - 3) / 2) * apothem ** 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    polygon_area = (0.25 * s * l) / tan(pi / s)\n    return polygon_area\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.5 * s * l) * tan(pi / s)"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the sum of the divisors of two integers are the same.\n    If not, it returns False.\n    \"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # Check if sum of divisors is the same as n\n    for i in range(len(divisors)):\n        for j in range(i+1, len(divisors)):\n            if divisors[i] + divisors[j] == n:\n                return True\n    \n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors[-1] - divisors[-2]"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find all the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    # Check if the sum of divisors are equal\n    sum_divisors = sum(divisors)\n    if sum_divisors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    divisors = list(set(divisors))\n    divisors.sort()\n    return sum(divisors)\n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = 0\n    div2 = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n // i:\n                div1 += i\n            else:\n                div1 += i\n                div2 += n // i\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            div_sum += i\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            div_sum += i \n            if i!= n/i: \n                div_sum += n/i \n    return div_sum \n\nprint(div_sum(12)) # Output: 14 \nprint(div_sum(13)) # Output: 15 \nprint(div_sum(15)) # Output: 15 "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_div += i\n    if sum_div == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum\n\ndef is_divisible(a, b):\n    '''\n    Check if a and b are divisible.\n    '''\n    if div_sum(a) == div_sum(b):\n        return True\n    else:\n        return False\n\nprint(is_divisible(12, 24))  # True\nprint(is_divisible(15, 21))  # False"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # create a dictionary to store the count of each character at each position\n    char_count = {}\n    for i, c in enumerate(str1):\n        if c.isalpha():\n            if i in char_count:\n                char_count[i] += 1\n            else:\n                char_count[i] = 1\n    \n    # count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for i in range(len(str1)):\n        if i in char_count and str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # Initialize an empty list to store the count of characters at each position\n    count_list = []\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n        # Check if the character is an alphabet\n        if char.isalpha():\n            # Get the position of the character in the English alphabet\n            position = ord(char) - ord('a')\n            # Check if there's already a count in the list at the current position\n            if position >= len(count_list):\n                # If not, add a count of 1 at the current position\n                count_list.append(1)\n            else:\n                # If there is, increment the count at the current position by 1\n                count_list[position] += 1\n    # Return the list of counts for each position\n    return count_list"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * len(alphabet)\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count[alphabet.index(str1[i].lower())] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_list = [0] * 26 # initialize a list of 26 zeros\n\n    # loop through each character in the string and increment the corresponding count in the count_list\n    for char in str1.lower():\n        if char in alphabet:\n            index = alphabet.index(char)\n            count_list[index] += 1\n\n    # loop through the count_list and count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for i in range(26):\n        if count_list[i] > 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Define a dictionary to store the count for each character\n    counts = {}\n    # Convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n    # Iterate over the string and count the characters at each position\n    for i, char in enumerate(str1):\n        if char.isalpha():  # Only count alphabetic characters\n            if char in counts:  # If the character is already in the dictionary, increment its count\n                counts[char][i] += 1\n            else:  # If the character is not yet in the dictionary, add it with a count of 1\n                counts[char] = [0] * len(str1)\n                counts[char][i] = 1\n    # Count the number of characters that occur at the same position as in the English alphabet\n    total_count = 0\n    for char, positions in counts.items():\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            total_count += sum(positions)\n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # Convert string to lowercase\n    str1 = str1.lower()\n    \n    # Create a dictionary with the count of each character at each position\n    char_count = {}\n    for i in range(len(str1)):\n        char = str1[i]\n        if char in char_count:\n            char_count[char][i] += 1\n        else:\n            char_count[char] = [0] * len(str1)\n            char_count[char][i] += 1\n    \n    # Count the number of characters at the same position as in the English alphabet\n    count = 0\n    for i in range(len(str1)):\n        char = str1[i]\n        if char.isalpha():\n            # Get the position of the character in the English alphabet\n            if char.isupper():\n                alpha_pos = ord(char) - ord('A')\n            else:\n                alpha_pos = ord(char) - ord('a')\n            \n            # Check if the character occurs at the same position as in the English alphabet\n            if char_count[char][i] > 0 and i == alpha_pos:\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase and remove non-alphabetic characters\n    str1 = ''.join(c for c in str1 if c.isalpha()).lower()\n    \n    # Initialize a dictionary to store the count of each character at each position\n    count_dict = {}\n    for i in range(len(str1)):\n        count_dict[i] = {}\n        for j in range(26):\n            count_dict[i][chr(j + ord('a'))] = 0\n    \n    # Count the number of occurrences of each character at each position\n    for i, c in enumerate(str1):\n        count_dict[i][c] += 1\n    \n    # Count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for i in range(len(str1)):\n        for j in range(26):\n            if count_dict[i][chr(j + ord('a'))] > 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # initialize an empty dictionary to store the count of each character at each position\n    char_counts = {}\n\n    # loop through the string, adding the character count to the dictionary for each position\n    for i in range(len(str1)):\n        if str1[i] in char_counts:\n            char_counts[str1[i]].append(i+1)\n        else:\n            char_counts[str1[i]] = [i+1]\n\n    # loop through the dictionary, counting the number of characters at each position\n    count = 0\n    for key in char_counts:\n        if len(char_counts[key]) > 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i+97):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # create a dictionary to store the count of characters at each position\n    char_dict = {}\n    for i in range(len(str1)):\n        # convert the character to lowercase to ignore case sensitivity\n        char = str1[i].lower()\n        # check if the character is a letter\n        if char.isalpha():\n            # check if the character already exists in the dictionary\n            if char in char_dict:\n                # increment the count of the character if it already exists\n                char_dict[char] += 1\n            else:\n                # add the character to the dictionary with a count of 1 if it doesn't exist\n                char_dict[char] = 1\n    # count the number of characters at the same position as in the English alphabet\n    count = 0\n    for char in char_dict:\n        # check if the character is in the English alphabet\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            # check if the character occurs at the same position as in the English alphabet\n            if char_dict[char] == char_dict[chr(ord(char) - 97)]:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    count = 0\n    n = len(A)\n    for i in range(n): \n        for j in range(i+1, n): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    n = len(A)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        power = 1\n        while power < n:\n            power *= 2\n        return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\nprint(next_power_of_2(12)) # Output: 16\nprint(next_power_of_2(10)) # Output: 16\nprint(next_power_of_2(9)) # Output: 16"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 1\n    else:\n        return 1 << (n-1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(len(bin(n))-2)\n"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n\n    Args:\n    n (int): A positive integer.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 1 << (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2 ** (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1).bit_length() + 1"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while 2**power < n:\n        power += 1\n    return 2**power"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments - a list and a number x.\n    It returns the number of occurrences of x in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments - a list and a number x.\n    It returns the number of times x appears in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list `a` and a number `x` and returns the number of times `x` appears in `a`.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Returns the number of times a number appears in a list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of times the number appears in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    This function takes two arguments: \n    - a: a list of integers \n    - x: an integer to be counted in the list a\n    \n    The function returns the number of occurrences of x in the list a.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of all numbers in the given list within the range from m to n (inclusive).\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += lst[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(lst, m, n):\n    '''\n    Returns the sum of numbers in lst within the range [m, n], inclusive.\n    '''\n    if m < 0 or n > len(lst) - 1:\n        raise ValueError('Invalid range')\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        return \"Invalid range\"\n    else:\n        total = sum(list1[m:n+1])\n        return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Invalid range\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Iterate through the list and add the numbers within the range to the total sum\n    for i in range(m, n+1):\n        total_sum += list1[i]\n        \n    # Return the total sum of numbers within the range\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of numbers in lst within the range [m, n] (inclusive).\n    \"\"\"\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of the sides of a regular pentagon as input and returns the perimeter of the pentagon.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = s.lower().count('std')\n    return count\n\ns = input('Enter a string: ')\nprint(count_occurance(s))"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of times the string'std' occurs in the input string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Check if all the elements in tuple have the same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    \n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    \n    first_type = type(test_tuple[0])\n    \n    for elem in test_tuple:\n        if type(elem)!= first_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Check if all the elements in tuple have the same data type or not.\n\n    :param test_tuple: A tuple of elements to check\n    :return: True if all the elements have the same data type, False otherwise\n    '''\n    if not test_tuple:\n        # An empty tuple has the same type for all its elements\n        return True\n    \n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[0] or x > arr[n-1]:\n        return False\n    else:\n        mid = n // 2\n        left = 0\n        right = n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x and (mid == 0 or arr[mid-1]!= x):\n                return True\n            elif arr[mid] > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    i = 0\n    j = n - 1\n    while i <= j:\n        if arr[i] == x:\n            count += 1\n            i += 1\n        elif arr[j] == x:\n            count += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    The majority element is the element that occurs more than n/2 times.\n    '''\n    # Find the position of the element in the array\n    pos = binary_search(arr, 0, n - 1, x)\n    # If the position is -1, the element is not present in the array\n    if pos == -1:\n        return False\n    # If the element is at the middle position or the element is the last element, check if the number of occurrences is greater than n/2\n    elif pos == n // 2 or pos == n - 1:\n        return arr[pos] == x and arr.count(x) > n // 2\n    # Otherwise, the element is not the majority element\n    else:\n        return False\n    \ndef binary_search(arr, low, high, x):\n    '''\n    This function performs binary search on a sorted array to find the position of an element\n    '''\n    # If the low and high pointers cross each other, the element is not present in the array\n    if low > high:\n        return -1\n    # Calculate the middle index\n    mid = (low + high) // 2\n    # If the middle element is equal to the element we are searching for, return the position\n    if arr[mid] == x:\n        return mid\n    # If the middle element is greater than the element we are searching for, search the left half of the array\n    elif arr[mid] > x:\n        return binary_search(arr, low, mid - 1, x)\n    # Otherwise, search the right half of the array\n    else:\n        return binary_search(arr, mid + 1, high, x)"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function will count the number of set bits in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    This function takes an integer as input and returns the number of set bits (binary digits with value 1) in the number.\n    \"\"\"\n    count = 0\n    # Iterate through each bit of the number\n    while n > 0:\n        # If the rightmost bit is 1, increment the count\n        if n & 1:\n            count += 1\n        # Right shift the number by one bit\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    # Initialize a counter variable to zero\n    count = 0\n    \n    # Loop through each bit of the number and check if it is set (1) or not (0)\n    while n:\n        # If the bit is set, increment the counter\n        if n & 1:\n            count += 1\n        \n        # Shift the bits to the right to check the next bit\n        n >>= 1\n        \n    # Return the count of set bits\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes a number as input and returns the number of set bits in the binary representation of that number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:  # if the last bit is 1\n            count += 1\n        n >>= 1  # shift the binary representation to the right by one bit\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Counts the number of set bits in a given number n.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function will count the number of set bits in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer n as input and returns the number of set bits (binary digits with value 1) in the number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes the characters which have odd index values of the string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes all the characters at odd index values.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # convert the string to a list of characters\n    chars = list(str)\n    \n    # loop through the list of characters in reverse order\n    for i in range(len(chars)-1, -1, -1):\n        # if the index of the character is odd, remove it from the list of characters\n        if i % 2 == 1:\n            chars.pop(i)\n    \n    # convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(string):\n    '''\n    This function will remove characters with odd index values from the given string.\n    '''\n    return ''.join([string[i] for i in range(len(string)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and removes the characters which have odd index values of the string.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over the indices of the string\n    for i in range(len(str)):\n        # Check if the index is even\n        if i % 2 == 0:\n            # If the index is even, add the character to the result string\n            result += str[i]\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes the characters which have odd index values.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(5, 7, 9)) # Output: 5\nprint(min_of_three(3, 2, 1)) # Output: 1\nprint(min_of_three(10, 15, 20)) # Output: 10"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Return the minimum of three numbers a, b, and c.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three arguments and returns the minimum of the three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Returns the minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three parameters:\n    - n: An integer representing the number.\n    - l: An integer representing the left range.\n    - r: An integer representing the right range.\n\n    The function checks whether all the bits are set in the given range or not.\n\n    Returns True if all the bits are set in the given range, otherwise False.\n    '''\n\n    # Compute the mask for the given range\n    mask = (1 << r) - (1 << l)\n\n    # Compute the AND operation between the number and the mask\n    result = n & mask\n\n    # If the result is equal to the mask, all the bits in the given range are set\n    if result == mask:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # To check whether all the bits are unset in the given range or not, we need to check if the bits from the leftmost bit to the left of l are set or not\n    # If all the bits from the leftmost bit to the left of l are set, then all the bits in the given range are set.\n    # We can check this by subtracting 1 from l and checking if the result is equal to 0 or not.\n    if l == 0:\n        return True\n    else:\n        return (l-1) & n == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three arguments:\n    n: integer\n    l: integer\n    r: integer\n\n    It returns True if all the bits are set in the range [l, r]\n    and False otherwise.\n    '''\n    # Calculate the mask for the given range\n    mask = ((1<<r)-1) - ((1<<l)-1)\n    \n    # Check if the mask is a power of 2\n    if mask & (mask-1) == 0:\n        # If it is a power of 2, return True if all the bits are set in the range\n        return (n & mask) == mask\n    else:\n        # If it is not a power of 2, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments: n, l and r.\n    n is the number whose bits are to be checked.\n    l is the leftmost position in the range.\n    r is the rightmost position in the range.\n    '''\n    # Calculate the number of bits in n\n    num_bits = len(bin(n)[2:])\n\n    # Check if all the bits in the range are set\n    for i in range(l, r+1):\n        if (n & (1 << i)) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are set in the given range or not.\n    \"\"\"\n    # Convert the given range to binary\n    binary = bin(n)[2:]\n    # Check if all bits are set in the given range\n    if binary[l:r+1] == '1'*r:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function returns True if all the bits in the range [l,r] are set to 1, otherwise False.\n    n is the number of bits in the number system.\n    l is the left end of the range.\n    r is the right end of the range.\n    '''\n    if r < l:\n        # If the range is not valid, return False.\n        return False\n    elif r == l:\n        # If the range is a single bit, return True if it is set to 1, otherwise False.\n        return (n & (1 << l))!= 0\n    else:\n        # For all other cases, check if all the bits in the range are set to 1.\n        mask = ((1 << (r+1)) - 1) - ((1 << l) - 1)  # Create a mask to exclude all the bits before l and after r.\n        return (n & mask) == mask  # Check if all the bits in the range are set to 1."
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the given range to binary format\n    binary_n = bin(n)[2:]\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n\n    # Pad the binary values with leading zeros\n    binary_n = binary_n.zfill(len(binary_r))\n    binary_l = binary_l.zfill(len(binary_r))\n\n    # Check if all the bits are set in the given range\n    for i in range(len(binary_l)):\n        if binary_l[i] == '0' and binary_n[i] == '1':\n            return False\n\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << r) - (1 << l)\n    return ((n & mask) == mask)"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if bin(i)[2:].count('1')!=n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert the given range to binary form\n    binary = bin(n)[2:]\n    # check if all bits in the given range are set or not\n    if binary[l:r+1].count('0') == r-l+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Find the indices of the first n negative and positive elements\n    neg_indices = []\n    pos_indices = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_indices.append(i)\n        else:\n            pos_indices.append(i)\n\n    # Re-arrange the array\n    for i in range(n):\n        if i < len(neg_indices):\n            arr[i] = arr[neg_indices[i]]\n        else:\n            arr[i] = arr[pos_indices[i - len(neg_indices)]]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    neg_arr.sort(reverse=True)\n    pos_arr.sort()\n    new_arr = neg_arr + pos_arr\n    for i in range(n):\n        arr[i] = new_arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # Split the array into negative and positive parts\n    neg_part = arr[:n][::-1]\n    pos_part = arr[n:]\n\n    # Sort the positive part in descending order\n    pos_part.sort(reverse=True)\n\n    # Reconstruct the original array\n    return neg_part + pos_part"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # separate the negative and positive elements\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    \n    # sort the negative and positive elements separately\n    negatives.sort(reverse=True)\n    positives.sort()\n    \n    # re-arrange the original array by replacing the first n elements\n    arr[:n] = negatives + positives"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_indices = []\n    pos_indices = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_indices.append(i)\n        else:\n            pos_indices.append(i)\n    arr[neg_indices], arr[pos_indices] = arr[pos_indices], arr[neg_indices]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists\n    negative_list = []\n    positive_list = []\n    \n    # Loop through the array and separate negative and positive elements into different lists\n    for i in range(n):\n        if arr[i] < 0:\n            negative_list.append(arr[i])\n        else:\n            positive_list.append(arr[i])\n            \n    # Sort the negative and positive lists\n    negative_list.sort()\n    positive_list.sort()\n    \n    # Combine the sorted lists and return the first n elements\n    return negative_list + positive_list[:n-len(negative_list)]"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # separate negative and positive elements\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n\n    # rearrange the negative and positive elements\n    arr[:n] = neg[::-1] + pos\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    sorted_arr = neg_arr + pos_arr\n    return sorted_arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    zeros = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        elif arr[i] > 0:\n            positives.append(arr[i])\n        else:\n            zeros.append(arr[i])\n    negatives.reverse()\n    arr[:n] = negatives + positives + zeros\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    neg_arr.sort(reverse=True)\n    pos_arr.sort()\n    for i in range(n):\n        if i < len(pos_arr):\n            arr[i] = pos_arr[i]\n        else:\n            arr[i] = neg_arr[i - len(pos_arr)]\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a given string with the given character.\n    \"\"\"\n    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function replaces blank spaces in the string with the character passed as input.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','char')"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the modified string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and a character as input and replaces all the blank spaces in the string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in a string with a given character.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappushpop(heap, list1[i])\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(reversed(heap))"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef largest_numbers(lst, n):\n    heap = []\n    for num in lst:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            heapq.heappushpop(heap, num)\n    return heap\n\nprint(largest_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)) # [10, 9, 8]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef largest_numbers(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n\n    :param lst: List of numbers.\n    :param n: Number of largest items to return.\n    :return: List of n largest items.\n    \"\"\"\n    # Use heapq to create a max-heap of the first n elements of the list.\n    heap = lst[:n]\n    heapq.heapify(heap)\n\n    # Iterate through the remaining elements of the list and add each one to the heap.\n    for num in lst[n:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n\n    # Return the sorted list of the n largest items.\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(reversed(heap))"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n] # create a min heap of the first n items\n    heapq.heapify(heap) # heapify the heap\n    for i in range(n, len(list1)): # iterate through the remaining items in the list\n        if list1[i] > heap[0]: # if the next item is larger than the smallest item in the heap\n            heapq.heappop(heap) # remove the smallest item from the heap\n            heapq.heappush(heap, list1[i]) # add the next item to the heap\n    return heap # return the heap as a list"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for num in list1[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    lateral_area = 2 * math.pi * r * (r + h)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Input:\n    - r: radius of the cylinder (float)\n    - h: height of the cylinder (float)\n    \n    Output:\n    - lateral surface area of the cylinder (float)\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder given its radius and height.\n    '''\n    return 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Parameters:\n    r (float): the radius of the cylinder.\n    h (float): the height of the cylinder.\n    Returns:\n    float: the lateral surface area of the cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurfacearea = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurfacearea"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder given its radius and height.\n    '''\n    # Calculate the lateral surface area of the cylinder using the formula: A = 2\u03c0rh\n    A = 2 * 3.14159 * r * h\n    \n    return A"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Function to calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    '''\n\n    lateral_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateral_area"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    This function takes in the side length of a cube and returns its volume.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0x5555555555555555  # binary representation of 32 bits\n    n = n | (n >> 1)  # set even bits\n    n = n & mask  # mask even bits\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function sets all even bits of a given number to 1.\n    '''\n    return (n | (n << 1)) & ((1 << 32) - 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    # Set the most significant bit to 1\n    n |= 0b10000000000000000000000000000000\n    \n    # Clear all bits whose position is odd\n    n &= 0b11111111111111111111111111111111\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0b11111110\n    return n | mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits_set = 0b11111110 & n   # Clear even bits of n with a mask of 0b11111110\n    return even_bits_set | n        # Set even bits of n by ORing the result with the original n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function sets all even bits of a given number to 1.\n    '''\n    return (n | (n >> 1)) & 0x55555555"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number n and sets all even bits of the number to 1.\n    '''\n    # Convert the given number to binary format\n    binary_n = bin(n)[2:]\n    # Create a string to store the modified binary number\n    modified_binary = ''\n    for bit in binary_n:\n        if int(bit) % 2 == 0:\n            modified_binary += '1'\n        else:\n            modified_binary += '0'\n    # Convert the modified binary number back to decimal format\n    modified_n = int(modified_binary, 2)\n    return modified_n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n    \"\"\"\n    # Convert the number to binary and remove the \"0b\" prefix\n    binary = bin(n)[2:]\n    # Initialize the result to 0\n    result = 0\n    # Iterate over the bits from right to left (MSB to LSB)\n    for bit in reversed(binary):\n        # If the bit is \"0\", leave it as is and continue with the next bit\n        if bit == \"0\":\n            result <<= 1  # Shift the result to the left by one bit\n            continue\n        # If the bit is \"1\", set the corresponding bit of the result\n        result |= 1 << int(binary.index(bit))\n        # Shift the result to the left by one bit to free up the current bit\n        result <<= 1\n    # Return the final result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes an integer as input and returns a number with all even bits set to 1.\n    '''\n    mask = 0xAAAAAAAA # binary representation of 0x55555555 or 0b10101010101010101010101010101010\n    return (n & mask) | (n & ~mask)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    for item in test_list:\n        if item in result_dict:\n            result_dict[item] += 1\n        else:\n            result_dict[item] = 1\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object from the list of tuples\n    counter_obj = Counter(test_list)\n\n    # Convert the Counter object to a dictionary and return it\n    return dict(counter_obj)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter to count the number of occurrences of each tuple in the list\n    counter = Counter(test_list)\n    \n    # Returning the Counter object as a dictionary\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j])!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings in the string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 > 1:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if len(str[i:j]) > 0: \n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1: # base case for sequence of length 1\n        return m\n    else: # recursive case for sequence of length greater than 1\n        total = 0\n        for i in range(1,m//2+1):\n            if m-i <= n-2: # check if i can be the last element of the sequence\n                total += get_total_number_of_sequences(m-i,n-1) # recursive call to find the number of sequences for the remaining elements\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but \n    less than or equal to m.\n    \"\"\"\n    # Initialize a variable to store the total number of sequences\n    total_sequences = 0\n    \n    # Define a recursive function to find all possible sequences of length n\n    def find_sequences(i, sequence):\n        nonlocal total_sequences\n        \n        # If the length of the current sequence is equal to n, add it to the total_sequences count\n        if len(sequence) == n:\n            total_sequences += 1\n            return\n        \n        # For each element in the range [i, m], add it to the sequence and recursively find its possible sequences\n        for j in range(i, m+1):\n            sequence.append(j)\n            find_sequences(j, sequence)\n            sequence.pop()\n    \n    # Call the recursive function to find all possible sequences of length n\n    find_sequences(2, [])\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the count variable\n    count = 0\n    \n    # Initialize the list to store the sequence\n    sequence = []\n    \n    # Recursive function to generate the sequences\n    def generate_sequences(i):\n        nonlocal count, sequence\n        # Base case: if the length of the sequence is equal to n, increment the count\n        if len(sequence) == n:\n            count += 1\n            return\n        # Loop through all possible values for the i-th element\n        for j in range(2*sequence[-1]+1, m+1):\n            # Add the value to the sequence and generate the sequence for the next element\n            sequence.append(j)\n            generate_sequences(i+1)\n            # Remove the value from the sequence to backtrack\n            sequence.pop()\n    \n    # Call the recursive function to generate all possible sequences\n    generate_sequences(0)\n    \n    # Return the count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total_sequences = 0\n        for i in range(1, m//2+1):\n            total_sequences += get_total_number_of_sequences(i, n-1)\n        return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(2, m):\n            total += get_total_number_of_sequences(i, n-1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Create a list to store the number of sequences for each value of i from 1 to n\n    sequence_count = [0] * (n+1)\n\n    # Initialize the first element of the sequence count list to 1\n    sequence_count[1] = 1\n\n    # Iterate over the remaining elements of the sequence count list\n    for i in range(2, n+1):\n        # Iterate over the values of j from 1 to i-1\n        for j in range(1, i):\n            # Check if the sum of j and j-1 is less than or equal to m and if j is greater than or equal to twice the previous element\n            if (j+j-1 <= m and j >= 2*sequence_count[j-1]):\n                # Increment the sequence count for the current value of i\n                sequence_count[i] += sequence_count[j-1]\n\n    # Return the total number of sequences for n\n    return sequence_count[n]"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less \n    than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        prev_seq = get_total_number_of_sequences(m, n - 1)\n        curr_seq = prev_seq + (m - prev_seq + 1) * (n - 1)\n        return curr_seq"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize count to 0\n    count = 0\n\n    # If n is 1, return 1\n    if n == 1:\n        return 1\n\n    # If n is greater than 1, recursively call the function for n-1 and store the result in a variable\n    prev_count = get_total_number_of_sequences(m,n-1)\n\n    # Iterate from 2 to m, and for each number i, recursively call the function for n-1 with i as the new minimum value, and store the result in a variable\n    for i in range(2, m+1):\n        curr_count = get_total_number_of_sequences(i*2, n-1)\n\n        # Add the previous count and current count\n        count += prev_count * curr_count\n\n        # Update the previous count\n        prev_count = curr_count\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m // 2 + 1\n    total_sequences = 0\n    for i in range(1, m // 2 + 1):\n        total_sequences += get_total_number_of_sequences(i, n - 1)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n\n    previous = 1\n    current = 2\n    total_count = 0\n\n    for i in range(n-1):\n        next_value = current * 2 - previous\n        if next_value <= m:\n            previous = current\n            current = next_value\n        else:\n            return 0\n\n    total_count += m - previous + 1\n    return total_count"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        raise ValueError('List 1 must have at least as many elements as list 2.')\n    else:\n        list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replaces the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an argument and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    next_square = math.ceil(math.sqrt(N))**2\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer 'N' as input and returns the next perfect square greater than 'N'.\n    '''\n    # Find the square root of 'N' and round it up to the nearest integer\n    sqrt_N = int(math.ceil(math.sqrt(N)))\n    \n    # Check if the square root is a perfect square\n    is_perfect_square = lambda x: int(math.sqrt(x))**2 == x\n    \n    # Find the first perfect square greater than'sqrt_N'\n    for i in range(sqrt_N + 1, int(sqrt_N**2) + 1):\n        if is_perfect_square(i):\n            return i"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number.\n    '''\n    next_square = int(math.sqrt(N)) + 1  # Finding the next square\n    next_perfect_square = next_square ** 2  # Finding the next perfect square\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N))**2 == N:\n        return (int(math.sqrt(N)) + 1)**2\n    else:\n        return (int(math.sqrt(N)) + 1)**2\n\nprint(next_Perfect_Square(24)) # Output: 36\nprint(next_Perfect_Square(36)) # Output: 49\nprint(next_Perfect_Square(49)) # Output: 64"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    root = math.sqrt(N)\n    # Increment the square root by 1 to get the next perfect square\n    root += 1\n    # Return the square of the root\n    return int(math.pow(root, 2))"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    next_sqrt_N = math.ceil(sqrt_N)\n    next_square = next_sqrt_N ** 2\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.floor(math.sqrt(N))\n    return root**2 + 1"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Finding the square root of the given number\n    sqrt_N = math.sqrt(N)\n    # Adding 0.5 to the square root to get the next integer square root\n    sqrt_N = math.ceil(sqrt_N)\n    # Adding 1 to the square root to get the next perfect square\n    next_square = sqrt_N**2\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of the given number\n    sqrt = math.sqrt(N)\n    \n    # Check if the square root is an integer, and return None if it's not\n    if not sqrt.is_integer():\n        return None\n    \n    # Find the square of the square root and add 1 to get the next perfect square\n    next_square = int(sqrt**2) + 1\n    \n    return next_square"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # Create a list to store the maximum sum of a bitonic subsequence up to i\n    dp = [0]*n\n\n    # Find the maximum sum of a bitonic subsequence up to each index i\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1]+arr[i], arr[i])\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(1, n):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    for len in range(2, n + 1):\n        for i in range(n - len + 1):\n            j = i + len - 1\n\n            if len == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i][k - 1] + dp[k][j] for k in range(i, j))\n\n    return dp[0][n - 1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n\n    # Initialize the list to store the maximum sum of bitonic subsequence ending at each index\n    max_sums = [0] * n\n\n    # Initialize the maximum sum of the bitonic subsequence seen so far\n    max_sum = float('-inf')\n\n    # Traverse through all indices of the array\n    for i in range(n):\n        # Traverse through all indices from 0 to i\n        for j in range(i):\n            if arr[j] < arr[i]:\n                # If arr[j] is less than arr[i], then we add arr[j] to the maximum sum of the bitonic subsequence ending at index i\n                max_sums[i] = max(max_sums[i], max_sums[j] + arr[i])\n\n        # Update the maximum sum seen so far\n        max_sum = max(max_sum, max_sums[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    n = len(arr)\n\n    # Create a list of maximum sums for all possible bitonic subsequences\n    max_sums = [0] * (1 << n)\n\n    # Initialize the maximum sum for an empty subsequence\n    max_sums[0] = 0\n\n    # Fill in the maximum sums for all possible subsequences\n    for i in range(1, 1 << n):\n        # Find the index of the maximum element in the current subsequence\n        max_index = arr.index(max(arr[j] for j in range(n) if i & (1 << j)))\n\n        # Calculate the maximum sum for the current subsequence\n        max_sums[i] = max_sums[i ^ (1 << max_index)] + arr[max_index]\n\n    # Return the maximum sum among all possible bitonic subsequences\n    return max(max_sums)\n"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    max_sum = float('-inf')\n\n    # Fill the bottom-up table dp[][]\n    for i in range(n):\n        dp[i][i] = arr[i]\n        if i > 0:\n            dp[i][i-1] = arr[i] + dp[i-1][i-1]\n        if i > 1:\n            dp[i][i-2] = arr[i] + max(dp[i-1][i-2], dp[i-2][i-2])\n\n    # Find the maximum sum of bitonic subsequence in dp[][]\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                max_sum = max(max_sum, dp[i][j])\n            else:\n                max_sum = max(max_sum, dp[i][j])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    # Find the maximum sum of increasing subsequence\n    inc_sum = [0] * n\n    inc_sum[0] = arr[0]\n    for i in range(1, n):\n        inc_sum[i] = max(inc_sum[i-1] + arr[i], arr[i])\n    \n    # Find the maximum sum of decreasing subsequence\n    dec_sum = [0] * n\n    dec_sum[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        dec_sum[i] = max(dec_sum[i+1] + arr[i], arr[i])\n    \n    # Find the maximum sum of bitonic subsequence\n    bitonic_sum = [0] * n\n    for i in range(n):\n        bitonic_sum[i] = max(inc_sum[i], dec_sum[i])\n    \n    return max(bitonic_sum)\n"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    max_sum = 0\n    dp = [[0 for _ in range(len(arr))] for _ in range(2)]\n\n    for i in range(len(arr)):\n        if i == 0:\n            dp[0][i] = arr[i]\n        else:\n            dp[0][i] = dp[0][i-1] + arr[i]\n        dp[1][i] = arr[i]\n\n    for i in range(len(arr)-1):\n        max_sum = max(max_sum, dp[0][i] + dp[1][-1-i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n\n    # Base case: the only bitonic subsequence of length 1 is the element itself\n    dp[0] = arr[0]\n\n    # Fill the dp array from left to right\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n\n    # Fill the dp array from right to left\n    for i in range(n-2, -1, -1):\n        dp[i] = max(dp[i], dp[i+1] + arr[i])\n\n    # Return the maximum sum of any bitonic subsequence\n    return dp[0]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # Initialize base cases\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    # Fill the DP table in bottom-up manner\n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i + len - 1\n            dp[i][j] = arr[i]\n            for k in range(i+1, j):\n                if arr[k] > arr[k+1] and dp[i][k] > dp[k+1][j]:\n                    dp[i][j] += dp[i][k]\n                elif arr[k] < arr[k+1] and dp[i][k] < dp[k+1][j]:\n                    dp[i][j] += dp[k+1][j]\n\n    # Find the maximum sum from the DP table\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] > max_sum:\n                max_sum = dp[i][j]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    max_sum = float('-inf')\n    \n    for i in range(n):\n        dp[i][i] = arr[i]\n        max_sum = max(max_sum, arr[i])\n    \n    for len_seq in range(2, n+1):\n        for i in range(n-len_seq+1):\n            j = i+len_seq-1\n            if arr[i] < arr[j] and dp[i+1][j-1] + arr[j] > dp[i][j]:\n                dp[i][j] = dp[i+1][j-1] + arr[j]\n                max_sum = max(max_sum, dp[i][j])\n    \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    precision = 0.0001\n    guess = number / 2\n    while abs(guess**2 - number) > precision:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a given number using the Babylonian method.\n\n    :param number: The number for which the square root is to be computed.\n    :return: The square root of the given number.\n    '''\n\n    # Initial guess for the square root\n    guess = number/2\n\n    # Iterate until the difference between the guess and the square of the guess is less than 0.0001\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number/guess) / 2\n\n    # Return the square root of the given number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Set the initial guess to be the square root of the given number\n    guess = number ** 0.5\n    # Set the error to be very small\n    error = 1e-10\n    # Keep track of the number of iterations required to find the square root\n    iterations = 0\n    \n    while abs(guess**2 - number) > error:\n        # Update the guess using the formula for the babylonian method\n        guess = (guess + number / guess) / 2\n        # Increment the number of iterations\n        iterations += 1\n    \n    return guess, iterations"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    while True:\n        y = (x + (number / x)) / 2\n        if abs(y - x) < 0.0001:\n            return round(y, 2)\n        x = y"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2\n    epsilon = 0.0001\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0000001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the Babylonian method.\n    '''\n    # Initialize the guess to the square root of the number\n    guess = number ** 0.5\n    \n    # Iterate until the difference between guess^2 and number is less than 0.0001\n    while abs(guess**2 - number) > 0.0001:\n        # Update the guess using the average of guess and number/guess\n        guess = (guess + number/guess) / 2\n        \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the babylonian method.\n    '''\n    # initialize the guess to the square root of the number\n    guess = number ** 0.5\n    # set the error to a very small value\n    error = 0.0001\n    # loop until the error is less than the desired tolerance\n    while abs(guess ** 2 - number) > error:\n        # update the guess with the average of the number divided by the guess\n        guess = (guess + number / guess) / 2\n    # return the computed square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute square root of a number using the Babylonian method.\n    '''\n    epsilon = 0.0001  # tolerance for convergence\n    guess = number/2  # initial guess\n    while abs(guess*guess - number) > epsilon:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Cannot compute square root of negative number')\n    guess = number\n    while True:\n        approx = (guess + number/guess) / 2\n        if approx == guess:\n            return approx\n        guess = approx"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for len_ in range(2, n + 1):\n        for i in range(n - len_ + 1):\n            j = i + len_ - 1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str): \n    n = len(str) \n\n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for y in range(n)] \n\n    # All substrings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n\n    # Check for substrings of length greater than 1 \n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1 \n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]) \n\n                # Find the maximum length palindrome subsequence \n    maxLength = 0 \n    for i in range(n): \n        for j in range(i, n): \n            if L[i][j] > maxLength: \n                maxLength = L[i][j] \n    return maxLength "
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of LPSs\n    # Initialize diagonal elements to 1\n    table = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        table[i][i] = 1\n    # Fill the table in bottom-up manner\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            # If the characters match, then LPS length is 2*gap - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2*gap - 1\n            else:\n                # If the characters do not match, then LPS length is maximum of the values\n                # on the left or top diagonal of the table\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store intermediate results\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    maxLength = 1\n    end = 0\n    for start in range(n):\n        if start > end:\n            break\n        if str[start] == str[end]:\n            dp[start][end] = 2 + dp[start + 1][end - 1]\n            maxLength = max(maxLength, dp[start][end])\n            end += 1\n        else:\n            dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n            end -= 1\n\n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of LPS for substrings\n    # up to str[i] and str[j]\n    lps = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are LPS\n    for i in range(n):\n        lps[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            lps[i][i+1] = 2\n        else:\n            lps[i][i+1] = 1\n\n    # Check for lengths greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and k == 2:\n                lps[i][j] = 2\n            elif str[i] == str[j]:\n                lps[i][j] = lps[i+1][j-1] + 2\n            else:\n                lps[i][j] = max(lps[i][j-1], lps[i+1][j])\n\n    return lps[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n    ans = 1\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                ans = max(ans, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return ans"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum([1/i for i in range(1, n+1)])"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = sum(1.0/i for i in range(1, n))\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum\n\nprint(harmonic_sum(5)) # Output: 1.8333333333333333"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Computes the harmonic sum of n-1, where n is an integer greater than 1.\n    \"\"\"\n    result = 0.0\n    for i in range(1, n):\n        result += 1.0 / i\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Creating a set from the first array to find unique values\n    set_nums1 = set(array_nums1)\n\n    # Looping through the second array and checking if each value is present in the set\n    intersection = []\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.append(num)\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays and returns their intersection as a new array.\n    \"\"\"\n    # Create an empty list to store the intersection\n    intersection = []\n\n    # Iterate through the first array and check if each element is also in the second array\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes in two arrays and returns their intersection.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Counts the number of occurrences of the element `x` in the tuple `tup`.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the number of times the element appears in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in the list.\n\n    Parameters:\n    lst (list): List of integers.\n    element (int): Integer to be inserted.\n\n    Returns:\n    list: The resulting list.\n    \"\"\"\n\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert the given element before each element in the list and return the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    result.pop(0)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts element before each element in the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]  # remove the first element (which is just the added element)"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    new_lst = []\n    for item in lst:\n        new_lst.append(elem)\n        new_lst.append(item)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, ele):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(ele)\n        new_list.append(lst[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element, and inserts the element before each element in the list.\n    '''\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    for num in numbers:\n        print(f\"{num} in polar coordinates: {cmath.polar(num)}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(f\"{num} = {r} * e^(i * {theta})\")\n\nnumbers = [3 + 4j, 2 - 5j, 0, 5j]\nconvert(numbers)"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        polar_coord = cmath.polar(num)\n        print(f\"{num} in polar coordinates is {polar_coord}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    for num in numbers:\n        r, theta = cmath.polar(num)\n        print(f\"Polar coordinates of {num}: (r = {r:.2f}, \u03b8 = {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples containing the polar coordinates of the complex numbers.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar_coords.append((abs(num), cmath.phase(num)))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    results = []\n    for num in numbers:\n        r = cmath.polar(num)[0]\n        theta = cmath.polar(num)[1]\n        results.append((r, theta))\n    return results"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar_coord = cmath.polar(num)\n        polar_coords.append(polar_coord)\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # Calculate the polar coordinates of each complex number\n        r = abs(num)   # r = radius\n        theta = cmath.phase(num)   # theta = angle in radians\n        # Convert theta to degrees\n        theta_degrees = theta * 180 / cmath.pi\n        # Print the polar coordinates\n        print(f\"{num} = {r:.2f} @ {theta_degrees:.2f} degrees\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        polar = cmath.polar(number)\n        polar_coordinates.append((polar[0], polar[1]))\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as an input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combo for combo in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(1, n+1):\n        combinations.extend(combinations_with_replacement(l, i))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n\n    count = 0\n\n    # iterate through all numbers less than n\n    for i in range(2, n):\n\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if i is prime, increment the count\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a counter variable to 0\n    count = 0\n    \n    # Loop through all the numbers less than n\n    for i in range(2, n):\n        \n        # Check if the current number is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        # If the current number is prime, increment the counter\n        if is_prime:\n            count += 1\n    \n    # Return the final count of prime numbers\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, num)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if a number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result.append(test_tup1[i])\n        else:\n            result.append(test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have same length!\"\n    \n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = max_tup + (test_tup1[i],)\n        else:\n            max_tup = max_tup + (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = (test_tup1[i], test_tup2[i])\n        else:\n            max_tup = (test_tup2[i], test_tup1[i])\n    return max_tup\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(maximize_elements(test_tup1, test_tup2))  # Output: (6, 6)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple that contains the maximum value.\n    '''\n    max_tup = ()\n    if max(test_tup1) >= max(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Initialize the maximum and minimum values.\n    max_value = 0\n    min_value = 0\n\n    # Initialize the maximum and minimum indices.\n    max_index = 0\n    min_index = 0\n\n    # Loop through the tuples and find the maximum and minimum values and their indices.\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if test_tup1[i] > max_value:\n                max_value = test_tup1[i]\n                max_index = i\n        else:\n            if test_tup2[i] > max_value:\n                max_value = test_tup2[i]\n                max_index = i\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            if test_tup1[i] < min_value:\n                min_value = test_tup1[i]\n                min_index = i\n        else:\n            if test_tup2[i] < min_value:\n                min_value = test_tup2[i]\n                min_index = i\n\n    # Return the maximum and minimum values and their indices.\n    return (max_value, max_index), (min_value, min_index)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_sum = 0\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if sum(tup1) + sum(tup2) > max_sum:\n                max_sum = sum(tup1) + sum(tup2)\n                max_tup = (tup1, tup2)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        max_val = max(test_tup1[i], test_tup2[i])\n        result.append(max_val)\n    return tuple(result)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns a tuple containing the maximum elements from the two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2\n        else:\n            return (test_tup1[0], test_tup1[1])"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # Initialize the result tuple with the first element of each tuple\n    result = (test_tup1[0], test_tup2[0])\n    \n    # Iterate over the tuples, comparing each element\n    for i in range(1, len(test_tup1)):\n        for j in range(1, len(test_tup2)):\n            # Check if the current element of each tuple is greater than the corresponding element in the result tuple\n            if test_tup1[i] > result[0] and test_tup2[j] > result[1]:\n                result = (test_tup1[i], test_tup2[j])\n                \n    return result"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # create a new tuple with the maximum values from both tuples\n    max_tup = tuple(max(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)))\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_count = 0\n    num = 2\n    while prime_count < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n <= 0:\n        return None\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 13\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 28\n\n    return num - 28"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    # Create a list of all numbers from 2 to n (inclusive)\n    numbers = list(range(2, n+1))\n    \n    # Use the Sieve of Eratosthenes algorithm to find primes up to sqrt(n)\n    primes = []\n    while numbers:\n        prime = numbers[0]\n        primes.append(prime)\n        numbers = [x for x in numbers if x % prime!= 0]\n    \n    # Calculate the nth prime using the formula (4k^2 + 3k + 1)/3\n    k = n - 1\n    nth_prime = (4*k**2 + 3*k + 1) // 3\n    \n    # Return the nth prime\n    return primes[nth_prime-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    i = 2\n    count = 0\n    while count < n:\n        if is_prime(i) and is_prime(4*i+2):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        # Start with the largest prime number less than or equal to 2n^2\n        start = 2*(n**2) - 1\n        while not is_prime(start):\n            start -= 1\n        # Use the sieve of eratosthenes to find the nth prime\n        primes = []\n        sieve = [True] * (start+1)\n        sieve[0] = sieve[1] = False\n        for i in range(2, int(start**0.5)+1):\n            if sieve[i]:\n                for j in range(i**2, start+1, i):\n                    sieve[j] = False\n        for i in range(max(start+2, n*2), 2*start+1):\n            if sieve[i]:\n                primes.append(i)\n        return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, otherwise False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman-shanks-williams prime number.\n    \"\"\"\n    i = 2\n    count = 0\n    while True:\n        if is_prime(i):\n            if i == 2:\n                count += 1\n            elif is_prime(i - 1) and is_prime(i - 2):\n                count += 1\n        if count == n:\n            return i\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    \n    # Initialize variables\n    p = 2\n    q = 3\n    \n    # Loop to find the nth newman-shanks-williams prime\n    for i in range(2, n):\n        # Compute next prime\n        p = q\n        q = 3*p + 1\n        \n        # Check if prime\n        is_prime = True\n        for j in range(2, int(q**0.5) + 1):\n            if q % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            n -= 1\n            if n == 0:\n                return q\n    \n    # If n is still greater than 0, there are not enough primes\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 17\n    elif n == 7:\n        return 19\n    elif n == 8:\n        return 23\n    elif n == 9:\n        return 29\n    elif n == 10:\n        return 31\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    i = 2\n    count = 0\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i-1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        if count == n:\n            return num\n        num += 1\n    return \"n is too large\""
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length.\")\n    \n    # Create a new tuple with the results of the division operation\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    result_tup = ()\n\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"Length of first part cannot be greater than length of list.\")\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        print(\"Error: L is greater than the length of the list.\")\n    else:\n        list2 = list1[L:]\n        list1 = list1[:L]\n        return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n    \"\"\"\n    # Check if L is greater than the length of the list\n    if L > len(list1):\n        print(\"Error: L is greater than the length of the list\")\n        return None\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError('L is greater than the length of list1')\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n    Returns a tuple with the two resulting lists.\n    \"\"\"\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n    \"\"\"\n    # Check if L is valid\n    if L < 0:\n        raise ValueError(\"L must be non-negative\")\n    elif L > len(list1):\n        raise ValueError(\"L cannot be larger than the length of the list\")\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < 2 * L:\n        return \"Error: the list is not long enough to split into two parts with length L\"\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age / 7\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogy_ears = h_age * 7\n    return dogy_ears"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    This function takes a human age as input and returns the age of a dog in dog's years.\n    '''\n    dog_age_in_dogs_years = h_age * 7\n    return dog_age_in_dogs_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Constants\n    DOG_YEARS_IN_HOUR = 7\n    # Calculate the dog's age in hours\n    dog_age_hours = h_age * 24\n    # Convert the dog's age in hours to dog's years\n    dog_age_dog_years = dog_age_hours / DOG_YEARS_IN_HOUR\n    # Round the result to one decimal place\n    dog_age_dog_years = round(dog_age_dog_years, 1)\n    # Return the dog's age in dog's years\n    return dog_age_dog_years"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Split a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    if step <= 0 or step > n:\n        return None\n    \n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n        \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function calculates the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a single argument (l) which represents the side length of the cube.\n    It returns the lateral surface area of the cube.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    l (float): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral_area = 6 * l ** 2\n    return lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a side length of a cube as an argument and returns the lateral surface area of the cube.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_nums = list(range(1, 2*n, 2))  # create a list of the first n odd natural numbers\n    squares = [num**2 for num in odd_nums]  # create a list of the squares of the odd numbers\n    return sum(squares)  # return the sum of the squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n + 1)**2 + square_Sum(n-2)"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # Add square of i to sum\n        sum += i**2\n    \n    # Return sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop over the first n odd numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n        \n    # Return the sum of squares\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num = num * i * (i+1) // 2\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    num = 1\n    for i in range(1, n+1):\n        num = num * i * 2 + 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    result = 0\n    \n    while count <= n:\n        result = result + num\n        count += 1\n        num *= 2\n        \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        yield num\n        num += 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count <= n:\n        num += 2\n        count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variables\n    count = 0\n    num = 1\n    \n    # Loop through the numbers until we find then'th one\n    while count < n:\n        # Add the number to the total count\n        count += num\n        \n        # Increment the number for the next iteration\n        num += 1\n        \n    # Return then'th star number\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    num = 1\n    for i in range(1, n+1):\n        num *= i\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the counter to 1\n    count = 1\n    \n    # initialize the list to store the stars\n    stars = []\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the current count to the list of stars\n        stars.append('*' * count)\n        \n        # increment the counter\n        count += 2\n    \n    # join the list of stars and return the result\n    return ''.join(stars)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Find then'th star number.\n    \"\"\"\n    # Initialize a variable to store the count of stars\n    count = 1\n    \n    # Initialize a variable to store the current star number\n    num = 1\n    \n    # Loop until the nth star number is found\n    while count < n:\n        # Add the current number of stars to the previous number of stars to get the next number of stars\n        num += count\n        \n        # Increment the count of stars\n        count += 1\n    \n    # Return the nth star number\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n\n    Parameters:\n    n (int): the number of the star to find\n\n    Returns:\n    int: then'th star number\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * find_star_num(n-1) + 1"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n\nprint(ascii_value('a')) # output: 97"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions in the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions of the list.\n\n    Args:\n    arr: a list of integers\n\n    Returns:\n    The sum of even numbers at even positions of the input list.\n    \"\"\"\n    # Initialize the sum of even numbers at even positions to zero\n    even_sum = 0\n    \n    # Iterate over the list using a for loop\n    for i in range(0, len(arr), 2):\n        # Check if the current element at index i is even\n        if arr[i] % 2 == 0:\n            # Add the current element to the sum of even numbers at even positions\n            even_sum += arr[i]\n    \n    # Return the sum of even numbers at even positions\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if i % 2 == 0:  # check if the index is even\n            if arr[i] % 2 == 0:  # check if the number at the even index is even\n                total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    # Initialize the sum to 0\n    even_sum = 0\n    \n    # Loop through the list using enumerate to get the index as well\n    for i, num in enumerate(arr):\n        # Check if the number is even and its index is even\n        if num % 2 == 0 and i % 2 == 0:\n            # Add the number to the sum\n            even_sum += num\n            \n    # Return the sum of even numbers at even positions\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    # initialize the sum to zero\n    total = 0\n    # iterate over the list\n    for i in range(0, len(arr), 2):\n        # check if the current element is even\n        if arr[i] % 2 == 0:\n            # add the element to the sum\n            total += arr[i]\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        sum += num**5\n        num += 2\n        count += 1\n    \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**5\n        i += 2\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 2\n    sum = 0\n    while i <= 2*n:\n        sum += i**5\n        i += 2\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n: \n        if i % 2 == 0: \n            sum += i**5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**5\n        i += 2\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    i = 2\n    while n > 0:\n        sum += i ** 5\n        i += 2\n        n -= 1\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[-1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for item in test_list:\n        result_list.append(item[-1])\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length.')\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n % 2 == 0:  # Check if n is even\n        sum_even = 0\n        for k in range(1, n+1, 2):  # Iterate over even indices k from 1 to n\n            sum_even += math.comb(n, k)  # Add binomial coefficient C(n,k) to sum_even\n    else:\n        sum_even = \"n must be an even integer.\"  # Return error message if n is odd\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 2\n    \n    sum_even_binomial = 2\n    \n    for i in range(2, n, 2):\n        binomial_coeff = math.comb(n, i)\n        if i % 4 == 0:\n            sum_even_binomial += binomial_coeff\n            \n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns the sum of even index binomial coefficients for the given positive integer n.\n    \"\"\"\n    sum = 0\n    for k in range(0, n, 2):\n        sum += math.comb(n, k)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Returns the sum of even index binomial coefficients for the given positive integer n.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += math.comb(n, i)\n    return even_sum\n\nn = int(input(\"Enter a positive integer: \"))\neven_sum = even_binomial_Coeff_Sum(n)\nprint(\"The sum of even index binomial coefficients for\", n, \"is\", even_sum)"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    even_coefficients_sum = 0\n    for i in range(0, n+1, 2):\n        coefficient = math.comb(n, i)\n        even_coefficients_sum += coefficient\n    return even_coefficients_sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"Sum of even index binomial coefficients:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14 * r**2 * h)"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder (in meters)\n    h (float): the height of the cylinder (in meters)\n\n    Returns:\n    float: the volume of the cylinder (in cubic meters)\n    \"\"\"\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes a dictionary and an integer n as input and returns a new dictionary\n    which contains only the key-value pairs whose value is greater than or equal to n.\n\n    :param dict: A dictionary of key-value pairs\n    :param n: An integer\n    :return: A new dictionary containing only the key-value pairs whose value is greater than or equal to n.\n    \"\"\"\n\n    filtered_dict = {}\n\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(d, n):\n    '''\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The value to filter by.\n\n    Returns:\n    dict: The filtered dictionary.\n    '''\n\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    This function takes a tuple as input and returns the number of elements that occurs before the tuple element in the tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for elem in test_tup:\n        if elem == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    This function takes a tuple as an argument and returns the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is a decagonal number, otherwise it returns False.\n    A decagonal number is a number that can be expressed as the sum of consecutive integers where each integer is a power of 10.\n    For example, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200 are decagonal numbers.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        sum = 0\n        for j in range(1, i+1):\n            sum += j*10**(i-j)\n        if sum == i:\n            count += 1\n        i += 1\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        dec_num = num * (3 * num - 1) // 2\n        if dec_num % 10 == 0:\n            count += 1\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Initialize variables\n    i = 0\n    decagonal = 0\n    \n    # Loop until the nth decagonal number is found\n    while i < n:\n        decagonal += 10 * i + 1\n        i += 1\n        \n    # Return the nth decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 10 * n * n + 9 * n - 45  # nth decagonal number formula\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    count = 1\n    while count <= n:\n        decagonal += 10 * count\n        count += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal_num = 0\n    while count <= n:\n        decagonal_num += count\n        count += 1\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        yield num\n        num += 1\n        count += 1"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 10\n    else:\n        return 10 * (2*n - 1) + is_num_decagonal(n-1)"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = 1\n    count = 1\n    while count < n:\n        decagonal_num += 10\n        count += 1\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns True if the nth decagonal number exists, else False.\n    \"\"\"\n\n    # Initialize the count variable to keep track of the number of decagonal numbers found so far.\n    count = 0\n\n    # Initialize the current decagonal number to 10.\n    decagonal_num = 10\n\n    # Loop until we find the nth decagonal number or we reach the maximum possible value of 1000000.\n    while count < n and decagonal_num <= 1000000:\n        # Increment the count and check if the current decagonal number is equal to the nth decagonal number.\n        count += 1\n        if count == n:\n            return True\n\n        # Calculate the next decagonal number by adding the previous one to the previous one.\n        decagonal_num += 10 * (10 * (decagonal_num // 10) - 1) // 2\n\n    # If we reach here, it means the nth decagonal number doesn't exist.\n    return False"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as an input and returns True if all the elements in the list are unique, else it returns False.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is the same as the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # Check if the lists are of equal length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of equal length.\")\n        return\n    \n    # Create an empty list to store the results\n    result = []\n    \n    # Loop through the lists and subtract the corresponding elements\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1) == len(nums2):\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result\n    else:\n        print(\"The two lists should have the same length.\")\n        return None"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts the elements of two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length.\")\n\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists should have the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n    nums1 (list): first list of integers.\n    nums2 (list): second list of integers.\n\n    Returns:\n    list: result of the subtraction of the two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    else:\n        return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists and returns their element-wise subtraction\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have same length\")\n        return None\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = [0] * 10\n    while n > 0: \n        digit = n % 10 \n        frequency[digit] += 1 \n        n //= 10\n\n    for digit in frequency: \n        if digit > digit: \n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0: \n        return False # negative numbers cannot be validated\n    digit_freq = [0] * 10 # initialize an array to count the frequency of each digit\n    while n > 0: \n        digit = n % 10 # extract the last digit\n        digit_freq[digit] += 1 # increment the frequency of the digit\n        n = n // 10 # remove the last digit from the number\n    for freq in digit_freq: # check if the frequency of each digit is less than or equal to the digit itself\n        if freq > digit: \n            return False\n    return True # all digits have valid frequencies"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    # Convert the integer to a string and store each digit in a list\n    digits = [int(d) for d in str(n)]\n    \n    # Loop through the list of digits and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    \n    # If all digits pass the check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    digits = list(map(int, str(n)))\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the number to a string so that we can iterate over its digits\n    num_str = str(n)\n    \n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Convert the digit back to an integer so that we can compare it to its frequency\n        digit_int = int(digit)\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if num_str.count(str(digit_int)) > digit_int:\n            return False\n    \n    # If we made it through the loop without returning False, then the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer n and returns True if the frequency of each digit in the integer is less than or equal to the digit itself, else False.\n    '''\n    # Convert the integer into a string\n    n_str = str(n)\n\n    # Check if the length of the string is greater than 1\n    if len(n_str) > 1:\n        # Iterate through each digit in the string\n        for digit in n_str:\n            # Convert the digit back into an integer\n            digit_int = int(digit)\n            # Check if the frequency of the digit is less than or equal to the digit itself\n            if n_str.count(digit) > digit_int:\n                # If the frequency of the digit is greater than the digit itself, return False\n                return False\n        # If all digits have a frequency less than or equal to the digit itself, return True\n        return True\n    else:\n        # If the length of the string is 1, it is a single digit number and always returns True\n        return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string to iterate over its characters\n    num_str = str(n)\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    # Iterate over the characters in the string\n    for char in num_str:\n        # If the digit is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # Iterate over the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    # If all the digits have a frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as an argument and returns True if the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    # Convert integer to string\n    n = str(n)\n    \n    # Check if the length of the string is greater than 1\n    if len(n) > 1:\n        # Loop through each character in the string\n        for char in n:\n            # Convert character to integer and check if it's greater than the character\n            if int(char) > int(char):\n                return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    # Convert the integer to a string so we can iterate over its digits\n    digits = list(str(n))\n\n    # Iterate over each digit and check its frequency\n    for digit in digits:\n        if digits.count(digit) > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(i == elem for i in lst):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function checks whether all items in a list are equal to a given element.\n\n    :param lst: the list to be checked\n    :param elem: the element to be compared with\n    :return: True if all items in the list are equal to the given element, False otherwise\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for i in lst:\n        if i!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n\n    Args:\n    lst (list): A list of elements.\n    elem (any): The element to compare.\n\n    Returns:\n    bool: True if all elements are equal to the given element, False otherwise.\n    \"\"\"\n    return all(elem == x for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n    \"\"\"\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element and returns True if all the elements in the list are equal to the given element, else False.\n    \"\"\"\n    for i in lst:\n        if i!= elem:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb(b)?)?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\bb{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*(bb{2,3}|bbb{1,2})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(bb(bb)?)?'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a(bb(b)?)?\"\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_array = [0] * k\n    for i in range(n):\n        sum_array[i%k] += a[i]\n    max_sum = 0\n    for i in range(k):\n        if sum_array[i] > max_sum:\n            max_sum = sum_array[i]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Step 1: Calculate the sum of the original array\n    sum_a = sum(a)\n    \n    # Step 2: Find the sum of each contiguous subarray of size k\n    max_sum = float('-inf')\n    for i in range(n-k+1):\n        subarray_sum = sum(a[i:i+k])\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n    \n    # Step 3: Repeat the array k times and find the maximum sum of any contiguous subarray\n    max_sum_repeated = float('-inf')\n    for i in range(n-k+1):\n        repeated_array = a[i:i+k] * k\n        repeated_sum = sum(repeated_array)\n        if repeated_sum > max_sum_repeated:\n            max_sum_repeated = repeated_sum\n    \n    # Step 4: Return the maximum of the two sums\n    return max(max_sum, max_sum_repeated)"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(n):\n        temp = 0\n        for j in range(k):\n            temp += a[i]\n        if temp > max_sum:\n            max_sum = temp\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        temp_sum = sum(a[i:i+k])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            temp_sum = sum(a[i:j+1])\n            if temp_sum % k == 0:\n                max_sum = max(max_sum, temp_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = 0\n    for i in range(k):\n        sum = 0\n        for j in range(n):\n            sum += a[j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_array = []\n    for i in range(k):\n        temp = 0\n        for j in range(n):\n            temp += a[j]\n            sum_array.append(temp)\n    max_sum = sum_array[0]\n    for i in range(k):\n        for j in range(i+1, k):\n            if sum_array[j] - sum_array[i] > max_sum:\n                max_sum = sum_array[j] - sum_array[i]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    max_sum = float('-inf')\n\n    for i in range(n):\n        current_sum = 0\n        for j in range(k):\n            current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n            end = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n    # Repeating the array k times\n    temp_sum = max_sum\n    temp_start = start\n    temp_end = end\n    for i in range(k - 1):\n        # Finding the repeated array in the modified array\n        repeated_array = a[temp_start:temp_end+1]\n        # Finding the maximum sum of the repeated array\n        max_repeated_sum = max(repeated_array)\n        # Adding the maximum sum of the repeated array to the temp_sum and finding the corresponding start and end positions\n        temp_sum += max_repeated_sum\n        max_start = repeated_array.index(max_repeated_sum)\n        temp_start = temp_start + max_start\n        max_end = repeated_array.index(max_repeated_sum) + repeated_array[::-1].index(max_repeated_sum)\n        temp_end = temp_end + max_end - max_start - 1\n    return temp_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = a[0]\n    temp_sum = a[0]\n    window_size = len(a)\n    \n    # Repeat the array k times\n    for i in range(1, k):\n        for j in range(len(a)):\n            temp_sum += a[j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n            temp_sum -= a[j]\n            \n    # Check if the max sum is repeated k times\n    temp_sum = 0\n    for i in range(len(a)):\n        temp_sum += a[i]\n        if temp_sum > max_sum:\n            return max_sum\n    \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum += (i*2 + 2)**2\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum of squares to 0\n    sum_of_squares = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, 2*n, 2):\n        sum_of_squares += i**2\n        \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    This function takes an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+2, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+2, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list with maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    max_length = 0\n    \n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_length_list = [lst]\n        elif len(lst) == max_length:\n            max_length_list.append(lst)\n            \n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) == max(len(x) for x in list1):\n            max_length_list.append(lst)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    if k == 2:\n        return n*(n-1)//2\n    dp = [0]*k\n    dp[0] = 1\n    dp[1] = n\n    for i in range(2, k):\n        dp[i] = dp[i-1] + dp[i-2]*(n-1)\n    return dp[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a 2D array to store the number of ways of painting the fence.\n    dp = [[0 for j in range(k)] for i in range(n)] \n\n    # Base case:\n    # If there is only one post, we can paint it in any color.\n    for i in range(k):\n        dp[0][i] = 1\n    \n    # Fill the rest of the array using dynamic programming.\n    for i in range(1, n):\n        for j in range(k):\n            # If the previous post has the same color, we can paint the current post in any color.\n            if j > 0 and dp[i-1][j-1] > 0:\n                dp[i][j] += dp[i-1][j-1]\n            \n            # If the previous post has a different color, we can only paint the current post in that color.\n            if dp[i-1][j] > 0:\n                dp[i][j] += dp[i-1][j]\n                \n    # The total number of ways of painting the fence is the sum of all entries in the array.\n    return sum(dp[n-1])"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the DP table with 1\n    dp = [[1 for i in range(k)] for j in range(n)]\n\n    # Fill the DP table in a bottom-up manner\n    for i in range(1, n):\n        for j in range(k):\n            # If the current post is of the same color as the previous one,\n            # then we cannot use the same color as well as we cannot alternate between colors.\n            # Hence, we can only choose from the remaining colors.\n            if j == 0 or (i-1!= 0 and dp[i-1][j-1] == 1):\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    \n    return dp[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k)] for j in range(n)] \n\n    # Base case\n    for i in range(k):\n        dp[0][i] = 1\n\n    # Fill the DP table in bottom-up manner\n    for i in range(1, n):\n        for j in range(k):\n            for m in range(k):\n                if m == j:\n                    dp[i][j] += dp[i-1][m]\n                else:\n                    dp[i][j] += dp[i-1][m]\n\n    return dp[n-1][0]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case: if n is less than or equal to 2, there is only one way to paint the fence.\n    if n <= 2:\n        return 1\n    \n    # Initialize a list to store the number of ways for each color.\n    ways = [0] * k\n    \n    # If there are more than 2 adjacent posts with the same color, then we can't paint the fence.\n    # So, we add 0 to the number of ways of the previous color and subtract 1 from the current color.\n    for i in range(2, n):\n        for j in range(k):\n            ways[j] += ways[j-1]\n    \n    # Return the total number of ways.\n    return ways[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        return count_no_of_ways(n-1, k-1) * (k-1) + count_no_of_ways(n-2, k-1) * k\n    "
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    if n == 0: \n        return 0 \n    if n == 1: \n        return k \n    if k == 1: \n        return 1 \n    \n    dp = [[0 for i in range(k+1)] for j in range(n+1)] \n  \n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            if i == 1: \n                dp[i][j] = j \n            elif j == 1: \n                dp[i][j] = 1 \n            else: \n                dp[i][j] = dp[i-1][j] + dp[i-2][j-1] \n                \n    return dp[n][k] "
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    if n == 2:\n        return k*k\n    dp = [[0]*k for i in range(n)]\n    for i in range(n):\n        dp[i][i%k] = 1\n    for i in range(2,n):\n        for j in range(n-i):\n            for p in range(k):\n                if i == 2:\n                    dp[j][p] = k-1 if j%k!= p else 1\n                else:\n                    dp[j][p] = dp[j][p] + dp[j+1][p]\n                    if j%k!= p and j%k!= (p+1)%k:\n                        dp[j][p] = dp[j][p] + dp[j+2][p]\n    return dp[0][0]\n"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a list to store the number of ways to paint the fence\n    ways = [0] * k\n\n    # Base case: 1 color for n posts\n    ways[0] = 1\n\n    # Loop through all colors from 1 to k-1\n    for i in range(1, k-1):\n        # Initialize the number of ways to 0\n        ways[i] = 0\n\n        # Loop through all possible number of posts from 1 to n\n        for j in range(1, n+1):\n            # Calculate the number of ways to paint the fence for the current number of posts and color\n            # Add the number of ways for the previous color (i-1) multiplied by the remaining posts (j-1)\n            # Add the number of ways for the same color (i) multiplied by the remaining posts (j-1)\n            # Add the number of ways for the next color (i+1) multiplied by the remaining posts (j-1)\n            ways[i] += ways[i-1] * j + ways[i] * j + ways[i+1] * j\n\n    # Return the total number of ways to paint the fence\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways of painting each fence with each color.\n    ways = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    # Initialize the first and last fences with one color and all the other fences with 0 colors.\n    for i in range(n+1):\n        ways[i][1] = 1\n        ways[i][0] = 1\n    \n    # Fill in the rest of the table using dynamic programming.\n    for i in range(1, n+1):\n        for j in range(2, k+1):\n            # If the current fence has less than 2 adjacent fences with the same color, then we can paint it with any color.\n            if i < 3:\n                ways[i][j] = ways[i-1][j-1]\n            else:\n                # Otherwise, we have two options: either we paint the current fence with a different color or we leave it with the same color as the two adjacent fences.\n                ways[i][j] = ways[i-1][j-1] + ways[i-3][j-1]\n    \n    # Return the number of ways of painting the fence with k colors.\n    return ways[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Find the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m  # integer division\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    This function takes two arguments, n and m, and returns the quotient of n and m, rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n,m):\n    \"\"\"\n    This function takes two arguments, n and m, and returns the quotient of the two numbers rounded down to the nearest integer.\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n,m):\n    \"\"\"\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    if m == 0:\n        return \"Undefined\"\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Division by Zero\"\n    else:\n        quotient = n // m\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ValueError(\"Divide by zero error\")\n    else:\n        return n // m"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 == 0:\n        print(\"Cannot find the third side of the triangle. The sides are equal.\")\n    elif w**2 + h**2 < 0:\n        print(\"Cannot find the third side of the triangle. The given sides do not form a right angled triangle.\")\n    else:\n        c = math.sqrt(w**2 + h**2)\n        print(\"The third side of the triangle is:\", c)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n\n    Parameters:\n        w (float): The length of the first side of the triangle.\n        h (float): The length of the second side of the triangle.\n\n    Returns:\n        float: The length of the third side of the triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes two sides of a right-angled triangle and returns the third side.\n    \"\"\"\n    return math.sqrt(math.pow(w, 2) + math.pow(h, 2))"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w**2 + h**2\n    c = math.sqrt(a)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    This function calculates the third side of a right-angled triangle given the first two sides.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a list of heterogeneous elements.\n\n    Args:\n        lst: A list of elements to be searched for the maximum value.\n\n    Returns:\n        The maximum value found in the list.\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a given list.\n    \"\"\"\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a heterogeneous list.\n    \"\"\"\n    max_val = lst[0]\n    for i in lst:\n        if isinstance(i, int) and i > max_val:\n            max_val = i\n        elif isinstance(i, float) and i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a heterogeneous list.\n    \n    Args:\n    lst: list of values\n    \n    Returns:\n    Maximum value in the list.\n    \n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list is empty.\n    \n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n    \n    if not lst:\n        raise ValueError('List is empty')\n    \n    return max(lst)"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function takes a list as an argument and returns the maximum value in it.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    \n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    This function takes in a number and returns the sum of all its divisors.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all its divisors.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as input and returns the sum of all its divisors.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as input and returns the sum of all its divisors.\n    '''\n    # initialize a variable to store the sum of divisors\n    sum_div = 0\n\n    # iterate over all numbers from 1 to the input number\n    for i in range(1, number+1):\n\n        # check if the input number is divisible by i\n        if number % i == 0:\n\n            # add i to the sum_div\n            sum_div += i\n\n    # return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize a sum variable to 0\n    total = 0\n    # iterate from 1 to the number itself (inclusive)\n    for i in range(1, number+1):\n        # check if the number is divisible by i\n        if number % i == 0:\n            # if it is, add i to the total\n            total += i\n    # return the total\n    return total"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr) \n    inv_count = 0\n    \n    # Sorting the array using merge sort\n    def merge_sort(arr): \n        if len(arr) > 1: \n            mid = len(arr)//2 \n            L = arr[:mid] \n            R = arr[mid:] \n            \n            merge_sort(L) \n            merge_sort(R) \n            \n            i = j = k = 0\n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i += 1\n                else: \n                    arr[k] = R[j] \n                    j += 1\n                    inv_count += len(L[i:]) \n                k += 1\n                \n            while i < len(L): \n                arr[k] = L[i] \n                i += 1\n                k += 1\n                \n            while j < len(R): \n                arr[k] = R[j] \n                j += 1\n                k += 1\n            \n    merge_sort(arr) \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    count = 0\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already sorted\n        for j in range(i+1, n):\n            # Swap if the element found is greater than the next element\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Counts the number of inversions in the given array.\n    '''\n    n = len(arr)\n    count = 0\n    temp_arr = arr.copy()\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if temp_arr[i] > temp_arr[j]:\n                count += 1\n                temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n\n        merge_sort(left_arr)\n        merge_sort(right_arr)\n\n        i = j = k = 0\n\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] < right_arr[j]:\n                arr[k] = left_arr[i]\n                i += 1\n            else:\n                arr[k] = right_arr[j]\n                j += 1\n            k += 1\n\n        while i < len(left_arr):\n            arr[k] = left_arr[i]\n            i += 1\n            k += 1\n\n        while j < len(right_arr):\n            arr[k] = right_arr[j]\n            j += 1\n            k += 1\n\ndef get_inv_count(arr):\n    merge_sort(arr)\n    inv_count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    count = 0\n    for i in range(len(sorted_arr)-1):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as an input and returns the number of inversions present in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(left, right):\n    result = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\n\ndef get_inv_count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    for i in range(len(sorted_arr)-1):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. \n    If the array is already sorted, then the inversion count is 0. If the array is sorted in reverse order, \n    the inversion count is the maximum.\n    \n    Algorithm:\n    To count inversions in an array, we can use Merge Sort. Merge Sort divides the array into two halves, \n    sorts them separately, and then merges them back together. If we merge the two halves, we need to \n    keep track of the number of inversions that occur during the merge process.\n    \n    Here is the implementation of Merge Sort:\n    \n    Step 1: Divide the array into two halves.\n    Step 2: Recursively sort the two halves.\n    Step 3: Merge the two sorted halves back together while keeping track of inversions.\n    \n    Let's write the code for the function:\n    '''\n    \n    # Base Case: If the array has only one element, return 0 as there are no inversions.\n    if len(arr) == 1:\n        return 0\n    \n    # Recursive Case: Divide the array into two halves, recursively sort them, and merge them back together.\n    mid = len(arr) // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n    \n    left_inv = get_Inv_Count(left_arr)  # Count inversions in the left half of the array.\n    right_inv = get_Inv_Count(right_arr)  # Count inversions in the right half of the array.\n    merge_inv = 0  # Count inversions in the merge step.\n    \n    i = j = 0\n    merged_arr = []  # Initialize an empty array to store the merged elements.\n    \n    while i < len(left_arr) and j < len(right_arr):  # While there are still elements in the left and right halves,\n        if left_arr[i] <= right_arr[j]:  # compare the elements and add the smaller one to the merged array.\n            merged_arr.append(left_arr[i])\n            i += 1\n        else:\n            merged_arr.append(right_arr[j])\n            j += 1\n            merge_inv += len(left_arr) - i  # Add the number of elements in the left half that are greater than the current element in the right half.\n            \n    merged_arr += left_arr[i:]  # Add any remaining elements in the left half to the merged array.\n    merged_arr += right_arr[j:]  # Add any remaining elements in the right half to the merged array.\n    \n    arr[:] = merged_arr  # Copy the merged array back to the original array.\n    \n    return left_inv + right_inv + merge_inv  # Return the total number of inversions.\n"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flat_list = []\n    for i in lst:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for element in list1:\n        if type(element) == list:\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            result.extend(flatten_list(sublist))\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flat_list += flatten_list(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for i in lst:\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    This function returns the maximum aggregate from a list of tuples.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for num in stdata:\n        freq[num] += 1\n    \n    # Initialize the maximum aggregate to be zero\n    max_agg = 0\n    \n    # Calculate the maximum aggregate using the frequency of each element\n    for k, v in freq.items():\n        agg = k * v\n        if agg > max_agg:\n            max_agg = agg\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from a list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for s, t in stdata:\n        freq[s] += 1\n        freq[t] += 1\n    \n    # Calculate the aggregate for each element and store them in a dictionary\n    aggr = defaultdict(int)\n    for s, t in stdata:\n        aggr[s] += t\n        aggr[t] += s\n    \n    # Find the maximum aggregate\n    max_aggr = 0\n    for elem, freq_elem in freq.items():\n        aggr_elem = aggr[elem] // 2 # divide by 2 since each edge has been counted twice\n        max_aggr = max(max_aggr, aggr_elem)\n    \n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the sum of the transactions for each day\n    d = defaultdict(int)\n    for t in stdata:\n        d[t[0]] += t[1]\n\n    # Initialize the maximum aggregate to zero\n    max_agg = 0\n\n    # Iterate through the transactions in reverse order to calculate the maximum aggregate\n    for t in reversed(stdata):\n        # Calculate the maximum aggregate for this day\n        day_agg = d[t[0]]\n        for j in range(1, t[2]+1):\n            if t[0] - j in d:\n                day_agg += d[t[0]-j]\n            else:\n                day_agg -= d[t[0]+j]\n        # Update the maximum aggregate if necessary\n        if day_agg > max_agg:\n            max_agg = day_agg\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    dp = defaultdict(int)\n    dp[0] = 0\n    \n    # Loop through all possible subsets and calculate their aggregates\n    for i in range(1, 2**n):\n        subset_sum = sum([stdata[j][1] for j in range(n) if i & (1 << j)])\n        dp[i] = max(dp[i], dp[i-1] + subset_sum)\n        \n    return dp[2**n-1]"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    d = defaultdict(int)\n    for i in range(n):\n        d[stdata[i][0]] += stdata[i][1]\n    s = sum(d.values())\n    while s > 0:\n        m = float('-inf')\n        for i in d:\n            if d[i] > 0:\n                if d[i]*(n-1-i) > m:\n                    m = d[i]*(n-1-i)\n                    j = i\n        d[j] -= 1\n        s -= 1\n    return sum(d.keys())"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    \n    # Count the frequency of each element\n    for a, b in stdata:\n        freq[a] += 1\n        freq[b] += 1\n        \n    # Initialize a dictionary to store the total weight of each element\n    weight = defaultdict(int)\n    \n    # Calculate the total weight of each element\n    for a, b in stdata:\n        weight[a] += b\n        weight[b] += a\n        \n    # Initialize a variable to store the maximum aggregate\n    max_agg = float('-inf')\n    \n    # Calculate the maximum aggregate\n    for k in freq:\n        max_agg = max(max_agg, (weight[k] - k) / 2)\n        \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each distinct element in the list of tuples\n    freq_dict = defaultdict(int)\n    for t in stdata:\n        freq_dict[t[0]] += 1\n        freq_dict[t[1]] += 1\n    \n    # Create a dictionary to store the frequency of each distinct pair of elements in the list of tuples\n    pair_freq_dict = defaultdict(int)\n    for t in stdata:\n        pair_freq_dict[(t[0], t[1])] += 1\n    \n    # Initialize the maximum aggregate to zero\n    max_agg = 0\n    \n    # Iterate over each distinct pair of elements and calculate the aggregate for each pair\n    for p in pair_freq_dict:\n        # Calculate the frequency of the first element in the pair\n        freq1 = freq_dict[p[0]]\n        # Calculate the frequency of the second element in the pair\n        freq2 = freq_dict[p[1]]\n        # Calculate the frequency of the pair of elements\n        freq_pair = pair_freq_dict[p]\n        # Calculate the aggregate for the pair\n        agg = (freq1 * freq2) / freq_pair\n        # Update the maximum aggregate if the current aggregate is greater\n        if agg > max_agg:\n            max_agg = agg\n    \n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    for i in stdata:\n        agg_dict[i[0]] += i[1]\n    max_agg = max(agg_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each unique element in the list.\n    max_dict = defaultdict(int)\n    \n    # Calculate the maximum aggregate for each element in the list.\n    for i in range(len(stdata)):\n        max_dict[stdata[i][1]] = max(max_dict[stdata[i][1]], stdata[i][0])\n        \n    # Find the maximum aggregate.\n    max_aggregate = max(max_dict.values())\n    \n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each unique tuple\n    freq = defaultdict(int)\n    for i in stdata:\n        freq[tuple(i)] += 1\n\n    # Create a dictionary to store the aggregate of each unique tuple\n    agg = defaultdict(int)\n    for i in freq:\n        for j in range(len(i)):\n            agg[i] += i[j] ** freq[i]\n\n    # Find the maximum aggregate\n    max_agg = max(agg.values())\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    Counts the number of binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits.\n    \"\"\"\n    count = 0\n    \n    # Loop through all possible binary sequences\n    for i in range(2**n):\n        # Convert the binary number to a string of zeros and ones\n        binary = bin(i)[2:].zfill(n)\n        \n        # Calculate the sum of the first n bits and the last n bits\n        sum_first = sum(int(bit) for bit in binary[:n])\n        sum_last = sum(int(bit) for bit in binary[n:])\n        \n        # If the sums are equal, increment the count\n        if sum_first == sum_last:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        bin_i = bin(i)[2:]\n        bin_i = '0' * (n - len(bin_i)) + bin_i\n        if int(bin_i[:n], 2) == int(bin_i[n:], 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        binary_num = bin(i)[2:].zfill(n)\n        first_sum = sum([int(digit) for digit in binary_num[:n]])\n        last_sum = sum([int(digit) for digit in binary_num[-n:]])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    This function returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Args:\n    n: An integer value representing the length of the binary sequence\n\n    Returns:\n    An integer value representing the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    first_sum = 0\n    second_sum = 0\n\n    # Generate binary sequences\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(n)\n        first_sum = sum([int(digit) for digit in binary_seq[:n]])\n        second_sum = sum([int(digit) for digit in binary_seq[n:]])\n        if first_sum == second_sum:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(n)\n        if bin_str[0:n] == bin_str[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    # initialize a counter variable\n    count = 0\n\n    # loop through all possible combinations of 2n bits\n    for i in range(2**n):\n        # convert the binary number to a string\n        binary_string = bin(i)[2:]\n        # pad the string with zeros on the left to make it 2n characters long\n        binary_string = binary_string.zfill(2*n)\n        # split the string into two halves\n        first_half = binary_string[:n]\n        second_half = binary_string[n:]\n        # convert the strings to integers and add them together\n        if sum(map(int, first_half)) == sum(map(int, second_half)):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        bits = bin(i)[2:].zfill(n)\n        if bits[:n] == bits[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_i = bin(i)[2:].zfill(n)\n        bin_i_rev = bin_i[::-1]\n        if bin_i.startswith('0'*n) and bin_i_rev.startswith('0'*n) and bin_i.count('1') == bin_i_rev.count('1'):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(int(bits[:n], 2)) == sum(int(bits[n:], 2)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    for i in range(2**(n)):\n        # Convert i to binary and pad with zeros to ensure length of 2n\n        binary = bin(i)[2:].zfill(n)\n        \n        # Extract first n and last n bits and calculate their sum\n        first_n_bits = int(binary[:n], 2)\n        last_n_bits = int(binary[n:], 2)\n        sum_first_n_bits = sum(int(digit) for digit in binary[:n])\n        sum_last_n_bits = sum(int(digit) for digit in binary[n:])\n        \n        # If sum of first n bits is same as sum of last n bits, increment count\n        if sum_first_n_bits == sum_last_n_bits:\n            count += 1\n    \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function takes a dictionary as input and returns its depth.\n    \"\"\"\n    if isinstance(d, dict):\n        depth = 1\n        for v in d.values():\n            if isinstance(v, dict):\n                d_depth = dict_depth(v)\n                depth = max(depth, d_depth + 1)\n        return depth\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 1\n        else:\n            return 1 + max(dict_depth(value) for value in d.values())\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function takes a dictionary as input and returns the depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    \n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    \n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or len(d) == 0:\n        return 1\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = dict_depth(v) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    if ranges == 0:\n        return arr[index]\n    else:\n        mid = len(arr)//2\n        if index < mid:\n            return find_Element(arr[:mid], ranges-1, rotations, index)\n        else:\n            return find_Element(arr[mid:], ranges-1, rotations, index - mid)\n"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the range to search in\n    start_index = max(0, index - ranges)\n    end_index = min(len(arr), index + ranges)\n\n    # Perform the rotations\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Find the element at the specified index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    if rotations == 0:\n        return arr[index]\n    else:\n        length = len(arr)\n        n = length * ranges\n        new_index = index + length * rotations\n        new_index = new_index % n\n        return find_Element(arr, ranges, rotations - 1, new_index)"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #rotating the array according to number of rotations\n    for i in range(rotations):\n        arr = arr[ranges:] + arr[:ranges]\n        \n    #finding the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    start = ranges[rotations - 1][0]\n    end = ranges[rotations - 1][1]\n    length = end - start + 1\n    return arr[(index - start + length) % length + start]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    size = len(arr)\n    temp_index = index\n    \n    # Rotate the array based on the number of rotations\n    for i in range(rotations):\n        temp_index = temp_index % size\n        arr = arr[-temp_index:] + arr[:-temp_index]\n        \n    # Find the element at the given index\n    element = arr[temp_index]\n    \n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Step 1: Get the range of the index\n    range_start = (index - rotations) % ranges\n    range_end = range_start + rotations\n    \n    # Step 2: Get the element at the index\n    element = arr[range_start]\n    \n    # Step 3: Check if the element is at the beginning or end of the range\n    if range_start == 0 or range_end == ranges - 1:\n        element = arr[range_start]\n    else:\n        # Step 4: If the element is in the middle of the range, find the next smallest and largest elements\n        smallest = arr[range_start]\n        largest = arr[range_start]\n        for i in range(range_start, range_end):\n            if arr[i] < smallest:\n                smallest = arr[i]\n            if arr[i] > largest:\n                largest = arr[i]\n        # Step 5: Return the element at the index\n        element = smallest if arr[index] == largest else largest\n    \n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, rotations, and index as input and returns the element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): The array of integers.\n    ranges (list): A list of tuples containing ranges of values in the array.\n    rotations (int): Number of rotations to be performed on the array.\n    index (int): The index of the element to be returned.\n\n    Returns:\n    The element at a given index after number of rotations.\n    '''\n    # Find the range of values at index i\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1]:\n            break\n    \n    # Get the length of the range\n    length = ranges[i][1] - ranges[i][0] + 1\n    \n    # Calculate the new index after rotation\n    new_index = (index - ranges[i][0] + rotations * length) % length + ranges[i][0]\n    \n    # Return the element at new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # create a list of indices that correspond to the given range and number of rotations\n    indices = [i % len(arr) for i in range(ranges[0], ranges[1], rotations)]\n    \n    # find the index of the element at the given index\n    target_index = indices[index]\n    \n    # return the element at the target index\n    return arr[target_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, ranges, rotations and index and returns the element at the given index after the given number of rotations.\n    \"\"\"\n    # Convert ranges and rotations to positive values\n    ranges = abs(ranges)\n    rotations = abs(rotations)\n\n    # Calculate the total number of elements in the array\n    total_elements = len(arr)\n\n    # Calculate the new index after rotating the array\n    new_index = (index + (rotations * ranges)) % total_elements\n\n    # Return the element at the new index\n    return arr[new_index]\n"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'p\\w\\w')\n    match = pattern.search(str(words))\n    if match:\n        return match.group().split()[0], match.group().split()[1]\n    else:\n        return \"No words starting with 'p' found\"\n"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    words_starting_with_p = [word for word in words if pattern.match(word)]\n    return words_starting_with_p[:2]\n\nwords = ['apple', 'banana', 'pear', 'peach', 'pineapple']\nprint(start_withp(words))"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'p\\w+')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(\"^p\")\n    words_starting_with_p = [word for word in words if pattern.match(word)]\n    if len(words_starting_with_p) < 2:\n        return None\n    return words_starting_with_p[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w+\\W+\\w+')\n    matches = [word for word in words if pattern.match(word)]\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w*\\b')\n    for word in words:\n        if pattern.match(word):\n            return word, words[words.index(word)+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    This function returns two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*')  # Regular expression pattern to match words starting with 'p'\n    matches = [word for word in words if pattern.match(word)]  # Find all words that match the pattern\n    if len(matches) < 2:\n        return None\n    return matches[:2]  # Return the first two matches"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r'^p\\w+'\n    result = []\n    for word in words:\n        if re.match(pattern, word):\n            result.append(word)\n    if len(result) >= 2:\n        return result[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    # Create a pattern to match words starting with 'p'\n    pattern = re.compile(r'\\bp\\w*\\b')\n\n    # Find all matches of the pattern in the list of words\n    matches = [word for word in words if pattern.match(word)]\n\n    # Return the first two matches or an empty list if there are not enough words\n    return matches[:2] if len(matches) >= 2 else []"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index - 1, -1, -1):\n        if i == index - 1 or a[i] <= a[index]:\n            dp[i] = max(dp[i], a[i] + dp[index])\n    return dp[k - 1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = 0\n    max_sum_including_k = 0\n    current_sum = 0\n\n    # Traverse the array from the start to the index\n    for i in range(n):\n        # Add the element to the current sum\n        current_sum += a[i]\n\n        # If the current element is less than the previous element and the sum including the kth element is greater than the current sum,\n        # then add the previous element to the current sum and update the max_sum_including_k variable\n        if i > 0 and a[i] < a[i-1] and current_sum_including_k > current_sum:\n            current_sum -= a[i-1]\n\n        # If the current element is equal to the kth element, add it to the current sum and update the max_sum_including_k variable\n        if i > 0 and a[i] == a[k-1]:\n            current_sum_including_k += a[i]\n\n        # If the current sum is greater than the max_sum, update the max_sum variable\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum including the kth element is greater than the max_sum_including_k, update the max_sum_including_k variable\n        if current_sum_including_k > max_sum_including_k:\n            max_sum_including_k = current_sum_including_k\n\n    return max_sum_including_k"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j]+a[i])\n        if i == index:\n            for j in range(k-1):\n                if a[j] < a[k-1]:\n                    dp[i] = max(dp[i], dp[j]+a[k-1])\n    return dp[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index-1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return -1\n    \n    left = [0] * (k+1)\n    right = [0] * (k+1)\n\n    for i in range(k+1):\n        left[i] = float('-inf')\n        right[i] = float('-inf')\n\n    for i in range(index, n):\n        if a[i] >= left[k]:\n            k -= 1\n            left[k] = a[i]\n        \n        if a[i] >= right[k+1]:\n            right[k+1] = a[i]\n\n    ans = 0\n    for i in range(k+1):\n        ans += left[i] + right[i+1]\n\n    return ans"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k <= index:\n        return float('-inf')\n\n    # dp[i] = maximum sum of increasing subsequence ending at index i\n    dp = [0] * n\n\n    # fill dp[i] for i from 0 to index-1\n    max_ending_here = 0\n    for i in range(index-1, -1, -1):\n        if a[i] < a[index]:\n            max_ending_here = max(max_ending_here, dp[i]+a[index])\n        dp[i] = max_ending_here\n\n    # add a[k] to dp[i] for i from index to n-1\n    # where k > index and kth element is a[k]\n    max_sum = 0\n    for i in range(index, n):\n        if a[k] < a[i]:\n            dp[i] = max(dp[i], dp[i-1]+a[k])\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a table to store the sum of increasing subsequence up to ith index\n    dp = [0] * n\n\n    # Initialize the first element of the table as the value of the ith element\n    dp[index] = a[index]\n\n    # Loop through the table from 0 to index\n    for i in range(index):\n        # If the kth element is greater than the ith element, add it to the sum of increasing subsequence up to ith index\n        if k > i and a[k] > a[i]:\n            dp[index] = max(dp[index], dp[i] + a[k])\n\n    # Return the maximum sum of increasing subsequence up to ith index\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the list of maximum sum and maximum sum till ith index\n    max_sum_list = [0] * n\n    max_sum_till_index = 0\n\n    # Traverse through the array\n    for i in range(index, n):\n        # If the current element is greater than the kth element, we can include it in the subsequence\n        if a[i] > a[k]:\n            # Update the maximum sum till ith index\n            max_sum_till_index = max(max_sum_till_index + a[i], a[i])\n            # Update the maximum sum at the ith index\n            max_sum_list[i] = max(max_sum_list[i - 1], max_sum_till_index)\n        # If the current element is less than the kth element, we cannot include it in the subsequence, so we just copy the previous maximum sum\n        else:\n            max_sum_list[i] = max_sum_list[i - 1]\n\n    return max_sum_list[n - 1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # create a list of list to store the increasing subsequences\n    subseq = [[0 for i in range(n)] for j in range(n)]\n\n    # initialize the first row and first column\n    for i in range(n):\n        subseq[i][0] = a[i]\n\n    # fill the remaining cells of the subsequence matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            if a[j] > a[i]:\n                subseq[i][j] = subseq[i-1][j-1] + a[j]\n            else:\n                subseq[i][j] = subseq[i-1][j]\n\n    # find the maximum sum of increasing subsequence from prefix until ith index\n    prefix_sum = [0 for i in range(n)]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n\n    # find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n    max_sum = 0\n    for i in range(index+1, n):\n        if a[i] > a[k]:\n            temp_sum = prefix_sum[k-1] + subseq[k][i] - subseq[k][index-1]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    max_sum = 0\n    \n    # If the ith element is k, the maximum sum includes only the ith element\n    if a[index] == k:\n        max_sum = a[index]\n    \n    # Initialize the array with the maximum sum of increasing subsequence ending at each index\n    for i in range(index):\n        if a[i] < a[index]:\n            dp[i] = a[i]\n        else:\n            dp[i] = a[index]\n    \n    # Compute the maximum sum of increasing subsequence ending at each index\n    for i in range(index):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n        max_sum = max(max_sum, dp[i])\n    \n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple to avoid modifying the original tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Get the slice of the tuple\n    slice_tuplex = tuplex_copy[m:n]\n    \n    # Return the slice of the tuple\n    return slice_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    :param tuplex: Tuple to get the colon from.\n    :param m: Start index of the colon (inclusive).\n    :param n: End index of the colon (exclusive).\n    :return: A copy of the tuple containing the elements from index m to n (exclusive).\n    \"\"\"\n    return deepcopy(tuplex[m:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple as input and returns a new tuple containing the specified colon.\n    The first parameter is the tuple, the second and third parameters are the starting and ending indices of the colon.\n    '''\n    # Creating a deep copy of the tuple to avoid any changes to the original tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Checking if the start index is less than or equal to the end index\n    if m <= n:\n        # Reversing the tuple if the start index is greater than the end index\n        if m > n:\n            new_tuplex = new_tuplex[::-1]\n        \n        # Extracting the colon from the tuple\n        colon = new_tuplex[m:n+1]\n        \n        # Returning the colon\n        return colon\n    else:\n        # Returning an empty tuple if the start index is greater than the end index\n        return ()"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    return tuplex_copy[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = deepcopy(tuplex)\n    return colon_tuplex[m:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if m > n:\n        return None\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n < m:\n        return None\n    else:\n        return deepcopy(tuplex[m:n+1])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex):\n        return None\n    \n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[m-1:n]\n    \n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): The input tuple.\n        m (int): The starting index of the colon.\n        n (int): The ending index of the colon (exclusive).\n\n    Returns:\n        tuple: A new tuple containing the elements of the input tuple in the range [m, n).\n    \"\"\"\n\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Slice the new tuple to get the colon\n    new_tuplex = new_tuplex[m:n]\n\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Get the start and end indices\n    start_idx = m - 1\n    end_idx = n - 1\n    # Slice the tuple and return the result\n    return tuplex_copy[start_idx:end_idx+1]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products and their indices\n    products = []\n    # Loop through both lists and multiply the corresponding elements\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            # Append the product and its indices to the list of products\n            products.append((product, i, j))\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n    # Extract the specified number of largest products from the list of products\n    result = []\n    for i in range(N):\n        result.append((products[i][0], (products[i][1], products[i][2])))\n    # Return the list of largest products\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    # sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize the result list\n    result = []\n\n    # iterate over the lists, selecting one factor from each list\n    for i in range(N):\n        factor1 = nums1[i]\n        factor2 = nums2[i]\n\n        # calculate the product and add it to the result list\n        product = factor1 * factor2\n        result.append(product)\n\n    # return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        result.append(product)\n    result.sort(reverse=True)\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            products.append(product)\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize two variables to keep track of the maximum and minimum product\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Initialize two variables to keep track of the indices of the maximum and minimum product\n    max_index = None\n    min_index = None\n\n    # Iterate through the lists and calculate the product of each factor\n    for i in range(N):\n        for j in range(N):\n            # Calculate the product of the current factor from each list\n            product1 = nums1[i] * nums2[j]\n            product2 = nums1[i] * nums2[N - j - 1]\n            product3 = nums1[N - i - 1] * nums2[j]\n            product4 = nums1[N - i - 1] * nums2[N - j - 1]\n\n            # Update the maximum and minimum products and their indices if necessary\n            if product1 > max_product:\n                max_product = product1\n                max_index = (i, j)\n            if product2 > max_product:\n                max_product = product2\n                max_index = (i, N - j - 1)\n            if product3 > max_product:\n                max_product = product3\n                max_index = (N - i - 1, j)\n            if product4 > max_product:\n                max_product = product4\n                max_index = (N - i - 1, N - j - 1)\n\n            if product1 < min_product:\n                min_product = product1\n                min_index = (i, j)\n            if product2 < min_product:\n                min_product = product2\n                min_index = (i, N - j - 1)\n            if product3 < min_product:\n                min_product = product3\n                min_index = (N - i - 1, j)\n            if product4 < min_product:\n                min_product = product4\n                min_index = (N - i - 1, N - j - 1)\n\n    # Print the results\n    print(\"The maximum product is:\", max_product)\n    print(\"The maximum product is obtained by multiplying the factors\", nums1[max_index[0]], \"and\", nums2[max_index[1]])\n    print(\"The minimum product is:\", min_product)\n    print(\"The minimum product is obtained by multiplying the factors\", nums1[min_index[0]], \"and\", nums2[min_index[1]])"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the maximum value in nums1\n    max_num1 = max(nums1)\n    # Create a list to store the products\n    products = []\n    # Iterate over nums2\n    for num2 in nums2:\n        # Check if num2 is larger than the maximum value in nums1\n        if num2 > max_num1:\n            # Calculate the product of num2 and the maximum value in nums1\n            product = num2 * max_num1\n            # Add the product to the list of products\n            products.append(product)\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n    # Return the first N products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Create a list of tuples, where each tuple contains two factors from each list, and the product of those two factors\n    factors = [(nums1[i], nums2[i]) for i in range(N)]\n    products = [factor[0] * factor[1] for factor in factors]\n\n    # Sort the products in descending order\n    products.sort(reverse=True)\n\n    # Return the first N largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        for j in range(N):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two empty lists to store the products of each factor\n    products1 = []\n    products2 = []\n    \n    # Loop through each factor in nums1 and nums2 and calculate the product of each factor\n    for i in nums1:\n        for j in nums2:\n            products1.append(i * j)\n    \n    # Sort the products of nums1 in descending order\n    products1.sort(reverse=True)\n    \n    # Loop through the first N products of nums1 and append them to the list of maximum products\n    maximum_products = []\n    for i in range(N):\n        maximum_products.append(products1[i])\n    \n    return maximum_products"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    # Convert the string to a tuple of characters\n    char_tuple = tuple(str1)\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function converts a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of a given number.\n\n    Parameters:\n    n (int): The number whose left most unset bit needs to be set.\n\n    Returns:\n    int: The number with the left most unset bit set.\n    \"\"\"\n    # Initialize a variable to store the left most unset bit.\n    left_most_unset_bit = 1\n    \n    # Check if the given number is already a power of 2.\n    if n == 0:\n        return 1\n    \n    # Loop until we find the left most unset bit.\n    while (left_most_unset_bit & n)!= 0:\n        left_most_unset_bit <<= 1\n        \n    # Set the left most unset bit.\n    return n | left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    # Iterate through the bits of n from right to left, \n    # setting the leftmost unset bit to 1 and stopping when\n    # a bit is found that is already set to 1\n    for i in range(32):\n        mask = 1 << i\n        if (n & mask) == 0:\n            n |= mask\n            return n\n    # If no bit is found, return 0\n    return 0"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the left most unset bit of a number.\n    '''\n    return n | (n + 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a number.\n\n    Args:\n    n (int): The number whose left most unset bit needs to be set.\n\n    Returns:\n    int: The number with the left most unset bit set.\n    \"\"\"\n\n    # Get the binary representation of the number.\n    binary = bin(n)[2:]\n\n    # Check for the left most unset bit.\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            # Set the left most unset bit and return the number.\n            binary = binary[:i] + '0' + binary[i+1:]\n            return int(binary, 2)\n\n    # If no unset bit is found, return the original number.\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns an integer with the left most unset bit set to 1.\n    \"\"\"\n    # convert the integer to binary representation\n    binary_n = bin(n)\n    \n    # find the index of the left most unset bit\n    left_most_unset_bit_index = binary_n.rfind(\"1\")\n    \n    # create a binary string of all zeros with a length of left_most_unset_bit_index\n    zeros = \"0\" * left_most_unset_bit_index\n    \n    # concatenate the zeros and the binary representation of n with the left most unset bit set to 1\n    result = int(zeros + binary_n.replace(\"0b\", \"\"), 2)\n    \n    return result"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in a binary number.\n    \"\"\"\n    # Set all bits on the right side of the right most set bit to 1\n    n |= (n >> 1)\n    # Clear the left most set bit\n    n &= ~(n << 1)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer as input and sets the left most unset bit in the binary representation of the number.\n    '''\n    # Find the binary representation of the number and find the index of the left most set bit\n    binary_rep = bin(n)[2:]\n    index = 0\n    for bit in binary_rep:\n        if bit == '1':\n            break\n        else:\n            index += 1\n    \n    # Set the left most unset bit and return the result\n    result = n | (1 << index)\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function takes an integer as input and sets the left most unset bit.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Find the left most set bit using bit manipulation\n    left_set_bit = n & (-n)\n    \n    # Set the left most unset bit\n    right_shifted_bit = n >> 1\n    set_bit = left_set_bit | right_shifted_bit\n    \n    return set_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given integer n.\n    \"\"\"\n    return n | (n ^ (n-1)) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit of a given integer n.\n    '''\n    # Initialize the unset bit as 1\n    unset_bit = 1\n    # Iterate until we find a bit that is not set\n    while (unset_bit & n):\n        # Shift the unset bit to the left by one bit\n        unset_bit <<= 1\n    # Return the final result\n    return unset_bit"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone and returns the volume of the cone.\n    '''\n    v = (1 / 3) * math.pi * r ** 2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes in the radius r and height h of a cone and returns its volume.\n    \"\"\"\n    volume = (1.0 / 3.0) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone with base radius r and height h.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with given radius r and height h.\n    '''\n    return 1/3 * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius of a cone and its height as input parameters\n    and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(r,h))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n    return 1/3 * math.pi * r**2 * h"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the result to zero\n    result = 0\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a power of 2\n        if 2**i <= n:\n            # If it is, update the result to i\n            result = i\n    # Return the result\n    return 2**result"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    power /= 2\n    return int(power)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 = power_of_2 << 1\n    power_of_2 = power_of_2 >> 1\n    return power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 <= n:\n        n -= power_of_2\n        power_of_2 *= 2\n    return power_of_2 // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    # Find the maximum power of 2 that is less than or equal to n\n    max_power = 1\n    while max_power <= n:\n        n -= max_power\n        max_power *= 2\n    \n    return max_power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 2**(len(bin(n))-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_num = 2\n        curr_num = 1\n        for i in range(2, n+1):\n            next_num = prev_num + curr_num\n            prev_num = curr_num\n            curr_num = next_num\n        return curr_num"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        l1 = 2\n        l2 = 1\n        for i in range(2, n+1):\n            l = l1 + l2\n            l1 = l2\n            l2 = l\n        return l\n"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(lst, string):\n    '''\n    This function takes a list and a string as input and applies the given string to all the elements of the list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(string.format(i))\n    return new_lst"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(lst, fmt):\n    '''\n    This function takes a list and a format string and applies the format string to each element of the list.\n    '''\n    return [fmt.format(elem) for elem in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    This function takes a list and a string as input and applies the given string to each element of the list.\n    \"\"\"\n    result = []\n    for i in list_:\n        result.append(string.format(i))\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(lst, string):\n    \"\"\"\n    Apply the given format string to all elements in a list.\n    \"\"\"\n    return [string.format(elem) for elem in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(lst, string):\n    '''\n    This function applies a given format string to all elements in a list.\n    '''\n    return [string.format(i) for i in lst]"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        d[l1[i]][\"name\"] = l2[i]\n        d[l1[i]][\"age\"] = l3[i]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function converts three lists into a nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            result_dict[l1[i]][l2[j]] = l3[i][j]\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes three lists and converts them to nested dictionary.\n    '''\n    result = []\n\n    for i in range(len(l1)):\n        temp_dict = {}\n        temp_dict['name'] = l1[i]\n        temp_dict['age'] = l2[i]\n        temp_dict['salary'] = l3[i]\n        result.append(temp_dict)\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n\nl1 = ['apple', 'banana', 'cherry']\nl2 = ['red', 'yellow', 'purple']\nl3 = ['fruit','vegetable','seasoning']\n\nprint(convert_list_dictionary(l1, l2, l3))"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        inner_dict[l2[i]] = l3[i]\n        if l1[i] in result_dict:\n            result_dict[l1[i]].update(inner_dict)\n        else:\n            result_dict[l1[i]] = inner_dict\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {'key1': l2[i], 'key2': l3[i]}\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_list = []\n\n    # iterate over the three lists\n    for i in range(len(l1)):\n        nested_dict = {}\n        nested_dict['key1'] = l1[i]\n        nested_dict['key2'] = {'key3': l2[i], 'key4': l3[i]}\n        dict_list.append(nested_dict)\n\n    return dict_list"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        for j in range(len(l2)):\n            d[l1[i]][l2[j]] = l3[i][j]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]]['name'] = l2[i]\n        result[l1[i]]['age'] = l3[i]\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    if n == 1:\n        return 1\n    else:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    This function finds the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n % 5 == 0 and n % 4 == 0 and n % 3 == 0 and n % 2 == 0:\n        return (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n    else:\n        return n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    f = []\n    for i in range(2, n+1):\n        f.append(max(i // 2 + f[i//2-1], i // 3 + f[i//3-1], i // 4 + f[i//4-1], i // 5 + f[i//5-1], i))\n    \n    return f[-1]"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 5:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The maximum sum possible is: {get_max_sum(n)}\")"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\n    # Check if the number is 1 or less than 1\n    if n <= 1:\n        return n\n\n    # Calculate the maximum sum recursively\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    max_sum = 0\n    \n    for i in range(1, n+1):\n        if n%i == 0:\n            max_sum += i\n            \n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    max_sum = 0\n    \n    for i in range(1, n+1):\n        max_sum = max(max_sum, (i*(i+1)//2 + max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5))))\n        \n    return max_sum\n\nn = int(input(\"Enter a positive integer: \"))\n\nprint(\"The maximum sum possible is:\", get_max_sum(n))"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_lst = lst\n            max_len = len(lst)\n    return max_lst"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for lst in input_list[1:]:\n        length = len(lst)\n        if length > max_length:\n            max_length = length\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    \n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    \n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n            \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function checks if a given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function checks if a given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the string again to find the first character with count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character with count of 1 is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Iterate over the string and return the first non-repeating character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # Create an empty dictionary to keep track of the frequency of each character in the string.\n    freq_dict = {}\n\n    # Iterate through each character in the string.\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency count.\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a frequency count of 1.\n        else:\n            freq_dict[char] = 1\n\n    # Iterate through each character in the string again.\n    for char in str1:\n        # If the character has a frequency count of 1, return it.\n        if freq_dict[char] == 1:\n            return char\n\n    # If no non-repeated characters are found, return None.\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the given string to lowercase\n    str1 = str1.lower()\n    \n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through the string and count the occurrence of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Finds the first non-repeating character in a given string.\n\n    :param str1: The input string.\n    :return: The first non-repeating character in the string, or None if no such character exists.\n    \"\"\"\n    # Create a dictionary to count the occurrences of each character in the string.\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    # Find the first non-repeating character in the string.\n    for char in str1:\n        if char_counts[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None.\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    # Convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n    \n    # Create a dictionary to keep track of the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Loop through the string and return the first character that has a frequency of 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If there are no non-repeated characters, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to keep track of character counts\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # Loop through each character in the string again\n    for char in str1:\n        # If the character has a count of 1, return it\n        if char_count[char] == 1:\n            return char\n    # If no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to keep track of character frequencies\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # loop through the string and return the first character with frequency 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # if no character has frequency 1, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    # Check if the string starts and ends with the same character\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if len(string) == 1:\n        return True\n    else:\n        match = re.match(regex, string)\n        if match:\n            return True\n        else:\n            return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    \n    if string[0] == string[-1]:\n        return True\n    \n    if re.match(regex, string):\n        return True\n    \n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return True\n\nprint(check_char(\"abc\")) # False\nprint(check_char(\"aba\")) # True\nprint(check_char(\"abcd\")) # False"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    # Find the median value\n    if len(numbers) % 2 == 0:\n        # If the length of the list is even, take the average of the middle two numbers\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        # If the length of the list is odd, take the middle number\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]\n\nprint(median_numbers(4, 7, 1)) # Output: 5.5\nprint(median_numbers(1, 2, 3)) # Output: 2\nprint(median_numbers(1, 2, 2)) # Output: 2"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid-1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # Sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(set(sorted_numbers)) == 1:\n        median = sorted_numbers[0]\n    else:\n        if len(sorted_numbers) % 2 == 0:\n            median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1])/2\n        else:\n            median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    # Find the median value\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2] + sorted_list[len(sorted_list)//2 - 1]) / 2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a, b, c])\n    median = (numbers[1] + numbers[2]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function finds the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    # find the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    middle_index = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    else:\n        return numbers[middle_index]"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of digits of each number in the list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_list.append(sum(int(digit) for digit in str(num)))\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of digits of each number.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_of_digits.append(digit_sum)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(num) for num in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of their digits.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            num = abs(num)\n            num_str = str(num)\n            for digit in num_str:\n                total_sum += int(digit)\n        else:\n            num_str = str(num)\n            for digit in num_str:\n                total_sum += int(digit)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum_of_digits_list = []\n    for num in nums:\n        # convert each number to a string and then iterate through each character to get the sum of digits\n        digit_sum = sum(int(digit) for digit in str(num))\n        sum_of_digits_list.append(digit_sum)\n    return sum_of_digits_list"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function performs the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert tuples to sets to perform set operations\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Perform set XOR operation to get the result tuple\n    result_tup = tuple(set1 ^ set2)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1):\n            result += (test_tup1[i] ^ test_tup2[i],)\n        elif i < len(test_tup2):\n            result += (test_tup1[i] ^ test_tup2[i],)\n        else:\n            result += (0,)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of integers as input and performs the mathematical bitwise xor operation across them.\n    \"\"\"\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if type(i) == tuple:\n            if i not in freq:\n                freq[i] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(sorted(i)) for i in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[tuple(item)] = freq_dict.get(tuple(item), 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if type(item) == tuple:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set(tuple(i) for i in test_list)\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        nested_tup = ()\n        for j in range(len(test_tup1[i])):\n            nested_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (nested_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        temp_tup = []\n        for j in range(len(test_tup1[i])):\n            temp_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result_tup.append(tuple(temp_tup))\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Create an empty list to store the sum of elements at each index\n        sum_list = []\n        \n        # Iterate over the inner tuples at each index\n        for j in range(len(test_tup1[i])):\n            # Add the elements at each index\n            sum_list.append(test_tup1[i][j] + test_tup2[i][j])\n        \n        # Append the sum list to the result list\n        result.append(tuple(sum_list))\n    \n    # Convert the result list to a tuple and return it\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j], )\n        result_tup += (temp_tup, )\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for tup in zip(test_tup1, test_tup2):\n        result_tup += (tuple(map(sum, tup)),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup_sum = []\n        for j in range(len(test_tup1[i])):\n            tup_sum.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(tup_sum))\n    return tuple(result)"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments, a and b, and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function finds the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input and checks whether the element in tuplex exists within tuple1.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Checks whether an element exists within a tuple.\n    :param tuplex: the element to search for in the tuple\n    :param tuple1: the tuple to search in\n    :return: True if the element exists in the tuple, False otherwise\n    \"\"\"\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n    \"\"\"\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input and checks whether the element in the first tuple exists in the second tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        if tuplex in tuple1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number x as input and returns True if its parity is odd, else returns False.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even\")\n    else:\n        print(f\"{x} is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return x % 2 == 1"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!= 0: \n        return \"Odd\"\n    else: \n        return \"Even\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns 'Odd' if the parity of the number is odd,\n    and 'Even' if the parity of the number is even.\n    \"\"\"\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes a number x and returns True if the parity of x is odd, and False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(find_Parity(5))  # True\nprint(find_Parity(10))  # False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    This function takes a number as input and returns the next bigger number by rearranging the digits of the given number.\n    \"\"\"\n    # convert the number into a list of digits\n    digits = [int(d) for d in str(n)]\n    # initialize two pointers\n    i = 0\n    j = len(digits) - 1\n    # swap the digits if the left pointer is greater than the right pointer\n    while i < j and digits[i] <= digits[j]:\n        i += 1\n        j -= 1\n    # if the two pointers meet, then no bigger number can be formed\n    if i == j:\n        return -1\n    # swap the digits at the two pointers\n    digits[i], digits[j] = digits[j], digits[i]\n    # sort the digits after the swapped digit from the left pointer\n    digits[i+1:] = sorted(digits[i+1:])\n    # convert the list of digits back into a number and return it\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Split the digits of the number into a list\n    digits = list(str(n))\n    \n    # Initialize variables to keep track of the index of the digit to be swapped and its value\n    swap_index = -1\n    swap_value = None\n    \n    # Iterate over the digits from right to left\n    for i in range(len(digits)-1, 0, -1):\n        # If the digit is greater than or equal to its next digit, skip it\n        if digits[i] >= digits[i-1]:\n            continue\n        \n        # Find the index of the digit to be swapped and its value\n        swap_index = i\n        swap_value = digits[i-1]\n        \n        # Swap the digits and break out of the loop\n        digits[i], digits[i-1] = digits[i-1], digits[i]\n        break\n    \n    # If no digit was swapped, the number is already in descending order\n    if swap_index == -1:\n        return -1\n    \n    # Rebuild the number from the list of digits and return it\n    result = int(''.join(digits))\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    This function takes a number as input and returns the next bigger number by rearranging its digits.\n    \"\"\"\n    # Convert the input number to a list of digits\n    digits = list(str(n))\n    \n    # Find the index of the rightmost non-9 digit\n    rightmost_non_9_index = -1\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i]!= '9':\n            rightmost_non_9_index = i\n            break\n    \n    # If all digits are 9, return None\n    if rightmost_non_9_index == -1:\n        return None\n    \n    # Find the rightmost digit that is smaller than its adjacent digits\n    left_adjacent_digit = digits[rightmost_non_9_index-1]\n    for i in range(rightmost_non_9_index-2, -1, -1):\n        if digits[i] < digits[rightmost_non_9_index-1] < digits[i+1]:\n            left_adjacent_digit = digits[i]\n            break\n    \n    # Swap the rightmost non-9 digit with the rightmost digit that is smaller than its adjacent digits\n    digits[rightmost_non_9_index-1], digits[rightmost_non_9_index] = digits[rightmost_non_9_index], digits[rightmost_non_9_index-1]\n    \n    # Sort the remaining digits in ascending order\n    digits[rightmost_non_9_index+1:] = sorted(digits[rightmost_non_9_index+1:])\n    \n    # Convert the sorted digits back to an integer and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string so we can manipulate it\n    num_str = str(n)\n    \n    # Find the index of the first digit that needs to be swapped\n    i = 0\n    while i < len(num_str) - 1 and num_str[i] <= num_str[i+1]:\n        i += 1\n    \n    # If no swaps are needed, return -1\n    if i == len(num_str) - 1:\n        return -1\n    \n    # Swap the digits at the two indices\n    num_str = list(num_str)\n    num_str[i], num_str[i+1] = num_str[i+1], num_str[i]\n    num_str = ''.join(num_str)\n    \n    # Convert the string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Rearranges the digits of a number to create the next bigger number.\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the index of the rightmost digit that needs to be swapped\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    # If all digits are in descending order, return None\n    if i < 0:\n        return None\n    \n    # Find the index of the smallest digit to the right of the swapped digit\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the two digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reconstruct the number from the modified list of digits\n    return int(\"\".join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert n to a string\n    n_str = str(n)\n    # get the length of the string\n    n_len = len(n_str)\n    # create a list of digits\n    digits = [int(d) for d in n_str]\n    # loop through the digits from the end to the beginning\n    for i in range(n_len - 1, 0, -1):\n        # find the largest digit that is smaller than the digit at position i\n        for j in range(i):\n            if digits[j] < digits[i]:\n                # swap the two digits\n                digits[i], digits[j] = digits[j], digits[i]\n                # convert the list of digits back to a string\n                n_new = ''.join([str(d) for d in digits])\n                # convert the new string back to an integer and return it\n                return int(n_new)\n    # if no larger number can be created, return None\n    return None"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    n_len = len(digits)\n    for i in range(n_len - 1, 0, -1):\n        if digits[i] > digits[i-1]:\n            j = i - 1\n            while j >= 0 and digits[j] > digits[i]:\n                j -= 1\n            digits[i], digits[j] = digits[j], digits[i]\n            digits[i+1:] = sorted(digits[i+1:])\n            return int(\"\".join(map(str, digits)))\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    digits = list(str(n))\n    \n    # Find the rightmost digit that needs to be incremented\n    i = len(digits) - 1\n    while i > 0 and digits[i] >= digits[i-1]:\n        i -= 1\n    \n    # If no such digit found, return -1\n    if i == 0:\n        return -1\n    \n    # Find the smallest digit greater than the digit at index i-1\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    \n    # Swap the digit at index i-1 with the digit at index j\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    \n    # Reconstruct the number and convert it to an integer\n    return int(''.join(digits[:i] + digits[i:][::-1]))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Find the index of the first digit that needs to be moved\n    i = 0\n    while i < len(digits) - 1 and digits[i] <= digits[i + 1]:\n        i += 1\n    # If no such digit exists, return -1 (there is no bigger number)\n    if i == len(digits) - 1:\n        return -1\n    # Move the digit at index i to the end of the list\n    digits[i], digits[-1] = digits[-1], digits[i]\n    # Sort the remaining digits in ascending order\n    digits[i + 1:] = sorted(digits[i + 1:])\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]  # convert to a list of digits\n    max_index = len(digits) - 2  # the last digit cannot be moved\n    for i in range(len(digits) - 2):\n        if digits[i] < digits[i+1] < digits[i+2]:\n            max_index = i\n    if max_index == len(digits) - 2:  # no bigger number can be created\n        return None\n    for i in range(max_index, len(digits)):\n        if digits[max_index] < digits[i]:\n            digits[max_index], digits[i] = digits[i], digits[max_index]\n            break\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            if len(heap) < k:\n                heapq.heappush(heap, pair)\n            else:\n                if pair < heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, pair)\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((abs(num1 - num2), num1, num2))\n    heapq.heapify(pairs)\n    result = []\n    for i in range(k):\n        if not pairs:\n            break\n        result.append(heapq.heappop(pairs))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    for i in range(k):\n        result.append((heapq.heappop(heap)[1], heapq.heappop(heap)[2]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heapq.heapify(pairs)\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            new_pair = (num1 + num2, num1, num2)\n            if len(pairs) < k:\n                heapq.heappush(pairs, new_pair)\n            else:\n                smallest_pair = heapq.heappushpop(pairs, new_pair)\n                \n    return pairs\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\n\nprint(k_smallest_pairs(nums1, nums2, k))"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1 + num2, num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return [(p[1], p[2]) for p in sorted(pairs)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1+num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heapq.nsmallest(k, heap)"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n    for i in range(k):\n        pair = heapq.heappop(heap)\n        pairs.append((pair[1], pair[2]))\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    :param lst: A list of tuples.\n    :return: The minimum product from the pairs of tuples.\n    \"\"\"\n    result = None\n    for t in lst:\n        # Compute the product of the tuple\n        product = 1\n        for x in t:\n            product *= x\n        # Update the result if necessary\n        if result is None or product < result:\n            result = product\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for t1 in list1:\n        for t2 in list1:\n            if t1!= t2:\n                product = t1[0] * t2[1] * t1[1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Returns the minimum product of two tuples in lst.\n    \"\"\"\n    min_prod = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            prod = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for tup1 in list1:\n        for tup2 in list1:\n            if tup1!= tup2:\n                product = tup1[0] * tup1[1] * tup2[0] * tup2[1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for tup in list1:\n        if len(tup) == 2:\n            product = tup[0] * tup[1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in listval:\n            if i < min_val:\n                min_val = i\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a list of heterogeneous values.\n    \"\"\"\n    min_val = lst[0]\n    for val in lst:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    \n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a list of heterogeneous values.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    \n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    \n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a string in snake case and converts it to camel case.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word into parts using snake case separator\n    parts = word.split('_')\n    # Capitalize the first letter of each part except the first one\n    camel_parts = [p.capitalize() for i, p in enumerate(parts) if i > 0]\n    # Combine the parts into a single string\n    camel_case_word = ''.join(camel_parts)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function converts a snake case string to a camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of the first word\n    words[0] = words[0].capitalize()\n    # Combine the words into a single string with camel case\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title().replace(\"_\", \"\")"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    parts = re.split('_', word)\n    # Capitalize the first letter of each part except the first one\n    camel_case_parts = [parts[0]] + [p.capitalize() for p in parts[1:]]\n    # Combine the parts into a single string\n    camel_case_word = ''.join(camel_case_parts)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a list of integers.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list with all odd numbers removed.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Removes odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    :param l: a list of integers\n    :return: a new list with the odd numbers removed\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(zip(*list1))[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # initialize an empty list to store the extracted elements\n    result = []\n    \n    # loop through the list and extract the nth element of each tuple\n    for item in list1:\n        result.append(item[n-1])\n    \n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as input and an integer n as input and returns the nth element of the tuples in the list.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and returns the nth element from each tuple.\n    For example, if the input list is [(1,2,3), (4,5,6), (7,8,9)], and n=2,\n    then the output will be [2, 5, 8].\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(zip(*list1))[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as input and returns the nth element from each tuple.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n\n    :param list1: First sequence of values.\n    :param list2: Second sequence of values.\n    :return: True if any value exists in both sequences, False otherwise.\n    \"\"\"\n    # Convert list1 to a set to make it faster to search for values in list2.\n    set1 = set(list1)\n    for value in list2:\n        if value in set1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function checks whether any value in a sequence exists in a sequence or not.\n    '''\n\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n    list1 (list): A list of values.\n    list2 (list): A list of values.\n\n    Returns:\n    bool: True if there is any overlapping value between list1 and list2, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if any value in list1 is also present in list2, else False.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check if any value in list1 is also in list2.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in list1 is also present in list2.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and checks if there is any overlapping value between them.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    if n == 2:\n        return (arr[0], arr[1]) if arr[0] * arr[1] > arr[1] * arr[0] else (arr[1], arr[0])\n    \n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array as input and returns the pair of integers that have the highest product.\n    '''\n    n = len(arr)\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for i in range(n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        \n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    \n    return (max1*max2, min1*min2) if max1*max2 > min1*min2 else (min1*min2, max1*max2)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    \n    # Initialize maximum and second maximum values\n    max_num = arr[0]\n    second_max = arr[1]\n    \n    # Find the maximum value in the array\n    for i in range(2, n): \n        if arr[i] > max_num: \n            second_max = max_num \n            max_num = arr[i] \n        elif arr[i] > second_max: \n            second_max = arr[i] \n            \n    # Find the second maximum value in the array\n    for i in range(2, n): \n        if arr[i] < second_max and arr[i]!= max_num: \n            second_max = arr[i] \n            \n    # Find the product of maximum and second maximum values\n    max_product = max_num * second_max\n    \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    This function finds the pair with the highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Returns a tuple containing the two numbers with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function finds a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_index1 = -1\n    max_index2 = -1\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_index1 = i\n                max_index2 = j\n    \n    return (max_index1, max_index2, max_product)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    max_pair = (arr[0], arr[1])\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair, max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    max_num_index = 0\n    second_max_num = arr[1]\n    second_max_num_index = 1\n    if max_num < second_max_num:\n        max_num, second_max_num = second_max_num, max_num\n        max_num_index, second_max_num_index = second_max_num_index, max_num_index\n\n    for i in range(2, len(arr)):\n        if arr[i] > max_num:\n            second_max_num = max_num\n            second_max_num_index = max_num_index\n            max_num = arr[i]\n            max_num_index = i\n        elif arr[i] > second_max_num and arr[i]!= max_num:\n            second_max_num = arr[i]\n            second_max_num_index = i\n\n    return (max_num, arr[max_num_index], second_max_num, arr[second_max_num_index])"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tup in Input:\n        if tup[0] not in result:\n            result[tup[0]] = [tup]\n        else:\n            result[tup[0]].append(tup)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a set of all first elements in the tuples\n    first_elements = set(tuple[0] for tuple in Input)\n    # initialize an empty dictionary to store the groups of tuples\n    groups = {}\n    # iterate over all first elements\n    for element in first_elements:\n        # find all tuples with the current element as their first element\n        tuples_with_element = [tuple for tuple in Input if tuple[0] == element]\n        # add the tuples to a new group in the dictionary\n        groups[element] = tuples_with_element\n    # return the dictionary of groups\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for tup in Input:\n        if tup[0] not in groups:\n            groups[tup[0]] = []\n        groups[tup[0]].append(tup[1:])\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store the results\n    results = {}\n    \n    # iterate over the input tuples and group them by their first element\n    for tup in Input:\n        key = tup[0]\n        if key not in results:\n            results[key] = [tup]\n        else:\n            results[key].append(tup)\n    \n    # return the list of tuples for each group\n    return list(results.values())"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples with the same first element.\n    '''\n    groups = []\n    for tup in Input:\n        if tup[0] in [g[0] for g in groups]:\n            continue\n        else:\n            groups.append(tup)\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    groups = {}\n    for tup in Input:\n        key = tup[0]\n        if key in groups:\n            groups[key].append(tup)\n        else:\n            groups[key] = [tup]\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a dictionary with keys as common first element in the tuples and \n    values as lists of tuples containing the common first element.\n    '''\n    groups = {}\n    for tup in Input:\n        key = tup[0]\n        if key in groups:\n            groups[key].append(tup)\n        else:\n            groups[key] = [tup]\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element == None:\n            common_element = i[0]\n        elif common_element!= i[0]:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples where each tuple contains all the elements that have the same first element as the first tuple element.\n    '''\n    result = []\n    first_element = Input[0][0]\n    temp_list = []\n    for tup in Input:\n        if tup[0] == first_element:\n            temp_list.append(tup)\n        else:\n            result.append(temp_list)\n            temp_list = []\n            first_element = tup[0]\n            temp_list.append(tup)\n    result.append(temp_list)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize a dictionary to store the tuples\n    d = {}\n    \n    # iterate through the list of tuples and group them by their first element\n    for i in Input:\n        if i[0] not in d:\n            d[i[0]] = []\n        d[i[0]].append(i)\n        \n    # iterate through the dictionary and check for common first elements\n    for i in d.values():\n        if len(i) > 1:\n            return i[0][0]\n        \n    # if no common first element is found, return None\n    return None"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    This function finds the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an argument and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    max_lst = [x for x in lst if len(x) == max_len]\n    return max_lst"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an input and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([math.floor(n * 10) / 10 for n in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    Round every number in the list and return the total sum multiplied by the length of the list.\n    \"\"\"\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    return total_sum * len(lst)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    # Initialize sum variable\n    sum = 0\n    \n    # Iterate through first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Calculate cube of even natural number and add to sum\n        sum += i**3\n    \n    # Return the sum of cubes of first n even natural numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2): \n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function calculates the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2): \n        sum += i**3\n    return sum\n\nprint(cube_Sum(10)) # Output: 2700"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(2, n*2, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, n*2, 2):\n        # add cube of the number to sum\n        sum += i**3\n        \n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of strings.\n    delimiter (str): The delimiter to use for concatenating the strings.\n\n    Returns:\n    str: A concatenated string.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple as input and a delimiter as a string argument.\n    It concatenates each element of the tuple by the delimiter and returns the concatenated string.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function concatenates each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1] # removing the extra delimiter at the end"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function concatenates each element of the tuple with the specified delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n*n)"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    avg_cubes = sum_cubes / n\n    return avg_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function finds the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    avg_of_cubes = sum_of_cubes / n\n    return avg_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes\n\nn = int(input(\"Enter the value of n: \"))\naverage = find_Average_Of_Cube(n)\nprint(f\"The average of cubes of first {n} natural numbers is {average}.\")"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and finds the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    avg_of_cubes = sum_of_cubes/n\n    return avg_of_cubes\n\nprint(find_Average_Of_Cube(5)) # Output: 12.0"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    avg_cubes = sum_cubes / n\n    return avg_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    # initialize sum and count variables\n    sum_cubes = 0\n    count = 0\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # calculate the cube of i and add it to the sum\n        cube = i ** 3\n        sum_cubes += cube\n        # increment the count\n        count += 1\n    # calculate the average\n    average = sum_cubes / count\n    # return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n\nprint(find_Average_Of_Cube(5)) # Output: 2.0"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[::-1][0])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    rear_tuple = ()\n    for word in test_tuple:\n        rear_tuple += (word[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings as input and returns a new tuple with only the rear index element of each string.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return tuple(rear_elements)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for s in test_tuple:\n        result += (s[-1],)\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    rear_tuple = tuple([test_string[rear_index] for test_string in test_tuple])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = lambda x: x.split()[-1]\n    return tuple(map(rear_index, test_tuple))"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and an element as input and returns the number of sublists in the list that contain the element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    \"\"\"\n    This function takes a list and an element as input and returns the number of sublists\n    containing the given element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list) and x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes a list and an element as inputs and returns the number of sublists\n    containing the element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list as input and returns the count of sublists containing a particular element x.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if type(list1[i]) == list: \n            count += count_element_in_list(list1[i], x) \n        elif list1[i] == x: \n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function filters odd numbers from a list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function filters out all the odd numbers from the given list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(date_pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', dt):\n        year, month, day = map(int, dt.split('-'))\n        return '{:02d}-{:02d}-{}'.format(day, month, year)\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'^(\\d{4})-(\\d{2})-(\\d{2})$')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format, please enter yyyy-mm-dd'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    result = pattern.search(dt)\n    if result:\n        year = result.group(1)\n        month = result.group(2)\n        day = result.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Converts a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regex to extract the year, month, and day from the input date string\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        # Reorder the date components and join them into the desired output format\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function implements the shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Sorts the given array using shell sort algorithm.\n    '''\n\n    # calculate gap size\n    n = len(my_list)\n    gap = n // 2\n\n    # perform insertion sort on sub-lists of size gap\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function takes an unsorted list as input and sorts it using the shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    \n    # Calculate the gap between elements using Knuth's formula.\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Insert the current element at the correct position in the sorted part of the list.\n            current_element = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_element:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_element\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function takes a list as input and sorts it using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while  j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            my_list[j] = temp\n        \n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += ((test_tup1[i] and test_tup2[i]),)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Create an empty tuple to store the elementwise and tuples\n    result_tup = ()\n    \n    # Loop through the two tuples and extract the elementwise and tuples\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    \n    # iterate over the tuples using the zip function\n    for tup in zip(test_tup1, test_tup2):\n        # extract the elements of the tuple using the indexing notation\n        element1, element2 = tup\n        \n        # perform the elementwise and operation\n        and_element = element1 & element2\n        \n        # append the result to the list\n        result.append(and_element)\n    \n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Create an empty list to store the result tuples\n    result = []\n\n    # Iterate over the first tuple\n    for tup1 in test_tup1:\n        # Iterate over the second tuple\n        for tup2 in test_tup2:\n            # Check if the two tuples have the same length\n            if len(tup1) == len(tup2):\n                # Create a new tuple with the elementwise and values\n                new_tup = tuple(t1 & t2 for t1, t2 in zip(tup1, tup2))\n                # Append the new tuple to the result list\n                result.append(new_tup)\n\n    # Return the result list of tuples\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup = and_tup + (test_tup1[i] & test_tup2[i], )\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        raise ValueError(\"The coefficient of x^2 is zero, cannot find the directrix.\")\n    else:\n        d = b ** 2 - 4 * a * c\n        if d < 0:\n            raise ValueError(\"The quadratic equation has complex roots, cannot find the directrix.\")\n        else:\n            x = (-b + d ** 0.5) / (2 * a)\n            return x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two roots of the discriminant\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    \n    # Check which root is the correct one\n    if abs(root1) < 1e-10:\n        return root2\n    elif abs(root2) < 1e-10:\n        return root1\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than 0\n    if discriminant > 0:\n        # Calculate the two possible values of the directrix\n        x1 = (-b - discriminant**0.5)/(2*a)\n        x2 = (-b + discriminant**0.5)/(2*a)\n        \n        # Print the two possible values of the directrix\n        print(\"The two possible values of the directrix are:\", x1, \"and\", x2)\n    \n    # If the discriminant is less than or equal to 0, there are no real solutions to the quadratic equation\n    else:\n        print(\"There are no real solutions to the quadratic equation.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"This is not a parabola.\"\n    else:\n        # Calculate the directrix formula\n        x = -b / (2 * a)\n        \n        # Calculate the y-intercept\n        y = c - b**2 / (4 * a)\n        \n        # Return the directrix as a tuple\n        return (x, y)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes the coefficients of a quadratic equation and returns the value of the directrix.\n    '''\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return x1, x2\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes in three coefficients of a parabola and returns the value of the directrix.\n    '''\n    return (-b + ((b**2 - 4*a*c)**0.5))/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n        a (float): The coefficient of the quadratic term.\n        b (float): The coefficient of the linear term.\n        c (float): The constant term.\n\n    Returns:\n        float: The x-coordinate of the directrix.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Coefficient a cannot be 0.\")\n    elif b == 0:\n        return -c / a\n    else:\n        return (-b + (b**2 - 4*a*c) ** 0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x = (-b - discriminant**0.5)/(2*a)\n        return x\n    else:\n        return \"There is no real solution.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be zero.\")\n    else:\n        x = -b/(2*a)\n        return x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"The parabola has no real directrix.\"\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return f\"The parabola has two directrices: {x1} and {x2}.\""
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as arguments and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert both lists to sets to make it easier to find common elements\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    common_set = set1.intersection(set2)\n\n    # If the intersection is not empty, return True\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) / 2 * height\n    median = area / (base1 + base2)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the median length\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = ((base1 + base2) / 2) * height\n    \n    # Calculate the median of the trapezium\n    median_trap = (2 * area) / (base1 + base2)\n    \n    # Return the median length of the trapezium\n    return median_trap"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function finds the median length of a trapezium.\n    Parameters:\n    base1 (int): Base of the left trapezium side.\n    base2 (int): Base of the right trapezium side.\n    height (int): Height of the trapezium.\n    Returns:\n    float: Median length of the trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Finds the median length of a trapezium given its bases and height.\n    '''\n    # Calculate the half of the median length\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the median area\n    median_area = area / 2\n    \n    # Calculate the width of the trapezium\n    width = 2 * ((median_area / height) ** 0.5)\n    \n    # Return the median length\n    return width"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = ((base1 + base2) / 2) * height\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the longer base\n    if base1 > base2:\n        longer_base = base1\n    else:\n        longer_base = base2\n        \n    # Calculate the median length\n    median = (longer_base + height) / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the given number is greater than the elements of the array.\n    '''\n    return all(number > element for element in arr)"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n\narr = [2, 4, 6, 8, 10]\nnumber = 5\nif check_greater(arr, number):\n    print(\"The number is greater than the elements of the array.\")\nelse:\n    print(\"The number is not greater than the elements of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes two arguments:\n    1. arr (an array of integers)\n    2. number (an integer)\n    It returns True if the number is greater than all the elements of the array, and False otherwise.\n    '''\n    for i in arr:\n        if i < number:\n            return False\n    return True"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\Sb+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    # Extract the last digit of the number\n    last_digit = n % 10\n\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as an input and returns the last digit of that integer.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of n.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Using modulus operator to get the last digit\n    last_digit = n % 10\n    \n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = -n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an input and returns the last digit of that number.\n    '''\n    # Using modulus operator to get the last digit\n    last = n % 10\n    \n    return last"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing negative numbers from the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the negative numbers from the input list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Returns the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list with all the negative numbers.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Return a new list containing only negative numbers from the given list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes in a string and returns a new string with all odd characters removed.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            continue\n        new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for i, c in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters from it.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of bidirectional tuple pairs in the list.\n    A tuple pair is considered bidirectional if the first element of one tuple is equal to the second element of the other tuple.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] or test_list[i][1] == test_list[j][0]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and (test_list[j][::-1] == test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and (test_list[i][1] == test_list[j][0] or test_list[j][1] == test_list[i][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and (test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num = single_num * 10 + num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of integers as input and returns a single integer.\n    '''\n    single_num = 0\n    for i in L:\n        single_num = single_num * 10 + i\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    This function takes a list of multiple integers and returns a single integer that is the product of all integers in the list.\n    \"\"\"\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize the variable to store the result as 0\n    result = 0\n    \n    # Iterate through the list and add each integer to the result variable\n    for num in L:\n        result += num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b(very|extremely|quite|rather|really|somewhat|mostly|usually|relatively|generally|usually)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|really|extremely|quite)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return f\"Adverb: {match.group(1)} | Position: {match.start()}\"\n    else:\n        return \"Adverb not found!\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|extremely|quite|really|rather|actually|just|fairly|nearly|seriously|almost|really|rarely|somewhat|unusually|remarkably|quite)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b(really|very|extremely|quite|too|much|little|rather|almost|nearly|well|badly|fairly|actually|positively)\\b', re.IGNORECASE)\n    matches = adverb_pattern.search(text)\n    if matches:\n        return matches.group(), matches.start()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    # If there are no adverbs in the text, return None\n    if not adverbs:\n        return None\n    # Find the first adverb and its position in the text\n    first_adverb = adverbs[0]\n    position = text.find(first_adverb)\n    # Return a tuple containing the first adverb and its position\n    return (first_adverb, position)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(f\"Adverb: {match.group()}, Position: {match.start()}\")"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the text using regex\n    adverbs = re.findall(r'\\b(very|extremely|quite|really|rather|really|very|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    matches = pattern.finditer(text)\n\n    for match in matches:\n        print(f\"Adverb: {match.group()}, Position: {match.start()}\")\n\n    if not matches:\n        print(\"No adverb found in the given sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns the position of the first adverb in the string and the adverb itself.\n    If no adverb is found, it returns -1.\n    '''\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    match = pattern.search(text)\n    if match:\n        return match.start(), match.group()\n    else:\n        return -1, ''"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns its surface area.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length as input and returns the surface area of a cube of that length.\n    '''\n    return 6*(l**2)"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6 * (l**2)\n    return surfacearea"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns the surface area of the cube.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 4*l*l\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of the cube as input and returns the surface area of the cube.\n    '''\n    surfacearea = 6 * l**2\n    return surfacearea"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\nnums = array('i', [1, 2, 3, -4, 5, 6, -7, 8, 9, -10])\nratio = positive_count(nums)\nprint(ratio)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of positive numbers in the array.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    ratio = positive_count / len(nums)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for num in list1:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    This function finds the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for num in list1:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function returns the largest negative number in a given list of numbers.\n    \"\"\"\n    largest_negative = None\n    for num in list1:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n    return largest_negative"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    If there are no negative numbers in the list, it returns None.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = float('-inf')  # initialize max_num to negative infinity\n    for num in list1:  # iterate through list1\n        if num < 0 and num > max_num:  # check if num is negative and greater than max_num\n            max_num = num  # update max_num if num is greater than max_num\n    if max_num == float('-inf'):  # check if max_num was not updated\n        return \"No negative numbers found in the list\"  # return error message if no negative numbers found\n    else:  # max_num was updated\n        return max_num  # return the largest negative number found in the list"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of integers and returns the largest negative number from the list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    if len(neg_list) > 0:\n        return max(neg_list)\n    else:\n        return None"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    if largest == float('-inf'):\n        return \"None of the numbers in the list are negative\"\n    else:\n        return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    This function finds the largest negative number from a list of numbers.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of integers as input and returns the largest negative number from the list.\n    '''\n    max_neg = list1[0]\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(K))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[K:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = ()\n        for i in range(len(tup)):\n            if i >= K and i < len(tup) - K:\n                new_tup += (tup[i],)\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        result.append(tuple(tpl[:K] + tpl[K+1:]))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tup[:K] + tup[K+1:]\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[i] for i in range(len(tup)) if i < len(tup)-K or i >= len(tup)-K+len(tup)))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tpl in test_list:\n        trimmed_tpl = tuple([x[K:] if isinstance(x, str) else x[K:] for x in tpl])\n        trimmed_list.append(trimmed_tpl)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[:K] + tup[-K:]))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        new_tup = tup[K:]\n        test_list[test_list.index(tup)] = new_tup\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        for i in range(K):\n            tup = tup[1:]\n        test_list[test_list.index(tup)] = tup\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Perform index-wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n    test_tup1 (tuple): A tuple of numbers.\n    test_tup2 (tuple): A tuple of numbers with the same length as test_tup1.\n\n    Returns:\n    tuple: A new tuple containing the element-wise multiplication of the two input tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples should be of equal length\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and performs index-wise multiplication of their elements.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Perform index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and performs index-wise multiplication of their elements.\n    '''\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        return result_tup\n    else:\n        print(\"Both tuples should have same length.\")"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count:\n            result[item] = count[item]\n        else:\n            result[item] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return tuple((count[i], i) for i in tup)"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for i in tup:\n        if i in count_dict:\n            result[i] = count_dict[i]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function counts the occurrence of all elements of list in a tuple.\n    :param tup: tuple\n    :param lst: list\n    :return: dictionary with keys as elements of lst and values as their respective counts in tup\n    \"\"\"\n    count_dict = Counter(lst)\n    for element in tup:\n        if element in count_dict:\n            count_dict[element] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes a tuple and a list as input and returns a dictionary with the counts of all elements of the list in the tuple.\n    \"\"\"\n    # Convert the tuple to a list\n    tup_list = list(tup)\n    # Count the occurrences of each element in the list in the tuple\n    count_dict = Counter(tup_list)\n    # Count the occurrences of each element in the list in the input list\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    # Return the final dictionary\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments:\n        1. Tuple: A tuple of elements which we want to count the occurrence.\n        2. List: A list of elements where we want to count the occurrence of the tuple elements.\n\n    Returns a dictionary with the count of each tuple element in the list.\n    '''\n    count_dict = {}\n    for i in tup:\n        count = lst.count(i)\n        count_dict[i] = count\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tup = []\n    for i in tup:\n        count_tup.append(count_dict[i])\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for item in tup: \n        if item in count: \n            print(f\"The element {item} is present {count[item]} times in the tuple.\")\n        else: \n            print(f\"The element {item} is not present in the tuple.\")"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(lst)\n    for element in tup:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    result = []\n    for i in tup:\n        if i in c:\n            result.append(c[i])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of the cubes of individual elements in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of cubes of the numbers.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of cubes of individual elements.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of \n    the first n Perrin numbers.\n    \"\"\"\n    p = 1\n    s = 0\n    for i in range(n):\n        s += p\n        p += 1\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of perrin numbers.\n    '''\n    p = 1\n    s = 0\n    for i in range(1, n+1):\n        s += p\n        p += 1\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i == 1:\n            sum += 1\n        else:\n            sum += 2 * i * (i-1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    This function calculates the sum of Perrin numbers up to n.\n    '''\n    perrin_nums = [2]\n    i = 3\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, i)):\n            perrin_nums.append(i)\n        i += 2\n    return sum(perrin_nums)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\nprint(cal_sum(0))  # Output: 0\nprint(cal_sum(1))  # Output: 1\nprint(cal_sum(5))  # Output: 27\nprint(cal_sum(10)) # Output: 251"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    \"\"\"\n    This function takes an integer as input and returns the sum of perrin numbers.\n    \"\"\"\n    # initializing the variable sum to 0\n    sum = 0\n    \n    # iterating through the range of n+1\n    for i in range(1, n+1):\n        # adding the ith perrin number to the sum\n        sum += (i * (3*i - 1)) // 2\n        \n    # returning the sum\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    This function takes an integer 'n' as input and returns the sum of Perrin numbers up to n.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 1 + cal_sum(n-1) + cal_sum(n-2)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\nprint(cal_sum(5)) # Output: 22"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1) + cal_sum(n-2)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculates the sum of Perrin numbers up to a given n.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += 1/(1+(i*i))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extract specified size of strings from a list of string values.\n\n    Parameters:\n    lst (list): List of string values.\n    size (int): Size of the extracted strings.\n\n    Returns:\n    list: List of extracted strings.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), size):\n        result.append(\"\".join(lst[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a list of strings of the specified size.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    n = len(str)\n    return [s[:n] for s in l if len(s) >= n]"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    This function takes a list of string values and a size value as input and returns a list of extracted strings.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), size):\n        result.append(' '.join(lst[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), size):\n        result.append(' '.join(lst[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size and returns a new list containing\n    only the specified size of strings from the input list.\n    '''\n    new_list = []\n    for s in str_list:\n        if len(s) == size:\n            new_list.append(s)\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all the whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext = \"This is a sample text with whitespaces.\"\nprint(remove_whitespaces(text))"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on sale if sale amount is less than actual cost.\n    Returns 0 otherwise.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on a sale if the sale amount is less than or equal to the actual cost,\n    otherwise it returns 0.\n    '''\n    if sale_amount <= actual_cost:\n        loss_percent = (1 - (sale_amount / actual_cost)) * 100\n        loss_amount = sale_amount * loss_percent / 100\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return abs(loss)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes actual_cost and sale_amount as arguments and returns the loss amount if sale_amount is less than actual_cost else it returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It returns the loss amount if sale_amount is less than actual_cost, otherwise it returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of all even factors of n.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i!= i:\n                sum += n // i\n    if n % 2 == 0:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum \n\nprint(\"Enter a number: \")\nn = int(input())\n\nprint(\"The sum of even factors of\", n, \"is\", sumofFactors(n)) "
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n//i!= i:\n                if n//i % 2 == 0:\n                    sum += n//i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function returns the sum of even factors of a number.\n    \"\"\"\n    # Initialize sum of even factors\n    sum_factors = 0\n    \n    # Loop through all factors of n\n    for i in range(1, n+1):\n        # Check if factor is even and not equal to 1\n        if n % i == 0 and i % 2 == 0:\n            # Add factor to sum\n            sum_factors += i\n    \n    # Return sum of even factors\n    return sum_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n%i == 0 and i%2 == 0 : \n            sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if i!= n // i and n // i % 2 == 0:\n                sum += n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    sum_of_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n            if n // i!= i:\n                sum_of_factors += (n // i)\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                sum += i\n            else:\n                sum += i + n//i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bz\\b'  # matches any word containing 'z'\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as an input and returns a list of all words that contain 'z' in the string.\n    '''\n    # regular expression to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # find all the words that match the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Compile a regular expression pattern to match a word containing 'z'\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    \n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n    \n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"The month number contains 31 days.\")\n    elif monthnum in [4, 6, 9, 11]:\n        print(\"The month number contains 30 days.\")\n    elif monthnum == 2:\n        print(\"The month number contains 28/29 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether a given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum == 2:\n        return True  # February always has 29 days in a leap year\n    elif monthnum in [4, 6, 9, 11]:\n        return False  # April, June, September, November have 30 days\n    else:\n        return True  # All other months have 31 days"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month has 31 days, False otherwise.\n    \"\"\"\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 2:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in (4, 6, 9, 11):\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function checks whether a given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return monthnum in [1, 3, 5, 7, 8, 10, 12]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    This function takes a list of strings as input and reverses each string in the list.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_stringlist.append(string[::-1])\n    return reversed_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1] # slicing with step -1 to reverse the string\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_stringlist.append(reversed_string)\n    return reversed_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_lst = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as an input and returns the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as an argument and returns the sublist that has the minimum length.\n    '''\n\n    # Initialize the minimum length variable to infinity\n    min_len = float('inf')\n\n    # Initialize the variable for storing the sublist having minimum length\n    min_sublist = None\n\n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the length of the current sublist is less than the minimum length variable\n        if len(sublist) < min_len:\n            # If it is, update the minimum length variable and the sublist variable\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    # Return the sublist having minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist with the minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_lst = sub_lst\n            min_len = len(sub_lst)\n            \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in lst[1:]:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = i\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(length, width):\n    '''\n    This function takes in the length and width of a rectangle and returns the area of the rectangle.\n    '''\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input, and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle and returns its area.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two arguments, length and breadth of a rectangle and returns its area.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use a regular expression to match all uppercase substrings in the string\n    uppercase_subs = re.findall('[A-Z]+', str1)\n    \n    # Use another regular expression to replace all uppercase substrings with an empty string\n    result = re.sub('[A-Z]+', '', str1)\n    \n    return result"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string using regular expressions\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n\n    # Replace each uppercase substring with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all uppercase substrings in the string\n    uppercase_subs = re.findall('[A-Z]+', str1)\n    # Use a set to remove duplicates from the list of uppercase substrings\n    uppercase_subs = set(uppercase_subs)\n    # Use a loop to replace each uppercase substring with an empty string\n    for sub in uppercase_subs:\n        str1 = str1.replace(sub, '')\n    # Return the modified string with uppercase substrings removed\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes all uppercase substrings from a given string.\n    '''\n    # Using regex to match any uppercase substring in the string\n    uppercase_subs = re.findall('[A-Z]+', str1)\n    \n    # Using regex to replace any uppercase substring with an empty string\n    for sub in uppercase_subs:\n        str1 = re.sub(rf'\\b{sub}\\b', '', str1, flags=re.IGNORECASE)\n    \n    # Returning the modified string with uppercase substrings removed\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    This function extracts the first element of each sublist in a given list.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    This function will extract the first element of each sublist in the list and return it as a new list.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_lst = []\n    for sublist in lst:\n        extracted_lst.append(sublist[0])\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Extract the first element of each sublist in a list and return a new list.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as an input and returns the count of upper case characters in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as an argument and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the count of uppercase characters present in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Counts the number of upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for r in range(1, n+1):\n        for c in itertools.combinations(list1, r):\n            result.append(c)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import itertools\n\ndef combinations_list(lst):\n    '''\n    This function returns a list of all possible combinations of elements in the given list.\n    '''\n    return list(itertools.combinations(lst, len(lst)))"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as an input and returns a list of all possible combinations of the elements of the list.\n    \"\"\"\n    # Get the length of the list\n    n = len(lst)\n    # Create a list to store all the combinations\n    comb_list = []\n    # Loop through each possible combination of length n\n    for i in range(2**n):\n        # Convert the binary representation of i to a list of 0s and 1s\n        bin_rep = bin(i)[2:].zfill(n)\n        # Convert the binary representation to a list of elements of the original list\n        comb = [lst[j] for j in range(n) if bin_rep[j] == '1']\n        # Add the combination to the list of combinations\n        comb_list.append(comb)\n    # Return the list of all possible combinations\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result.extend([list(x) for x in itertools.combinations(list1, i)])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of lst.\n    \"\"\"\n    if len(lst) == 0:\n        return [[]]\n    else:\n        combs = combinations_list(lst[1:])\n        new_combs = [[lst[0]] + c for c in combs]\n        return combs + new_combs"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of the elements in the list.\n    \"\"\"\n    all_combinations = []\n    for i in range(1, len(list1)+1):\n        all_combinations += list(combinations(list1, i))\n    return all_combinations"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    '''\n    Find all possible combinations of elements in a given list.\n\n    Parameters:\n    lst (list): The list of elements to find combinations of.\n\n    Returns:\n    list: A list of tuples, where each tuple contains one combination of elements from the input list.\n    '''\n    result = []\n    for r in range(1, len(lst) + 1):\n        for comb in itertools.combinations(lst, r):\n            result.append(comb)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns all possible combinations of the elements of the list.\n    '''\n    result = []\n    for r in range(1, len(lst)+1):\n        for c in itertools.combinations(lst, r):\n            result.append(list(c))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of the given list.\n    \"\"\"\n    if len(lst) == 0:\n        return []\n\n    result = []\n    for i in range(len(lst)):\n        prefix = [lst[i]]\n        suffix = lst[:i] + lst[i+1:]\n        for c in combinations_list(suffix):\n            result.append(prefix + c)\n\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')  # initialize max_product to negative infinity\n    curr_product = 1  # initialize current product to 1\n    start = 0  # initialize start index to 0\n    end = 0  # initialize end index to 0\n    \n    for i in range(len(arr)):\n        curr_product *= arr[i]  # multiply current product with current element\n        \n        if curr_product > max_product:  # if current product is greater than max_product\n            max_product = curr_product  # update max_product\n            start = end = i  # update start and end index\n        \n        while curr_product % arr[end] == 0 and end < i:  # divide end element by all previous elements until it becomes equal to 1 or end index becomes less than current index\n            curr_product /= arr[end]  # divide current product by current element\n            end += 1  # increment end index\n        \n        while curr_product % arr[start] == 0 and start < i:  # divide start element by all previous elements until it becomes equal to 1 or start index becomes less than current index\n            curr_product /= arr[start]  # divide current product by current element\n            start += 1  # increment start index\n    \n    return arr[start:end+1]  # return the subarray with maximum product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray = arr[i:j]\n            product = 1\n            for num in subarray:\n                product *= num\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n\n    # Initialize variables to keep track of the maximum subarray and its product\n    max_product = float('-inf')\n    max_subarray = []\n\n    # Initialize variables to keep track of the current subarray and its product\n    current_product = arr[0]\n    current_subarray = [arr[0]]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is greater than the current subarray product, add it to the subarray and update the product\n        if arr[i] > current_product:\n            current_subarray.append(arr[i])\n            current_product *= arr[i]\n        # If the current element is greater than the current subarray product, reset the subarray and product\n        else:\n            current_subarray = [arr[i]]\n            current_product = arr[i]\n\n        # If the current subarray product is greater than the maximum product, update the maximum product and subarray\n        if current_product > max_product:\n            max_product = current_product\n            max_subarray = current_subarray\n\n    return max_subarray"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n        \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n        if current_product < 0:\n            current_product = 1\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start_index = 0\n    end_index = 0\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n            start_index = i\n            end_index = i\n            \n        if current_product < 0:\n            current_product = 1\n            start_index = i + 1\n            \n    return arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n    max_product = float('-inf')  # Initialize max_product to negative infinity\n    current_product = 1  # Initialize current_product to 1\n    start_index = 0  # Initialize start_index to 0\n    end_index = 0  # Initialize end_index to 0\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            # If the current element is negative, reset the current_product to 1\n            current_product = 1\n            # Update the start_index to the current index\n            start_index = i\n        current_product *= arr[i]  # Multiply current_product with the current element\n        if current_product > max_product:\n            # If the current_product is greater than max_product, update max_product and end_index\n            max_product = current_product\n            end_index = i\n    \n    return arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = float('-inf')\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = min(temp * arr[i], arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key in dict:\n        values.append(dict[key])\n    return values.count(values[0]) == n"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for key, val in dict.items():\n        if val!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[k] for k in dict]\n    return len(set(values)) == 1 or len(values) == n"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(d, n):\n    '''\n    Check if all values in a dictionary are the same.\n    Args:\n        d: dictionary\n        n: value to compare against\n    Returns:\n        True if all values are the same, False otherwise\n    '''\n    values = list(d.values())\n    for v in values:\n        if v!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        print(\"All values in the dictionary are the same.\")\n    else:\n        print(\"The values in the dictionary are not the same.\")"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a number n as input. \n    It returns True if all values in the dictionary are equal to n.\n    Otherwise, it returns False.\n    '''\n    values = set(dict.values())\n    if len(values) == 1 and list(values)[0] == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n\n    Args:\n    - d: dictionary to check\n    - n: expected value of all values\n\n    Returns:\n    - True if all values are the same as n, False otherwise\n    \"\"\"\n    for value in d.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        print(\"All values are same in the dictionary\")\n    else:\n        print(\"Values are not same in the dictionary\")\n"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set(dict.values())\n    if len(value_set) == 1:\n        print(\"All values are same in the dictionary.\")\n    else:\n        print(\"Values are not all the same in the dictionary.\")"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[n]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with all the empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        min_ending_here = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > max_ending_here * arr[i]:\n                max_ending_here = arr[i]\n            elif arr[i] < min_ending_here * arr[i]:\n                min_ending_here = arr[i]\n            else:\n                continue\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            if min_ending_here < 0 and min_ending_here * arr[i] > max_ending_here:\n                max_ending_here = min_ending_here * arr[i]\n                if max_ending_here > max_so_far:\n                    max_so_far = max_ending_here\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_prod = arr[0]\n    curr_prod = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > curr_prod:\n            curr_prod = arr[i]\n        else:\n            curr_prod = arr[i] * curr_prod\n        \n        if curr_prod > max_prod:\n            max_prod = curr_prod\n    \n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here * arr[i]:\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here)\n            min_ending_here = min(arr[i], min_ending_here)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum product formed by multiplying numbers of an \n    increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    \n    # Initialize variables to store the maximum product and the maximum value of an increasing subsequence\n    max_product = 0\n    max_val = arr[0]\n    \n    # Loop through the array to find the maximum product\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        else:\n            max_product = max(max_product, max_val)\n            max_val = arr[i]\n            \n    # Multiply the maximum value of an increasing subsequence with the last element of the array\n    max_product = max(max_product, max_val * arr[n-1])\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1], arr[0]*arr[1])\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] * arr[i], dp[i-2])\n    return dp[n-1]"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_product = float('-inf')\n        min_product = float('inf')\n        for i in range(n):\n            if i == 0:\n                max_product = arr[i]\n                min_product = arr[i]\n            else:\n                if arr[i] > max_product * arr[i]:\n                    max_product = arr[i]\n                elif arr[i] < min_product * arr[i]:\n                    min_product = arr[i]\n        return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0]*arr[1], arr[0], arr[1])\n\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here * arr[i]:\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here\n            min_ending_here = min_ending_here\n\n        max_so_far = max(max_so_far, max_ending_here, min_ending_here * max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    curr_product = 1\n    \n    for num in arr:\n        if num > curr_product:\n            curr_product = num\n        else:\n            curr_product *= num\n        if curr_product > max_product:\n            max_product = curr_product\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > current_product:\n            current_product = arr[i]\n        else:\n            current_product = arr[i] * current_product\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the pairwise addition of the neighboring elements of the tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the pairwise addition of the neighboring elements of the tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(a + b for a, b in zip(test_tup[:-1], test_tup[1:]))"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_product_modulo_n(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and an integer n as input.\n    It returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i] % n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l) \n    for i in range(n-1): \n        if l[i] == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    for i in range(1, len(l)):\n        if l[i] == l[i-1] + 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[j] == l[i]+1:\n                return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists as input and returns a list of tuples that are present in both lists irrespective of their order.\n    \"\"\"\n    # creating an empty list to store the common tuples\n    common_tuples = []\n\n    # iterating over the first list\n    for tup in test_list1:\n        # creating a string representation of the tuple\n        tup_str = str(tup)\n        # checking if the string representation of the tuple is present in the second list\n        if tup_str in [str(t) for t in test_list2]:\n            # if it is present, adding the tuple to the common_tuples list\n            common_tuples.append(tup)\n\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # convert the tuple lists to sets to perform set operations\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n\n    # find the intersection of the sets and convert the result back to a list of tuples\n    result_list = list(set_list1.intersection(set_list2))\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists of tuples as input and finds the intersection of tuples in both lists irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        for j in test_list2:\n            if sorted(i) == sorted(j):\n                result.append(i)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    set1 = set([tuple(sorted(t)) for t in test_list1])\n    set2 = set([tuple(sorted(t)) for t in test_list2])\n\n    return list(set1 & set2)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert both lists into sets\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back into a list of tuples\n    result = [list(elem) for elem in intersection]\n\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = set()\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if set(t1) == set(t2):\n                result.add(t1)\n    return list(result)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1).intersection(set(test_list2))\n    return list(map(tuple, intersection))"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string\n    with a new character.\n\n    :param str1: the string to modify\n    :param ch: the character to replace\n    :param newch: the new character\n    :return: the modified string\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a given character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces a character in a string with a new character.\n    \"\"\"\n    result = str1.replace(ch, newch)\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    \"\"\"\n    new_str = ''\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(d):\n    '''\n    Sorts a dictionary by value using the Counter class from the collections module.\n    '''\n    c = Counter(d)\n    return dict(sorted(c.items(), key=lambda x: x[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    sum = 0\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n            \n    sum = smallest + largest\n    \n    return sum"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    return sum((min(nums), max(nums)))"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum((max(nums), min(nums)))"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sorted_nums = sorted(nums)\n    return sorted_nums[0] + sorted_nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest number in the array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and returns True if all the characters in the string are in lowercase, and False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if it is all in lower case, False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if the string is in lower case, False otherwise.\n    \"\"\"\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case, False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]{3,}\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'\\b[a-z]+\\b')  # pattern to match lowercase substrings\n    return pattern.sub('', str1)        # replace matched substrings with empty string"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    # Find all substrings that contain only lowercase characters\n    matches = re.findall(r'\\b[a-z]+\\b', str1)\n    \n    # Remove all matches from the original string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string using regular expressions.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Use the findall() method to find all matches of the pattern in the string\n    matches = pattern.findall(str1)\n    # Use a loop to remove all matches from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and returns the same string with all the lowercase substrings removed.\n    '''\n    # Finding all lowercase substrings in the given string\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    \n    # Removing all lowercase substrings from the given string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    # Returning the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as an argument and removes all lowercase substrings from it.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Remove all lowercase words from the list of words\n    new_words = [word for word in words if not word.islower()]\n    \n    # Join the new words back into a string\n    new_str =''.join(new_words)\n    \n    return new_str"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Extract the first digit using integer division and modulus operations\n    first = n // 10\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        n *= -1\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns its first digit.\n    '''\n    if n < 0:\n        n *= -1\n    return n // 10**(len(str(n))-1)\n"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    if n < 0:\n        n = -n\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        n *= -1  # convert negative number to positive\n        \n    if n == 0:\n        return 0\n    \n    return n // 10**(len(str(n))-1)  # use integer division to extract the first digit"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return n // 10**((len(str(abs(n)))-1))\n"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    This function takes in a number as an argument and returns the first digit of that number.\n    '''\n    first_digit = n // 10**(len(str(n))-1)\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_odd(lst):\n    \"\"\"\n    Returns a list of all odd integers in the given list.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_odd(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of only the odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for i in lst:\n        if i % 2!= 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list of odd integers.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    Takes a list of integers and returns only the odd numbers.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [i for i in lst if i % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_lst.append(i)\n    return odd_lst"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize the sum of cubes of the first n natural numbers and the sum of the first n natural numbers to zero.\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers and the sum of the first n natural numbers using a loop.\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n        \n    # Return the difference between the two sums.\n    return sum_of_numbers ** 2 - sum_of_cubes ** 2"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])  # sum of cubes of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))  # sum of the first n natural numbers\n    return sum_cubes - sum_numbers  # difference between the two sums"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    sum_of_cubes = (n*(n+1)**2)/2\n    sum_of_numbers = n*(n+1)/2\n    return sum_of_numbers - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes a number n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables for the sum of cubes and the sum of the first n natural numbers\n    sum_cubes = 0\n    sum_numbers = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Add the cube of the current number to the sum of cubes\n        sum_cubes += i**3\n        # Add the current number to the sum of the first n natural numbers\n        sum_numbers += i\n\n    # Return the difference between the sum of cubes and the sum of the first n natural numbers\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Args:\n    n (int): the number of natural numbers to consider.\n\n    Returns:\n    int: the difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_n = sum(range(1, n+1))\n    return sum_cubes - sum_n"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    This function takes a list of integers as input and returns the count of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in a list A of integers and the length of the list N and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if ((A[i] ^ A[j]) & 1):\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of size N and returns the count of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] & 1: # if xor of i and j is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    This function toggles the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    \"\"\"\n    This function toggles the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The output string with toggled case.\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Find the sum of the per-digit difference between two integers\n    diff_sum = 0\n    for digit in str(n1):\n        diff_sum += abs(int(digit) - int(str(n2).replace(digit, '')))\n    for digit in str(n2):\n        diff_sum += abs(int(digit) - int(str(n1).replace(digit, '')))\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    \n    # Converting the integers into strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Finding the length of the longer string\n    max_len = max(len(n1_str), len(n2_str))\n    \n    # Iterating over the characters in the strings\n    for i in range(max_len):\n        # Adding the absolute difference between the digits to the sum\n        sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Compute the sum of the per-digit difference\n    sum_of_diff = 0\n    for i in range(len(str1)):\n        digit1 = int(str1[i])\n        digit2 = int(str2[i])\n        diff = abs(digit1 - digit2)\n        sum_of_diff += diff\n\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    \n    for i in range(len(n1_digits)):\n        distance += abs(n1_digits[i] - n2_digits[i])\n        \n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    for i in range(len(n1_str)):\n        digit_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    n1 = str(n1)\n    n2 = str(n2)\n    if len(n1)!= len(n2):\n        return \"Numbers are not of equal length\"\n    for i in range(len(n1)):\n        sum_diff += abs(int(n1[i]) - int(n2[i]))\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    # Convert the integers to strings and remove leading zeros\n    n1_str = str(n1).lstrip('0')\n    n2_str = str(n2).lstrip('0')\n    \n    # Get the length of the strings\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    \n    # Initialize the sum of per-digit differences\n    digit_sum = 0\n    \n    # Loop through the strings, comparing digits and adding the difference to the sum\n    for i in range(max(n1_len, n2_len)):\n        # Get the digits at the current index for each string\n        d1 = int(n1_str[i]) if i < n1_len else 0\n        d2 = int(n2_str[i]) if i < n2_len else 0\n        \n        # Add the absolute value of the difference to the sum\n        digit_sum += abs(d1 - d2)\n    \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to strings and get their lengths\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    \n    # Initialize variables for storing the sum of the digit differences\n    digit_diff_sum = 0\n    \n    # Iterate through the digits in both integers and add the absolute difference to the sum\n    for i in range(n1_len):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    # Return the final sum of digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    s = 0\n    for d in str(abs(n1 - n2)):\n        s += int(d)\n    return s"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_digit_distance = 0\n    while n1 > 0:\n        digit_diff = abs(n1 % 10 - n2 % 10)\n        sum_of_digit_distance += digit_diff\n        n1 //= 10\n        n2 //= 10\n    return sum_of_digit_distance"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = 0\n    max_end_here = 0\n\n    for i in range(size):\n        max_end_here += a[i]\n\n        if max_end_here < 0:\n            max_end_here = 0\n\n        if max_end_here > max_sum:\n            max_sum = max_end_here\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n\n    # Initialize the maximum sum as the first element of the list\n    max_sum = a[0]\n\n    # Initialize the current sum as the first element of the list\n    current_sum = a[0]\n\n    # Traverse through the list and update the maximum sum\n    for i in range(1, size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function finds the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    :param a: The list of integers\n    :param size: The size of the list\n    :return: The sum of the largest contiguous sublist in the given list\n    \"\"\"\n\n    max_sum = a[0]\n    curr_sum = a[0]\n\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = -999999999999999999\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the union of the elements of two given tuples and outputs them in sorted order.\n    \"\"\"\n    # Convert the tuples to sets to find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set() function\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Convert the set back to tuple\n    union_tup = tuple(union_set)\n    \n    # Sort the elements of the tuple in ascending order\n    union_tup = sorted(union_tup)\n    \n    # Return the sorted tuple\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the union of their elements in sorted order.\n    '''\n    # Convert both tuples to sets and find their union.\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n\n    # Convert the union set back to a list and sort it.\n    result = sorted(list(union_set))\n\n    # Return the result.\n    return result"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns their union in sorted order.\n    '''\n\n    # Convert the tuples to sets and find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n\n    # Convert the set back to a sorted tuple and return it\n    union_tup = tuple(sorted(union_set))\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Finding the union of the tuples using set() method\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Converting set to tuple to get the elements in sorted order\n    union_tup = tuple(union_set)\n\n    # Outputting the result\n    print(\"Union of the two tuples:\", union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set() to find the union of the elements of the tuples and then converting it back to a sorted list\n    result_list = sorted(list(set(test_tup1) | set(test_tup2)))\n    return result_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the first tuple to remove duplicates\n    set1 = set(test_tup1)\n    # Create a set from the second tuple to remove duplicates\n    set2 = set(test_tup2)\n    # Combine the two sets and convert them back to a sorted tuple\n    union_tup = tuple(sorted(set1.union(set2)))\n    # Print the result\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    sorted_union = sorted(list(union_set))\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n\n    # Convert the union to a list and sort it\n    union_list = sorted(list(union))\n\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sub_list = lst[i:j+1]\n            if len(sub_list) > max_length:\n                max_length = len(sub_list)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function finds the length of the longest sublist in a given list.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j - i > max_len and all(lst[k] == lst[i] for k in range(i, j)):\n                max_len = j - i\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n                \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            length = j - i\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]+\"'\n    matches = re.findall(pattern, text)\n    values = [match.strip('\"') for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"' # regular expression pattern to match strings between quotation marks\n    matches = re.findall(pattern, text) # find all matches of the pattern in the text\n    return matches # return the matches as a list of strings"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    :param text: A string containing values enclosed in quotation marks.\n    :return: A list of strings containing the values.\n    \"\"\"\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'The name of the company is \"Acme Inc.\" and the number of employees is \"100000\".'\nvalues = extract_values(text)\n\nprint(values)"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # Use the re.findall() method to extract all matches of the pattern from the text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of the extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]+\"'\n    matches = re.findall(pattern, text)\n    return [match.strip('\"') for match in matches]\n"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers as input and returns the number of possible unordered pairs \n    where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function takes a string as an argument and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n\n    :param word: The input string\n    :return: A list of characters\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as an input and returns the sum of its digits.\n    \"\"\"\n    # Initialize the sum of digits to 0\n    sum_of_digits = 0\n    \n    # Iterate over each digit of the number\n    while n > 0:\n        # Get the rightmost digit\n        digit = n % 10\n        # Add the digit to the sum of digits\n        sum_of_digits += digit\n        # Remove the rightmost digit from the number\n        n = n // 10\n        \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer as an input and returns the sum of its digits.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Input should be non-negative\"\n    else:\n        sum_of_digits = 0\n        while n > 0:\n            sum_of_digits += n % 10\n            n //= 10\n        return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return None  # negative numbers don't have digits\n\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    else:\n        return sum([int(d) for d in str(n)])"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an argument and returns True if the list is sorted, else False.\n    '''\n    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    '''\n    Check whether a specified list is sorted or not.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as an argument and returns True if the list is sorted in ascending order, else False.\n    \"\"\"\n    if lst == sorted(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and checks whether it is sorted or not.\n    :param lst: A list of integers.\n    :return: True if the list is sorted, False otherwise.\n    \"\"\"\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0 or len(list1) == 1:\n        return True\n    else:\n        for i in range(len(list1) - 1):\n            if list1[i] > list1[i + 1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = {}\n    return [empty_dict] * length"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    This function creates a list of N empty dictionaries.\n    \"\"\"\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(lst):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in lst:\n        sublist.sort()\n    return lst"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(lst)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] not in unique_nums:\n                unique_nums.append(nums[i][j])\n    if len(unique_nums) < 2:\n        return None\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        unique_nums.extend(set(lst))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(set(lst))\n    return [list(unique_nums)[:2]]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Removes duplicate numbers from a given number of lists.\n\n    Args:\n    - nums: A list of lists of numbers.\n\n    Returns:\n    - A list of two unique numbers from the input lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return [num for num in unique_nums if nums[0].count(num) == 1 and nums[1].count(num) == 1]"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    This function returns the product of all unique numbers in a given list.\n    '''\n    unique_nums = set(list_data) # convert list to set to get unique values\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n    # create a set of unique numbers in the list\n    unique_nums = set(list_data)\n    # initialize a product variable to 1\n    product = 1\n    # loop through each unique number in the set\n    for num in unique_nums:\n        # multiply the product by the current number\n        product *= num\n    # return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    unique_nums = set(list_data)\n    product = 1\n\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns its surface area.\n    \"\"\"\n    surface_area = 2 * 3.14159 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Returns the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius of the cylinder and the height as input parameters and returns the surface area of the cylinder.\n    '''\n    surface_area = 2*math.pi*r*h + 2*math.pi*r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*3.14*r*h + 2*3.14*r**2\n    return surfacearea"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n\n    :param r: the radius of the cylinder\n    :param h: the height of the cylinder\n    :return: the surface area of the cylinder\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder and returns its surface area.\n    '''\n    return 2 * 3.14 * r * (r + h)"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and checks whether A is a sublist of B or not.\n    Returns True if A is a sublist of B, else returns False.\n    \"\"\"\n\n    # Check if A is empty, then A is always a sublist of B\n    if not A:\n        return True\n\n    # Check if the length of A is greater than the length of B, then A cannot be a sublist of B\n    if len(A) > len(B):\n        return False\n\n    # Initialize variables for the pointers\n    i = 0\n    j = 0\n\n    # Traverse the list B and compare the elements with A\n    while j < len(B):\n        if B[j] == A[i]:\n            # If the elements match, increment both pointers\n            i += 1\n            j += 1\n        else:\n            # If the elements do not match, increment the pointer for B\n            j += 1\n\n        # If all elements of A have been matched, then A is a sublist of B\n        if i == len(A):\n            return True\n\n    # If A is not a sublist of B, then return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if set(A).issubset(set(B)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    This function checks whether A is a sublist of B or not.\n    \"\"\"\n    if A == []:\n        return True\n    if B == []:\n        return False\n\n    if A[0] == B[0]:\n        return is_sub_array(A[1:], B[1:])\n    else:\n        return is_sub_array(A[1:], B)"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if B is a sublist of A,\n    otherwise it returns False.\n    \"\"\"\n    if B == []:\n        return True\n    elif B[0] in A:\n        index = A.index(B[0])\n        return is_Sub_Array(A[index:], B[1:])\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sub_array(A, B):\n    '''\n    This function takes two lists as input and returns True if A is a sublist of B, else it returns False.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function returns True if list B is a sublist of list A, else returns False.\n    \"\"\"\n    if len(B) == 0:\n        return True\n    elif len(A) < len(B):\n        return False\n    else:\n        for i in range(len(A) - len(B) + 1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as input and checks if the first list is a sublist of the second list or not.\n    If it is a sublist, it returns True, otherwise it returns False.\n    '''\n    if B == []: # if second list is empty, it can't be a sublist of any list\n        return False\n    if A == []: # if first list is empty, it is always a sublist of any non-empty list\n        return True\n    if A[0] == B[0]: # if the first elements of the lists are equal, check for the rest of the lists\n        return is_Sub_Array(A[1:], B[1:])\n    else: # if the first elements of the lists are not equal, check for the rest of the second list\n        return is_Sub_Array(A, B[1:])"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    n = len(A)\n    m = len(B)\n    while j < m: \n        if A[i] == B[j]: \n            i += 1\n            j += 1\n        else: \n            i = 0\n            j = j - i + 1\n    if i == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    This function takes two lists as input and returns True if A is a sublist of B, else False.\n    \"\"\"\n    if len(A) > len(B): # check if A is longer than B\n        return False\n\n    for i in range(len(B)-len(A)+1): # iterate over all possible starting positions of A in B\n        for j in range(len(A)): # iterate over all elements of A\n            if B[i+j]!= A[j]: # if any element of A does not match B starting from position i, return False\n                return False\n        return True # if all elements match, return True\n"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1): \n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    last_digit = fact % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the factorial value\n    factorial = 1\n\n    # Calculate the factorial of the number\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1): \n        factorial = factorial*i\n    return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function calculates the last digit of the factorial of a given number.\n    :param n: The number whose factorial's last digit is to be found.\n    :return: The last digit of the factorial of the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    fact = 1\n    while n > 0:\n        fact = fact * n\n        n -= 1\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1): \n        factorial = factorial * i\n    \n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    # if n is less than or equal to 1, return 1\n    if n <= 1:\n        return 1\n    \n    # find the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # find the last digit of the factorial\n    last_digit = fact % 10\n    \n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists of the same length and returns a flattened list containing the elements of the three input lists interleaved.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if the input lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('Input lists must have the same length')\n\n    # Create a new list to store the interleaved elements\n    interleaved_list = []\n\n    # Iterate over the three input lists\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"Lists should be of equal length\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    This function takes three lists as input and interleaves them into a single flat list.\n    '''\n    if len(list1) == len(list2) == len(list3):\n        flat_list = []\n        for i in range(len(list1)):\n            flat_list.append(list1[i])\n            flat_list.append(list2[i])\n            flat_list.append(list3[i])\n        return flat_list\n    else:\n        print(\"Error: All three lists must be of the same length.\")"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"Lists must have the same length\")\n\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"The input lists must have the same length\")\n\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append((test_tup1[i], test_tup2[i]))\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append((test_tup1[i], test_tup2[i]))\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    \n    # iterate over both tuples and find dissimilar elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n            \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with the dissimilar elements from both tuples.\n    \"\"\"\n    dissimilar_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_tup += (test_tup1[i],)\n    return dissimilar_tup"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create an empty list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # iterate through each element in the first tuple\n    for elem1 in test_tup1:\n        # check if the element is not in the second tuple\n        if elem1 not in test_tup2:\n            # append the element to the dissimilar_elements list\n            dissimilar_elements.append(elem1)\n\n    # return the dissimilar_elements list\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple: \n        if isinstance(i, tuple): \n            sub_tuple = []\n            for j in i: \n                if even_fnc(j): \n                    sub_tuple.append(j)\n            new_tuple.append(tuple(sub_tuple))\n        else: \n            if even_fnc(i): \n                new_tuple.append(i)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sublist in test_tuple:\n        temp_list = []\n        for element in sublist:\n            if even_fnc(element):\n                temp_list.append(element)\n        result.append(temp_list)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_item = even_ele(item, even_fnc)\n            if new_item:\n                new_tuple.append(new_item)\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return tuple(new_tuple)\n\ndef is_even(num):\n    '''\n    Check if a number is even.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements from a nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        if isinstance(tup, tuple):\n            even_tup = tuple(filter(even_fnc, tup))\n            if even_tup:\n                new_tuple.append(even_tup)\n        else:\n            new_tuple.append(tup)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if type(element) == int or type(element) == float:\n            if even_fnc(element):\n                result.append(element)\n        else:\n            temp = even_ele(element, even_fnc)\n            if temp:\n                result.append(temp)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sublist in test_tuple:\n        result.append([elem for elem in sublist if even_fnc(elem)])\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_item = even_ele(item, even_fnc)\n            if new_item:\n                new_tuple.append(new_item)\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return tuple(new_tuple) if new_tuple else None\n\ndef is_even(num):\n    '''\n    A helper function to check if a number is even.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for ele in test_tuple:\n        if isinstance(ele, int) and even_fnc(ele):\n            result.append(ele)\n        elif isinstance(ele, tuple):\n            result.append(even_ele(ele, even_fnc))\n        else:\n            result.append(ele)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple:\n        if isinstance(elem, int):\n            if even_fnc(elem):\n                even_list.append(elem)\n        elif isinstance(elem, tuple):\n            even_list.append(even_ele(elem, even_fnc))\n    return tuple(even_list)\n\ndef is_even(num):\n    '''\n    A function to check if a number is even or odd.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return tuple(result)\n\ndef is_even(n):\n    '''\n    Helper function to determine if a number is even.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Calculate the surface area of a square pyramid.\n\n    Args:\n    base_edge (int): The length of the square base edge.\n    height (int): The height of the pyramid.\n\n    Returns:\n    int: The surface area of the pyramid.\n    '''\n\n    # Calculate the area of the square base\n    area_base = base_edge ** 2\n\n    # Calculate the area of the square faces of the pyramid\n    area_face = 4 * base_edge ** 2\n\n    # Calculate the total area of the pyramid\n    area_total = area_base + area_face * 4\n\n    # Calculate the surface area of the pyramid by subtracting the area of the base\n    surface_area = area_total - area_base\n\n    # Multiply the surface area by the height to get the total volume of the pyramid\n    volume = surface_area * height\n\n    # Return the total surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the square base\n    base_area = 4 * b ** 2\n    \n    # calculate the area of the triangle on top of the square base\n    triangle_area = (s ** 2) / 2\n    \n    # calculate the total surface area\n    total_area = base_area + triangle_area\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Returns the surface area of a square pyramid with given base edge and height.\n    '''\n    # Calculate the area of the base\n    base_area = 4 * base_edge ** 2\n\n    # Calculate the area of the slant\n    slant_area = 0.5 * base_edge * height\n\n    # Calculate the total surface area\n    total_area = 2 * base_area + slant_area\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 6*(b*s) # base area of square pyramid\n    slant_area = 2*((b*b) + (s*s)) # slant area of square pyramid\n    total_area = area + slant_area # total area of square pyramid\n    \n    return total_area # return the total area of the square pyramid"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area_base = 4*b*s\n    # Calculate the area of the slant\n    area_slant = (b*b/2)*s\n    # Calculate the total surface area\n    total_surface_area = 2*area_base + area_slant\n    # Return the total surface area as output\n    return total_surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes two arguments:\n    b: the length of the base edge of the square pyramid.\n    s: the height of the square pyramid.\n    It returns the surface area of the square pyramid.\n    '''\n    # calculate the area of the square pyramid\n    area = (b*s)**2\n    \n    # calculate the area of the base\n    base_area = b*b\n    \n    # calculate the area of the vertical faces\n    vertical_area = (b*s)*2\n    \n    # calculate the total surface area\n    total_area = area + base_area + vertical_area\n    \n    # return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes in the base edge and height of a square pyramid, and returns the surface area.\n    '''\n    # Calculate the surface area of the base\n    base_area = 4 * base_edge ** 2\n    \n    # Calculate the area of the faces\n    face_area = base_edge * height\n    \n    # Calculate the total surface area\n    total_area = 2 * base_area + 4 * face_area\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b, h):\n    '''\n    This function calculates the surface area of a square pyramid given the base edge and height.\n    '''\n    # Calculate the area of the base\n    base_area = 4 * b * b\n    \n    # Calculate the area of the slant\n    slant_area = (b * h) / 2\n    \n    # Calculate the total surface area\n    total_area = base_area + 2 * slant_area\n    \n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (2*b*s) + (2*b*s) + (2*b*s) + (b*s)\n    return area\n\nbase_edge = float(input(\"Enter the base edge of the square pyramid: \"))\nheight = float(input(\"Enter the height of the square pyramid: \"))\nprint(\"Surface area of the square pyramid is:\", surface_Area(base_edge, height))"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4 * b * s + 2 * (b * b)"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function takes a dictionary as an input and returns True if the dictionary is empty, otherwise it returns False.\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty or not\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as an input and returns True if the dictionary is empty and False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    c = [0] * (num + 1)\n    c[0] = 1\n    for i in range(1, num + 1):\n        for j in range(i):\n            c[i] += c[j] * c[i - j - 1]\n    return c[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    c = 1\n    for i in range(2, n + 1):\n        c = (2 * i - 1) * c // i\n    return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n+1):\n            result = result * (4*i - 2) / i\n        return round(result)"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number using dynamic programming approach.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = [0] * (n + 1)\n        c[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                c[i] += c[j] * c[i - j - 1]\n        return c[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = 1\n        for i in range(1, n+1):\n            c = c * (4*i-2)/(i)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    else:\n        c = [0]*(n+1)\n        c[0], c[1] = 1, 1\n        for i in range(2, n+1):\n            c[i] = (i-1) * (c[i-1] + c[i-2])\n        return c[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        catalan = [1]\n        for i in range(num):\n            catalan.append(0)\n            for j in range(i+1):\n                catalan[i+1] += catalan[j] * catalan[i-j]\n        return catalan[-1]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    \n    catalan_numbers = [1, 1]\n    for i in range(2, num + 1):\n        catalan_numbers.append(catalan_numbers[i - 1] * (2 * i - 1) // i)\n    \n    return catalan_numbers[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num - i - 1)\n        return res"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        catalan = 1\n        for i in range(n):\n            catalan *= (2 * i + 1) * (2 * i + 2) / (i + 2)\n        return int(catalan)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group()"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(\\w*ly)\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group(1)\n        start, end = match.span(1)\n        print(f\"Adverb ending with 'ly': {adverb}\")\n        print(f\"Start index: {start}, End index: {end}\")\n    else:\n        print(\"No adverb ending with 'ly' found in the text.\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with \"ly\" using regular expression\n    adverbs = re.findall(r'\\w*ly\\w*', text)\n    \n    # Check if there are any adverbs ending with \"ly\"\n    if adverbs:\n        # Find the position of the first adverb ending with \"ly\"\n        start = text.index(adverbs[0])\n        end = start + len(adverbs[0])\n        \n        # Return the adverb and its positions\n        return adverbs[0], start, end\n    else:\n        # Return None if no adverbs ending with \"ly\" were found\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    # Find all adverbs ending with \"ly\" in the text\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    if not adverbs:\n        return None\n    \n    # Find the first adverb ending with \"ly\"\n    first_adverb = adverbs[0]\n    \n    # Find its starting and ending positions in the text\n    starting_pos = text.index(first_adverb)\n    ending_pos = starting_pos + len(first_adverb) - 1\n    \n    return {'adverb': first_adverb,'starting_pos': starting_pos, 'ending_pos': ending_pos}"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    positions = []\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        positions.append((start, end))\n    return positions\n\ntext = \"She is very carefully planning to buy a new car this year. I am excited about the new car.\"\nprint(find_adverbs(text))"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    matches = pattern.findall(text)\n    if matches:\n        adverb = matches[0]\n        start = text.find(adverb)\n        end = start + len(adverb)\n        return adverb, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Use a regular expression to find all adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # If no adverbs ending with \"ly\" are found, return an empty list\n    if not adverbs:\n        return []\n\n    # Loop through the list of adverbs and find its first occurrence in the text\n    for adverb in adverbs:\n        position = text.find(adverb)\n        # If the adverb is the first occurrence in the text, return its position and break the loop\n        if position == 0:\n            return [position, position + len(adverb)]\n\n    # If the loop completes without finding the first occurrence, return None\n    return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        adverb = text[start:end]\n        print(f\"Adverb ending with ly found at positions {start}-{end}: {adverb}\")\n        break\n    else:\n        print(\"No adverb ending with ly found in the given string.\")"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a number n as input and returns the n most expensive items in the list.\n    '''\n    heap = []\n    \n    # Adding items to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        \n    # Returning the n most expensive items\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    # adding elements to heap\n    for item in items:\n        heapq.heappush(heap, item[1])\n\n    # getting n most expensive items\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item['name']))\n\n    result = []\n    for i in range(n):\n        price, name = heapq.heappop(heap)\n        result.append({'name': name, 'price': -price})\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    # Add items to heap in descending order of price\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n    \n    # Get the n most expensive items from the heap\n    result = []\n    while len(result) < n:\n        result.append(heapq.heappop(heap)[1])\n        \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    This function splits a list at the nth element and adds the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list and an integer n as input and splits the list at the nth element.\n    It then adds the first part of the list to the end of the list.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function takes a list 'l' and splits it at the nth element.\n    The first part of the list is then added to the end of the list.\n    \"\"\"\n    first_part = l[:n]\n    second_part = l[n:]\n    l.clear()\n    l += second_part\n    l += first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as an input and returns a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns the equivalent tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a tuple of the same elements.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n    - lst: a list of elements\n\n    Returns:\n    - a tuple with the same elements as the input list\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Args:\n        lst (list): A list of elements.\n\n    Returns:\n        tuple: A tuple of elements.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        max_num = nums[0]\n        min_num = nums[0]\n        for num in nums:\n            if num > max_num:\n                max_num = num\n            elif num < min_num:\n                min_num = num\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num > 0 and num == int(num ** 0.5) ** 2:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num == 0:\n            continue\n        sqrt = int(num ** 0.5)\n        if sqrt**2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers, a and b, as inputs and returns a list of all the perfect squares between them.\n    '''\n    # Initialize an empty list to store the squares\n    squares = []\n    \n    # Loop through the range of numbers between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n            \n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Find the minimum and maximum values of the range\n    min_val = min(a, b)\n    max_val = max(a, b)\n\n    # Find the perfect squares in the range\n    squares = []\n    for num in range(min_val, max_val+1):\n        root = int(num**0.5)\n        if root*root == num:\n            squares.append(num)\n\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds all perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    squares = []\n    # Loop through each number between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            squares.append(num)\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Find the square root of the larger number\n    sqrt_b = int(b**0.5)\n\n    # Find the square root of the smaller number\n    sqrt_a = int(a**0.5)\n\n    # Find the range of squares between the two numbers\n    for i in range(sqrt_a, sqrt_b + 1):\n        # Check if the square is between the two given numbers\n        if i**2 >= a and i**2 <= b:\n            # Print the perfect square\n            print(i**2)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize the list of perfect squares\n    squares = []\n\n    # loop through each number between a and b (inclusive)\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            squares.append(num)\n\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): radius\n    theta (float): angle (in radians)\n\n    Returns:\n    x (float): x-coordinate\n    y (float): y-coordinate\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function takes in two parameters, r and theta, which represent the polar coordinates of a point in a 2D plane. It returns the rectangular coordinates of the same point.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radial distance from the origin.\n    theta (float): The angle in radians.\n\n    Returns:\n    x (float): The x-coordinate of the point in rectangular coordinates.\n    y (float): The y-coordinate of the point in rectangular coordinates.\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function takes polar coordinates (r, theta) as input and returns the rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    This function takes the polar coordinates (rho, theta) as inputs and returns the corresponding rectangular coordinates (x, y).\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    This function takes in two arguments:\n    rho - radial distance from the origin\n    theta - angle in radians\n    \n    It returns the rectangular coordinates as a tuple (x,y).\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    return (x * cmath.exp(complex(0, 1) * y))"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    This function takes polar coordinates as input and returns the corresponding rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and returns the same list with the first and last elements interchanged.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and returns the same list with the first and last elements swapped.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and returns a new list with the first and last elements swapped.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    for i in range(k):\n        res = res * (n - i) / (i + 1)\n    return res"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function takes two parameters n and k, where n is the total number of elements in the set and k is the number of elements to be selected.\n    It returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return \"Invalid input\"\n    else:\n        product = 1\n        for i in range(1, k+1):\n            product = product * (n - i + 1) / i\n        return product"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return (binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k))\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum = 0\nfor i in range(k, n+1):\n    sum += binomial_Coeff(n, i) * i\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two parameters, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1,k-1) * n / k"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum_of_product = 0\nfor i in range(k,n+1):\n    sum_of_product += binomial_Coeff(n,i)\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum_of_product)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through the values of k from 0 to k\n    for i in range(k+1):\n        # calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        # calculate the product of the current coefficient and add it to the sum\n        sum += coeff*coeff\n        \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    else:\n        return ((binomial_Coeff(n-1,k-1))*(n-k+1))/k"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_coeff(n, k):\n    \"\"\"\n    Returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result *= n - i\n        result //= i + 1\n    return result\n\nn = int(input(\"Enter a number: \"))\nk = int(input(\"Enter another number: \"))\n\nprint(f\"The sum of the product of consecutive binomial co-efficients is {binomial_coeff(n, k)}.\")"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros using regex\n    ip = re.sub(r'^0+', '', ip)\n\n    # Remove trailing zeros\n    ip = ip.rstrip('0')\n\n    # If first character is a period, remove it\n    if ip.startswith('.'):\n        ip = ip[1:]\n\n    # If last character is a period, remove it\n    if ip.endswith('.'):\n        ip = ip[:-1]\n\n    # If there is only one period, remove it\n    ip = ip.replace('..', '.')\n\n    # If there are multiple periods, split them into a list and remove any empty strings from the list\n    ip_list = ip.split('.')\n    ip_list = [x for x in ip_list if x]\n\n    # Join the list back into a string and return it\n    return '.'.join(ip_list)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regular expression to match leading zeroes and replace them with nothing\n    return re.sub(r'(\\d+\\.\\d+\\.\\d+\\.\\d+)', r'\\1', ip.strip().replace('0', ''))"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Remove leading zeroes from the IP address\n    ip = re.sub(r'^0+', '', ip)\n    # Remove leading and trailing dots\n    ip = re.sub(r'^\\.|\\.$', '', ip)\n    # Remove consecutive dots\n    ip = re.sub(r'(\\.\\.)+', '.', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0*(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+)$', r'\\g<ip>', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = re.compile(r'^0+([1-9][0-9]?.*)')\n    ip = ip_pattern.sub(r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+(\\d+)', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0*(?=[1-9])', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0*(\\d+)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^0*')\n    return pattern.sub('', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # split ip address into octets\n    octets = ip.split('.')\n    \n    # remove leading zeroes from octets and join them back together\n    new_ip = '.'.join([str(int(o)) for o in octets])\n    \n    # return new ip address\n    return new_ip"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes in a list of numbers and finds the difference of the first even and first odd number.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    # Find the first even and first odd number in the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    \n    # Calculate the difference of the even and odd numbers\n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                diff = even_num - num\n                return diff\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                diff = odd_num - num\n                return diff\n        \n    return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function finds the difference between the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables for the first even and first odd number\n    even_num = None\n    odd_num = None\n\n    # Loop through the list and find the first even and first odd number\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n\n    # Return the difference between the first even and first odd number\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    # Finding the first even and odd number in the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # Returning the difference of the first even and first odd number in the list\n    return even_num - odd_num if even_num and odd_num else None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0:\n        diff = even_num - odd_num\n    else:\n        diff = odd_num - even_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0:\n        first_even = even_num\n        first_odd = odd_num\n    else:\n        first_even = odd_num\n        first_odd = even_num\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    # check if the list is not empty\n    if not list1:\n        print(\"The list is empty!\")\n    else:\n        # initialize variables for even and odd numbers\n        even_num = None\n        odd_num = None\n        \n        # loop through the list and find the first even and first odd number\n        for num in list1:\n            if num % 2 == 0:\n                even_num = num\n                break\n        \n        for num in list1:\n            if num % 2!= 0:\n                odd_num = num\n                break\n        \n        # check if there are even and odd numbers in the list\n        if even_num is None or odd_num is None:\n            print(\"There are not enough even and odd numbers in the list!\")\n        else:\n            # calculate and return the difference of the two numbers\n            difference = abs(even_num - odd_num)\n            return difference"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables for even and odd numbers\n    even_num = None\n    odd_num = None\n\n    # Loop through the list and check if even or odd\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n\n    # If even and odd numbers were found, calculate the difference and return it\n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return \"No even or odd numbers found in the list.\""
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                odd = num\n                break\n        else:\n            odd = num\n    if odd is not None:\n        return odd - even\n    else:\n        return None"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    n = len(str1)\n    count = 0\n    # Convert the strings to lists of digits\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n    # Iterate over the strings\n    for i in range(n):\n        # If the digits are different, swap them and increment the count\n        if lst1[i]!= lst2[i]:\n            lst1[i], lst1[lst2.index(lst1[i])] = lst1[lst2.index(lst1[i])], lst1[i]\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # initialize a dictionary to keep track of the count of each character in the string\n    char_count = {}\n    for char in str1 + str2:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # initialize a dictionary to keep track of the count of each character in the string after swapping\n    swap_count = {}\n    for char in str2 + str1:\n        if char in swap_count:\n            swap_count[char] += 1\n        else:\n            swap_count[char] = 1\n            \n    # initialize variables to keep track of minimum swaps needed\n    swap_count[None] = 0\n    min_swaps = 0\n    \n    # iterate through the string and count minimum swaps needed to convert the string to the other binary number\n    for char in str1:\n        if swap_count[char] > 0:\n            min_swaps += 1\n            swap_count[char] -= 1\n    \n    # iterate through the swapped string and count minimum swaps needed to convert the string back to the original binary number\n    for char in swap_count:\n        if char is not None and char_count[char] > 0:\n            min_swaps += 1\n            char_count[char] -= 1\n            \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    \n    # Traverse through all characters\n    for i in range(n):\n        # Find the index of current character in second string\n        j = str2.find(str1[i])\n        \n        # If current character is not present in second string\n        if j == -1:\n            # If second string contains all the characters of first string\n            if ''.join(sorted(str2)) == ''.join(sorted(str1)):\n                return -1\n            else:\n                return -1\n        \n        # If current character is present at different index in second string\n        elif j!= i:\n            # Swap current character with character at different index\n            str2 = str2[:i] + str2[j] + str2[i+1:j] + str2[i] + str2[j+1:]\n            count += 1\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            if str1[i] == '0' and str2[i] == '1':\n                count += 1\n            elif str1[i] == '1' and str2[i] == '0':\n                count += 1\n            else:\n                return -1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one string to another.\n    '''\n\n    # convert the strings to lists of 0s and 1s\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # create a dictionary to store the indices of the 1s in both strings\n    indices = {}\n    for i in range(len(list1)):\n        if list1[i] == 1:\n            indices[i] = None\n\n    # initialize a variable to store the number of swaps required\n    num_swaps = 0\n\n    # iterate over the indices of the 1s in str2\n    for i in range(len(list2)):\n        if list2[i] == 1:\n            # check if the 1 in str2 is already in str1\n            if i not in indices:\n                # if it's not, swap the 1 in str2 with the 1 in str1 at the next available index\n                swap_index = min(indices.keys())\n                indices[swap_index] = i\n                num_swaps += 1\n            else:\n                # if it is, increment the number of swaps by 1\n                num_swaps += 1\n\n    return num_swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    # Convert the strings to lists of characters\n    str1_list = list(str1)\n    str2_list = list(str2)\n    # Traverse the strings from left to right\n    for i in range(len(str1_list)):\n        # Find the position of the corresponding character in the second string\n        j = str2_list.index(str1_list[i])\n        # Swap the characters if they are not at the same position\n        if i!= j:\n            str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert the binary strings to lists for easier manipulation\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # Initialize variables to keep track of the indices of the last swapped digits\n    last_swap1 = -1\n    last_swap2 = -1\n\n    # Initialize variables to keep track of the minimum number of swaps required\n    num_swaps = 0\n\n    # Iterate through both strings simultaneously\n    for i in range(len(str1)):\n\n        # If the digits are already in the correct order, continue iterating\n        if str1[i] == str2[i]:\n            continue\n\n        # If the digits are not in the correct order, find the next digit that needs to be swapped\n        else:\n            swap_index = i\n            while str1[i]!= str2[i]:\n                # If the next digit is already the correct digit, move on to the next digit\n                if str1[i] == str2[swap_index]:\n                    i += 1\n                # Otherwise, swap the current and next digits and update the last swap indices\n                else:\n                    str1[i], str1[swap_index] = str1[swap_index], str1[i]\n                    str2[i], str2[swap_index] = str2[swap_index], str2[i]\n                    last_swap1 = i\n                    last_swap2 = swap_index\n                    num_swaps += 1\n\n    # If there are any remaining digits that need to be swapped, count the remaining swaps\n    if last_swap1!= -1 and last_swap2!= -1:\n        for i in range(last_swap1, len(str1)):\n            if str1[i]!= str2[i]:\n                num_swaps += 1\n\n    return num_swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    \n    # initialize a list to keep track of swaps\n    swaps = [0] * n\n    \n    # loop through each character in the strings and compare them\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            # if the characters don't match, find the next position where they would have matched\n            j = i + 1\n            while j < n and str1[j] == str2[i]:\n                j += 1\n            \n            # if there are no more matches, return -1\n            if j == n:\n                return -1\n            \n            # otherwise, increment the count and swap the characters\n            swaps[i], swaps[j-1] = swaps[j-1], swaps[i]\n            count += 1\n    \n    # return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # Convert binary strings to lists of integers\n    list1 = list(map(int,str1))\n    list2 = list(map(int,str2))\n    \n    # Initialize the result to infinity\n    result = float('inf')\n    \n    # Initialize two pointers for both strings\n    i = 0\n    j = 0\n    \n    # Loop through both strings\n    while i < len(list1) and j < len(list2):\n        # If both characters are the same, move pointers in both strings\n        if list1[i] == list2[j]:\n            i += 1\n            j += 1\n        # If characters are not the same, move the pointer of the string with the smaller character\n        else:\n            if list1[i] == 0 and list2[j] == 1:\n                # Swap 0 with 1 in the list2\n                list2[j] = 0\n                list2[i] = 1\n                # Add the number of swaps required to convert 0 to 1 to the result variable\n                result = min(result,list1.index(0)-i+1+list2.index(1)-j+1)\n            else:\n                # Swap the characters in the strings\n                list1[i], list2[j] = list2[j], list1[i]\n                # Add the number of swaps required to convert the smaller character to the other character to the result variable\n                result = min(result,list1.index(min(list1[i],list2[j]))-i+1+list2.index(max(list1[i],list2[j]))-j+1)\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    n = len(str1)\n    if n!= len(str2) : \n        return -1\n\n    swaps = 0\n    for i in range(n) : \n        if str1[i]!= str2[i] : \n            if str1[i]!= '0' and str2[i]!= '1' : \n                str1 = str1[:i] + '0' + str1[i+1:]\n                str2 = str2[:i] + '1' + str2[i+1:]\n                swaps += 1\n            elif str1[i]!= '1' and str2[i]!= '0' : \n                str1 = str1[:i] + '1' + str1[i+1:]\n                str2 = str2[:i] + '0' + str2[i+1:]\n                swaps += 1\n    \n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list)\n    print(f\"Size of tuple in bytes: {size}\")"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        if isinstance(item, (int, float, complex)):\n            size += sys.getsizeof(item)\n        elif isinstance(item, str):\n            size += sys.getsizeof(item.encode('utf-8'))\n        elif isinstance(item, (list, tuple)):\n            size += sys.getsizeof(item) + tuple_size(item)\n        elif isinstance(item, dict):\n            size += sys.getsizeof(item) + dict_size(item)\n        else:\n            size += sys.getsizeof(item)\n    return size\n\n\ndef dict_size(dictionary):\n    '''\n    Helper function to find the size in bytes of the given dictionary.\n    '''\n    size = 0\n    for key, value in dictionary.items():\n        size += sys.getsizeof(key) + sys.getsizeof(value)\n        if isinstance(value, (list, tuple)):\n            size += tuple_size(value)\n        elif isinstance(value, dict):\n            size += dict_size(value)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print(\"Size of tuple is: \", size, \"bytes.\")\n"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element from two sorted arrays.\n\n    Args:\n        arr1 (list): A sorted list of integers.\n        arr2 (list): A sorted list of integers.\n        k (int): The kth element to find.\n\n    Returns:\n        int: The kth element from the two sorted arrays.\n    \"\"\"\n\n    # Initialize variables to track the indices of the current elements being compared\n    i = 0\n    j = 0\n\n    # Initialize a variable to keep track of the number of elements in the smaller array\n    n = min(len(arr1), len(arr2))\n\n    # Loop until the kth element has been found\n    while k > 0:\n        # If the current element in arr1 is smaller, move the index to the next element in arr1\n        if i == n or (j < len(arr2) and arr1[i] > arr2[j]):\n            i += 1\n        # If the current element in arr2 is smaller, move the index to the next element in arr2\n        else:\n            j += 1\n\n        # Decrement k by 1\n        k -= 1\n\n    # Return the kth element\n    return max(arr1[i-1], arr2[j-1])"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from two sorted arrays.\n    \"\"\"\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1  # ensure arr1 is the smaller array\n    \n    left = 0\n    right = len(arr1) - 1\n    while left <= right:\n        mid1 = (left + right) // 2\n        mid2 = k - mid1 - 1\n        \n        if mid2 < 0 or mid2 >= len(arr2):\n            # we've gone out of bounds on arr2, so we need to move left\n            right = mid1 - 1\n        elif mid1 < 0 or mid1 >= len(arr1):\n            # we've gone out of bounds on arr1, so we need to move right\n            left = mid1 + 1\n        elif arr1[mid1] < arr2[mid2]:\n            # we need to move left to find the kth element\n            left = mid1 + 1\n        elif arr1[mid1] > arr2[mid2]:\n            # we need to move right to find the kth element\n            right = mid1 - 1\n        else:\n            # we've found the kth element\n            return arr1[mid1]\n    \n    # if we get here, we didn't find the kth element\n    raise ValueError(\"k is out of range\")"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a value k as input and returns the kth element from the two arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    if n1 == 0:\n        return arr2[k-1]\n    \n    if n2 == 0:\n        return arr1[k-1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    # divide k by 2 and round down to get the index of the smaller subarray\n    mid1 = k // 2\n    mid2 = k - mid1\n    \n    # if the number of elements in the first subarray is greater than the index k,\n    # then the kth element must be in the first subarray\n    if mid1 <= n1:\n        if arr1[mid1-1] >= arr2[mid2-1]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)\n    \n    # if the number of elements in the second subarray is greater than the index k,\n    # then the kth element must be in the second subarray\n    else:\n        if arr2[mid2-1] >= arr1[mid1-1]:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[:mid1], arr2, k)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the two sorted arrays.\n    :param arr1: the first sorted array\n    :param arr2: the second sorted array\n    :param k: the index of the kth element to find (1-based)\n    :return: the kth element from the two sorted arrays\n    \"\"\"\n    # Make sure the arrays are sorted\n    arr1.sort()\n    arr2.sort()\n\n    # Check if k is valid\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of bounds\")\n\n    # Find the kth element\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n        if k == 0:\n            return max(arr1[i-1], arr2[j-1])\n\n    # Should never happen\n    raise ValueError(\"k is out of bounds\")"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    if arr1[mid1] > arr2[mid2]:\n        if k > mid1 + mid2 + 1:\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n        else:\n            return find_kth(arr1, arr2[mid2+1:], k)\n    else:\n        if k > mid1 + mid2 + 1:\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the length of both arrays\n    n1, n2 = len(arr1), len(arr2)\n\n    # initialize two pointers, i and j\n    i, j = 0, 0\n\n    # loop until i reaches n1 or j reaches n2\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # if k is greater than or equal to n1+n2\n    if k > n1 + n2:\n        return None\n\n    # if i reaches n1\n    if i == n1:\n        return arr2[j+k-1]\n\n    # if j reaches n2\n    if j == n2:\n        return arr1[i+k-1]\n\n    # if k is between i and n1 and j and n2\n    if k <= n1:\n        return arr1[i+k-1]\n    else:\n        return arr2[j+k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n    \n    # Perform binary search on the merged array\n    left, right = 0, len(merged_arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if kth element is in left half of the merged array\n        if merged_arr[mid] >= arr1[len(arr1) - k]:\n            right = mid - 1\n            \n        # Check if kth element is in right half of the merged array\n        else:\n            left = mid + 1\n            \n    return merged_arr[left]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    Args:\n    arr1 (list): A sorted array of integers.\n    arr2 (list): A sorted array of integers.\n    k (int): The index of the desired element (k-1 is the first element).\n\n    Returns:\n    int: The kth element from the two sorted arrays.\n    \"\"\"\n\n    # Find the length of the arrays\n    len1, len2 = len(arr1), len(arr2)\n\n    # If one of the arrays is empty, return the kth element from the other array\n    if len1 == 0:\n        return arr2[k-1]\n    elif len2 == 0:\n        return arr1[k-1]\n\n    # Initialize pointers for both arrays and the k-th element index\n    i, j, index = 0, 0, k-1\n\n    # Find the kth element from the two arrays\n    while i < len1 and j < len2:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        index -= 1\n\n        # If the k-th element is found, return it\n        if index == 0:\n            return max(arr1[i-1], arr2[j-1])\n\n    # If k is larger than the total number of elements in both arrays, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) + len(arr2) < k:\n        return None\n    \n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n        \n    left, right = 0, len(arr1)\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid + len(arr2) < k:\n            left = mid + 1\n        elif mid > k:\n            right = mid - 1\n        else:\n            return max(arr1[mid], arr2[k - mid - 1])\n    \n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    if k > n + m:\n        return None\n    if k <= n:\n        return find_kth_helper(arr1, arr2, k - 1, m)\n    else:\n        return find_kth_helper(arr1, arr2, n, k - n)\n\ndef find_kth_helper(arr1, arr2, i, j):\n    if i == 0:\n        return arr2[j - 1]\n    if j == 0:\n        return arr1[i - 1]\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth_helper(arr1, arr2, i - 1, j)\n    else:\n        return find_kth_helper(arr1, arr2, i, j - 1)"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes an integer as an argument and returns True if the number is\n    an Armstrong number, otherwise, it returns False.\n    '''\n    temp = number\n    order = len(str(number))\n    sum = 0\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    \n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes a number as input and checks whether it is an Armstrong number or not.\n    '''\n    # Convert the number to a string to calculate its length\n    num_str = str(number)\n    \n    # Get the length of the number\n    length = len(num_str)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate over each digit in the number and calculate its power to the length of the number\n    for digit in num_str:\n        sum += int(digit) ** length\n    \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    original_num = number\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Get the length of the number\n    n = len(number_str)\n    \n    # Calculate the sum of the nth power of each digit of the number\n    sum_of_powers = sum([int(digit) ** n for digit in number_str])\n    \n    # Check if the sum of powers is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and split it into individual digits\n    digits = [int(d) for d in str(number)]\n    # Calculate the sum of the squares of the digits\n    sum_of_squares = sum(digit ** len(digits) for digit in digits)\n    # Check if the sum is equal to the original number\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # converting the given number to a string\n    num = str(number)\n    # getting the length of the string\n    length = len(num)\n    # initializing sum variable to zero\n    sum = 0\n    # iterating through each digit in the string\n    for i in range(length):\n        digit = int(num[i])\n        # adding the power of the length of the string to the sum\n        sum += digit ** length\n    # checking whether the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    n = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function takes a number n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total/number\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return (sum, avg)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n\nprint(sum_average(10))"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    This function takes a natural number 'n' as input and returns the sum and average of first n natural numbers.\n    '''\n    # Initialize sum and average variables\n    sum = 0\n    average = 0\n    \n    # Find the sum and average of first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n        average = sum / n\n    \n    # Return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables\n    total_sum = 0\n    count = 1\n    \n    # loop through first n natural numbers\n    while count <= number:\n        total_sum += count\n        count += 1\n    \n    # calculate and return sum and average\n    average = total_sum / number\n    return total_sum, average"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Returns True if the given number is even, False otherwise.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, and False if it is odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it is even, else False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_even(n):\n    '''\n    Returns True if the given number is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_even(n):\n    \"\"\"\n    This function takes a number as an input and returns True if the number is even, otherwise it returns False.\n\n    :param n: An integer number\n    :return: True if the number is even, otherwise it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it is even, else False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function finds the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character, it returns None.\n    \"\"\"\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If no repeated character is found, it returns None.\n    '''\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1:\n            repeated_char = char\n            break\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return \"No repeated characters found!\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = ''\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            repeated_char = char\n            break\n        else:\n            char_count[char] = 1\n    \n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1:\n            repeated_char = char\n            break\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there are no repeated characters, it returns an empty string.\n    '''\n    repeated_char = \"\"\n    for char in str1:\n        if str1.count(char) > 1 and char not in repeated_char:\n            repeated_char = char\n            break\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes in a string and returns the first repeated character in the string.\n    If there are no repeated characters, it returns None.\n    '''\n    # Create an empty dictionary to store the character counts\n    char_counts = {}\n\n    # Loop through each character in the string and update the dictionary\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    # Loop through the dictionary and return the first repeated character\n    for char, count in char_counts.items():\n        if count > 1:\n            return char\n\n    # If there are no repeated characters, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Get all Lucas numbers up to and including a given integer n.\n    \"\"\"\n    ludics = []\n    l1, l2 = 2, 1\n    while l2 <= n:\n        l3 = l1 + l2\n        ludics.append(l3)\n        l1, l2 = l2, l3\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(1, n+1):\n        is_lucid = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic.append(num)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to a given integer `n`.\n    \"\"\"\n    lucids = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**(0.5))+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(1, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    This function will get all Lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = []\n    for num in range(1, n+1):\n        if num == sum(int(digit) for digit in str(num)):\n            ludic.append(num)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for num in range(2, n+1):\n        if all(num % i!= 0 for i in range(2, num)):\n            ludics.append(num)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        prev_ludic = get_ludic(n-1)\n        prev_ludic.append(n)\n        return prev_ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_lucid_numbers(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            ludic.append(i)\n        i += 1\n    return ludic\n\ndef is_lucid(n):\n    '''\n    A helper function to check if a number is lucid or not.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the order of the words in the list\n    words.reverse()\n\n    # Join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    reversed_words = [] # create an empty list to store reversed words\n    for word in words:\n        reversed_word = word[::-1] # reverse each word\n        reversed_words.append(reversed_word) # add the reversed word to the list\n    reversed_sentence =''.join(reversed_words) # join the reversed words into a sentence\n    return reversed_sentence # return the reversed sentence"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n\n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # join the reversed words back into a string\n    reversed_s =''.join(words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back into a string with spaces in between\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back into a string with spaces between them\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n    # Reverse each word\n    words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_s =''.join(words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the order of the words in the list\n    words.reverse()\n    # join the list of words into a string with spaces between them\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into words\n    reversed_words = [word[::-1] for word in words]  # reverse each word\n    return''.join(reversed_words)  # join the reversed words back into a string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    # split the string into a list of words\n    words = s.split()\n\n    # reverse each word in the list and join them back into a string\n    reversed_words = \" \".join([word[::-1] for word in words])\n\n    # return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into individual words\n    reversed_words = [] # initialize an empty list to store the reversed words\n    for word in words:\n        reversed_word = \"\" # initialize an empty string to store the reversed word\n        for i in range(len(word)-1, -1, -1): # iterate through the characters of the word in reverse order\n            reversed_word += word[i] # append each character to the reversed word\n        reversed_words.append(reversed_word) # append the reversed word to the list of reversed words\n    return \" \".join(reversed_words) # join the reversed words back into a single string separated by spaces"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # If the number is less than 2, it's not a prime number.\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number other than 1 and itself.\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any number other than 1 and itself, it's a prime number.\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if the given number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    \n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        print(f\"{num} is a prime number.\")\n    else:\n        print(f\"{num} is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    This function converts degrees to radians.\n\n    :param degree: The angle in degrees.\n    :return: The angle in radians.\n    \"\"\"\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef degrees_to_radians(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns the equivalent value in radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees as input and returns the angle in radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        return [(match, text.index(match), text.index(match) + len(match)) for match in matches]"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    start = text.index(matches[0])\n    end = start + len(matches[0])\n    return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        yield match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literal = text[start:end]\n        results.append((literal, start, end))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern.\n    The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        substring = match.group()\n        yield (substring, start, end)"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.start(), match.end()\n        literal = text[start:end]\n        yield literal, start, end"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    This function takes an integer 'n' as input and returns the nth bell number.\n    '''\n    if n == 0: \n        return 1\n    \n    # Initialize an array of size n+1 to store the bell numbers\n    bell_num = [0]*(n+1) \n    \n    # Initialize the first two values of the array\n    bell_num[0] = 1\n    bell_num[1] = 1\n    \n    # Calculate the remaining values of the array using the formula\n    for i in range(2, n+1): \n        bell_num[i] = bell_num[i-1] + bell_num[i-2] \n        \n    return bell_num[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    \"\"\"\n    This function finds the nth bell number using dynamic programming.\n    \"\"\"\n    b = [0] * (n + 1)  # initializing the list with 0\n\n    # Base cases\n    b[0] = 1\n    b[1] = 1\n\n    # Using dynamic programming to find bell number\n    for i in range(2, n + 1):\n        b[i] = b[i - 1] + b[i - 2]\n\n    return b[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 0\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    b = [1]\n    for i in range(1, n+1): \n        b.append(sum(b[-i:]))\n    return b[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n-1]\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n+1):\n            bell.append(sum(bell))\n        return bell[-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_nums = [1]\n    for i in range(1, n+1): \n        bell_nums.append(bell_nums[i-1] * (i+1))\n    return bell_nums[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return sum(map(lambda x: bell_Number(x), range(n)))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth Bell Number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell * i\n    return bell\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Bell Number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a value k as input and returns a new list with the same elements as the input list, but the k'th element removed.\n    \"\"\"\n    if k > len(list1):\n        print(\"Error: k is larger than the length of the list.\")\n        return None\n    else:\n        return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input and returns a new list with the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and removes the k'th element from it and returns the updated list.\n    '''\n    if k >= len(list1):\n        return \"Invalid input\"\n    else:\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and removes the k'th element from the list.\n    \"\"\"\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1 and row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # create a new list to store the max of each column\n    max_list = []\n    # iterate through each column\n    for i in range(len(test_list[0])):\n        # initialize the max variable to the first element in the column\n        max_val = test_list[0][i]\n        # iterate through each element in the column\n        for j in range(1, len(test_list)):\n            # if the element in the column is greater than the current max, update the max\n            if test_list[j][i] > max_val:\n                max_val = test_list[j][i]\n        # append the max to the max_list\n        max_list.append(max_val)\n    # return the max of then'th column\n    return max_list[N-1]"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, this function returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = None\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for row in test_list:\n        col_max.append(row[N-1])\n    return max(col_max)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col = [row[N] for row in test_list]\n    return max(col)"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    if not lst:\n        return []\n    \n    result = [[] for _ in range(2)]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    \n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    # initialize empty lists for the first and second elements\n    first = []\n    second = []\n    \n    # iterate over each sublist in the input list\n    for sublist in lst:\n        # append the first and second elements to their respective lists\n        first.append(sublist[0])\n        second.append(sublist[1])\n    \n    # return the two lists\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return [result, [sublist[1] for sublist in lst]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    first_list = []\n    second_list = []\n\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[], []]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    if not lst:\n        return []\n    \n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list of tuples and returns a list containing the cumulative sum of all the values in the tuples.\n    '''\n    cum_sum = []\n    cum_sum.append(test_list[0][0])\n    for i in range(1, len(test_list)):\n        cum_sum.append(cum_sum[i-1] + test_list[i][0])\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Add the first element of the tuple to the cumulative sum\n        cum_sum += tup[0]\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    sum_val = 0\n    for i in test_list:\n        for j in i:\n            sum_val += j\n            result.append(sum_val)\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a tuple list as an input and returns the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sums\n    cummulative_list = []\n\n    # Calculate the cumulative sum of all the elements in the list\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n        cummulative_list.append(cummulative_sum)\n\n    # Return the list of cumulative sums\n    return cummulative_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_list = []\n    for tup in nums:\n        sum_tuple = 0\n        for num in tup:\n            sum_tuple += num\n        avg_list.append(sum_tuple / len(tup))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the average values\n    avg_list = []\n    \n    # iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the sum of the elements in the tuple\n        total = sum(tup)\n        # calculate the average by dividing the sum by the length of the tuple\n        avg = total / len(tup)\n        # append the average to the avg_list\n        avg_list.append(avg)\n        \n    # return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        total = 0\n        count = 0\n        for j in i:\n            total += j\n            count += 1\n        result.append(total/count)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        averages.append(total / len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg_tup = sum_tup / len(tup)\n        result.append(avg_tup)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Create an empty list to store the average values\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Initialize variables to keep track of the sum and count of values in the tuple\n        total = 0\n        count = 0\n        \n        # Loop through each value in the tuple and add it to the total and increment the count\n        for val in tup:\n            total += val\n            count += 1\n        \n        # Calculate the average value for the tuple and append it to the list\n        avg_list.append(total / count)\n    \n    # Return the list of average values\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(i % j for i, j in zip(test_tup1, test_tup2))\n    else:\n        print(\"Error: Tuples are not of the same length.\")"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Checking if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples are of different lengths.\")\n        return\n\n    # Calculating the element wise modulo and returning the result as a tuple\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tupples must have the same length')\n        \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    else:\n        return \"Tuples are not of equal length\""
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths do not match\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of the same length\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: tuples are not of the same length.\")\n        return\n    \n    # Perform the element-wise modulo operation\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the DP table\n    DP = [[float('inf')] * steps for _ in range(d + 1)]\n    DP[0][0] = 0\n\n    # Fill the DP table\n    for i in range(1, d + 1):\n        for j in range(steps):\n            if j == 0:\n                DP[i][j] = i\n            elif j > i:\n                break\n            else:\n                DP[i][j] = DP[i][j - 1] + 1\n                if j + 1 <= steps and DP[i - j - 1][j + 1]!= float('inf'):\n                    DP[i][j] = min(DP[i][j], DP[i - j - 1][j + 1] + 1)\n\n    # Return the minimum number of jumps required\n    return DP[d][steps - 1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two arguments - steps and d. \n    steps represents the number of steps that the player is able to take in a particular direction. \n    d represents the distance that the player needs to cover in that particular direction.\n    The function returns the minimum number of jumps required to reach the point (d, 0) from the origin in a 2D plane.\n    '''\n\n    if d == 0:\n        return 0\n\n    if steps == 0:\n        return float('inf')\n\n    jumps = [float('inf') for i in range(d+1)]\n    jumps[0] = 0\n\n    for i in range(1, d+1):\n        for j in range(i):\n            if (i-j) <= steps:\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n\n    return jumps[d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    \n    if steps == 0:\n        return -1\n    \n    return min_Jumps(steps-1, d-1) + 1 if d > 0 else -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    jumps = 0\n    current_jump = 0\n    \n    # traverse through the steps\n    for i in range(len(steps)):\n        # if current step is less than current jump, update current jump\n        if steps[i] <= current_jump:\n            current_jump = current_jump - steps[i]\n        # if current step is greater than current jump, update current jump and jumps\n        else:\n            current_jump = current_jump - steps[i]\n            jumps = jumps + 1\n    \n    # if we have reached the target, return jumps required\n    if current_jump == d:\n        return jumps\n    # if we haven't reached the target, return -1\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    if d < 1:\n        return 0\n    \n    n = len(steps)\n    dp = [float('inf')] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(max(0, i-d), i):\n            if j + steps[j] >= i:\n                dp[i] = min(dp[i], dp[j] + 1)\n    \n    return dp[n-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    # initialize the variables\n    jumps = 0\n    current_jump = 0\n    visited = [False] * steps\n    \n    # perform the jumps\n    while current_jump < steps - 1:\n        # check the available jumps\n        for i in range(1, d + 1):\n            # check if the current position can be reached\n            if current_jump + i >= steps or visited[current_jump + i]:\n                continue\n            # update the current jump and visited positions\n            current_jump += i\n            visited[current_jump] = True\n            jumps += 1\n            break\n        else:\n            # if no more jumps are available, the current position cannot be reached\n            return -1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 1 or d == 0:\n        return steps\n    \n    if steps < d:\n        return -1\n    \n    dp = [[float('inf') for i in range(d+1)] for j in range(steps+1)]\n    \n    for i in range(d+1):\n        dp[1][i] = i\n        \n    for i in range(2, steps+1):\n        for j in range(1, d+1):\n            if j >= i:\n                dp[i][j] = min(dp[i-1][j-1], dp[i][j])\n            else:\n                dp[i][j] = dp[i-1][j-1] + 1\n                \n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 1\n    elif d < 0 or steps <= 0:\n        return float('inf')\n    elif steps == 1:\n        return d\n    else:\n        return 1 + min_Jumps(steps-1, d-1) + min_Jumps(steps-1, d)"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    i = 0\n    n = len(steps)\n    \n    while i < n and i < d:\n        jumps += 1\n        i += steps[i]\n    \n    if i >= d:\n        return jumps\n    \n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    jump_count = 0\n    current_jump = 0\n    \n    # loop through steps\n    for i in range(steps):\n        # if current_jump is less than or equal to d, add 1 to jump_count and increase current_jump by 1\n        if current_jump <= d:\n            jump_count += 1\n            current_jump += 1\n        # if current_jump is greater than d, subtract 1 from current_jump\n        else:\n            current_jump -= 1\n            \n    # return jump_count\n    return jump_count"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists and returns a new list of the same length where each element is the division of the corresponding elements in the two input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        return \"The lists must have the same length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists should be of the same length\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        return \"Lists should have the same length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list where each element is the division of the corresponding elements of the two input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the division of corresponding elements in the input lists.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    numbers = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            result += char\n    return result + numbers"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    non_num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n    return ''.join(non_num_list) + ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    non_num_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    return non_num_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = ''\n    non_numbers = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            non_numbers += char\n    return non_numbers + numbers"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    This function takes a string as input and moves all the numbers to the end of the string.\n    '''\n\n    # Splitting the string into words\n    words = test_str.split()\n\n    # Creating a new list to store the words\n    new_words = []\n\n    # Looping through the words and appending each word to the new list if it is not a number\n    for word in words:\n        if not word.isdigit():\n            new_words.append(word)\n\n    # Joining the new list of words into a string\n    new_str =''.join(new_words)\n\n    # Adding the numbers to the end of the string\n    numbers = ''\n    for word in words:\n        if word.isdigit():\n            numbers += word +''\n\n    new_str += numbers.strip()\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n\n    Parameters:\n    test_str (str): A string to be modified\n\n    Returns:\n    str: The modified string with the numbers moved to the end\n\n    \"\"\"\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Create two empty lists to store words and numbers\n    words_list = []\n    num_list = []\n\n    # Iterate over the words and append them to the appropriate list\n    for word in words:\n        if word.isdigit():\n            num_list.append(word)\n        else:\n            words_list.append(word)\n\n    # Join the words list with a space separator and the numbers list with a comma separator\n    modified_str = \" \".join(words_list) + \", \" + \", \".join(num_list)\n\n    return modified_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Create a new list to store the words with numbers at the end\n    result = []\n    \n    # Iterate over the words and check if they are numbers\n    for word in words:\n        if word.isdigit():\n            # If a number is found, append it to the result list\n            result.append(word)\n        else:\n            # If a non-number word is found, add it to the result list\n            result.append(word)\n    \n    # Join the words in the result list into a string and return it\n    return \" \".join(result)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Remove all the spaces from the string\n    test_str = test_str.replace(\" \", \"\")\n    \n    # Initialize variables to store the number and the string\n    number = \"\"\n    result = \"\"\n    \n    # Loop through the string and check if the character is a number\n    for char in test_str:\n        if char.isdigit():\n            # If the character is a number, add it to the number string\n            number += char\n        else:\n            # If the character is not a number, add the number string to the result string\n            result += number\n            result += char\n            number = \"\"\n    \n    # Add the number string to the result string if there are any remaining\n    result += number\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_lst = []\n    str_lst = []\n    for char in test_str:\n        if char.isdigit():\n            num_lst.append(char)\n        else:\n            str_lst.append(char)\n    return ''.join(str_lst + num_lst)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    This function takes a string as input and returns a new string with all numbers moved to the end.\n    '''\n    num_list = []\n    alpha_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    new_str = ''.join(alpha_list) + ''.join(num_list)\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i+1][j] + 1\n            else:\n                dp[i][j] = max(dp[i][k] for k in range(i+1, j))\n    return max(dp[0][i] for i in range(n))"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    if n == 1:\n        return 1\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    a.sort()  # sort the list in ascending order\n    dp = [1] * n  # dp[i] stores the size of the largest subset ending at index i\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:  # if a[i] and a[j] are divisible, include them in the subset\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in descending order\n    a.sort(reverse=True)\n    # initialize variables\n    n = len(a)\n    largest = 0\n    # loop through the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # check if the current pair is divisible\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                # update the largest variable\n                largest = max(largest, j-i+1)\n                break\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    a.sort()\n    size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            size += 1\n        else:\n            size = 1\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return dp[n-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[i - 1] % a[j] == 0 and dp[j]:\n                dp[i] = True\n                break\n    for i in range(n, 0, -1):\n        if dp[i]:\n            return i\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 1\n            elif j == i + 1:\n                if a[i] % a[j] == 0:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = 1\n            else:\n                for k in range(i, j):\n                    if a[k] % a[j] == 0 and dp[i][k] + dp[k+1][j] > dp[i][j]:\n                        dp[i][j] = dp[i][k] + dp[k+1][j]\n\n    return dp[0][n-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    median = 0\n    if n % 2 == 0:\n        # If the size of the lists is even\n        mid1 = n // 2\n        mid2 = mid1 - 1\n        median = (max(arr1[mid1-1], arr2[mid2-1]) + min(arr1[mid1], arr2[mid2])) / 2\n    else:\n        # If the size of the lists is odd\n        mid = n // 2\n        median = max(arr1[mid-1], arr2[mid-1])\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two arrays\n    arr = arr1 + arr2\n\n    # Find the median\n    if n % 2 == 0:\n        # If the length of the array is even\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        # If the length of the array is odd\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:  # if n is even\n        median = (arr1[n//2-1] + arr1[n//2]) / 2\n        if median > arr2[n//2-1]:\n            median = (arr2[n//2-1] + arr2[n//2]) / 2\n    else:  # if n is odd\n        median = arr1[n//2]\n        if median > arr2[n//2]:\n            median = arr2[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge two sorted arrays into one\n    merged = []\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (merged[n//2 - 1] + merged[n//2]) / 2\n    else:\n        median = merged[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    # Base case\n    if n == 1:\n        return min(arr1[0], arr2[0])\n\n    # Find the middle element of both arrays\n    mid = n // 2\n    left1 = arr1[:mid]\n    left2 = arr2[:mid]\n    right1 = arr1[mid:]\n    right2 = arr2[mid:]\n\n    # Recursively find the median of the left and right sub-arrays\n    median_left = get_median(left1, left2, mid)\n    median_right = get_median(right1, right2, n - mid)\n\n    # Return the median of the two sub-arrays\n    return (median_left + median_right) / 2.0"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function finds the median of two sorted lists of same size.\n    \"\"\"\n    i = n // 2  # index of the median\n\n    # if n is odd, median is the middle element\n    if n % 2!= 0:\n        return (max(arr1[i], arr2[i]) + min(arr1[i - 1], arr2[i - 1])) / 2\n\n    # if n is even, median is the average of middle two elements\n    else:\n        return (max(arr1[i - 1], arr2[i - 1]) + min(arr1[i], arr2[i])) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Given two sorted lists, find the median value.\n    \"\"\"\n    # Check that the lists have the same size\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must have the same size.\")\n    \n    # Combine the two lists into one\n    combined = arr1 + arr2\n    \n    # Find the median value\n    if n % 2 == 0:\n        # If the length of the combined list is even, the median is the average of the two middle values\n        median = (combined[n//2 - 1] + combined[n//2]) / 2\n    else:\n        # If the length of the combined list is odd, the median is the middle value\n        median = combined[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the median of both arrays\n    if n % 2 == 0:\n        median1 = (arr1[n//2] + arr1[n//2 - 1]) / 2\n        median2 = (arr2[n//2] + arr2[n//2 - 1]) / 2\n    else:\n        median1 = arr1[n//2]\n        median2 = arr2[n//2]\n\n    # Compare the medians and return the larger one\n    if median1 > median2:\n        return median1\n    else:\n        return median2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2] + arr1[(n//2)-1])/2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If the length of the merged array is even, then the median is the average of the middle two elements.\n        median = (arr1[n//2] + arr1[n//2 - 1] + arr2[n//2] + arr2[n//2 - 1]) / 4.0\n    else:\n        # If the length of the merged array is odd, then the median is the middle element.\n        median = (max(arr1[n//2], arr2[n//2]) + min(arr1[n//2 - 1], arr2[n//2 - 1])) / 2.0\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function computes the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and computes their n-th power.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase, otherwise False.\n    \"\"\"\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and returns a new string with all characters in uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function converts the given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList.pop(0)\n    last_element = newList.pop(-1)\n    newList.insert(0, last_element)\n    newList.insert(-1, first_element)\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and interchanges the first and last element of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    print(\"List after swapping: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        print(\"After swapping the first and last element, the new list is:\", newList)\n    else:\n        print(\"List should have atleast two elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n    else:\n        return \"List should have at least two elements\""
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: \n        return \"Invalid input\"\n    else: \n        newList[0], newList[-1] = newList[-1], newList[0] \n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last element of the list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n        return\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(newList)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = (2 * math.pi * r) / 2  # Formula for area of triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    d = r * 2\n    \n    # Calculate the height of the triangle that can be inscribed in the semicircle\n    h = r / (math.sqrt(3) / 2)\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(3) / 4 * h ** 2\n    \n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes the radius of the semicircle as input and returns the area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    # calculate the length of the base of the triangle\n    base = math.sqrt(r**2 - (r/2)**2)\n    # calculate the height of the triangle\n    height = 2*r/3\n    # calculate the area of the triangle\n    area = 0.5*base*height\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes in a radius of a semicircle and returns the area of the largest triangle that can be inscribed in it.\n    \"\"\"\n    area = (math.pi * r**2) / 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Computes the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): radius of the semicircle\n\n    Returns:\n    float: area of the largest triangle inscribed in the semicircle\n    \"\"\"\n    # radius of the inscribed circle\n    R = r * math.sqrt(2)\n    # height of the triangle\n    h = 2 * R * math.sqrt(3) / 3\n    # area of the triangle\n    A = 0.5 * r * h\n    return A"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the semicircle's diameter\n    diameter = 2 * r\n    \n    # Calculate the length of the side of the triangle\n    side = math.sqrt(diameter**2 - r**2)\n    \n    # Calculate the area of the triangle\n    area = 0.5 * side * r\n    \n    # Return the area of the triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the length of the chord of the largest triangle\n    h = math.sqrt(r**2 - (r/2)**2)\n    \n    # Find the area of the triangle using Heron's formula\n    area = (math.sqrt(3)/4) * h**2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes the radius of the semicircle and returns the area of the largest triangle that can be inscribed in it.\n    '''\n    # Calculate the area of the semicircle using the formula A = pi*r^2/2\n    A_circle = math.pi * r**2 / 2\n    \n    # Calculate the diameter of the semicircle\n    d = 2*r\n    \n    # Calculate the length of the hypotenuse of the triangle that can be formed using the diameter of the semicircle\n    h = math.sqrt(r**2 - d**2/4)\n    \n    # Calculate the area of the triangle using the formula A = (1/2)*h*d\n    A_triangle = 0.5 * h * d\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    if A_circle > A_triangle:\n        return A_circle\n    else:\n        return A_triangle"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the diameter of the circle\n    d = 2 * r\n    \n    # Calculate the radius of the inscribed triangle\n    a = (math.sqrt(r**2 + r**2) - r) / 2\n    \n    # Calculate the height of the inscribed triangle\n    h = math.sqrt(r**2 - a**2)\n    \n    # Calculate the area of the largest triangle\n    area = 0.5 * d * h\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    \"\"\"\n    This function takes the radius of the semicircle as input and returns the area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    import math\n    \n    # Find the length of the longest side of the triangle\n    h = math.sqrt(r**2 - (r/2)**2)\n    \n    # Calculate the area of the triangle using the Heron's formula\n    area = (math.sqrt(3)/4) * r**2 * h\n    \n    return area"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    frequency = {}\n    for i in range(start, end + 1):\n        frequency[array[i]] = frequency.get(array[i], 0) + 1\n\n    # Traverse the array and find the first missing number\n    for i in range(start, end + 1):\n        if i!= frequency.get(i, None):\n            return i\n\n    # If all elements are present in the array, return the next element after the last element in the array\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    # Step 1: Initialize a variable to store the smallest missing number\n    smallest_missing = start\n    \n    # Step 2: Loop through the array, starting at the first element\n    for i in range(start, end+1):\n        # If the current element is not equal to its index + start,\n        # it means there is a missing number between start and i-1\n        if array[i]!= i + start:\n            # Update the smallest missing number\n            smallest_missing = i + start\n            break\n    \n    # Step 3: Loop through the array again, starting at the first element\n    for i in range(start, end+1):\n        # If the current element is less than or equal to the smallest missing number,\n        # it means it is part of a sequence and should be skipped\n        if array[i] <= smallest_missing:\n            continue\n        \n        # If the current element is greater than the smallest missing number,\n        # it means it is the first missing number and should be returned\n        if array[i] == smallest_missing + 1:\n            return smallest_missing + 1\n    \n    # If no missing number is found, the smallest missing number is the last element + 1\n    return smallest_missing + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array: A sorted list of natural numbers.\n        start: An optional argument to specify the starting index of the array.\n        end: An optional argument to specify the ending index of the array.\n\n    Returns:\n        The smallest missing number from the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] > end+1:\n            return end+1\n        if array[i]!= i+start:\n            return i+start\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function will find the smallest missing number in the given sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] - i - 1 >= 0:\n            if array[i]!= i+1 + array[array[i] - i - 1]:\n                return i+1 + array[array[i] - i - 1]\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] <= 0 or array[i] > len(array):\n            return None\n    \n    for i in range(start, end+1):\n        if array[i] == i+1:\n            continue\n        elif array[i] == array[array[i]-1]:\n            return array[i]\n        else:\n            array[array[i]-1], array[i] = array[i], array[array[i]-1]\n\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n        \n    for i in range(start,end+1):\n        if array[i] > end:\n            break\n        elif array[i] == i:\n            continue\n        else:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Set the value of the smallest missing number to be the smallest value in the array\n    smallest_missing = array[start]\n\n    # Loop through the array and check for missing numbers\n    for i in range(start + 1, end + 1):\n        if array[i] - array[i-1] > 1:\n            return smallest_missing + 1\n        elif array[i] > smallest_missing:\n            smallest_missing = array[i]\n\n    # If no missing numbers found, return the next value in the array\n    return smallest_missing + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        return start + 1\n\n    mid = (start + end) // 2\n\n    if mid < end and array[mid + 1] == mid + 2:\n        return find_First_Missing(array, mid + 2, end)\n\n    if mid > start and array[mid - 1] == mid - 1:\n        return find_First_Missing(array, start, mid - 1)\n\n    return mid + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): A sorted list of natural numbers.\n    start (int, optional): The starting index of the search space. Defaults to 0.\n    end (int, optional): The ending index of the search space. Defaults to the length of the list.\n\n    Returns:\n    int: The smallest missing number.\n    '''\n    \n    # If end is not provided, set it to the length of the list\n    if end is None:\n        end = len(array)\n    \n    # Initialize a variable to hold the smallest missing number\n    smallest_missing = None\n    \n    # Iterate through the list and check if each number is missing\n    for i in range(start,end+1):\n        if i!= array[i-start]:\n            # If the number is not missing, update the smallest missing number\n            if smallest_missing is None or i-start < smallest_missing:\n                smallest_missing = i-start\n                \n    # If the smallest missing number is None, return 1\n    if smallest_missing is None:\n        return 1\n    \n    return smallest_missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n\n    Args:\n    array: A sorted list of natural numbers (1 <= len(array) <= 10^4)\n    start: The starting index of the range of elements to consider.\n    end: The ending index of the range of elements to consider.\n\n    Returns:\n    The smallest missing number in the given range.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    # Initialize variables to keep track of the first and second missing numbers\n    first_missing = end + 1\n    second_missing = end + 1\n    # Loop through the array and update the first and second missing numbers accordingly\n    for i in range(start, end + 1):\n        if array[i] - array[start] > end - i:\n            return first_missing\n        elif array[i] - array[start] > 0:\n            first_missing = array[i]\n        if array[i] - array[start] == 1:\n            second_missing = array[i]\n    # If there are no missing numbers in the range, return the end index plus one\n    if first_missing > end:\n        return end + 1\n    # If there is only one missing number in the range, return the second missing number\n    elif second_missing == end + 1:\n        return first_missing\n    # If there are both a first and second missing number in the range, return the smallest missing number\n    else:\n        return min(first_missing, second_missing)"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    new_string = string.replace(\" \", \"%20\")\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char == \" \":\n            new_string += \"%20\"\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(\" \", \"%20\")\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in a given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in a given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_even_numbers(list):\n    \"\"\"\n    This function will take a list of numbers as input and return a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list with the even numbers from the input list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list: \n        if number % 2 == 0: \n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_numbers(list):\n    \"\"\"\n    This function takes a list of numbers and returns a list of even numbers in the same order.\n    \"\"\"\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as an argument and returns a list of even numbers from the list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # get all the valid adjacent coordinates\n    adj = []\n    for i in [-1, 0, 1]:\n        for j in [-1, 0, 1]:\n            if i == j == 0:\n                continue\n            adj.append((ele[0]+i, ele[1]+j))\n    \n    # filter out the ones that are outside the submatrix\n    if sub:\n        adj = [a for a in adj if a[0] >= sub[0][0] and a[0] <= sub[1][0] and a[1] >= sub[0][1] and a[1] <= sub[1][1]]\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(coord):\n    x, y = coord\n    return [(x+i, y+j) for i in range(-1, 2) for j in range(-1, 2) if i!= 0 or j!= 0]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the coordinates of the adjacent squares\n    adj = [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n    \n    # Check if the adjacent coordinates are within the bounds of the grid\n    adj_within_bounds = [(i,j) for i,j in adj if i>=0 and i<=7 and j>=0 and j<=7]\n    \n    # If sublist is empty, return the adjacent coordinates\n    if not sub:\n        return adj_within_bounds\n    # If sublist is not empty, return the coordinates that are not in the sublist\n    else:\n        return [coord for coord in adj_within_bounds if coord not in sub]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes two parameters:\n    - ele: A tuple of two integers representing the coordinates of a point.\n    - sub (optional): A list of tuples representing the coordinates of the points that are already visited. Default value is an empty list.\n\n    The function returns a list of tuples representing all the adjacent coordinates of the given point.\n    '''\n    adj = []\n    if ele[0]+1 <= 8 and (ele[0]+1, ele[1]) not in sub:\n        adj.append((ele[0]+1, ele[1]))\n    if ele[0]-1 >= 1 and (ele[0]-1, ele[1]) not in sub:\n        adj.append((ele[0]-1, ele[1]))\n    if ele[1]+1 <= 8 and (ele[0], ele[1]+1) not in sub:\n        adj.append((ele[0], ele[1]+1))\n    if ele[1]-1 >= 1 and (ele[0], ele[1]-1) not in sub:\n        adj.append((ele[0], ele[1]-1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    moves = [(x-1, y), (x, y+1), (x+1, y), (x, y-1)]\n    return [(x, y) for x, y in moves if (x, y) not in sub]\n"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple as an argument and returns a list of tuples, which represents all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    for i in range(len(adj)):\n        if adj[i] in sub:\n            adj.remove(adj[i])\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(coord):\n    '''\n    This function takes a tuple of coordinates as input and returns a list of all adjacent coordinates.\n    '''\n    x, y = coord[0], coord[1]\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    rows, cols = ele\n    adj = []\n    if rows - 1 >= 0:\n        adj.append((rows - 1, cols))\n    if rows + 1 <= 9:\n        adj.append((rows + 1, cols))\n    if cols - 1 >= 0:\n        adj.append((rows, cols - 1))\n    if cols + 1 <= 9:\n        adj.append((rows, cols + 1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(coord):\n    \"\"\"\n    Returns all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = coord\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    Extract all adjacent coordinates of a given coordinate tuple.\n\n    Args:\n        coord (tuple): A tuple of two integers representing a cartesian coordinate.\n        sub (list, optional): A list of previously found adjacent coordinates. Defaults to an empty list.\n\n    Returns:\n        list: A list of tuples representing the adjacent coordinates to `coord`.\n    \"\"\"\n    x, y = coord\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 9:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 9:\n        adj.append((x, y+1))\n    adj = [c for c in adj if c not in sub]\n    return adj + [coord]"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscore\n    new_text = text.replace(' ', '_')\n    \n    # Replace underscores with whitespaces\n    new_text = new_text.replace('_','')\n    \n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with underscores and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace whitespaces with underscore\n    text = text.replace(\" \", \"_\")\n    # Replace underscore with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as an input and moves all the zeroes to the end of the list.\n\n    Parameters:\n    num_list (list): The input list containing zeroes and non-zeroes.\n\n    Returns:\n    num_list (list): The modified list with all zeroes at the end.\n    \"\"\"\n    # Find the index of the first non-zero element\n    first_nonzero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            first_nonzero_index = i\n            break\n    \n    # Move all zeroes to the end of the list\n    zero_count = 0\n    for i in range(first_nonzero_index, len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            # Shift all non-zero elements to the left\n            for j in range(i, first_nonzero_index + zero_count - 1):\n                num_list[j] = num_list[j + 1]\n            # Assign the last non-zero element to the first zero element\n            num_list[first_nonzero_index + zero_count - 1] = 0\n            zero_count -= 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n            \n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all zeroes to the end of the list.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n    \n    for i in num_list:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    # create a new list to store non-zero values\n    non_zero_list = [0] * non_zero_count\n    \n    # fill the new list with non-zero values\n    j = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            non_zero_list[j] = num_list[i]\n            j += 1\n            \n    # add zeroes to the end of the new list\n    for i in range(zero_count):\n        non_zero_list.append(0)\n        \n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeros = []\n    non_zeros = []\n\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n\n    return non_zeros + zeros"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    for i in range(zero_count):\n        num_list.append(0)\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.remove(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = [num for num in num_list if num == 0]\n    non_zeroes = [num for num in num_list if num!= 0]\n    num_list[:] = zeroes + non_zeroes\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = [x for x in num_list if x == 0]\n    non_zeros = [x for x in num_list if x!= 0]\n    return non_zeros + zeros"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # find the index of the first non-zero element in the list\n    first_nonzero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            first_nonzero_index = i\n            break\n    \n    # swap all non-zero elements with non-zero elements from the end of the list\n    nonzero_count = 0\n    for i in range(first_nonzero_index, len(num_list)):\n        if num_list[i]!= 0:\n            num_list[first_nonzero_index + nonzero_count], num_list[i] = num_list[i], num_list[first_nonzero_index + nonzero_count]\n            nonzero_count += 1\n    \n    # fill the rest of the list with zeroes\n    for i in range(nonzero_count, len(num_list)):\n        num_list[first_nonzero_index + i] = 0\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function will take a list of n numbers as input and return the sum of xor of all pairs of numbers.\n    \"\"\"\n    # initialize the sum to 0\n    result = 0\n    \n    # loop through each element of the list\n    for i in range(n):\n        # loop through each element after the current element of the list\n        for j in range(i+1, n):\n            # calculate the xor of the current pair of numbers and add it to the sum\n            result += arr[i] ^ arr[j]\n            \n    # return the sum of xor of all pairs of numbers\n    return result"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s = s + (arr[i] ^ arr[j])\n    return s"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list arr and its length n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Traverse through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Add the xor of the current pair to the sum\n            sum += arr[i] ^ arr[j]\n            \n    # Return the sum of xor of all pairs of numbers\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list and its length as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s += arr[i] ^ arr[j]\n    return s"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list and returns the sum of XOR of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ (arr[i] ^ arr[j])\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given iterable using heap sort algorithm.\n    \"\"\"\n    heap = []\n    for element in iterable:\n        hq.heappush(heap, element)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = iterable[:]\n    hq.heapify(heap)\n    sorted_list = []\n\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and returns a sorted list using heap sort algorithm.\n    '''\n    # Convert the iterable to a max-heap\n    heap = [-x for x in iterable]\n    hq.heapify(heap)\n\n    # Sort the heap by repeatedly extracting the maximum element\n    sorted_list = []\n    while heap:\n        sorted_list.append(-hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort.\n    \"\"\"\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and sorts it using heap sort algorithm.\n    '''\n    heap = iterable[:]\n    heapify(heap)\n    result = []\n    while heap:\n        result.append(heappop(heap))\n    return result\n\ndef heapify(heap):\n    '''\n    This function takes a list and converts it into a heap in-place.\n    '''\n    for i in range(len(heap)//2-1, -1, -1):\n        heapify_helper(heap, i, len(heap))\n\ndef heapify_helper(heap, i, n):\n    '''\n    This is a helper function used by heapify() to recursively build a heap.\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and heap[left] > heap[largest]:\n        largest = left\n    if right < n and heap[right] > heap[largest]:\n        largest = right\n    if largest!= i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        heapify_helper(heap, largest, n)\n"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    heap = iterable[:]\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two parameters, actual_cost and sale_amount.\n    actual_cost is the actual cost of the item, and sale_amount is the amount of the item sold.\n    The function returns True if the sale has no profit and no loss, and False otherwise.\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"Sale has profit\")\n        return False\n    elif sale_amount < actual_cost:\n        print(\"Sale has loss\")\n        return False\n    else:\n        print(\"Sale has no profit or loss\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It checks whether the sale_amount has no profit and no loss.\n    '''\n    if sale_amount <= actual_cost:\n        print(\"No profit and no loss.\")\n    elif sale_amount > actual_cost:\n        print(\"Profit or loss exists.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two arguments: the actual cost of the item and the sale amount.\n    It returns True if the sale had no profit and no loss, and False otherwise.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit >= 0 and profit < actual_cost:\n        print(\"There is no profit and no loss.\")\n    else:\n        print(\"There is a profit or a loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments, actual_cost and sale_amount. \n    It checks whether the sale_amount has no profit and no loss.\n    '''\n    if sale_amount <= actual_cost:\n        print(\"No profit and no loss\")\n    elif sale_amount > actual_cost:\n        print(\"Profit and loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss.\n    '''\n    if sale_amount >= actual_cost:\n        print('The sale has no profit and no loss.')\n    else:\n        print('The sale has a profit or a loss.')"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit and loss exists\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        print(\"The sale amount has a profit.\")\n    elif sale_amount == actual_cost:\n        print(\"There is no profit or loss.\")\n    else:\n        print(\"The sale amount has a loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        print(\"Profit!\")\n    elif sale_amount < actual_cost:\n        print(\"Loss!\")\n    else:\n        print(\"No profit and no loss!\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss.\n    '''\n    if sale_amount > actual_cost:\n        print(\"Profit\")\n    elif sale_amount == actual_cost:\n        print(\"No profit or loss\")\n    else:\n        print(\"Loss\")"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind velocity from km/h to m/s\n    v = v / 3.6\n    \n    # calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the Wind Chill Index given the wind velocity in km/h and temperature in celsius.\n    '''\n    celsius = (t - 32) * 5/9\n    wind_chill_index = 13.12 + 0.6215 * celsius - 11.37 * (v ** 0.16) + 0.3965 * celsius * (v ** 0.16)\n    return math.ceil(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert velocity and temperature to SI units\n    v = v * 0.277778  # km/h to m/s\n    t = t + 273.15    # celsius to kelvin\n\n    # calculate the wind chill index\n    wind_chill = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n\n    # round the wind chill index to the next integer\n    wind_chill = round(wind_chill)\n\n    return wind_chill"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    # Return the wind chill index\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t_f = (t * 9/5) + 32 # convert celsius to fahrenheit\n    ws = v * 0.277778 # convert km/h to m/s\n    windchill = 35.74 + 0.6215 * t_f - 35.75 * (ws ** 0.16) + 0.4275 * t_f * (ws ** 0.16) # calculate wind chill index\n    return math.ceil(windchill) # round to the next integer"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    :param v: float, wind velocity in km/h\n    :param t: float, temperature in celsius\n    :return: int, wind chill index rounded to the next integer\n    \"\"\"\n    # Convert km/h to m/s\n    v = v / 3.6\n\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n\n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer.\n    :param v: Wind velocity in km/h.\n    :param t: Temperature in Celsius.\n    :return: Wind chill index in Celsius.\n    \"\"\"\n    # Calculate the wind chill index using the formula: WCI = 13.12 + 0.6215 * T - 11.37 * v^0.16 + 0.3965 * T * v^0.16\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate wind chill index\n    wc = 35.74 + (0.6215 * t_f) - (35.75 * (v ** 0.16)) + (0.4275 * t_f * (v ** 0.16))\n    \n    # Round the wind chill index to the next integer\n    wc_round = round(wc)\n    \n    return wc_round"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    This function takes a list of sample names as input and returns the sum of the length of all the names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower() == False:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define a function to check if the first letter of a string is lowercase\n    def is_lowercase(string):\n        return string[0].islower()\n\n    # Use the filter() function to remove the names that start with a lowercase letter\n    filtered_names = filter(lambda name: not is_lowercase(name), sample_names)\n\n    # Use the map() function to get the length of each remaining name\n    name_lengths = map(lambda name: len(name), filtered_names)\n\n    # Use the sum() function to add up the lengths of the remaining names\n    total_length = sum(name_lengths)\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total += len(name)\n    return total"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_names(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the length of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    for i in items:\n        match = pattern.search(i)\n        if match:\n            i = i.replace(match.group(), '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'  # pattern to match any text inside parentheses\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_items.append(new_item)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them from it.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function removes the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)' # matches any text between parenthesis\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes in an integer n and returns the nth nonagonal number.\n    \"\"\"\n    return n * (3*n - 1) / 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function finds the nth nonagonal number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count < n:\n        num += 1\n        count += num\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += 10*i\n        print(num)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*(3*i-1)//2\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count < n:\n        num += 16\n        count += 1\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 1\n        count += 1\n    return num * (num + 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        num += 1\n        count += num\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = (n * (n+1)) // 2\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a += i\n        yield a"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes a non-negative integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    count = 0\n    i, j = 1, 1\n    \n    while count < n:\n        print(i + j)\n        i += 1\n        j += 1\n        count += 1"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'\\Bz\\b'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    result = bool(re.search(pattern, text))\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"\\b(?!.*z)\\w*z\\w*\\b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Use a regular expression to match any 'z' that is not at the start or end of the word\n    pattern = r'(?<![^\\w\\s])z(?![^\\w\\s])'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    regex = re.compile(r'\\bz\\b', re.IGNORECASE)\n    result = regex.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\bz\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?![^.]*z[^.]*\\b)\\w*z\\w*\\b(?![^.]*z[^.]*\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*[A-Za-z]{1})\\bz\\b(?!.*[A-Za-z]{1})\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*z)(?!^.*z)(?!.*z$).*z.*\\b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes two arguments, an input array and a value k.\n    It returns a new array that contains the original elements of the input array reversed up to the kth position.\n    '''\n    n = len(input)\n    new_array = input[:k]\n    new_array.reverse()\n    for i in range(k, n):\n        new_array.append(input[i])\n    return new_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_array_upto_k(input_list, k):\n    \"\"\"\n    This function takes in an array and a position k. It returns a new array that is the original array reversed up to the position k.\n    \"\"\"\n    reversed_list = input_list[:k]\n    reversed_list.reverse()\n    return reversed_list + input_list[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a value k as input and returns the array reversed upto k.\n    '''\n    # check if k is less than or equal to the length of the input array\n    if k <= len(input):\n        # reverse the array upto k\n        return input[:k][::-1] + input[k:]\n    else:\n        # return the input array if k is greater than the length of the input array\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the entire array\n    input = input[::-1]\n    # Reverse the array up to k\n    input[:k] = input[:k][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array as input and reverses the array upto a given position k.\n    '''\n    n = len(input)\n    if k >= n:\n        return input\n    else:\n        reversed_array = input[k+1:n][::-1]\n        reversed_array.extend(input[:k+1])\n        return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as inputs and returns the reverse of the array upto the kth position.\n    '''\n    n = len(input) \n    output = [] \n    for i in range(k): \n        output.append(input[i]) \n    for i in range(k, n): \n        output.append(input[i]) \n    output.reverse() \n    return output"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an array and a position k as input, and returns a new array with the elements from the original array up to position k reversed.\n    \"\"\"\n    # First, slice the array upto position k\n    sliced_array = input[:k]\n    \n    # Reverse the sliced array\n    reversed_array = sliced_array[::-1]\n    \n    # Concatenate the reversed array with the remaining elements of the original array\n    new_array = reversed_array + input[k:]\n    \n    return new_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses an array upto a given position k.\n    \"\"\"\n    if k >= len(input):\n        return input[::-1]\n    else:\n        return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position `k` as input, and returns the array reversed up to position `k`.\n\n    Example:\n    input = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 4\n    output = [1, 2, 3, 4, 5, 6, 7, 4, 3, 2, 1]\n    '''\n    # initialize an empty array to store the reversed array\n    output = []\n\n    # iterate over the input array up to position `k`\n    for i in range(k):\n        # append each element of the input array to the output array\n        output.append(input[i])\n\n    # reverse the output array\n    output = output[::-1]\n\n    # iterate over the input array from position `k` to the end\n    for i in range(k, len(input)):\n        # append each element of the input array to the output array\n        output.append(input[i])\n\n    # return the output array\n    return output"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    \n    # initialize the table with the cost of each cell\n    table = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        table[i][0] = cost[i][0]\n        table[0][i] = cost[0][i]\n        \n    # fill the table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            table[i][j] = cost[i][j] + max(table[i-1][j], table[i][j-1])\n    \n    # find the maximum average path\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            max_avg = max(max_avg, (table[i][j] + table[0][0]) / (2*(i+j+1)))\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # create a 2D array to store the maximum average of path for each possible ending cell\n    max_avg = [[0 for j in range(len(cost))] for i in range(len(cost))]\n\n    # initialize the first row and first column\n    for i in range(len(cost)):\n        max_avg[i][0] = cost[i][0]\n        max_avg[0][i] = cost[0][i]\n\n    # fill in the rest of the array using dynamic programming\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost)):\n            # compute the maximum average of path for the current ending cell\n            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]\n\n    # compute the maximum average of path for the whole matrix\n    max_avg_path = max_avg[-1][-1]\n\n    # compute the number of cells visited in the maximum average path\n    num_cells_visited = max_avg[-1][-1]\n    i, j = len(cost)-1, len(cost)-1\n    while i > 0 or j > 0:\n        if i == 0:\n            num_cells_visited -= cost[i][j-1]\n            j -= 1\n        elif j == 0:\n            num_cells_visited -= cost[i-1][j]\n            i -= 1\n        elif max_avg[i-1][j] > max_avg[i][j-1]:\n            num_cells_visited -= cost[i-1][j]\n            i -= 1\n        else:\n            num_cells_visited -= cost[i][j-1]\n            j -= 1\n\n    return max_avg_path, num_cells_visited"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def find_path(i, j, visited, total_cost, max_avg):\n        '''\n        Recursive function to find all possible paths from the current cell (i, j) to the bottom-right cell.\n        The function keeps track of the visited cells and the total cost so far, as well as the maximum average found so far.\n        '''\n        if i == n-1 and j == n-1: # reached bottom-right cell\n            visited[i][j] = True # mark as visited\n            total_cost += cost[i][j]\n            avg = total_cost / len(visited) # compute average\n            if avg > max_avg: # update maximum average\n                max_avg = avg\n            visited[i][j] = False # backtrack\n            return max_avg\n        \n        if i < n-1 and visited[i+1][j] == False: # move right\n            visited[i][j] = True # mark as visited\n            total_cost += cost[i][j]\n            max_avg = find_path(i+1, j, visited, total_cost, max_avg)\n            total_cost -= cost[i][j]\n            visited[i][j] = False # backtrack\n        \n        if j < n-1 and visited[i][j+1] == False: # move down\n            visited[i][j] = True # mark as visited\n            total_cost += cost[i][j]\n            max_avg = find_path(i, j+1, visited, total_cost, max_avg)\n            total_cost -= cost[i][j]\n            visited[i][j] = False # backtrack\n        \n        return max_avg\n    \n    n = len(cost)\n    visited = [[False for _ in range(n)] for _ in range(n)] # initialize visited matrix\n    max_avg = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if visited[i][j] == False: # start from each unvisited cell\n                max_avg = find_path(i, j, visited, cost[i][j], max_avg)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and \n    ends on bottom right cell. We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def dfs(row, col, visited, total_cost, path_cost, num_cells):\n        '''\n        DFS function to traverse all possible paths and find the maximum average path.\n        '''\n        visited[row][col] = True\n        total_cost += cost[row][col]\n        path_cost += cost[row][col]\n        num_cells += 1\n        \n        if row == len(cost) - 1 and col == len(cost) - 1:\n            # Base case: reached the bottom-right cell\n            return total_cost, path_cost, num_cells\n        \n        # Recursive case: move right or down\n        if row < len(cost) - 1 and not visited[row + 1][col]:\n            right_cost, right_path_cost, right_num_cells = dfs(row + 1, col, visited, total_cost, path_cost, num_cells)\n            if right_cost > max_cost:\n                max_cost = right_cost\n                max_path_cost = right_path_cost\n                max_num_cells = right_num_cells\n        \n        if col < len(cost) - 1 and not visited[row][col + 1]:\n            down_cost, down_path_cost, down_num_cells = dfs(row, col + 1, visited, total_cost, path_cost, num_cells)\n            if down_cost > max_cost:\n                max_cost = down_cost\n                max_path_cost = down_path_cost\n                max_num_cells = down_num_cells\n        \n        # Backtrack: unwind the recursion and remove the last cell from the path\n        visited[row][col] = False\n        total_cost -= cost[row][col]\n        path_cost -= cost[row][col]\n        num_cells -= 1\n        \n        return max_cost, max_path_cost, max_num_cells\n    \n    max_cost = 0\n    max_path_cost = 0\n    max_num_cells = 0\n    \n    # Create a visited matrix to keep track of visited cells\n    visited = [[False for _ in range(len(cost))] for _ in range(len(cost))]\n    \n    # DFS starting from the top-left cell\n    total_cost, path_cost, num_cells = dfs(0, 0, visited, 0, 0, 0)\n    \n    # Compute the maximum average path\n    average = max_path_cost / max_num_cells\n    \n    return average"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n\n    # Initialize the table with the cost of the first path\n    table = [[cost[0][0]]]\n\n    # Fill the table row by row\n    for i in range(1, n):\n        row = [0] * n\n        row[0] = cost[i][0] + table[i-1][0]\n        row[-1] = cost[i][-1] + table[i-1][-2]\n        for j in range(1, n-1):\n            row[j] = cost[i][j] + max(table[i-1][j-1], table[i-1][j])\n        table.append(row)\n\n    # Find the maximum average in the table\n    max_avg = 0\n    max_row = 0\n    max_col = 0\n    for i in range(n):\n        for j in range(n):\n            avg = (table[i][j] + table[i][j+1]) / (n-1)\n            if avg > max_avg:\n                max_avg = avg\n                max_row = i\n                max_col = j\n\n    # Construct the path with maximum average\n    path = [(max_row, max_col)]\n    while max_row > 0 and max_col > 0:\n        if table[max_row-1][max_col] > table[max_row][max_col-1]:\n            max_row -= 1\n        else:\n            max_col -= 1\n        path.append((max_row, max_col))\n\n    # Reverse the path to start from top-left\n    path.reverse()\n\n    return max_avg, path"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # calculate the maximum average of a path starting at top-left corner of matrix\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n\n    # fill the matrix using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # find the maximum average path\n    max_avg = dp[n-1][n-1]/2 # maximum average of a path starting at top-left corner of matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            if i > 1 and j > 1:\n                avg = (dp[i][j-1] + dp[i-1][j-1] + dp[i-1][j]) / 3\n                if avg > max_avg:\n                    max_avg = avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = -float('inf')\n    for i in range(n):\n        for j in range(n):\n            curr_avg = dp[i][j] / (2 + i + j)\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)] # initialize the dp array with 0\n\n    for i in range(n):\n        dp[i][0] = cost[i][0] # set the first column of the dp array with the first column of the cost matrix\n\n    for j in range(n):\n        dp[0][j] = cost[0][j] # set the first row of the dp array with the first row of the cost matrix\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j] # compute the maximum cost of the path ending at (i,j) by either going to (i-1,j) or (i,j-1) and then adding the cost of the current cell\n\n    max_path_cost = dp[n-1][n-1] # the maximum cost of any path is stored in the bottom-right cell of the dp array\n\n    # now, we need to find all the paths with this maximum cost and compute their averages\n\n    paths = [] # to store all the paths with maximum cost\n\n    # starting from the bottom-right cell, backtrack to find all possible paths\n    i = n-1\n    j = n-1\n    path = []\n    while i >= 0 and j >= 0:\n        path.append((i,j))\n        if i == 0 and j == 0: # we have reached the top-left cell, we can stop backtracking\n            break\n        elif i == 0: # we are at the first row, can only move left\n            j -= 1\n        elif j == 0: # we are at the first column, can only move up\n            i -= 1\n        elif dp[i-1][j] > dp[i][j-1]: # move up\n            i -= 1\n        else: # move left\n            j -= 1\n\n    paths.append(path)\n\n    for path in paths:\n        total_cost = 0\n        num_cells = len(path)\n        for cell in path:\n            total_cost += cost[cell[0]][cell[1]]\n        average_cost = total_cost / num_cells\n        print(\"Path:\", path, \"Average cost:\", average_cost)\n\n    return max_path_cost"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1]/(n*n)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            # Starting from cell (i,j)\n            # Compute the maximum average path ending at this cell\n            # We can either move right or down from this cell\n            # Compute the average of each possible path\n            right_avg = (i+1) * cost[i][j] / (i+2) if i+1 < n else 0\n            down_avg = (j+1) * cost[i][j] / (j+2) if j+1 < n else 0\n            avg = max(right_avg, down_avg)\n            max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, height_weight in students.items():\n        if height_weight[0] > h and height_weight[1] > w:\n            filtered_students[name] = height_weight\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student in students:\n        height, weight = students[student]\n        if height > h and weight > w:\n            result[student] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] >= h and value[1] >= w:\n            filtered_students[key] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n\nstudents = {'John': (1.8, 70), 'Mary': (1.6, 50), 'Bob': (1.7, 80), 'Alice': (1.5, 40), 'David': (1.9, 90)}\nfiltered_students = filter_data(students, 1.6, 50)\nprint(filtered_students)"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] >= h and value[1] >= w:\n            filtered_students[key] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        if details[0] >= h and details[1] >= w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    base_to_power = base ** power\n    while base_to_power > 0:\n        result += base_to_power % 10\n        base_to_power //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for digit in str(base**power):\n        power_sum += int(digit)\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string to iterate over each character\n    base_str = str(base)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over each digit in the string and add it to the sum\n    for digit in base_str:\n        sum += int(digit) ** power\n    # Return the final sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    base_copy = base\n    while power > 0:\n        if base_copy >= 10:\n            power_sum += base_copy % 10\n            base_copy //= 10\n        else:\n            power_sum += base_copy\n            power = 0\n        power -= 1\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the power to an integer\n    power = int(power)\n\n    # convert the base to a string\n    base_str = str(base)\n\n    # initialize the sum to zero\n    sum = 0\n\n    # loop through each digit in the base string\n    for digit in base_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # add the digit raised to the specified power to the sum\n        sum += digit_int**power\n\n    # return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base)\n        base = str(base)\n        base = base[0]\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for digit in str(base):\n        power_sum += int(digit)**power\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n\n    :param base: The base number.\n    :param power: The exponent to which the base is raised.\n    :return: The sum of all digits of the base to the specified power.\n    \"\"\"\n    digits_sum = 0\n    for digit in str(base ** power):\n        digits_sum += int(digit)\n    return digits_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base**power):\n        sum += int(digit)\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_copy = base\n    while base_copy > 0:\n        digit = base_copy % 10\n        sum += digit ** power\n        base_copy //= 10\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Use regular expressions to match patterns with quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    # Return all matches as a list of strings\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    matches = re.findall(r'\"(.*?)\"', text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of all the values between quotation marks.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup = result_tup + (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(test_tup[i]*test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    result = ()\n    for i in range(n-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    n = len(test_tup) - 1\n    res_tup = (test_tup[i] * test_tup[i+1] for i in range(n))\n    return tuple(res_tup)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists and returns a list containing the sums of the corresponding elements of the two lists.\n    \"\"\"\n    # Check if the input lists are of equal length\n    if len(lst1)!= len(lst2):\n        print(\"Error: The two lists are not of equal length.\")\n        return None\n    \n    # Create an empty list to store the sums\n    result = []\n    \n    # Iterate through the lists and add corresponding elements\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Returns a list of sums of corresponding elements in two lists.\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError('Lists must have the same length')\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains the sum of elements of the two input lists.\n    \"\"\"\n    # Create an empty list to store the sum of elements of the two input lists\n    result = []\n\n    # Iterate through both lists and add corresponding elements\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    # Return the sum of the two input lists\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements of the input lists.\n    '''\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns a list of their element-wise sum.\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns a new list containing the sum of corresponding elements of the input lists.\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Return a new list containing the element-wise sum of the input lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The input lists must have the same length.\")\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        print(\"Error: Lists must have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        group = list(g)\n        if len(group) > 1:\n            result.extend(group[:-1])\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function removes consecutive duplicates of a given list.\n    '''\n    # convert the list into a string to group the consecutive duplicates\n    nums = ''.join(map(str, nums))\n    # group the consecutive duplicates and join them with ''\n    nums = ''.join(k for k, _ in groupby(nums))\n    # convert the string back to a list of integers\n    nums = [int(i) for i in nums]\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list of numbers.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    groups = groupby(nums)\n    result = [k for k, g in groups if len(list(g)) > 1]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        group = list(g)\n        if len(group) > 1:\n            result += group\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        group = list(g)\n        if len(group) > 1:\n            for i in range(len(group)-1):\n                if group[i] == group[i+1]:\n                    result.append(group[i])\n                else:\n                    break\n            result += group[i+1:]\n        else:\n            result += group\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result.extend(list(g))\n        else:\n            result.append(next(iter(g)))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h\n\nprint(lateralsurface_cone(5, 10))"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Function to calculate lateral surface area of a cone.\n    Parameters:\n    r (float): radius of the base of the cone\n    h (float): height of the cone\n    Returns:\n    lateral_surface_area (float): lateral surface area of the cone\n    '''\n    lateral_surface_area = math.pi * r * h\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius r and height h of a cone and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*h + 2*math.pi*r*r"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h + math.pi * r**2"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius and height of a cone and returns its lateral surface area.\n    '''\n    lateral_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes the radius of the cone and the height of the cone as inputs and returns the lateral surface area of the cone.\n    '''\n    lateralsurface_area = math.pi*r*(r+math.sqrt(r**2+h**2))\n    return lateralsurface_area"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace spaces, commas, and dots with a colon\n    new_text = re.sub('[,.]', ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(replace_specialchar(text)) # Output: \"The:quick:brown:fox:jumps:over:the:lazy:dog.\""
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[., ]', ':', text)\n\ntext = \"This is a test, sentence with spaces and dots, and commas.\"\nnew_text = replace_specialchar(text)\nprint(new_text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(r'[,.]', ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(r'[,.]', ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r\"[.,]\", \":\", text)"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize variables\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    # Binary search\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            result = mid\n            high = mid - 1 # Look for previous occurrence\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    A (list): A sorted list of integers.\n    x (int): The number to search for.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not in A.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        \n        elif A[mid] < x:\n            left = mid + 1\n        \n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes two arguments:\n    A: A sorted list of integers\n    x: An integer to search for in the list A\n    \n    The function returns the index of the first occurrence of the number x in the list A,\n    or -1 if the number is not found.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1 # empty array\n    \n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        \n        elif A[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1 # not found"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # Loop until the pointers meet or cross\n    while left <= right:\n        # Find the middle index\n        middle = (left + right) // 2\n        \n        # If the middle element is equal to the target, search to the left\n        if A[middle] == x:\n            right = middle - 1\n        # If the middle element is greater than the target, search the left half\n        elif A[middle] > x:\n            right = middle - 1\n        # If the middle element is less than the target, search the right half\n        else:\n            left = middle + 1\n    \n    # If the target was not found, return -1\n    if left > right:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # x is found at mid\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    # x is not found in A\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    # Initialize variables to store prefix products\n    prefix_prod = [1] * n\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n    # Initialize variables to store suffix products\n    suffix_prod = [1] * n\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i+1]\n    # Initialize variables to store sum of products of all subarrays\n    sum_subarrays = 0\n    for i in range(n):\n        # Add product of prefix and suffix subarray to sum\n        sum_subarrays += prefix_prod[i] * suffix_prod[i]\n        # Handle modulo to prevent integer overflow\n        sum_subarrays %= mod\n    return sum_subarrays"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 1000000007\n    arr_prod = 1\n    prefix_prod = [0] * (n+1)\n    prefix_sum = [0] * (n+1)\n    prefix_prod[0] = 1\n    prefix_sum[0] = 0\n    for i in range(1, n+1):\n        arr_prod *= arr[i-1]\n        prefix_prod[i] = arr_prod\n        prefix_sum[i] = (prefix_sum[i-1] + prefix_prod[i]) % mod\n\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans = (ans + (prefix_prod[j+1] * prefix_sum[i])) % mod\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    dp = [0]*n\n    dp[0] = arr[0]\n    dp[1] = arr[0]*arr[1]\n    for i in range(2, n):\n        dp[i] = dp[i-1] + arr[i]*dp[i-2]\n    return dp[n-1]"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize sum_product to zero\n    sum_product = 0\n    # loop through all sublists of arr\n    for i in range(n):\n        for j in range(i, n):\n            # multiply all elements in sublist and add to sum_product\n            sublist = arr[i:j+1]\n            product = 1\n            for k in range(len(sublist)):\n                product *= sublist[k]\n            sum_product += product\n    return sum_product"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n\n    suffix_prod = [1] * n\n\n    # calculating prefix product\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n\n    # calculating suffix product\n    for i in range(n - 2, -1, -1):\n        suffix_prod[i] = suffix_prod[i + 1] * arr[i + 1]\n\n    # finding sum of products of all subarrays\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += prefix_prod[i] * suffix_prod[j]\n\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    \n    # Initialize variables\n    res = 0\n    cur_prod = 1\n    \n    # Traverse through the array\n    for i in range(n):\n        res += cur_prod\n        cur_prod = (cur_prod * arr[i]) % mod\n    \n    return res % mod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. \n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        temp = 1\n        for j in range(i,n):\n            temp *= arr[j]\n            sum += temp\n            \n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function finds the sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    prefix_product = [1] * n\n    postfix_product = [1] * n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n    for i in range(n-2, -1, -1):\n        postfix_product[i] = postfix_product[i+1] * arr[i+1]\n    res = 0\n    for i in range(n):\n        res += prefix_product[i] * postfix_product[i]\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9+7\n    # Initialize variables\n    left = [0]*n\n    right = [0]*n\n    prefix_prod = 1\n    postfix_prod = 1\n    # Calculate prefix products\n    for i in range(n):\n        prefix_prod = prefix_prod*arr[i]\n        left[i] = prefix_prod % mod\n    # Calculate postfix products\n    for i in range(n-1, -1, -1):\n        postfix_prod = postfix_prod*arr[i]\n        right[i] = postfix_prod % mod\n    # Calculate sum of products\n    result = 0\n    for i in range(n):\n        result = (result + (prefix_prod*postfix_prod - arr[i]*left[i]*right[i])) % mod\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1]\n    for i in range(1, n):\n        prefix_prod.append(prefix_prod[i-1]*arr[i-1])\n        \n    suffix_prod = [1]\n    for i in range(n-2, -1, -1):\n        suffix_prod.append(suffix_prod[-1]*arr[i+1])\n    suffix_prod.reverse()\n    \n    return sum(prefix_prod[i]*suffix_prod[i] for i in range(n))"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits in the number\n    num_bits = len(bin(n)) - 2\n    # create a mask that has 1s in all positions except for the first and last bit\n    mask = (1 << num_bits) - 1 - (1 << (num_bits-1))\n    # toggle the bits using the mask\n    return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the number\n    bin_n = bin(n)[2:]\n\n    # Toggle the middle bits by flipping their values\n    new_n = \"\"\n    for bit in bin_n[1:-1]:\n        if bit == \"1\":\n            new_n += \"0\"\n        else:\n            new_n += \"1\"\n\n    # Convert the binary representation back to a decimal number\n    new_n = int(new_n, 2)\n\n    # Return the new number\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = 0b1110\n    n &= ~mask  # clear the bits to be toggled\n    n ^= 0b1111  # toggle the bits\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n    \"\"\"\n    mask = (1 << len(bin(n)[2:]) - 2) - 1  # gets the mask for the middle bits\n    n = n ^ mask  # toggles the bits\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    n &= ~(1 << 0) | ~(1 << 31)  # To toggle all bits except first and last, we use the bitwise NOT operator (~) with the bitwise left shift (<<) and the bitwise right shift (>>) operators.\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # toggle the bits of the number except the first and the last bit\n    return n ^ ((1 << len(bin(n)[2:])) - 1) ^ (1 << len(bin(n)[2:]) - 2)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Extract the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << len(bin(n)) - 2)\n\n    # Extract the middle bits of the number\n    middle_bits = n & ~first_bit & ~last_bit\n\n    # Toggle the middle bits\n    toggled_bits = ~middle_bits & ((1 << len(bin(middle_bits))) - 1)\n\n    # Combine the toggled bits with the first and last bits\n    result = toggled_bits | first_bit | last_bit\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # To toggle the bits, we need to change the bits of the number except the first and the last bit.\n    # To get the first and the last bit, we can use bitwise AND operator & with 1 and 11111111 (which is 2^7 - 1)\n    # Then we can use the XOR operator ^ to toggle the bits of the number\n    # Finally, we can combine the result with the original number to get the final output\n\n    # Get the first and the last bit of the number\n    first_bit = n & 1\n    last_bit = (n >> 7) & 1\n\n    # Toggle the bits except the first and the last bit\n    middle_bits = ~((n >> 1) & 0b11111110)\n\n    # Combine the result with the original number to get the final output\n    result = (first_bit << 6) | (middle_bits << 1) | last_bit\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    This function takes a number as input and toggles the bits of the number except the first and the last bit.\n    '''\n\n    # Left shift the number to get all the bits to the left of the first bit (which is the least significant bit)\n    left_shift = n << 1\n\n    # Right shift the number to get all the bits to the right of the last bit (which is the most significant bit)\n    right_shift = n >> 1\n\n    # XOR the left and right shifted bits to toggle all the bits except the first and the last bit\n    toggled_bits = left_shift ^ right_shift\n\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles the bits of a given number except the first and last bits.\n\n    :param n: An integer representing a number to toggle.\n    :return: An integer representing the number with toggled bits.\n    \"\"\"\n    # Get the bits of the number without the first and last bits.\n    middle_bits = n & 0b11111110\n\n    # Toggle the bits of the number without the first and last bits.\n    middle_bits = ~middle_bits & 0b11111111\n\n    # Return the number with toggled bits.\n    return (n & 0b1111111100000000) | middle_bits"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    if a[i-1] < x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index where the value should be inserted\n    index = bisect.bisect_left(a, x)\n    \n    # If the value is already in the list, return the index of the first occurrence\n    if index!= len(a) and a[index] == x:\n        while index > 0 and a[index-1] == x:\n            index -= 1\n    \n    return index"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"The string starts with a vowel.\")\n    else:\n        print(\"The string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Check if the given string starts with a vowel or not.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    return pattern.match(string)"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string) \n    if match: \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + (geometric_sum(n-1) * (1/n))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1-0.5**n)/(1-0.5)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - 1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + geometric_sum(n-1)\n\nn = int(input(\"Enter a positive integer: \"))\n\nif n < 1:\n    print(\"Please enter a positive integer.\")\nelse:\n    print(f\"The geometric sum of {n-1} is {geometric_sum(n)}\")"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-n**-1)*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculates the geometric sum of n-1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = 1\n    count = 1\n    \n    while len(str(num)) < n: \n        num += count\n        count += 1\n        \n    return num\n"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    if n == 1:\n        return 1\n    \n    # Find the largest multiple of 10 that is less than n\n    multiple_of_10 = math.floor(n / 10) * 10\n    \n    # Calculate the number of digits in the largest triangular number with multiple_of_10 digits\n    num_digits = multiple_of_10 * (multiple_of_10 + 1) // 2\n    \n    # Calculate the index of the smallest triangular number with n digits\n    index = (n - num_digits) // 10\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return math.ceil(n*(n+1)/2)-1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    start = 10**(n-1) # starting number for the search\n    end = 10**n - 1 # ending number for the search\n    \n    for i in range(start, end): \n        triangular_number = int((math.sqrt(1+8*i)-1)/2) # finding the triangular number\n        \n        if triangular_number == i: # checking if the triangular number is equal to the index number\n            return i\n        \n    return None # if no triangular number is found for the given number of digits"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Find the number of digits in the triangular number\n    num_digits = int(math.log(n*(n+1)/2,10))+1\n    triangular_num = n*(n+1)//2\n    \n    # Find the smallest triangular number with n digits\n    for i in range(triangular_num, 10**num_digits-1, -1):\n        if (i*(i+1)//2 <= 10**num_digits):\n            return i-1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the largest triangular number with n digits\n    largest_triangular = int(math.pow(10, n) * (math.pow(10, n) + 1) / 2)\n    \n    # Find the index of smallest triangular number with n digits\n    index = 1\n    while True:\n        smallest_triangular = int(math.pow(10, n-1) * index)\n        if smallest_triangular > largest_triangular:\n            break\n        index += 1\n    \n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Find the maximum value of the first n digits of triangular number\n    max_val = int(math.pow(10, n) - 1)\n\n    # Calculate the sum of the first n digits of triangular number\n    sum_val = int(math.pow(10, n-1) * (n + 1) / 2)\n\n    # Find the index of smallest triangular number with n digits\n    index = sum_val - max_val\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Find the number of digits in the smallest triangular number with n digits.\n    num_digits = int(math.ceil(n * math.log10(10)))\n    \n    # Generate the smallest triangular number with n digits.\n    triangular_num = (num_digits * (num_digits + 1)) // 2\n    \n    # Find the index of the smallest triangular number with n digits.\n    index = 1\n    while triangular_num > 0:\n        triangular_num //= 10\n        index += 1\n    \n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    triangular_number = 0\n    while count < n:\n        triangular_number += count + 1\n        count += 1\n    index = triangular_number\n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0 \n    sum = 0 \n    while True: \n        count += 1 \n        sum += count \n        if len(str(sum)) == n: \n            return count "
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    res_dict = {}\n    for i in range(0, len(test_tup), 2):\n        res_dict[test_tup[i]] = test_tup[i+1]\n    return res_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as an argument and converts it to a dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary.\n    The first element of the tuple becomes the key for the first value,\n    the second element becomes the key for the second value, and so on.\n    '''\n    # Create an empty dictionary\n    my_dict = {}\n    \n    # Iterate over the tuple\n    for i in range(len(test_tup)):\n        # If the current element is the first element of the tuple,\n        # create a new key-value pair in the dictionary\n        if i == 0:\n            my_dict[test_tup[i]] = test_tup[i+1]\n        # If the current element is the second element of the tuple,\n        # add the value to the key created in the previous step\n        elif i == 1:\n            my_dict[test_tup[i-1]] = test_tup[i]\n        # For all other elements, add the value to the key created in the previous step\n        else:\n            my_dict[test_tup[i-2]] = test_tup[i]\n    \n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary with keys and values taken from the adjacent elements of the tuple.\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)):\n        if i%2 == 0:\n            my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    test_dict = {}\n\n    # Iterate through the tuple using a for loop and add key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n    \n    # Return the dictionary\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function returns True if all the characters in the string s are the same,\n    otherwise it returns False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same, otherwise it returns False.\n    \"\"\"\n    # Convert the string to a set to get all unique characters in the string.\n    unique_characters = set(s)\n    # If the length of the set is 1, then all characters in the string are the same.\n    if len(unique_characters) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same,\n    otherwise, it returns False.\n    '''\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function returns True if all the characters in the given string are the same, otherwise it returns False.\n    '''\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same,\n    otherwise, it returns False.\n    '''\n    # Check if the string is empty or not\n    if len(s) == 0:\n        return True\n    \n    # Check if the first character of the string is the same as the last character\n    if s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    area = (3**0.5)*math.pow(side, 2)/4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 4 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    return (math.sqrt(6) / 4) * (side ** 2)"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (math.sqrt(6) / 4) * side ** 2\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(24) * side ** 2) / 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * side**2) / (4 * math.tan(math.pi/6))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    # Calculate the volume of a tetrahedron using the formula V = (1/3) * (sqrt(2) * side^3)\n    volume = (1/3) * (math.sqrt(2) * side**3)\n    # Calculate the surface area of a tetrahedron using the formula S = (sqrt(2) * side^2) / 3\n    surface_area = (math.sqrt(2) * side**2) / 3\n    # Calculate the area of a tetrahedron using the formula A = (3/4) * sqrt(6) * side^2\n    area = (3/4) * math.sqrt(6) * side**2\n    # Return the results\n    return (volume, surface_area, area)"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 4 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a side of a tetrahedron and calculates its area.\n    '''\n    volume = (1/3) * math.pow(side, 3)\n    return 6 * volume"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(3)) / 4) * (side ** 2)\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    '''\n    This function will rotate the list by n positions to the right.\n    '''\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list n items to the right direction.\n    \"\"\"\n    n %= len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    # reverse the entire list\n    list.reverse()\n    # reverse the first m elements\n    list[:m] = reversed(list[:m])\n    # reverse the remaining elements\n    list[m:] = reversed(list[m:])\n    # reverse the entire list again to get the original order\n    list.reverse()\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a list to the right by k positions.\n    \n    :param lst: the list to be rotated\n    :param k: the number of positions to rotate the list\n    :return: the rotated list\n    \"\"\"\n    n = len(lst)\n    k %= n\n    return lst[-k:] + lst[:-k]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(lst, m):\n    '''\n    Function to rotate a given list by specified number of items to the right direction.\n    '''\n    return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Rotate a given list to the right by a specified number of items\n    '''\n    n = len(list)\n    m = m % n # handle cases where m > n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the given list lst to the right direction by n positions.\n\n    Args:\n        lst: List to be rotated\n        n: Number of positions to rotate\n\n    Returns:\n        Rotated list\n\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n   # To handle cases where m > n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a given list to the right by n positions.\n\n    :param lst: The list to be rotated.\n    :param n: The number of positions to be rotated.\n    :return: The rotated list.\n    \"\"\"\n\n    n = n % len(lst) # to handle negative n values\n\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Finds numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))\n\nprint(divisible_by_digits(100, 500)) # Output: [1234, 2345, 3456, 4567, 5678, 6789, 112233, 123456, 1234567, 12345678, 123456789, 1234567890]"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda num: all(int(digit)!= 0 and num % int(digit) == 0 for digit in str(num)), range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(i) % x == 0 for i in str(x)), range(startnum, endnum+1)))\n\nstartnum = int(input(\"Enter the start number: \"))\nendnum = int(input(\"Enter the end number: \"))\nresult = divisible_by_digits(startnum, endnum)\nprint(\"Numbers divisible by digits:\", result)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Generate a list of all numbers in the given range\n    numbers = list(range(startnum, endnum+1))\n\n    # Filter the list to only include numbers that are divisible by every digit in the number\n    divisible_numbers = list(filter(lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x)), numbers))\n\n    # Return the list of divisible numbers\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        digits = [int(d) for d in str(i)]\n        if all(i % d == 0 for d in digits):\n            print(i)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return [num for num in range(startnum, endnum+1) if all(int(digit) % num == 0 for digit in str(num))]\n\nprint(divisible_by_digits(10, 99))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments, startnum and endnum, which represent the range of numbers \n    to be checked for divisibility by every digit. It returns a list of all the numbers in that range \n    that are divisible by every digit in that number.\n    \"\"\"\n\n    # Define a lambda function that checks if a number is divisible by every digit in it\n    check_divisibility = lambda num: all(num % int(digit) == 0 for digit in str(num))\n\n    # Initialize an empty list to store the numbers that are divisible by every digit\n    divisible_nums = []\n\n    # Loop through each number in the range and check if it's divisible by every digit\n    for num in range(startnum, endnum + 1):\n        if check_divisibility(num):\n            divisible_nums.append(num)\n\n    # Return the list of numbers that are divisible by every digit\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible.append(num)\n    return divisible"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5 * r**2 * a) / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5 * math.pi * r ** 2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5 * r ** 2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, the function returns None.\n    '''\n    \n    if a > 360:\n        return None\n    \n    else:\n        sector_area = (0.5 * r * r) * (a/360)\n        return sector_area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Find the area of a sector with given radius and angle.\n    Return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a) / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return round((r ** 2) * a / 360, 2)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360 * math.pi\n"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a/360) * math.pi"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[\"\" for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = \"\"\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + X[i-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1], key=len)\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    # initialize matrix to store length of LCS\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    L = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # fill matrix using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # backtrack to find LCS\n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0]*(o+1) for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1]+1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k]:\n            i -= 1\n        elif dp[i-1][j][k] < dp[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store lengths of common subsequences\n    lcs_table = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs_table[i][j][k] = 1 + lcs_table[i-1][j-1][k-1]\n                else:\n                    lcs_table[i][j][k] = max(lcs_table[i-1][j][k], lcs_table[i][j-1][k], lcs_table[i][j][k-1])\n\n    # Traverse the table to find the longest common subsequence\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_table[i-1][j][k] > lcs_table[i][j-1][k]:\n            i -= 1\n        elif lcs_table[i-1][j][k] > lcs_table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store the lengths of LCSs\n    lcs_table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs_table[i][j][k] = lcs_table[i-1][j-1][k-1] + 1\n                else:\n                    lcs_table[i][j][k] = max(lcs_table[i-1][j][k], lcs_table[i][j-1][k], lcs_table[i][j][k-1])\n\n    # Extract the LCS from the table\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_table[i-1][j][k] > lcs_table[i][j-1][k]:\n            i -= 1\n        elif lcs_table[i-1][j][k] > lcs_table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[\"\" for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = \"\"\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + X[i-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1], key=len)\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D array to store the lengths of the LCS\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the LCS array\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the length of the LCS and its indices\n    lcs_len = L[m][n][o]\n    lcs_idx = []\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs_idx.append((i-1, j-1, k-1))\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Create a list of the longest common subsequence characters\n    lcs = [X[i-1] for i in lcs_idx]\n\n    return lcs_len, lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize matrix to store lengths of LCS of subproblems\n    lcs = [[[0 for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the LCS matrix using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Find the length of LCS and its corresponding subsequence\n    length = lcs[len(X)][len(Y)][len(Z)]\n    subsequence = \"\"\n\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            subsequence = X[i-1] + subsequence\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] >= lcs[i][j-1][k] and lcs[i-1][j][k] >= lcs[i][j][k-1]:\n            i -= 1\n        elif lcs[i][j-1][k] >= lcs[i-1][j][k] and lcs[i][j-1][k] >= lcs[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return (length, subsequence)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # replace each capitalized word with a space followed by the same word with spaces added\n    for word in capitalized_words:\n        str1 = re.sub(r'\\b'+word+r'\\b',''+word+' ', str1)\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = re.compile(r'(?<=[^A-Z])([A-Z][a-z]+)')\n    return pattern.sub(r' \\1', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with spaces in between\n    new_string =''.join(words)\n    return new_string"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    This function takes a string as an argument and adds spaces between words starting with capital letters.\n    '''\n    # Remove any special characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Create a new list to store the modified words\n    modified_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the word starts with a capital letter\n        if word[0].isupper():\n            # Add a space before the word and append it to the new list\n            modified_words.append(''+ word)\n        else:\n            # Add the word to the new list\n            modified_words.append(word)\n\n    # Join the modified words into a string and return it\n    return ''.join(modified_words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a pattern to match capitalized words\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    # Split the string into words using the pattern\n    words = pattern.findall(str1)\n    # Join the words with spaces\n    new_str =''.join(words)\n    # Return the new string with spaces\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Create a new list to store the words with spaces\n    words_with_spaces = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first letter is capitalized\n        if word[0].isupper():\n            # Replace the word with its capitalized version with spaces between the letters\n            words_with_spaces.append(' '.join(word))\n        else:\n            # Append the word to the list without changing it\n            words_with_spaces.append(word)\n    # Join the words with spaces into a single string\n    result =''.join(words_with_spaces)\n    # Return the result\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using regex to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Using join method to add spaces between words\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Use regular expression to find all capitalized words\n    capitalized_words = re.findall(r'[A-Z][a-z]*', str1)\n    # Join the capitalized words with spaces\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'([A-Z][a-z]+)'\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Create a new list of words with spaces in between\n    new_words = [' '.join(words[i:i+2]) for i in range(0, len(words), 2)]\n    # Join the new list of words to form the final string\n    final_str =''.join(new_words)\n    return final_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sorts a given list of strings of numbers numerically.\n    '''\n    nums = sorted(nums_str, key=lambda x: int(x.replace(',', '')))\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert list of strings to list of integers\n    nums = [int(i) for i in nums_str]\n\n    # sort list of integers\n    nums.sort()\n\n    # convert sorted list of integers back to list of strings\n    sorted_nums_str = [str(i) for i in nums]\n\n    # join sorted list of strings into a single string with space delimiter\n    sorted_nums_str = \" \".join(sorted_nums_str)\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Splitting the strings into lists of characters\n    split_nums = [list(num) for num in nums_str]\n\n    # Sorting each list of characters in numeric order\n    for i in range(len(split_nums)):\n        split_nums[i] = sorted(split_nums[i], key=lambda x: int(x))\n\n    # Joining the sorted lists of characters back into strings\n    sorted_nums = [\"\".join(num) for num in split_nums]\n\n    # Sorting the original list of strings in numeric order\n    sorted_nums = sorted(sorted_nums, key=lambda x: int(x))\n\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted([int(s) for s in nums_str], key=lambda x: str(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: [int(n) for n in x.split()])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    return sorted(nums_str, key=lambda x: int(x) if x.isdigit() else x)"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function adds the given tuple to the given list and returns the updated list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function will add the tuple to the list and return the updated list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    for i in range(len(arr)//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr)//2, len(arr)):\n        check_min_heap_helper(arr, i)\n\n    return arr"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    # check if the left child of i is less than or equal to the value at index i\n    if (2*i + 1) < len(arr) and arr[2*i + 1] > arr[i]:\n        return False\n    \n    # check if the right child of i is less than or equal to the value at index i\n    if (2*i + 2) < len(arr) and arr[2*i + 2] > arr[i]:\n        return False\n    \n    return True\n\ndef check_min_heap(arr):\n    # loop through the array and call the helper function for each index\n    for i in range(len(arr)//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        return False\n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        return False\n    \n    if left_child < len(arr):\n        return check_min_heap_helper(arr, left_child)\n    if right_child < len(arr):\n        return check_min_heap_helper(arr, right_child)\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr):\n        return True\n\n    # Check if left child is smaller than parent\n    if i*2+1 < len(arr) and arr[i] > arr[i*2+1]:\n        return False\n\n    # Check if right child is smaller than parent\n    if i*2+2 < len(arr) and arr[i] > arr[i*2+2]:\n        return False\n\n    # Recursive call for left and right children\n    return check_min_heap_helper(arr, i*2+1) and check_min_heap_helper(arr, i*2+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < n and arr[left_child] < arr[i]:\n        return False\n    \n    if right_child < n and arr[right_child] < arr[i]:\n        return False\n    \n    return True\n    \ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    \n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    smallest = i\n    \n    if left_child < len(arr) and arr[left_child] < arr[smallest]:\n        smallest = left_child\n        \n    if right_child < len(arr) and arr[right_child] < arr[smallest]:\n        smallest = right_child\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[(i - 1) // 2]:\n            return False\n        \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    # If left child exists and is greater than parent\n    if (i * 2) + 1 < len(arr) and arr[i] > arr[(i * 2) + 1]:\n        return False\n    # If right child exists and is greater than parent\n    if (i * 2) + 2 < len(arr) and arr[i] > arr[(i * 2) + 2]:\n        return False\n    # If no child is greater than parent\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    left = 2 * i + 1\n    right = 2 * i + 2\n    size = len(arr)\n\n    if left < size and arr[left] < arr[i]:\n        return False\n\n    if right < size and arr[right] < arr[i]:\n        return False\n\n    return True\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    \n    # If left child exists and is greater than root node, return false\n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n    \n    # If right child exists and is greater than root node, return false\n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n    \n    # If both left and right child are less than or equal to root node, return true\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    This function takes an integer n as input and returns the nth Jacobsthal number.\n    Jacobsthal numbers are a sequence of numbers where each term is the sum of the two preceding terms.\n    Jacobsthal numbers are named after Jacobi (1843-1911) and Wilfrid Jacob (1777-1855).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    This function finds the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum K records from the list based on the second element of each tuple.\n\n    :param test_list: A list of tuples. Each tuple represents a record. The first element of the tuple is the record number and the second element is the value of the record.\n    :param K: An integer representing the number of records to be returned.\n    :return: A list of tuples containing the K minimum records from the input list.\n    \"\"\"\n    return sorted(test_list, key=lambda x: x[1])[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # take the first k elements from the sorted list\n    result = test_list[:K]\n    # return the sorted list of tuples\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Take the first K elements from the sorted list\n    result = sorted_list[:K]\n\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    This function finds the minimum k records from a tuple list.\n    '''\n    # Sort the list in ascending order by the second element (the values)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Extract the first k elements from the sorted list and return them\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # Return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the test_list in ascending order by the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize the minimum k records as an empty list\n    min_k_records = []\n    \n    # Traverse the sorted list and add the k records with the minimum values to the min_k_records list\n    for record in test_list:\n        if len(min_k_records) < K:\n            min_k_records.append(record)\n        else:\n            break\n    \n    # Return the min_k_records list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Find minimum k records from tuple list.\n    '''\n    # Sort the test_list in ascending order of the second element (i.e., the value)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Extract the first K elements of the sorted list and return them\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    return sorted(test_list, key=lambda x: x[1])[0:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list in ascending order of the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # initialize an empty list to store the minimum k records\n    min_records = []\n\n    # loop through the sorted list and add the first k tuples to the min_records list\n    for i in range(K):\n        min_records.append(sorted_list[i])\n\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n    numbers: A list of numbers.\n\n    Returns:\n    The second smallest number in the list.\n\n    Raises:\n    ValueError: If the list has less than two elements.\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    smallest = numbers[0]\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function returns the second smallest number in a list of numbers.\n    '''\n    if len(numbers) < 2:\n        return None # If the list has less than two numbers, return None\n    \n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    second_smallest = sorted_numbers[1]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = None\n    \n    for num in numbers[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a([b]*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a*b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse(s):\n    return s[::-1]\n\ndef count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if reverse(test_list[i]) == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][::-1] > test_list[j][::-1]) and (test_list[i][::-1] < test_list[j]):\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    return count\n\ntest_list = ['abc', 'bca', 'cab', 'cba']\nprint(count_reverse_pairs(test_list))"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with unique sublists as keys and their counts as values.\n    \"\"\"\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.append(tuple(lst[i:j]))\n    sublist_counts = {}\n    for sublist in sublists:\n        sublist_counts[sublist] = sublists.count(sublist)\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = set()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            sublists.add(sublist)\n    count_dict = {}\n    for sublist in sublists:\n        count_dict[sublist] = list1.count(list(sublist))\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of sublists\n    sublist_count = {}\n    \n    # Loop through each element in the input list\n    for i in range(len(list1)):\n        # Create a list of sublists starting from the current element\n        sublists = [tuple(list1[j:j+i]) for j in range(len(list1)-i+1)]\n        \n        # Loop through each sublist and update the count in the dictionary\n        for sublist in sublists:\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    \"\"\"\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in count_dict:\n                count_dict[sublist] = 1\n            else:\n                count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function counts the number of occurrences of each unique sublist in a given list and returns a dictionary with tuples as keys and their respective counts as values.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and then back to a list for easy manipulation.\n    lst = list(set(lst))\n\n    # Initialize an empty dictionary to hold the sublists and their counts.\n    sublist_count = {}\n\n    # Loop through the list and create all possible sublists.\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            # Convert the sublist to a tuple to use it as a key in the dictionary.\n            sublist = tuple(lst[i:j])\n            # Check if the sublist is already in the dictionary.\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple to make it hashable\n        sublist_tuple = tuple(sublist)\n\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if sublist_tuple not in counts:\n            counts[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            counts[sublist_tuple] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n    # Loop through each element of the list\n    for elem in list1:\n        # If the element is a list, convert it to a tuple and check if it exists in the dictionary\n        if isinstance(elem, list):\n            elem_tuple = tuple(elem)\n            if elem_tuple in count_dict:\n                count_dict[elem_tuple] += 1\n            else:\n                count_dict[elem_tuple] = 1\n        # If the element is not a list, add it to the dictionary with a count of 1\n        else:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in result:\n                result[sublist] += 1\n            else:\n                result[sublist] = 1\n    return result"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer() or float_num == float(int(float_num)):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) <= 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n    except ValueError:\n        return False\n\n    return abs(float(num) - int(float(num))) <= 0.01"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal.Decimal(num)\n        return True\n    except decimal.InvalidOperation:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) < 1e-6\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        try:\n            float(num)\n            num_parts = num.split('.')\n            if len(num_parts) == 1:\n                return True\n            elif len(num_parts) == 2 and len(num_parts[1]) <= 2:\n                return True\n            else:\n                return False\n        except ValueError:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        nums = num.split('.')\n        if len(nums[1]) > 2:\n            return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num,2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function checks whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Args:\n    num (str): A string representing a decimal number.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(num)\n        if '.' in num and num.index('.') < len(num)-2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as an argument and returns True if the list contains only one distinct element, False otherwise.\n    '''\n    # converting the list to set to remove duplicates and then back to list\n    unique_list = list(set(arr))\n    # if length of original list is greater than 1 and length of unique list is 1, then there is only one distinct element in the original list\n    if len(arr) > 1 and len(unique_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if unique == False:\n            break\n    return unique\n"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element and False otherwise.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, otherwise it returns False.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains only one distinct element, else it returns False.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 'The given month number contains 30 days.'\n    elif monthnum in [4, 6, 9, 11]:\n        return 'The given month number contains 30 days.'\n    elif monthnum == 2:\n        return 'The given month number contains 28 or 29 days.'\n    else:\n        return 'Invalid month number.'"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and checks if it contains 30 or 31 days.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum == 2:\n        return \"29 days or 28 days (leap year)\"\n    else:\n        return \"31 days\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True  # April, June, September, November have 30 days\n    elif monthnum == 2:\n        return False  # February has 28 days in a common year or 29 days in a leap year\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True  # January, March, May, July, August, October, December have 31 days\n    else:\n        return False  # Invalid month number\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month contains 30 days,\n    and False otherwise. Months are given as number from 1 to 12.\n    \"\"\"\n    # List of month lengths\n    month_lengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the given month number is valid\n    if monthnum < 1 or monthnum > 12:\n        print(\"Invalid month number. Please enter a number between 1 and 12.\")\n        return False\n    \n    # Check if the given month contains 30 days\n    if month_lengths[monthnum-1] == 30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    This function takes a month number as input and returns True if the month has 30 days, else False.\n    \"\"\"\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return True\n\nprint(check_monthnumber_number(2)) # Output: True\nprint(check_monthnumber_number(4)) # Output: True\nprint(check_monthnumber_number(6)) # Output: True\nprint(check_monthnumber_number(9)) # Output: True\nprint(check_monthnumber_number(11)) # Output: True\nprint(check_monthnumber_number(1)) # Output: False\nprint(check_monthnumber_number(3)) # Output: False\nprint(check_monthnumber_number(5)) # Output: False\nprint(check_monthnumber_number(7)) # Output: False\nprint(check_monthnumber_number(8)) # Output: False\nprint(check_monthnumber_number(10)) # Output: False\nprint(check_monthnumber_number(12)) # Output: False\nprint(check_monthnumber_number(13)) # Output: True"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum > 12 or monthnum < 1:\n        return False\n    else:\n        return False\n\nprint(check_monthnumber_number(2)) # True\nprint(check_monthnumber_number(3)) # False\nprint(check_monthnumber_number(4)) # False\nprint(check_monthnumber_number(5)) # False\nprint(check_monthnumber_number(6)) # False\nprint(check_monthnumber_number(7)) # True\nprint(check_monthnumber_number(8)) # False\nprint(check_monthnumber_number(9)) # False\nprint(check_monthnumber_number(10)) # False\nprint(check_monthnumber_number(11)) # True\nprint(check_monthnumber_number(12)) # False\nprint(check_monthnumber_number(13)) # False\nprint(check_monthnumber_number(0)) # False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the given month number contains 30 days, otherwise it returns False.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # Sort the given array in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference to infinity\n\n    for i in range(n - 1):\n        diff = abs(arr[i + 1] - arr[i])  # Find the absolute difference between the current and next element\n        if diff < min_diff:\n            min_diff = diff  # Update the minimum difference if a smaller difference is found\n\n    return min_diff  # Return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2,n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    arr.sort() #sort the array\n    min_diff = float('inf') #initialize minimum difference to infinity\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i] #update minimum difference if current difference is less than previous minimum\n    return min_diff #return minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n    # initialize minimum difference\n    min_diff = float('inf')\n    # iterate through the array and find the minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Args:\n    - arr: A list of integers.\n    - n: An integer representing the size of the array.\n\n    Returns:\n    - A tuple containing the minimum difference and the indices of the two elements with the minimum difference.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_indices = (i, i+1)\n    return (min_diff, min_indices)"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(string):\n    '''\n    This function takes a string as input and returns the number of digits in it.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Returns the nth polite number.\n    '''\n    count = 0  # Initialize a count variable to keep track of the number of polite numbers found\n    i = 1  # Start with the first polite number, which is 1\n    \n    while count < n:  # Keep searching until we find the nth polite number\n        if is_prime(i) and is_prime(i+1):  # Check if the current number and the next number are both prime\n            count += 1  # If they are, increment the count\n        i += 1  # Move on to the next number\n        \n    return i-1  # Return the nth polite number\n\ndef is_prime(n): \n    '''\n    Returns True if a number is prime, False otherwise.\n    '''\n    if n < 2:  # 0 and 1 are not prime\n        return False\n    for i in range(2, int(math.sqrt(n))+1):  # Check all numbers from 2 to the square root of n\n        if n % i == 0:  # If n is divisible by any number other than 1 and itself, it's not prime\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num): \n        if num <= 1: \n            return False\n        for i in range(2, int(math.sqrt(num)) + 1): \n            if (num % i) == 0: \n                return False\n        return True\n    \n    count = 0\n    i = 2\n    while count < n: \n        if is_prime(i) and is_prime(int(str(i)[::-1])): \n            count += 1\n        i += 1\n    return i - 2"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    i = 1\n    count = 0\n    while True:\n        if is_prime(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n: \n        if is_prime(i) and is_prime(sum_of_divisors(i)): \n            count += 1\n        i += 1\n    return i-1\n\ndef is_prime(num): \n    if num <= 1: \n        return False\n    for i in range(2, int(math.sqrt(num))+1): \n        if num % i == 0: \n            return False\n    return True\n\ndef sum_of_divisors(num): \n    sum = 0\n    for i in range(1, num+1): \n        if num % i == 0: \n            sum += i\n    return sum"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        j = 1\n        while True:\n            count = 0\n            while j*j <= i:\n                if i%j == 0:\n                    count += 1\n                    if count > 1:\n                        break\n                j += 1\n            if count > 1:\n                break\n            j = 2\n            while j*j <= i:\n                if i%j == 0:\n                    count += 1\n                    if count > 2:\n                        break\n                j += 1\n            if count > 2:\n                break\n            if count == 2:\n                return i\n            i += 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        if is_prime(num) and is_prime(num + 2):\n            count += 1\n        num += 1\n    return num - 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    \n    # Find the square root of n and ceiling it to get the largest integer less than or equal to the square root\n    sqrt_n = int(math.ceil(math.sqrt(n)))\n    \n    # Check all the numbers from 2 to sqrt_n\n    for i in range(2, sqrt_n + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If yes, then it is not polite\n            return False\n    \n    # If n is not divisible by any number from 2 to sqrt_n, then it is polite\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_polite_number(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_polite_number(num):\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i) and is_prime(i+2):\n            count += 1\n        i += 1\n    return i-2\n\ndef is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    elif n == 2:\n        return 6\n    \n    elif n == 3:\n        return 28\n    \n    elif n == 4:\n        return 162\n    \n    elif n == 5:\n        return 1008\n    \n    elif n == 6:\n        return 6244\n    \n    elif n == 7:\n        return 43844\n    \n    elif n == 8:\n        return 355052\n    \n    elif n == 9:\n        return 3153156\n    \n    elif n == 10:\n        return 31531560\n    \n    else:\n        return None"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Returns a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return list(zip(l1[:-1], l1[1:]))"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    seen_nums = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen_nums:\n            pairs_count += 1\n        seen_nums.add(num)\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Counts the number of pairs whose sum is equal to'sum'.\n\n    :param arr: List of numbers.\n    :param sum: The sum of the pairs.\n    :return: The number of pairs whose sum is equal to'sum'.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    arr.sort() # sort the array to use two pointers approach\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        curr_sum = arr[left] + arr[right]\n        if curr_sum == sum:\n            pairs_count += 1\n            left += 1\n            right -= 1\n        elif curr_sum < sum:\n            left += 1\n        else:\n            right -= 1\n            \n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    n = len(arr)\n    # sort the array in ascending order\n    arr.sort()\n    # use two pointers to traverse the array\n    left = 0\n    right = n - 1\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            pairs_count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. \n    The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between the two lists.\n    \"\"\"\n    diff_list = [x for x in li1 + li2 if x not in li1 or x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_lists(li1, li2):\n    \"\"\"\n    Returns a new list with all the elements that are present in only one of the input lists.\n\n    Args:\n    li1 (list): The first list to compare.\n    li2 (list): The second list to compare.\n\n    Returns:\n    list: The elements that are present in only one of the input lists.\n    \"\"\"\n    # create a new set with the elements of the first list\n    set1 = set(li1)\n    # create a new set with the elements of the second list\n    set2 = set(li2)\n    # use the symmetric_difference method of sets to get the elements that are in only one of the lists\n    diff = list(set1.symmetric_difference(set2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n\n    Parameters:\n    li1 (list): The first list.\n    li2 (list): The second list.\n\n    Returns:\n    list: The difference between the two input lists.\n    \"\"\"\n\n    # initialize an empty list to store the difference\n    diff_list = []\n\n    # iterate over the elements in the first list\n    for elem in li1:\n        # check if the element is not present in the second list\n        if elem not in li2:\n            # add the element to the difference list\n            diff_list.append(elem)\n\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as inputs and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list but not present in the second list.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns a list containing the elements that are in the first list but not in the second.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as arguments and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    li_diff = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff_list = list(set(li1) - set(li2))\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains only the elements that are present in the first list and not in the second list.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes in the value of n and returns the sum of the fourth power of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n*2, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    return sum([i**4 for i in range(1, n*2, 2)])"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    \n    while count <= n:\n        if count % 2!= 0:\n            sum += count ** 4\n            count += 1\n        else:\n            count += 1\n            \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes in an integer 'n' and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while n > 0:\n        sum += i ** 4\n        i += 2\n        n -= 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer 'n' as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum to zero\n    sum = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # Calculate fourth power of i and add to sum\n        sum += i**4\n\n    # Return sum of fourth power of first n odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # iterate through first n odd numbers\n    for i in range(1, n*2, 2):\n        # add fourth power of each odd number to sum\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to zero\n    sum = 0\n    \n    # loop through first n odd numbers\n    for i in range(1, 2*n, 2):\n        # add the fourth power of the current odd number to the sum\n        sum += i**4\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function takes a string expression as input and returns True if the expression is balanced and False otherwise.\n    '''\n\n    # Initialize a stack and a deque\n    stack = []\n    dq = deque()\n\n    # Iterate through each character in the expression\n    for char in exp:\n\n        # If the character is an opening bracket, append it to the stack\n        if char in ['(', '{', '[']:\n            stack.append(char)\n            dq.append(char)\n\n        # If the character is a closing bracket, pop the topmost element from the stack\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    # If there are any elements left in the stack, it means the expression is not balanced\n    if stack:\n        return False\n\n    # If all the characters in the expression have been processed without any unbalanced brackets, the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {')': '(', ']': '[', '}': '{'}\n\n    for i in exp:\n        if i in pairs.values():\n            stack.append(i)\n        elif i in pairs.keys():\n            if not stack or pairs[i]!= stack.pop():\n                return False\n        else:\n            continue\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                balanced = False\n                break\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                balanced = False\n                break\n    if not stack and balanced:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            if i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return True if not stack else False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for char in exp:\n        if char in pairs.keys():\n            stack.append(char)\n        elif char in pairs.values():\n            if not stack or pairs[stack.pop()]!= char:\n                return False\n    return not stack\n"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n\n    # Splitting the string into words\n    words = test_str.split()\n\n    # Removing words with length k\n    words = [word for word in words if len(word)!= K]\n\n    # Joining the words back to a string\n    new_str =''.join(words)\n\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    return''.join([word for word in words if len(word)!= K])"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = \"\"\n    for word in words:\n        if len(word)!= K:\n            result += word + \" \"\n    return result.strip()"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into words\n    return''.join([word for word in words if len(word)!= K]) # join the words with length different from K"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    # split the string into words\n    words = test_str.split()\n\n    # create a new list with words of length other than K\n    new_words = [word for word in words if len(word)!= K]\n\n    # join the new list of words to form a new string\n    new_str =''.join(new_words)\n\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the test string into words\n    words = test_str.split()\n    # Create an empty list to store the words with length K\n    new_words = []\n    # Iterate over the words and add the ones with length different than K\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    # Join the words with space separator and return the result\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    pattern_regex = re.compile(pattern)\n    match = pattern_regex.search(text)\n    if match:\n        return (match.start(), match.end() - 1)\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two parameters, the text in which we need to find the pattern and the pattern itself.\n    It returns a list of tuples containing the position and the occurrence of the pattern in the text.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.finditer(text)\n    if not match:\n        return None\n    result = []\n    for m in match:\n        result.append((m.start(), m.group()))\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments:\n    - text: a string that needs to be searched\n    - pattern: a regular expression pattern to be searched for\n    \n    The function searches for all non-overlapping occurrences of the pattern in the text and returns a list of tuples, each containing the position of the match and the matched pattern.\n    '''\n    \n    # Find all non-overlapping occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Create a list of tuples containing the position and matched pattern for each match found\n    result = [(match.start(), match.group()) for match in matches]\n    \n    return result if result else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # find all the occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # create a list to store the positions and occurrences of the pattern\n    positions = []\n    occurrences = []\n    # iterate over all the matches and append the positions and occurrences to the lists\n    for match in matches:\n        positions.append(match.start())\n        occurrences.append(match.group())\n    # return the positions and occurrences as a tuple\n    if len(positions) > 0:\n        return positions, occurrences\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If there are no matches, return None\n    if not matches:\n        return None\n    \n    # Initialize an empty list to store the positions of the matches\n    positions = []\n    \n    # Loop through the matches and append their positions to the list\n    for match in matches:\n        position = text.find(match)\n        positions.append(position)\n    \n    # Return a list of tuples containing the matches and their positions\n    return list(zip(matches, positions))"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments, 'text' and 'pattern'.\n    'text' is the string in which we want to find the pattern and 'pattern' is the pattern we want to find in the string.\n    It returns a list of tuples, where each tuple contains the occurrence of the pattern in the text and the starting position of the pattern in the text.\n    If there is no match, it returns None.\n    '''\n    pattern_list = re.findall(pattern, text)\n    if pattern_list:\n        return [(text.find(pattern_list[i]), text[text.find(pattern_list[i]):].find(pattern)) for i in range(len(pattern_list))]\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of numbers as an input and returns True if every odd index contains odd numbers and\n    False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Checks whether every odd index contains odd numbers of a given list.\n\n    Args:\n    nums: A list of integers.\n\n    Returns:\n    A boolean indicating whether every odd index contains odd numbers.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of integers as an input and checks whether every odd index contains odd numbers.\n    If the condition is not satisfied for any index, it returns False. Otherwise, it returns True.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1].lower() in vowels and test_str[i].lower() in vowels:\n            count += 1\n        if i < len(test_str)-1 and test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    This function takes a string as input and returns the count of those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    # Loop through each character in the string and check if it has a vowel as its neighbor\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i-1].lower() in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n        if i < len(test_str)-1 and test_str[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i+1].lower() in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    This function counts the number of vowels that are adjacent to each other in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels:\n            if i == 0:\n                if test_str[i+1].lower() in vowels:\n                    count += 1\n            elif i == len(test_str)-1:\n                if test_str[i-1].lower() in vowels:\n                    count += 1\n            else:\n                if test_str[i-1].lower() in vowels and test_str[i+1].lower() in vowels:\n                    count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = set(arr)\n    sum_of_unique_nums = sum(unique_nums)\n    return sum_of_unique_nums"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_unique_elements = sum(unique_elements)\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # using set() to remove repeated elements\n    unique_arr = set(arr)\n    # summing the unique elements\n    sum_arr = sum(unique_arr)\n    return sum_arr"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list.\n    freq = {}\n\n    # Iterate through the list and update the frequency dictionary.\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Calculate the sum of non-repeated elements in the list.\n    sum_non_repeated = sum(k for k, v in freq.items() if v == 1)\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the count of each element\n    count_dict = {}\n    \n    # Iterate over the elements in the list and update the count of each element in the dictionary\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Iterate over the dictionary to find the sum of non-repeated elements\n    sum_non_repeated = 0\n    for key, value in count_dict.items():\n        if value == 1:\n            sum_non_repeated += key\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements.\n    '''\n\n    # Create an empty dictionary to store the frequency count of each element in the list\n    freq_count = {}\n\n    # Loop through each element in the list and add it to the dictionary with its frequency count\n    for element in arr:\n        if element in freq_count:\n            freq_count[element] += 1\n        else:\n            freq_count[element] = 1\n\n    # Create an empty list to store the non-repeated elements\n    non_repeated_elements = []\n\n    # Loop through each key-value pair in the dictionary and append the key to the non-repeated elements list if its frequency count is 1\n    for key, value in freq_count.items():\n        if value == 1:\n            non_repeated_elements.append(key)\n\n    # Calculate the sum of the non-repeated elements and return it\n    return sum(non_repeated_elements)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    total_sum = sum(unique_elements)\n    return total_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements.\n    \"\"\"\n    unique_elements = set(arr)  # converting the list to set to remove duplicates\n    non_repeated_sum = sum(unique_elements)  # finding the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as an input and returns the sum of all the non-repeated elements in the list.\n    '''\n    unique_elements = list(set(arr))\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        group = list(map(lambda x: x[1], group))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Sort the list in ascending order\n    lst = sorted(lst)\n\n    # Group the elements of the list by consecutive duplicates\n    result = [(key, list(group)) for key, group in groupby(lst, lambda x: x)]\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], group))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Takes a list and packs consecutive duplicates into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(lst):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list of elements, pack consecutive duplicates into sublists.\n    \"\"\"\n    return [list(g) for k, g in groupby(lst) if k!= g[0]]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        group = list(group)\n        result.append([list1[g[1]] for g in group])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        group = list(g)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(lst):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    # Create a dictionary to store unique sublists and their counts\n    sublists = {}\n    \n    # Loop through every sublist in lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            # Convert the sublist to a tuple and store it in the dictionary\n            sublist_tuple = tuple(lst[i:j])\n            if sublist_tuple not in sublists:\n                sublists[sublist_tuple] = 1\n            else:\n                sublists[sublist_tuple] += 1\n    \n    # Return the dictionary\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        subtuple = tuple(sublist)\n        if subtuple in result:\n            result[subtuple] += 1\n        else:\n            result[subtuple] = 1\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the count of unique sublists\n    unique_sublists_dict = {}\n\n    # Iterate through each sublist in list1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j]) # Convert sublist to a tuple\n\n            # If the sublist is already in the dictionary, increment its count by 1\n            if sublist in unique_sublists_dict:\n                unique_sublists_dict[sublist] += 1\n            # If the sublist is not in the dictionary, add it and set its count to 1\n            else:\n                unique_sublists_dict[sublist] = 1\n\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    '''\n    Given a list, return a dictionary where every sublist is turned into a tuple and the value of the tuple is the number of occurrences.\n    '''\n    # Create an empty dictionary\n    counts = {}\n    \n    # Iterate over every possible sublist\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            # If the sublist is not already in the dictionary, add it with a count of 1\n            if sublist not in counts:\n                counts[sublist] = 1\n            # If the sublist is already in the dictionary, increment its count by 1\n            else:\n                counts[sublist] += 1\n    \n    # Return the dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    # Initialize a dictionary to store the counts\n    counts = {}\n    \n    # Iterate over all possible sublists of lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            # Convert the sublist to a tuple and add it to the dictionary\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 0\n            counts[sublist] += 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary of unique sublists and their counts.\n    \"\"\"\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub = tuple(lst[i:j])\n            if sub not in sublists:\n                sublists[sub] = 1\n            else:\n                sublists[sub] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if tuple(sublist) not in sublists:\n            sublists[tuple(sublist)] = 1\n        else:\n            sublists[tuple(sublist)] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    count_dict = {}\n    \n    # Iterate through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple to use as a dictionary key\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is not already in the dictionary, add it and set the count to 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment the count\n        else:\n            count_dict[sublist_tuple] += 1\n            \n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        result += combinations(test_list, i)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    This function finds all possible combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == sum(test_list):\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    result = []\n    for r in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, r):\n            if sum(comb) == 0:\n                result.append(comb)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    result = []\n    for r in range(1, len(test_list)+1):\n        for combo in combinations(test_list, r):\n            if sum(combo) == 0:\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_dict = {}\n    for i in test_list:\n        if sum(i) not in sum_dict:\n            sum_dict[sum(i)] = [i]\n        else:\n            sum_dict[sum(i)].append(i)\n\n    result = []\n    for i in sum_dict:\n        for j in combinations(sum_dict[i], 2):\n            result.append(j)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = []\n    for i in range(1, len(test_list)+1):\n        for tup in combinations(test_list, i):\n            if sum(tup) == 2020:\n                results.append(tup)\n    return results"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function finds the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum(map(sum, test_list))\n    result = []\n    for i in range(1, total_sum + 1):\n        temp = []\n        for j in combinations(test_list, i):\n            temp.append(sum(map(sum, j)))\n        result.extend(temp)\n    result = list(set(result))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(2, len(test_list)+1):\n        for tup in combinations(test_list, i):\n            if sum(tup) == i:\n                result.append(tup)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) + sum(test_list[j]) == 0:\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total = sum(test_list)\n    result = set()\n    for r in range(1, len(test_list)+1):\n        for combo in combinations(test_list, r):\n            if sum(combo) == total:\n                result.add(combo)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n % math.sqrt(n) == 0:\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if math.sqrt(n) == int(math.sqrt(n)):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even, otherwise False.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n ** 0.5 == int(n ** 0.5):\n        count -= 1\n    return count\n\nif count_divisors(12) % 2 == 0:\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given number.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count += 2 \n    if n**0.5 == int(n**0.5) : \n        count -= 1\n    return count \n\nprint(count_divisors(12)) # Output: 6 (2+3+4+6)\nprint(count_divisors(28)) # Output: 12 (1+2+4+7+14+28)\n"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n) : \n    \"\"\"\n    Write a python function to check whether the count of divisors is even. \n    \"\"\"\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if n/i!= i: \n                count += 1 \n    return count \n\n\nn = int(input(\"Enter a number: \")) \nif count_divisors(n) % 2 == 0: \n    print(f\"The number {n} has an even number of divisors\") \nelse: \n    print(f\"The number {n} does not have an even number of divisors\") "
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n) : \n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n\n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    \n    if count % 2 == 0 : \n        print(n, \"has an even number of divisors\")\n    else : \n        print(n, \"has an odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count += 1\n    if n**0.5 == int(n**0.5) : \n        count -= 1\n    return count "
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0 \n    for i in range(1, n+1) : \n        if n%i == 0 : \n            count += 1 \n    if count % 2 == 0 : \n        return True \n    else : \n        return False"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            sum += sum_subarray(arr[j:j+i])\n    return sum\n\ndef sum_subarray(arr):\n    '''\n    Helper function to calculate the sum of a subarray.\n    '''\n    return sum(arr)"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1) % 2!= 0:  # check if the subarray is odd length\n                sum_odd_length += sum(arr[i:j+1])\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Find the sum of all odd length subarrays of the given array.\n    \"\"\"\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (j-i)%2!= 0:\n                sub_arr = arr[i:j]\n                res += sum(sub_arr)\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Returns the sum of all odd length subarrays of the input array.\n    \"\"\"\n    n = len(arr)\n    sum_odd_len = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum_odd_len += sum(arr[i:j+1])\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n\n    :param arr: a list of integers\n    :return: an integer, the sum of all odd length subarrays\n    \"\"\"\n    n = len(arr)\n    # Initialize the sum of odd length subarrays to zero\n    odd_sum = 0\n    # Traverse through all odd length subarrays and add them to the sum\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            odd_sum += sum(arr[j:j+i])\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2!= 0: # if length is odd\n                subarray_sum = sum(arr[i:j+1])\n                total_sum += subarray_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    # Initialize the sum variable\n    total_sum = 0\n    for i in range(n):\n        # Find the length of the subarray\n        length = 1\n        while i+length < n and arr[i] == arr[i+length]:\n            length += 2\n        # Calculate the sum of the subarray\n        subarray_sum = sum(arr[i:i+length])\n        # Add the subarray sum to the total sum\n        total_sum += subarray_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum_of_odd_length_subarrays = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            subarray = arr[i:j]\n            if len(subarray) % 2!= 0:\n                sum_of_odd_length_subarrays += sum(subarray)\n    \n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes RGB values as input and returns HSV values.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = round(h * 60)\n    \n    if h < 0:\n        h += 360\n    \n    s = 0 if cmax == 0 else round(delta / cmax * 100)\n    \n    v = round(cmax * 100)\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue *= 60\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if max_val == 0 else delta / max_val\n\n    value = max_val\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts the given rgb color to hsv color.\n\n    :param r: Red channel value (0-255).\n    :type r: int\n    :param g: Green channel value (0-255).\n    :type g: int\n    :param b: Blue channel value (0-255).\n    :type b: int\n    :return: Hsv color tuple (h, s, v).\n    :rtype: tuple\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = round(h * 60)\n\n    if h < 0:\n        h += 360\n\n    s = 0 if cmax == 0 else delta / cmax\n\n    v = cmax\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue *= 60\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): The red component of the color.\n        g (int): The green component of the color.\n        b (int): The blue component of the color.\n\n    Returns:\n        tuple: A tuple containing the hue, saturation, and value components of the hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    \n    value = cmax\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r /= 255\n    g /= 255\n    b /= 255\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue *= 60\n\n    if hue < 0:\n        hue += 360\n\n    value = cmax\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Converting RGB values to range 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Finding the maximum and minimum values of R, G and B\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    # Finding the difference between the maximum and minimum values\n    delta = cmax - cmin\n\n    # Finding the Hue\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    # Finding the Saturation\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    # Converting Saturation to range 0-1\n    saturation = round(saturation * 100)\n\n    # Finding the Value\n    value = round(cmax * 100)\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = round(h * 60, 2)\n\n    if h < 0:\n        h += 360\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = round((delta / cmax) * 100, 2)\n\n    v = round(cmax * 100, 2)\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the product of the first even and odd number in the list.\n    '''\n    even = 0\n    odd = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n            \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even = None\n    odd = None\n    \n    # Find the first even and odd number in the list\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    \n    for num in lst:\n        if num % 2!= 0:\n            odd = num\n            break\n    \n    # Calculate the product of the even and odd number\n    product = even * odd\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Returns the product of the first even and odd numbers in the given list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return even * num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return odd * num\n    if even is None and odd is None:\n        raise ValueError(\"No even or odd numbers found in the list\")"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    \n    if len(list1) < 2:\n        print(\"List should have atleast two elements\")\n        return None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even += num\n            break\n        else:\n            odd += num\n    \n    for num in list1[::-1]:\n        if num % 2 == 1:\n            odd *= num\n            break\n        else:\n            even *= num\n    \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num * num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num * num\n    return None\n"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            count += 1\n        else:\n            odd_num = num\n            \n        if count == 2:\n            return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even *= num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd *= num\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n\n    if len(even) >= 1 and len(odd) >= 1:\n        return even[0] * odd[0]\n    else:\n        return \"List must contain at least one even and one odd number.\""
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    \n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_prod *= list1[i]\n        else:\n            odd_prod *= list1[i]\n    \n    return even_prod, odd_prod"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    # Loop over the list to find the first even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            \n    # If both even_num and odd_num are None, the list is empty or contains only odd numbers\n    if even_num is None and odd_num is None:\n        return None\n    # If only one of them is None, the list is too short to have both\n    elif even_num is None or odd_num is None:\n        return None\n    # Otherwise, return the product of the even and odd numbers\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the tuple string into a list of strings\n    str_list = test_str.split(',')\n    # Convert each string in the list to an integer and store in a new list\n    int_list = [int(i) for i in str_list]\n    # Convert the new list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(',')\n    tuple_int = tuple(int(i) for i in tuple_str)\n    return tuple_int"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # Split the input string by comma\n    test_tuple = test_str.split(\",\")\n    # Convert the string elements to integer\n    integer_tuple = tuple(int(i) for i in test_tuple)\n    # Return the integer tuple\n    return integer_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple of strings to a tuple of integers.\n\n    Parameters:\n        test_str (str): A tuple of strings separated by commas and enclosed in parentheses.\n\n    Returns:\n        tuple: A tuple of integers.\n\n    Example:\n        >>> tuple_str_int(\"(1, 2, '3')\")\n        (1, 2, 3)\n    \"\"\"\n    return tuple(int(s.strip()) if s.strip().isdigit() else s.strip() for s in test_str[1:-1].split(','))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.strip('()').split(',')\n    test_list = [int(i.strip()) for i in test_list]\n    return tuple(test_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as input and returns the corresponding integer tuple.\n    \"\"\"\n    # convert tuple string to list of strings\n    lst = test_str[1:-1].split(',')\n    # convert each string in the list to an integer and add it to a new list\n    int_lst = [int(x.strip()) for x in lst]\n    # convert the new list to a tuple and return it\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function converts tuple string to integer tuple.\n    \"\"\"\n    # Splitting the string into separate elements\n    elements = test_str.strip('()').split(',')\n    \n    # Converting the string elements to integer and storing in a new list\n    int_list = [int(i) for i in elements]\n    \n    # Converting the list to tuple and returning it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings\n    str_list = test_str.split(\",\")\n    \n    # Create an empty list to hold the integer values\n    int_list = []\n    \n    # Iterate through each string in the list and convert to an integer\n    for item in str_list:\n        int_list.append(int(item))\n    \n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.replace('(', '').replace(')', '').split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    result = tuple(map(int, test_str.replace('(', '').replace(')', '').split(',')))\n    return result"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    This function finds the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where the value should be inserted\n    index = bisect.bisect_right(a, x)\n    \n    # Return the index\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\bb\\bb\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a\\bb\\bb\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'  # pattern to match a followed by 3 b\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    This function takes two arguments - test_list and test_str.\n    It creates a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + tuple(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    :param nums: list of numbers\n    :return: True if every even index contains even numbers, False otherwise\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup += (item,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for tup in test_tup:\n        if isinstance(tup, tuple):\n            new_tup += remove_nested(tup)\n        else:\n            new_tup.append(tup)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    if type(test_tup) == tuple:\n        return remove_nested(test_tup[0]) + remove_nested(test_tup[1:])\n    else:\n        return [test_tup]\n\nprint(remove_nested((1, 2, 3, (4, 5, 6))))"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            result.append(item)\n        else:\n            pass\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = []\n    for element in test_tup:\n        if type(element) == tuple:\n            continue\n        else:\n            result_tup.append(element)\n    return tuple(result_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup += (item,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Removes tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and returns a new tuple with all tuples removed.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup += (i,)\n        else:\n            pass\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function removes tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for element in test_tup:\n        if type(element)!= tuple:\n            new_tup.append(element)\n        else:\n            new_tup.extend(element)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Counts the number of lists in a given list of lists.\n    \"\"\"\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for elem in input_list:\n        if isinstance(elem, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Count the number of lists in a given list of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_lists(item)\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] >= x:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function returns the last position of an element in a sorted array.\n    '''\n    # Initialize the variables\n    left, right = 0, len(arr)-1\n    last_pos = -1\n    \n    # Binary search to find the last position of the element\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function returns the last position of an element in a sorted array.\n\n    Parameters:\n        arr (list): A sorted list of elements.\n        x (int): The element whose last position is to be found.\n\n    Returns:\n        int: The last position of the element in the array.\n    '''\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] >= x:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid+1]!= x:\n                return mid\n            else:\n                low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    If the element is not present in the array, it returns -1.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if arr[mid] == x:\n            # Check if the element is present in the left half of the array\n            if mid > 0 and arr[mid-1] == x:\n                end = mid - 1\n            else:\n                return mid\n        \n        elif arr[mid] < x:\n            start = mid + 1\n            \n        else:\n            end = mid - 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    This function takes two arguments:\n    arr - a sorted array of integers\n    x - an integer element to be searched in the array\n\n    It returns the index of the last occurrence of x in the array.\n    If x is not present in the array, it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    # find the position of the last occurrence of x in arr\n    left, right = 0, len(arr) - 1\n    last_pos = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element as input and returns the last position of the element in the array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            result = mid\n            break\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n\n    :param arr: A sorted array.\n    :param x: The element to search for.\n    :return: The last position of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid < right and arr[mid+1] == x:\n                mid += 1\n            return mid\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n\n    :param dictionary: a dictionary object\n    :return: the sum of all items in the dictionary\n    \"\"\"\n    total = 0\n    for key in dictionary:\n        total += dictionary[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    This function finds the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for i in dict.values():\n        total += i\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes in a dictionary and returns the sum of all the values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dictionary.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    This function takes in a dictionary as an argument and returns the sum of all items in the dictionary.\n    \"\"\"\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two arguments l and r and returns the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 1:\n        return 0\n    \n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i\n    \n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n**2 + n + 1"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-2)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(l, r+1) if i % 2 == 1)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of all odd natural numbers\n    within the range 1 to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_odd(n - 2)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    This function returns the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all its elements.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of its elements.\n\n    Parameters:\n    arr (list): A list of integers or floats.\n\n    Returns:\n    float: The sum of the elements in the input array.\n    \"\"\"\n\n    # initialize sum to zero\n    sum = 0\n    \n    # iterate over each element in the array and add it to the sum\n    for i in arr:\n        sum += i\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(arr):\n    \"\"\"\n    This function returns the sum of all the elements of an array.\n    \"\"\"\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i]\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Returns the sum of an array.\n\n    :param arr: An array of integers.\n    :return: The sum of the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Returns the sum of an array.\n    '''\n    if not isinstance(arr, list):\n        return \"Input is not an array.\"\n    else:\n        return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) & mask | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary string\n    n_bin = bin(n)[2:].zfill(32)\n\n    # Rotate left by d bits\n    d %= 32\n    rotated_bin = n_bin[d:] + n_bin[:d]\n\n    # Convert rotated binary string back to decimal\n    rotated_n = int(rotated_bin, 2)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary string\n    binary_n = bin(n)[2:].zfill(32)\n    # Convert d to binary string\n    binary_d = bin(d)[2:].zfill(5)\n    # Concatenate binary_n and binary_d\n    combined_binary = binary_n + binary_d\n    # Convert combined_binary back to integer\n    new_n = int(combined_binary, 2)\n    # Return new_n\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    # convert n to binary string\n    n_binary = bin(n)[2:]\n\n    # pad with zeros at the beginning if n_binary is less than 32 bits\n    n_binary = n_binary.zfill(32)\n\n    # get the left and right bits to be rotated\n    left_bits = n_binary[:d]\n    right_bits = n_binary[d:]\n\n    # concatenate the rotated bits\n    rotated_bits = right_bits + left_bits\n\n    # convert the rotated bits back to decimal and return\n    return int(rotated_bits, 2)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    # Convert the number to binary string and extract the bits of interest\n    bin_n = bin(n)[2:].zfill(32)\n    bin_d = bin(d)[2:].zfill(5)\n\n    # Left rotate the bits of interest and join them back to a number\n    rotated_bits = bin_n[d:] + bin_n[:d]\n    rotated_n = int(rotated_bits, 2)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates the left d bits of a 32-bit number n by d bits.\n    '''\n    mask = (2 ** d) - 1  # creates a mask of d bits with 1's\n    shift = 32 - d      # finds the number of bits to shift\n    shifted = n >> shift # right shifts n by shift bits to get the last d bits\n    rotated = shifted << shift | (n & mask) # shifts the last d bits to the left and puts them in the rotated position\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits of n by d bits. We assume that n is a 32-bit integer.\n    '''\n    mask = 0xFFFFFFFF\n    d = d % 32\n    if d == 0:\n        return n\n    else:\n        return ((n << d) & mask) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    # convert n to binary and pad with zeros to 32 bits\n    n_bin = bin(n)[2:].zfill(32)\n    # split n_bin into two parts, rotate the second part and merge the two parts\n    rotated = n_bin[-d:] + n_bin[:-d]\n    # convert the rotated binary back to an integer\n    rotated_int = int(rotated, 2)\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes two arguments:\n    n: an integer to be rotated\n    d: the number of bits to rotate\n    \n    It returns the rotated integer.\n    \"\"\"\n    mask = (1 << 32) - 1  # mask to get the last 32 bits of the number\n    shifted = (n << d) & mask  # shift the bits left by d bits\n    rotated = shifted | (n >> (32 - d))  # rotate the bits by d bits using OR operation\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    n = n & mask\n    d = d & 31\n    shift = 32 - d\n    mask_left = (1 << d) - 1\n    mask_right = ~mask_left\n    n_left = n << shift\n    n_right = n >> d\n    n = (n_left & mask_left) | (n_right & mask_right)\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and returns a string with all whitespaces removed.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and counts the number of equal numbers\n    from the three input integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and counts the number of equal numbers from them.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count = 3\n    elif x == y:\n        count = 2\n    elif x == z:\n        count = 2\n    elif y == z:\n        count = 2\n    else:\n        count = 0\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or z == x:\n        count += 1\n    elif x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    if x == y and y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif x == z:\n        return 2\n    elif y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y == z:\n        count = 3\n    \n    elif x == y or x == z or y == z:\n        count = 2\n        \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    else:\n        count += 0\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] <= arr[i + 1]:\n            continue\n        else:\n            break\n    for j in range(i + 1, n):\n        if arr[j] <= arr[i]:\n            return j\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    # Get the length of the array\n    n = len(arr)\n    \n    # Initialize variables\n    left = 0\n    right = n-1\n    count = 0\n    \n    # Loop until left pointer crosses the right pointer\n    while left < right:\n        # Check if left pointer is at the correct position\n        if arr[left] < arr[right]:\n            # If yes, then return count\n            return count\n        \n        # Find the mid index between left and right pointers\n        mid = (left + right) // 2\n        \n        # Check if mid element is greater than the first element\n        if arr[mid] > arr[right]:\n            # If yes, then left pointer should be at the mid index\n            left = mid + 1\n        else:\n            # If no, then right pointer should be at the mid index\n            right = mid\n            \n        # Increment count by 1\n        count += 1\n    \n    # If the loop terminates without returning, then the array is already sorted\n    # and no rotation is required. So return 0\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left, right = 0, n-1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    :param arr: list of integers\n    :return: number of rotations required\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    # Find the pivot element\n    pivot = arr[0]\n    for i in range(1, n):\n        if arr[i] < pivot:\n            pivot = arr[i]\n            break\n\n    # Count the number of rotations\n    count = 0\n    i = 0\n    j = 0\n    while i < n and arr[i] < pivot:\n        i += 1\n    while j < n and arr[j] > pivot:\n        j += 1\n    if i < j:\n        count += j - i\n    while j < n:\n        count += 1\n        i += 1\n        j += 1\n        while i < n and arr[i] < pivot:\n            i += 1\n        while j < n and arr[j] > pivot:\n            j += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    start = 0\n    end = n - 1\n\n    # loop until the entire array is sorted\n    while start < end:\n        mid = (start + end) // 2\n\n        # check if mid is the smallest element or not\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n\n    # return the number of rotations required to generate a sorted array\n    return end"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, then return 0\n    if arr == sorted(arr):\n        return 0\n    # If the array is not sorted, then count the number of rotations\n    else:\n        # Find the minimum element in the array\n        min_element = arr[0]\n        for i in range(1, n):\n            if arr[i] < min_element:\n                min_element = arr[i]\n        # Count the number of rotations\n        count = 0\n        for i in range(n):\n            if arr[i] == min_element:\n                count += 1\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    \n    # Find the point where rotation starts\n    start = 0\n    end = n-1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n    \n    # Swap the first element with arr[start]\n    arr[start], arr[0] = arr[0], arr[start]\n    \n    # Now count the number of inversions\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the pivot element in the sorted array\n    pivot = arr[0]\n    left = 0\n    for i in range(n):\n        if arr[i] < pivot:\n            left += 1\n    # If pivot is not in the first position, then array is rotated\n    if left!= 0:\n        return left\n    # If pivot is in the first position, then array is not rotated\n    else:\n        return -1"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return int(math.sqrt(n))**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    i = 1\n    while i*i < n:\n        i += 1\n    return i*i == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # First, we calculate the square root of the given number using the math.sqrt() function.\n    sqrt_n = int(n ** 0.5)\n\n    # Next, we check if the square root is an integer or not.\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is negative\n    if n < 0:\n        return False\n    \n    # Use binary search to find a perfect square root of n\n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    x = int(n**0.5)\n    return x*x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Check if a given number is a perfect square or not.\n    '''\n    x = int(math.sqrt(n))\n    return x*x == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n\n    # If the number is negative, it is not a perfect square\n    if n < 0:\n        return False\n\n    # If the number is 0 or 1, it is a perfect square\n    if n == 0 or n == 1:\n        return True\n\n    # Check whether the square root of n is an integer\n    square_root = n ** 0.5\n    if square_root == int(square_root):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n\n    Args:\n    n: An integer value.\n\n    Returns:\n    A boolean value indicating whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        x = n // 2\n        y = (x + n // x) // 2\n        return y * y == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is negative\n    if n < 0:\n        return False\n    \n    # Check if n is an integer\n    if n!= int(n):\n        return False\n    \n    # Check if n is an exact square\n    x = int(n**0.5)\n    return x*x == n"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and returns True if the product of all the integers in the list is even, and False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the product of numbers in the list is even, otherwise False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of numbers as input and returns True if the product of the numbers is even, False otherwise.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of numbers as input and returns True if the product of the numbers is even, else False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return [max_list]"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    for l in lists:\n        if sum(l) > max_sum:\n            max_list = l\n            max_sum = sum(l)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    for lst in lists:\n        if sum(lst) > sum(max_list):\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = [lst]\n        elif lst_sum == max_sum:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = -float('inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_sum_list = [lst]\n        elif sum_lst == max_sum:\n            max_sum_list.append(lst)\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_list = []\n    max_sum = float('-inf')\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_list = [lst]\n            max_sum = lst_sum\n        elif lst_sum == max_sum:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    result = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            result = [lst]\n        elif lst_sum == max_sum:\n            result.append(lst)\n    return result"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the maximum run of uppercase characters in the string.\n    \"\"\"\n    max_run = 0\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_run:\n                max_run = count\n        else:\n            count = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the maximum run of uppercase characters in the string.\n\n    :param test_str: Input string\n    :return: Maximum run of uppercase characters\n    \"\"\"\n    count = 0  # Initialize count to 0\n    max_count = 0  # Initialize max_count to 0\n\n    # Traverse through the string and count the number of consecutive uppercase characters\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n\n    # Update max_count if the string ends with uppercase characters\n    max_count = max(max_count, count)\n\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    prev_char = test_str[0].upper()\n    for i in range(1, len(test_str)):\n        current_char = test_str[i].upper()\n        if current_char == prev_char:\n            current_run += 1\n        else:\n            prev_char = current_char\n            current_run = 1\n        max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the maximum run of uppercase characters in the string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    prev_char = \"\"\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current run\n            current_run += 1\n            # If the current run is greater than the max run, update max run\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            # Reset the current run to zero if the character is not uppercase\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        if current_run > max_run:\n            max_run = current_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the index of the first odd number in the given list of numbers,\n    or None if no odd number is found.\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num % 2!= 0:\n            return i\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function returns the first odd number in a given list of numbers.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two parameters:\n        1. test_tup: a tuple containing the tuples\n        2. K: an integer value to check if the given tuples contain it or not\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for t in test_tup:\n        if K in t:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have same length\")\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(f\"Error: {test_tup2[i]} is not smaller than {test_tup1[i]}\")\n            return False\n    \n    print(\"All elements of second tuple are smaller than their corresponding element in the first tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = []\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function checks if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    \n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples are not of equal length.\")\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    \n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns True if each element of second tuple is smaller than its corresponding element in the first tuple, otherwise, it returns False.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    }
]