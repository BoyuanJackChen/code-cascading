[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in result:\n            result.append(element)\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list containing the common elements of both tuples.\n    '''\n    result = []\n    for element in test_tup1:\n        if element in test_tup2:\n            result.append(element)\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the shared elements from the two tuples.\n    '''\n    shared_elements = ()\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements += (element,)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create an empty set to store the shared elements\n    shared_elements = set()\n    \n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Check if the element is in the second tuple\n        if element in test_tup2:\n            # Add the shared element to the set\n            shared_elements.add(element)\n    \n    # Return the set of shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of common elements.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = set(test_tup1) & set(test_tup2)\n    return result"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n and returns True if n is not prime,\n    and False otherwise. It uses the trial division method to check for\n    primality.\n    \"\"\"\n    # Check if n is less than 2, in which case it's not prime\n    if n < 2:\n        return False\n    \n    # Check if n is 2 or 3, in which case it's prime\n    if n == 2 or n == 3:\n        return True\n    \n    # Check if n is divisible by 2 or 3, in which case it's not prime\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    # Use the trial division method to check for primality\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a number is not a prime number or not.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    # Check if the number is divisible by any number less than the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    # If the number is not divisible by any number less than the square root of the number, then it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p**2 <= n:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p] == True:\n            # Update all multiples of p\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n    # Return True if n is not prime, else False\n    if prime[n]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number,\n    otherwise it returns False.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for i in range(len(heap))]\n\nnums = [5, 2, 1, 9, 7, 6, 3, 8, 4]\nn = 3\nlargest_nums = heap_queue_largest(nums, n)\nprint(largest_nums)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    # Create a min heap with first n elements of the list\n    for i in range(n):\n        heap.append(nums[i])\n        hq.heapify(heap)\n    # Remove the minimum element from the heap and add the next element from the list\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heapreplace(heap, nums[i])\n    # Return the n largest elements in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # Convert the list into a heap\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums)) # Pop the largest element from the heap\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # Heapify the list of numbers\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums)) # Pop the largest element from the heap and append to the list\n    return largest[::-1] # Reverse the order and return the list of n largest integers"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # create a max heap from the input list\n    hq.heapify(nums)\n\n    # pop the n largest integers from the heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n\n    # reverse the order of the largest integers to get them in descending order\n    largest_nums.reverse()\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes in two parameters:\n    nums: list of integers to be processed\n    n: number of largest integers to be returned\n    '''\n    \n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    result = []\n    for i in range(n):\n        result.append(hq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n\n    largest = []\n    for i in range(n):\n        largest.append(-hq.heappop(heap))\n\n    return largest"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return (x!= 0) and ((x & (x-1)) == 0)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer x as input and returns True if x is a power of 2 and False otherwise.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        n = 0\n        while (x >> n)!= 0:\n            n += 1\n        return (x >> n) == 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert x to binary and remove the '0b' prefix\n    binary = bin(x)[2:]\n    # check if the binary contains more than one '1'\n    return binary.count('1') <= 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x, y):\n    '''\n    This function takes two numbers as input and returns True if they differ at one bit position only,\n    otherwise it returns False.\n    '''\n    if x == y:\n        return True\n    if (x & y)!= 0:\n        return False\n    return (x | y) == -1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    else:\n        return ((x & (x-1)) == 0)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return x!= 0 and ((x & (x-1)) == 0)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Checking if the number is a power of 2\n    if x!= 0 and ((x & (x - 1)) == 0): \n        return True \n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 0:\n        if x & 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Calculate log2(x)\n    log2_x = int(math.log2(x))\n\n    # Check if x is power of 2 or not\n    if 2**log2_x == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    match_list = pattern.findall(text)\n    return match_list"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    words = pattern.findall(text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # Find all words in the text that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words of at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    # Find all words in the text that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function finds all words in a string that are at least 4 characters long.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        square = num ** 2\n        squares.append(square)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list of the squares of each element in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the squares of each number.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # find the mid point of the string\n    mid = n // 2\n    # check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    # check if the first and last characters are the same\n    if str[0] == str[n-1]:\n        return 1 + find_Rotations(str[1:mid] + str[mid:])\n    # if neither condition is true, we need to find the minimum number of rotations\n    return min(find_Rotations(str[1:]), find_Rotations(str[:-1])) + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    else:\n        # Check if the string is already a substring of itself\n        if str in str[1:]:\n            return len(str) // 2\n        else:\n            # Find the longest substring of the string that is a palindrome\n            longest_palindrome = \"\"\n            for i in range(len(str)):\n                for j in range(i + 1, len(str) + 1):\n                    substring = str[i:j]\n                    if substring == substring[::-1] and len(substring) > len(longest_palindrome):\n                        longest_palindrome = substring\n            # Check if the longest palindrome is the string itself\n            if longest_palindrome == str:\n                return len(str) // 2\n            else:\n                # Find the minimum number of rotations required to get the same string\n                rotations = 1\n                for i in range(len(str)):\n                    if str[i:] + str[:i] == longest_palindrome:\n                        rotations += len(str) - i\n                        break\n                return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    str_len = len(str)\n    rotations = 0\n    start = 0\n    end = str_len - 1\n    \n    # Check if the string is already in its desired form or not\n    while start < end:\n        if str[start]!= str[end]:\n            break\n        start += 1\n        end -= 1\n    \n    # If the string is already in its desired form, then return 0\n    if start >= end:\n        return rotations\n    \n    # Find the point where the string is different from its opposite end\n    while start < end:\n        mid = (start + end) // 2\n        if str[mid] > str[mid + 1]:\n            end = mid\n        else:\n            start = mid + 1\n    \n    # Find the minimum number of rotations required to get the same string\n    if str[start] > str[end]:\n        str = str[end:] + str[:end]\n    else:\n        str = str[start:] + str[:start]\n    rotations = len(str) // str_len + 1\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(s):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(s)\n    for i in range(n):\n        if s[i:]+s[:i] == s:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    n = len(str)\n    # base case\n    if n == 1:\n        return 0\n    elif str == str[n-1:]+str[:n-1]:\n        return n-1\n    else:\n        # recursive case\n        return 1 + min(find_Rotations(str[1:]), find_Rotations(str[:-1]))"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    if str == str[::-1]: \n        return 0\n    else: \n        for i in range(len(str)): \n            if str == str[i:] + str[:i]: \n                return i "
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # find the longest substring of the string that is a rotation of the string\n    for i in range(n):\n        j = 0\n        k = i\n        while j < k:\n            if str[j]!= str[k]:\n                break\n            j += 1\n            k -= 1\n        if j == k:\n            longest_rotation = str[j:k+1]\n    # find the minimum number of rotations\n    min_rotations = len(str)\n    for i in range(n):\n        temp_str = str[i:] + str[:i]\n        if temp_str == longest_rotation:\n            return i\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # convert the string to a list of characters\n    str_list = list(str)\n\n    # calculate the length of the string\n    n = len(str_list)\n\n    # calculate the midpoint of the string\n    mid = n // 2\n\n    # initialize variables for the minimum and maximum rotations\n    min_rot = 0\n    max_rot = mid\n\n    # loop until the minimum and maximum rotations are found\n    while min_rot <= max_rot:\n        # calculate the current midpoint of the string\n        curr_mid = (min_rot + max_rot) // 2\n\n        # calculate the number of rotations required to get the same string\n        num_rot = 0\n        for i in range(n):\n            if str_list[i] == str_list[(i - curr_mid) % n]:\n                num_rot += 1\n\n        # update the minimum and maximum rotations based on the number of rotations\n        if num_rot == n:\n            return 0\n        elif num_rot < n:\n            min_rot = curr_mid + 1\n        else:\n            max_rot = curr_mid - 1\n\n    # return the minimum number of rotations required to get the same string\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    return min(find_Rotations(str[1:]) + 1, find_Rotations(str[:-1]) + 1)"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if str[0] == str[n-1]:\n        return find_Rotations(str[1:n-1])\n    else:\n        rotations = min(find_Rotations(str[1:]), find_Rotations(str[:-1])) + 1\n        if str[0] < str[n-1]:\n            return rotations\n        else:\n            return n - rotations"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s\n    else:\n        return s[:s.index(ch)] + s[s.rindex(ch) + 1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        index_first = s.find(ch)\n        index_last = s.rfind(ch)\n        if index_first == index_last:\n            return s[:index_first] + s[index_first+1:]\n        else:\n            return s[:index_first] + s[index_last+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from a string.\n    \"\"\"\n    if ch not in s:\n        return s\n    \n    # Remove first occurrence of ch\n    i = s.index(ch)\n    if i == 0:\n        s = s[1:]\n    else:\n        s = s[:i] + s[i+1:]\n    \n    # Remove last occurrence of ch\n    i = s.rindex(ch)\n    if i == len(s)-1:\n        s = s[:-1]\n    else:\n        s = s[:i] + s[i+1:]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        if s.index(ch) == 0:\n            s = s[s.index(ch)+1:]\n        elif s.index(ch) == len(s)-1:\n            s = s[:s.index(ch)]\n        else:\n            s = s[:s.index(ch)] + s[s.index(ch)+1:]\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Removes first and last occurrence of a character from the string.\n    '''\n    if ch in s:\n        # Index of first occurrence\n        start = s.find(ch)\n        # Index of last occurrence\n        end = s.rfind(ch)\n        # If first and last occurrence are not the same, remove both\n        if start!= end:\n            s = s[:start] + s[end+1:]\n        # Otherwise, remove only the first occurrence\n        else:\n            s = s[:start] + s[start+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of the given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s  # If character is not present in the string, return the same string.\n    else:\n        index = s.find(ch)\n        end_index = s.rfind(ch)\n        return s[:index] + s[index+1:end_index] + s[end_index+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes in a string and a character as inputs and returns the string with the first and last occurrences of the given character removed.\n    '''\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, '')[:-1] + s.replace(ch, '')[-1]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s:\n        # Get the index of the first occurrence of the character\n        first_index = s.index(ch)\n        # Get the index of the last occurrence of the character\n        last_index = s.rindex(ch)\n        # If the character is present at the beginning and end of the string\n        if first_index == 0 and last_index == len(s)-1:\n            return s[1:-1]\n        # If the character is present at the beginning of the string\n        elif first_index == 0:\n            return s[1:last_index] + s[last_index+1:]\n        # If the character is present at the end of the string\n        elif last_index == len(s)-1:\n            return s[:first_index] + s[first_index+1:-1]\n        # If the character is present in the middle of the string\n        else:\n            return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    else:\n        # If the character is not present in the string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function takes a string and a character as input and returns the string with the first and last occurrence of the character removed.\n    '''\n    # if the character is not in the string, return the original string\n    if ch not in s:\n        return s\n    # if the character is in the string, remove first and last occurrence of the character\n    else:\n        new_string = s.replace(ch, '', 1)\n        return new_string[:-1]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        if s.index(ch) == 0 and s.rindex(ch) == len(s) - 1:\n            s = s[1:-1]\n        elif s.index(ch) == 0:\n            s = s[1:]\n        elif s.rindex(ch) == len(s) - 1:\n            s = s[:-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M] # compute sum of each row\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i]) # sort indices based on row sums\n    sorted_matrix = [[M[i][j] for i in sorted_indices] for j in range(len(M[0]))] # reorder rows based on sorted indices\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # creating a list of tuples with sum of rows and the index of rows\n    row_sums = [(sum(row), index) for index, row in enumerate(M)]\n    # sorting the list of tuples in ascending order of sum of rows\n    row_sums.sort()\n    # creating a new matrix with sorted rows according to the sorted row sums\n    sorted_matrix = [[M[row_sums[index][1]][i] for i in range(len(M[0]))] for index in range(len(M))]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a matrix in ascending order according to the sum of its rows.\n    '''\n    # Compute the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows by their sum in ascending order\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    \n    # Sort the rows based on their sum\n    sorted_matrix = [[M[i][j] for i in sorted_indices] for j in range(len(M[0]))]\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sums = [sum(row) for row in M]\n    sorted_indices = sorted(range(len(sums)), key=lambda i: sums[i])\n    return [M[i] for i in sorted_indices]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the row indices by the sum of their corresponding rows\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    # Sort the rows using the sorted row indices\n    sorted_rows = [M[i] for i in sorted_indices]\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    This function takes a matrix as input and sorts it according to the sum of its rows.\n    '''\n    n = len(M)\n    # Create a list of tuples, where each tuple contains the sum of the row and the row itself.\n    sums_and_rows = [(sum(M[i]), M[i]) for i in range(n)]\n    # Sort the list in ascending order based on the sum of the rows.\n    sorted_sums_and_rows = sorted(sums_and_rows)\n    # Extract the sorted rows from the sorted tuples.\n    sorted_rows = [row for _, row in sorted_sums_and_rows]\n    # Return the sorted matrix.\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    # get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # create a list of tuples to store the sum of each row and its index\n    sums = [(sum(row), i) for i, row in enumerate(M)]\n\n    # sort the list of tuples in ascending order of the sum of each row\n    sums.sort()\n\n    # create a new matrix to store the sorted matrix\n    sorted_matrix = [[0 for j in range(cols)] for i in range(rows)]\n\n    # fill the sorted matrix with the sorted rows from the original matrix\n    for i, j in sums:\n        sorted_matrix[i] = M[j]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=sum)\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as inputs and returns the volume of the prism.\n    \"\"\"\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as inputs and returns the volume of the prism.\n    '''\n    volume = (1/3)*l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function finds the volume of a triangular prism.\n    Args:\n        l: length of the base of the triangular prism\n        b: width of the triangular prism\n        h: height of the triangular prism\n    Returns:\n        The volume of the triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes in the length, breadth and height of a triangular prism and returns its volume.\n    \"\"\"\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input parameters and returns the volume of the prism.\n    '''\n    return l * b * h / 3"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as arguments and returns its volume.\n    \"\"\"\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n\n    :param l: length of the base of the triangular prism\n    :param b: width of the triangular prism\n    :param h: height of the triangular prism\n    :return: the volume of the triangular prism\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth, and height of a triangular prism as input and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function takes a string as input and checks if it contains sequences of lowercase letters joined with an underscore.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'\\b[a-z]+_[a-z]+\\b')\n    match = pattern.search(text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"[a-z]+_[a-z]+\"\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore, and False otherwise.\n    \"\"\"\n    pattern = r\"(?=.*\\_)(?=.*[a-z]{1,})[a-z]+\\_[a-z]+\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes the length of one side of a square as input and returns its perimeter.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string, char_list): \n    '''\n    This function takes a string and a list of characters as input, \n    and returns a new string containing all characters of the original string \n    which are not present in the input list.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in char_list:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert string to list of characters\n    string_list = list(string)\n\n    # convert remove_chars to set of characters for faster lookup\n    remove_chars_set = set(remove_chars)\n\n    # iterate over string_list and remove characters present in remove_chars_set\n    result_list = [char for char in string_list if char not in remove_chars_set]\n\n    # convert list of characters back to string and return result\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string, to_remove):\n    '''\n    This function removes characters from the first string which are present in the second string.\n\n    :param string: The input string.\n    :param to_remove: The string of characters to remove.\n    :return: A new string with the characters in `to_remove` removed from the beginning of `string`.\n    '''\n\n    # Convert the strings to lists of characters\n    string_list = list(string)\n    to_remove_list = list(to_remove)\n\n    # Loop through the list of characters to remove\n    for char in to_remove_list:\n        # If the character is in the string, remove it\n        try:\n            string_list.remove(char)\n        except ValueError:\n            pass\n\n    # Convert the list of characters back to a string\n    new_string = ''.join(string_list)\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    string_list = list(string)\n    \n    # Convert the second string to a set of characters\n    remove_set = set(list(remove_string))\n    \n    # Iterate over the list of characters and remove characters which are present in the remove set\n    for char in string_list:\n        if char in remove_set:\n            string_list.remove(char)\n    \n    # Convert the list of characters back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    no_of_chars = len(string_list)\n    char_set = set(string_list)\n    for i in range(no_of_chars):\n        if string_list[i] in char_set:\n            string_list.remove(string_list[i])\n    return \"\".join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string, char_list):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    # convert the char_list to a set for faster membership testing\n    char_set = set(char_list)\n    # create an empty list to store the result\n    result = []\n    # iterate through each character in the string\n    for char in string:\n        # if the character is not in the char_set, add it to the result\n        if char not in char_set:\n            result.append(char)\n    # convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the string to a list of characters\n    string_list = list(string)\n    \n    # Create a boolean array to keep track of characters to be removed\n    remove = [False] * NO_OF_CHARS\n    \n    # Mark the characters to be removed as True in the boolean array\n    for char in remove_chars:\n        remove[ord(char)] = True\n    \n    # Remove the characters from the string\n    i = 0\n    while i < len(string_list):\n        if remove[ord(string_list[i])]:\n            string_list.pop(i)\n        else:\n            i += 1\n    \n    # Convert the list back to a string\n    result = ''.join(string_list)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string, excluded_chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # Convert excluded_chars to a set for faster membership testing\n    excluded_set = set(excluded_chars)\n    # Convert string to a list of characters\n    string_list = list(string)\n    # Remove characters from string_list which are present in excluded_set\n    string_list = [c for c in string_list if c not in excluded_set]\n    # Convert string_list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to a list of characters\n    char_list = list(string)\n    \n    # Convert second string to a set of characters to be removed\n    remove_chars = set(input(\"Enter characters to remove: \"))\n    \n    # Remove the characters from the char_list which are present in remove_chars\n    char_list = [char for char in char_list if char not in remove_chars]\n    \n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    removed_chars = input(\"Enter the characters to remove: \")\n    for char in removed_chars:\n        string = string.replace(char, \"\")\n    return string"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set from the input array to remove duplicates\n    unique_nums = set(arraynums)\n    # check if the length of the input array is the same as the length of the set\n    if len(arraynums) == len(unique_nums):\n        # if the lengths are the same, there are no duplicates\n        return False\n    else:\n        # if the lengths are different, there are duplicates\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # convert the array to set to remove duplicates\n    unique_nums = set(arraynums)\n\n    # if the length of the set is less than the length of the array, it means there are duplicates\n    if len(unique_nums) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if the array contains any duplicate element, and False otherwise.\n    '''\n    # Create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array and update the count of each element in the dictionary\n    for i in arraynums:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Check if the count of any element in the dictionary is greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n\n    # If no element has a count greater than 1, the array does not contain any duplicate element\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                print(f\"Duplicate element found at index {i} and {j}\")\n                return True\n    print(\"No duplicate elements found\")\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_nums = set(arraynums)\n    # if length of unique elements is less than length of array, then there are duplicates\n    return len(unique_nums) < len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create an empty dictionary to store the count of each element in the array\n    count = {}\n\n    # iterate through the array and update the count of each element\n    for num in arraynums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n\n    # check if any element has a count greater than 1\n    for num in count:\n        if count[num] > 1:\n            return True\n\n    # if no duplicate elements found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if there are any duplicate elements in the array, otherwise, it returns False.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in freq:\n            return True\n        # Otherwise, add the element to the dictionary with a frequency of 1\n        else:\n            freq[num] = 1\n    \n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and (x % 3 == 0 or x % 2 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 2 or x == 3 or x == 5 or x == 7 or x == 11 or x == 13 or x == 17 or x == 19 or x == 23 or x == 29 or x == 31 or x == 37 or x == 41 or x == 43 or x == 47 or x == 53 or x == 59 or x == 61 or x == 67 or x == 71 or x == 73 or x == 79 or x == 83 or x == 89 or x == 97:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Checks if the given number is woodball or not.\n    \"\"\"\n    # Check if the number is divisible by 7 and 5\n    if x % 7 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if the given number is a woodball or not.\n    '''\n    if x == 1 or x == 2:\n        return True\n    elif x % 2 == 0 and x!= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if x is woodball, False otherwise.\n    A number is called woodball if it satisfies all the following conditions:\n    1. It is a positive integer.\n    2. The sum of the digits of x is equal to the sum of the digits of its reciprocal.\n    3. The last digit of x is not equal to 0.\n    4. The last digit of the reciprocal of x is equal to 0.\n    \"\"\"\n    if type(x)!= int or x <= 0:\n        return False\n    \n    reciprocal = 1/x\n    if x % 10 == 0 or reciprocal % 1!= 0:\n        return False\n    \n    sum_x = sum(int(digit) for digit in str(x))\n    sum_reciprocal = sum(int(digit) for digit in str(reciprocal))\n    \n    if sum_x!= sum_reciprocal:\n        return False\n    \n    return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Check if a given number is a woodball number or not.\n    '''\n    # Check if the number is negative or 0\n    if x <= 0:\n        return False\n    \n    # Check if the number is divisible by 2\n    if x % 2 == 0:\n        return False\n    \n    # Check if the number is divisible by 3 or 5\n    for i in range(3, int(x**0.5)+1, 3):\n        if x % i == 0:\n            return False\n    \n    # Check if the number is divisible by 7\n    if x % 7 == 0:\n        return False\n    \n    # If all checks pass, the number is a woodball number\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # initialize variables\n    temp = x\n    count = 0\n    \n    # loop through each digit in the number\n    while temp > 0:\n        digit = temp % 10\n        count += digit ** 3\n        temp //= 10\n    \n    # check if the number is woodball or not\n    if count == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    This function takes a number x as input and returns True if it is a woodball number\n    and False otherwise.\n    '''\n    # initialize a list of woodball numbers\n    woodball_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n\n    # check if the given number is in the woodball_numbers list\n    if x in woodball_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(x**0.5)+1, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    :param x: the number to be checked\n    :return: True if the number is woodball, False otherwise\n    \"\"\"\n    # Check if x is divisible by 2 and 3\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    # Check if x is divisible by 5 and 7\n    elif x % 5 == 0 and x % 7 == 0:\n        return True\n    # Check if x is divisible by 2, 3, and 5\n    elif x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    # Check if x is divisible by 2, 3, and 7\n    elif x % 2 == 0 and x % 3 == 0 and x % 7 == 0:\n        return True\n    # Check if x is divisible by 2, 5, and 7\n    elif x % 2 == 0 and x % 5 == 0 and x % 7 == 0:\n        return True\n    # Check if x is divisible by 3, 5, and 7\n    elif x % 3 == 0 and x % 5 == 0 and x % 7 == 0:\n        return True\n    # If none of the above conditions are met, x is not woodball\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reverse_str = str(num)[::-1]\n    # Convert the reversed string back to an integer\n    reverse_num = int(reverse_str)\n    # Check if the number is one less than twice the reverse\n    if num == reverse_num + 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    # Write a python function to check if a given number is one less than twice its reverse.\n    rev_num = int(str(num)[::-1])\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    rev_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    \n    # Check if the number is one less than twice the reversed number\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    # reverse the given number\n    rev_num = int(str(num)[::-1])\n    \n    # check if the difference between num and rev_num is 1\n    if num - rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        remainder = temp % 10\n        reverse = (reverse * 10) + remainder\n        temp = temp // 10\n    if num == reverse + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string and convert back to integer\n    rev_num = int(num_str[::-1])\n    # Check if rev_num is one less than twice its original value\n    if rev_num == num-2*num:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    # get the reverse of the number\n    rev_num = int(str(num)[::-1])\n\n    # check if the original number is one less than twice its reverse\n    if num + 1 == 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if rev_num == (num - 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        remainder = temp % 10\n        reverse = reverse * 10 + remainder\n        temp = temp // 10\n    if reverse // 2 + 1 == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    rev_num = 0\n    temp = num\n    while(temp!= 0):\n        digit = temp % 10\n        rev_num = (rev_num * 10) + digit\n        temp = temp // 10\n    return rev_num\n\ndef is_one_less_than_twice_rev(num):\n    if(rev(num) == (num * 2 - 1)):\n        print(num, \"is one less than twice its reverse\")\n    else:\n        print(num, \"is not one less than twice its reverse\")"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_set = set(arr)\n    max_num = 0\n    for i in num_set:\n        temp_num = i\n        for j in arr:\n            temp_num = temp_num*10 + j\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the digits.\n    \"\"\"\n    # Convert the list to a string to sort it\n    sorted_str = ''.join(sorted(map(str, arr)))\n    # Convert the sorted string back to a list of digits\n    sorted_arr = [int(digit) for digit in sorted_str]\n    # Calculate the largest possible number\n    max_num = 0\n    for digit in sorted_arr:\n        max_num = max_num * 10 + digit\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)  # sort the list in descending order\n    max_num = 0  # initialize maximum number to zero\n    for digit in arr:  # iterate through each digit in the list\n        max_num = max_num * 10 + digit  # add the digit to the maximum number\n    return max_num  # return the maximum number"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest number that can be formed from these integers.\n    \"\"\"\n    arr.sort() # Sort the array in ascending order\n    num = \"\"\n    for i in range(len(arr)):\n        num += str(arr[i]) # Concatenate the digits to form a string\n        if int(num) > 2147483647: # If the number exceeds the maximum limit of an integer, return -1\n            return -1\n    return int(num)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest integer that can be formed by combining\n    the digits of the input list.\n    \"\"\"\n    # Initialize max_num to the first element of the input list\n    max_num = arr[0]\n    \n    # Iterate over the list starting from the second element\n    for i in range(1, len(arr)):\n        # Multiply the current element with the previous max_num and check if the result is greater than max_num\n        # If it is, update max_num to the new value\n        max_num = max(max_num, arr[i] * max_num)\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num*10 + arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed using these digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i] * (10 ** i)\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as an input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num * 10 + num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        curr_num = 1\n        for j in range(i, len(arr)):\n            curr_num = curr_num * arr[j]\n            if curr_num > max_num:\n                max_num = curr_num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, and False otherwise.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integer arguments x and y and returns True if x and y have opposite sign,\n    otherwise it returns False.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers x and y as inputs and returns True if they have opposite sign, otherwise False.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, otherwise False.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if the integers have opposite sign,\n    otherwise it returns False.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, and False otherwise.\n    \"\"\"\n    return ((x > 0 and y < 0) or (x < 0 and y > 0))"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign,\n    otherwise, it returns False.\n    '''\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = 0\n    count = 0\n    while count < n:\n        octagonal_number += 8 * count + 1\n        count += 1\n    return octagonal_number\n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 24\n        count += 1\n    return num\n\nprint(is_octagonal(1))  # Output: 153\nprint(is_octagonal(5))  # Output: 2661"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        num = i*(2*i-1)\n        if num == n:\n            return True\n        elif num > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, otherwise False.\n    \"\"\"\n    i = 1\n    while True:\n        octagonal = i * (2 * i - 1)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 8\n        count += 1\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num % 2 == 0:\n            oct_num = num ** 2\n        else:\n            oct_num = 3 * num ** 2 - 1\n        if oct_num == n:\n            return oct_num\n        count += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    octagonal_number = 0\n    \n    while count < n:\n        octagonal_number = i*(3*i - 1)\n        count += 1\n        i += 1\n    \n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    octagonal_number = 0\n    while True:\n        octagonal_number = i * (2 * i - 1)\n        if octagonal_number == n:\n            return True\n        elif octagonal_number > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        octagon = i*(3*i - 2)\n        if octagon == n:\n            return True\n        elif octagon > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    i = 1\n    while count < n:\n        i += 1\n        count += i\n    return i"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    digit_sum = defaultdict(int)\n    for i in range(n):\n        digit_sum[s[i]] += 1\n        if i > 0:\n            digit_sum[s[i]] += digit_sum[s[i-1]]\n            digit_sum[s[i-1]] -= 1\n        if digit_sum[s[i]] == len(s):\n            count += 1\n        elif digit_sum[s[i]] > len(s):\n            digit_sum[s[i]] -= digit_sum[s[i-1]]\n            digit_sum[s[i-1]] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[s[i:j]] += 1\n    return count\n\ns = \"123456789\"\nprint(count_Substrings(s)) # Output: {'123': 1, '456': 1, '789': 1, '123456': 1, '456789': 1}"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = sum(int(s[k]) for k in range(i, j+1))\n            if curr_sum == j-i+1:\n                count[curr_sum] += 1\n    return sum(count[i] for i in range(1, n+1))"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = s[i:j]\n            if sum(int(digit) for digit in sub_str) == len(sub_str):\n                count[sub_str] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    freq = defaultdict(int)\n\n    # loop through all substrings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # calculate the sum of digits in the substring\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n\n            # if the digit sum is equal to the length of the substring, count it\n            if digit_sum == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    freq = defaultdict(int)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == (j-i):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    # create a defaultdict to store the frequency of each digit\n    digit_freq = defaultdict(int)\n    # loop through all possible substrings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in substring)\n            # if the sum of digits is equal to the length of the substring, increment the count\n            if substring_sum == len(substring):\n                count += 1\n                # update the frequency of each digit in the substring\n                for digit in substring:\n                    digit_freq[int(digit)] += 1\n    return count, digit_freq"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for i in range(1, len(xs)):\n            if xs[i] < smallest:\n                smallest = xs[i]\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None # or any other appropriate value\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as an argument and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and returns the maximum difference between available pairs in the list.\n    '''\n    # sort the list of tuples based on the first element of each tuple\n    sorted_list = sorted(test_list)\n\n    # initialize the maximum difference to the difference between the first two elements of the sorted list\n    max_diff = sorted_list[1][0] - sorted_list[0][0]\n\n    # loop through the sorted list of tuples, starting from the second element\n    for i in range(1, len(sorted_list)):\n        # calculate the difference between the current element and the previous element\n        diff = sorted_list[i][0] - sorted_list[i-1][0]\n\n        # if the difference is greater than the maximum difference, update the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = max(diff, abs(test_list[i][1] - test_list[j][1]))\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    # Sort the list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Loop through each pair of consecutive tuples\n    for i in range(n-1):\n        diff = abs(test_list[i+1][0] - test_list[i][1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    # sort the tuple list in ascending order of the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    for i in range(len(test_list) - 1):\n        # calculate the difference between the second elements of the current and next tuples\n        diff = test_list[i+1][1] - test_list[i][1]\n        \n        # update max_diff if the difference is greater than the current max_diff\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subject_marks_list):\n    '''\n    This function takes a list of tuples as input and sorts the list based on the second value of each tuple.\n    '''\n    # Sorting the list based on the second value of each tuple\n    subject_marks_list.sort(key=lambda x: x[1])\n    return subject_marks_list"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Sorts the list of tuples based on the second value of each tuple in ascending order.\n    '''\n    return sorted(subject_marks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks.sort(key=lambda x: x[1])\n    return subject_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples sorted by the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts it based on the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    # Recursive case: if the list is not empty, return the sum of its head and the recursive sum of the tail\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    This function takes a list as input and recursively sums all the elements in the list.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:  # base case\n        return 0\n    \n    if isinstance(data_list[0], list):  # if the first element is a list, flatten it\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # if the first element is not a list, add it to the sum and continue recursion\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Return the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers present in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    bell_num = [0, 1]\n    for i in range(2, n+1):\n        bell_num.append(bell_num[i-1] + bell_num[i-2])\n    return bell_num[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n+1)\n    bell[0] = 1\n    bell[1] = 1\n    \n    for i in range(2, n+1):\n        bell[i] = sum(bell[j] for j in range(i))\n        \n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        bell_1 = 1\n        bell_2 = 2\n        for i in range(3, n+1):\n            bell_i = bell_1 + bell_2\n            bell_1 = bell_2\n            bell_2 = bell_i\n        return bell_2"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 1\n    else:\n        bell_list = [1]\n        for i in range(1, n+1):\n            bell_list.append(bell_list[i-1] + bell_list[i-1])\n        return bell_list[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_num = [1]\n    for i in range(1, n+1):\n        bell_num.append(sum(bell_num[-i:]))\n    return bell_num[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[:i]))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    This function takes an integer n and returns the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n+1) # initialize a list of Bell numbers with zeros\n    bell[0] = 1 # base case, 1 way to partition the empty set\n    for i in range(1, n+1):\n        bell[i] = sum(bell[:i]) # add the previous Bell numbers to get the ith Bell number\n    return bell[n] # return the nth Bell number"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the nth Bell number using dynamic programming.\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum(bell[:i])\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [1]\n    for i in range(n):\n        bell.append(sum(bell[-2:]))\n    return bell[n]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        elif A[i] > A[i-1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n\n    if len(A) < 2:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        elif A[i] > A[i-1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n <= 2:\n        return True\n    \n    direction = None\n    for i in range(1, n):\n        if A[i] == A[i-1]:\n            continue\n        elif direction is None:\n            direction = 1 if A[i] > A[i-1] else -1\n        elif (A[i] > A[i-1] and direction!= 1) or (A[i] < A[i-1] and direction!= -1):\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n <= 2:\n        return True\n    if A[n-1] > A[n-2]:\n        for i in range(n-3, -1, -1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(n-3, -1, -1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    if A[n-1] > A[n-2]:\n        for i in range(n-2):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(n-2):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is increasing or decreasing\n    if A[-1] > A[0]:\n        increasing = True\n    elif A[-1] < A[0]:\n        increasing = False\n    else:\n        return True\n\n    # Check if the array is strictly increasing or decreasing\n    if increasing:\n        for i in range(len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n    else:\n        for i in range(len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and checks whether it is monotonic or not.\n    A is said to be monotonic if it is either non-increasing or non-increasing.\n    '''\n    \n    # Checking if the array is non-decreasing\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    \n    # Checking if the array is non-increasing\n    for i in range(len(A)-2, -1, -1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n == 1:\n        return True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Check whether a list contains the given sublist or not.\n\n    :param l: the list to search in\n    :param s: the sublist to search for\n    :return: True if the sublist is found in the list, False otherwise\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    if l[:len(s)] == s:\n        return True\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two arguments: a list and a sublist.\n    It returns True if the sublist is a sublist of the list, else False.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if s == l[i:i+len(s)]:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Checks whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the sublist is empty\n    if not s:\n        return True\n\n    # Check if the sublist is larger than the list\n    if len(s) > len(l):\n        return False\n\n    # Loop through the list and compare sublists\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    # If no sublist is found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    \n    if s == l:\n        return True\n    \n    if s[0] == l[0]:\n        if is_sublist(l[1:], s[1:]):\n            return True\n    \n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, otherwise it returns False.\n    '''\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for item in Input:\n        if len(item)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Get the length of the first tuple in the list\n    length = len(Input[0])\n    \n    # Check if all the tuples in the list have the same length as the first tuple\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    \n    # If all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    result = True\n    for t in Input:\n        if len(t)!= len(Input[0]):\n            result = False\n            break\n    return result"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = [len(i) for i in Input]\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = []\n    for tup in Input:\n        lengths.append(len(tup))\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as an input and returns True if all the tuples have equal length, otherwise False.\n    '''\n    # Check if the input is a list of tuples\n    if not isinstance(Input, list) or not all(isinstance(i, tuple) for i in Input):\n        return False\n    \n    # Check if all tuples have equal length\n    length = len(Input[0])\n    return all(len(i) == length for i in Input)"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_length = True\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            equal_length = False\n            break\n    return equal_length"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = len(Input[0])\n    for i in Input:\n        if len(i)!= count:\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        else:\n            sorted = False\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    \n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n            \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_diff_square(n):\n    # Check if n is odd\n    if n % 2 == 1:\n        return False\n    \n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # Check if sqrt_n is odd or even\n    if sqrt_n % 2 == 0:\n        return False\n    \n    # Check if n can be written as the difference of two squares\n    for i in range(2, sqrt_n):\n        if n == (i ** 2) - ((sqrt_n - i) ** 2):\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check whether the given number is a perfect square or not\n    def is_Perfect_Square(num):\n        root = int(num**0.5)\n        return root*root == num\n    \n    # Check whether the given number can be represented as the difference of two squares or not\n    if is_Perfect_Square(n):\n        return False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_Perfect_Square(n - i*i):\n            return True\n        \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # First check if the given number is greater than 0\n    if n <= 0: \n        print(\"The given number must be greater than 0.\")\n        return \n    \n    # Check if the number is divisible by 4\n    if n % 4!= 0: \n        print(\"The given number must be divisible by 4.\")\n        return\n    \n    # Check if the number is divisible by 24\n    if n % 24 == 0: \n        print(n,\"can be represented as the difference of two squares.\")\n    else: \n        print(n,\"cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    \"\"\"\n    This function takes a number as input and returns True if it can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a square number\n    import math\n    root = math.sqrt(n)\n    if root - int(root) == 0:\n        # Check if n can be represented as the difference of two squares\n        for i in range(2, int(math.sqrt(n))+1):\n            if n == i*i - (i-1)*(i-1):\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    # Check if the given number is even\n    if n % 2 == 0:\n        return False\n    \n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # Check if the square root is an integer\n    if sqrt_n ** 2!= n:\n        return False\n    \n    # Check if n can be represented as the difference of two squares\n    for i in range(2, sqrt_n):\n        if sqrt_n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_square(n):\n    '''\n    Returns True if n is a perfect square, False otherwise.\n    '''\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root*root == n\n\ndef dif_Square(n):\n    '''\n    Checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(int(math.sqrt(n))+1):\n        if is_square(n-i*i) and is_square(i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is a perfect square\n    if int(n**0.5)**2 == n:\n        return False\n    \n    # Find all possible pairs of squares that can represent the given number\n    for i in range(2, n):\n        for j in range(i+1, n):\n            if i**2 + j**2 == n:\n                return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it can be represented as the difference of two squares.\n    Otherwise, it returns False.\n    \"\"\"\n    # find the square root of n and round it to the nearest integer\n    root = round(n ** 0.5)\n    # check if the square root is an integer\n    if root ** 2 == n:\n        return False\n    # check if n can be represented as the difference of two squares\n    for i in range(2, root):\n        if (n - i*i) % (2*i - 1) == 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # convert n to a string for easy manipulation\n    n = str(n)\n    # check for the pattern of difference of squares\n    for i in range(1, len(n)):\n        if int(n[:i])**2 + int(n[i:])**2 == n:\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether the sequence of colors follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == 'G' and colors[i]!= 'G':\n            return False\n        elif patterns[i] == 'Y' and colors[i]!= 'Y':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'B':\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if patterns[i] == \"R\":\n            if colors[i]!= \"Red\":\n                return False\n        elif patterns[i] == \"G\":\n            if colors[i]!= \"Green\":\n                return False\n        elif patterns[i] == \"B\":\n            if colors[i]!= \"Blue\":\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_count = {}\n    for color in colors:\n        if color in pattern_count:\n            pattern_count[color] += 1\n        else:\n            pattern_count[color] = 1\n    \n    for i in range(len(patterns)):\n        for color in colors:\n            if pattern_count[color] == 0:\n                return False\n            elif patterns[i] == color and color in pattern_count:\n                pattern_count[color] -= 1\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    m = len(patterns)\n    if m == 1:\n        return True\n    \n    for i in range(m):\n        if i == 0:\n            if len(patterns[i])!= n:\n                return False\n            for j in range(n):\n                if patterns[i][j]!= colors[j]:\n                    return False\n        else:\n            if patterns[i][0]!= colors[n-1]:\n                return False\n            for j in range(1, n):\n                if patterns[i][j]!= patterns[i-1][j-1]:\n                    return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether the given colors follow the pattern given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if i >= len(patterns):\n            break\n        color = colors[i]\n        pattern = patterns[i]\n        if not color.endswith(pattern):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    m = len(patterns)\n    if m > n:\n        return False\n    for i in range(m):\n        if patterns[i] not in colors:\n            return False\n        colors.remove(patterns[i])\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i%len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples which have all elements divisible by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        divisible = True\n        for x in t:\n            if x % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result_list.append(tup)\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if the number is divisible by 11,\n    otherwise, it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Check if a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as an input and returns True if the length of the word is odd, else False.\n    \"\"\"\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    \"\"\"\n    Returns True if the length of the word is odd, False otherwise.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # loop over the words\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n            return True\n    # if no odd length words were found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(s, \"length is even.\")\n    else:\n        print(s, \"length is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    This function checks whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as an argument and checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        print(f\"{s} has an odd length\")\n    else:\n        print(f\"{s} has an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n\n    Parameters:\n    n (int): The index of the tetrahedral number to find.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n\n    # Initialize the first four tetrahedral numbers\n    t1 = 1\n    t2 = 4\n    t3 = 10\n    t4 = 20\n\n    # Compute the nth tetrahedral number using the closed-form formula\n    nth_tetrahedral_number = n * (n + 1) * (n + 2) * (n + 3) // 24\n\n    # Check if the nth tetrahedral number can be represented as the sum of the previous four tetrahedral numbers\n    if nth_tetrahedral_number == t1 + t2 + t3 + t4:\n        return nth_tetrahedral_number\n    else:\n        raise ValueError(f\"The nth tetrahedral number {nth_tetrahedral_number} cannot be represented as the sum of the previous four tetrahedral numbers.\")"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n    \"\"\"\n    return int(n * (n + 1) * (n + 2) / 6)"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * tetrahedral_number(n-1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(n):\n        result += (4 * i**3) // (i + 1)\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    This function returns the nth tetrahedral number.\n    \"\"\"\n    return int((n * (n+1) * (n+2)) / 6)"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(f\"The volume of the sphere is {volume_sphere(radius):.2f}\")"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Find the volume of a sphere with radius r.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculate the volume of a sphere.\n    :param r: radius of the sphere\n    :return: volume of the sphere\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char) - ord('A') + 1\n    char_ascii = sum_ascii % 26\n    return chr(char_ascii + ord('A') - 1)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize the variable to 0\n    result = 0\n    # loop through each character in the string\n    for char in strr:\n        # add the ASCII value of the character to the result variable\n        result += ord(char)\n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(result % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char) - 96\n        \n    return chr(sum_ascii % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values of all the characters\n    ascii_sum = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        ascii_sum += ord(char)\n        \n    # Return the character made by adding the sum of ASCII values modulo 26\n    return chr(ascii_sum % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # iterate over each character in the string\n    for char in strr:\n        # add the ASCII value of the character to the sum\n        sum += ord(char)\n    # return the character made by adding the sum modulo 26\n    return chr(sum % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initializing the result variable to zero\n    result = 0\n    # Looping through the string to find the sum of ASCII values\n    for i in strr:\n        result += ord(i)\n    # Finding the character by taking the sum modulo 26 and subtracting the ASCII value of 'a' to get the actual character\n    character = chr((result % 26) - 97)\n    return character"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # Convert the string to a list of ASCII values\n    ascii_vals = [ord(c) for c in strr]\n    # Add up all the ASCII values and take the remainder when divided by 26\n    sum_ascii = sum(ascii_vals) % 26\n    # Convert the sum back to a character and return it\n    return chr(sum_ascii + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum%26 + ord('A'))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return \"The 1st number in the Newman-Conway sequence is 1.\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return f\"The {n}th number in the Newman-Conway sequence is {sequence[n]}.\""
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the Newman Conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [0, 1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"0 is not a valid input\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]\n"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    i = 1\n    count = 1\n    while count <= n:\n        hex_num = i * (2 * i - 1)\n        if hex_num % 2 == 0:\n            count += 1\n        i += 1\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    sum = 0\n    i = 1\n    while sum < n:\n        sum += i*(i+1)\n        i += 1\n    return i-1, sum-i*(i-1)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the nth hexagonal number\n    hex_num = n * (2 * n - 1)\n    # Calculate the distance from the center of the hexagon\n    dist = hex_num ** 0.5\n    # Round the distance to the nearest integer\n    dist_int = round(dist)\n    # Calculate the x-coordinate of the center\n    x = dist_int - 1\n    # Calculate the y-coordinate of the center\n    y = n - x\n    # Calculate the centered hexagonal number\n    centered_hex_num = hex_num - 3 * x - y\n    return centered_hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        yield num\n        num += 6*(count+1) - (count+1)\n        count += 1"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal = []\n    for i in range(1, n+1):\n        hexagonal.append(i*(2*i-1))\n    return hexagonal[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagon_number = n*(2*n-1)\n    return hexagon_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    count = 0\n    while True:\n        h = (2*i*i - i)\n        if h >= n:\n            return h - n + 1\n        i += 1"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i*(2*i-1) for i in range(1, n+1)]\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = (2*n - 1)**2\n    return h"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = 1\n    for i in range(1, n+1):\n        h += i\n    return h"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a merged dictionary.\n    '''\n    result_dict = dict1.copy()\n    result_dict.update(dict2)\n    result_dict.update(dict3)\n    return result_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for d in [dict1, dict2, dict3]:\n        merged_dict.update(d)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\ndict3 = {'d': 5, 'c': 6}\n\nmerged_dict = merge_dictionaries_three(dict1, dict2, dict3)\nprint(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of all the elements in the list.\n    '''\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n    \"\"\"\n    nums = [i for i in range(n)]\n    nums.remove(n)\n    closest = nums[0]\n    for num in nums:\n        if abs(n - num) < abs(n - closest):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # create a list of numbers from 1 to N\n    nums = list(range(1, N+1))\n    # remove the number N from the list\n    nums.remove(N)\n    # sort the list in ascending order\n    nums.sort()\n    # return the first element of the sorted list (which is the closest smaller number than N)\n    return nums[0]"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(n):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    small_num = None\n    for i in range(n-1, 0, -1):\n        if i!= n:\n            small_num = i\n            break\n    return small_num"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_smaller = None\n    for i in range(n-1, -1, -1):\n        if i < n:\n            closest_smaller = i\n            break\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer as input and returns the closest smaller integer.\n    '''\n    # Create an empty list to store the smaller numbers.\n    smaller_nums = []\n    \n    # Loop through each number from 1 to n-1 and check if it is smaller than n.\n    for i in range(1, n):\n        if i < n:\n            smaller_nums.append(i)\n    \n    # If there are no smaller numbers than n, return None.\n    if len(smaller_nums) == 0:\n        return None\n    \n    # Otherwise, return the last number in the smaller_nums list.\n    return smaller_nums[-1]"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer n as input and returns the closest smaller number than n.\n    '''\n    i = n - 1\n    while i >= 0:\n        if n % i == 0:\n            return i\n        i -= 1\n    return None"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(n):\n    \"\"\"\n    This function takes an integer n and returns the closest smaller number than n.\n    \"\"\"\n    num = n\n    while num > 1:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num = (num + 1) // 2\n    return num"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [2, 4, 6, 8, 10]\n    nums.sort()\n    index = nums.index(N)\n    if index == 0:\n        return nums[index]\n    else:\n        return nums[index - 1]"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return None"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n-1"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list of strings as input and returns the length of the longest word.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function finds the length of the longest word in a given list of words.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function finds the length of the longest word in a list of strings.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function finds the length of the longest word in a list of strings.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function checks if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes in two string arguments: str1 and sub_str.\n    It returns True if sub_str is present as a substring in str1,\n    otherwise it returns False.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments, str1 and sub_str, and returns True if sub_str is present as a substring of str1, and False otherwise.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if n is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    else:\n        # if n is not divisible by 2 or 3, check if it is divisible by any odd number\n        for i in range(5, n+1, 6):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    \n    for i in range(len(digits)-1):\n        if digits[i] == digits[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # split the number into digits\n    digits = [int(d) for d in str(n)]\n\n    # check if the digits are increasing or decreasing\n    for i in range(1, len(digits)):\n        if digits[i] > digits[i-1]:\n            return False\n        elif digits[i] < digits[i-1]:\n            continue\n        else:\n            return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Get the digits of n\n    digits = list(str(n))\n    \n    # Check if there is only one digit\n    if len(digits) == 1:\n        return False\n    \n    # Check if the difference between adjacent digits is constant\n    for i in range(1, len(digits)):\n        if abs(int(digits[i]) - int(digits[i-1]))!= abs(int(digits[i+1]) - int(digits[i])):\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether the given number is undulating or not.\n    A number is said to be undulating if the absolute difference between the consecutive digits in its factorial is constant.\n    '''\n    \n    # Factorial of the given number\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # Finding the absolute difference between consecutive digits\n    abs_diff = abs(int(str(n)[0]) - int(str(n)[1]))\n    \n    # Checking if the difference between consecutive digits is constant or not\n    for i in range(2, len(str(n))):\n        temp = abs(int(str(n)[i-1]) - int(str(n)[i]))\n        if temp!= abs_diff:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert n to a string to check for consecutive digits\n    n_str = str(n)\n    # Check for consecutive digits\n    if n_str.count(n_str[0]) == len(n_str):\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return False\n    \n    # count the number of times the digits repeat\n    digits = str(n)\n    count = 1\n    for i in range(1, len(digits)):\n        if digits[i] == digits[i-1]:\n            count += 1\n        else:\n            break\n    \n    # check if the number of digits repeats is odd or even\n    if count % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # initialize a list to store the digits of the number\n    digits = []\n    # iterate over the digits of the number\n    for digit in str(n):\n        digits.append(int(digit))\n    # check whether the digits are in increasing or decreasing order\n    is_increasing = True\n    is_decreasing = True\n    for i in range(len(digits)-1):\n        if digits[i] > digits[i+1]:\n            is_increasing = False\n        elif digits[i] < digits[i+1]:\n            is_decreasing = False\n        if not (is_increasing or is_decreasing):\n            return False\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a**b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\nprint(power(2, 3))  # Output: 8\nprint(power(5, 2))  # Output: 25"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=lambda x: x[1][1])[1][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sort the list by the second value\n    return sorted_list[0][0] # return the first value of the sorted list (i.e., the tuple with the smallest second value)"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of the integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    flat_list = [item for sublist in list1 for item in sublist]\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a nested list of lists into a single list.\n    \"\"\"\n    flattened_list = []\n    for sublist in nested_list:\n        flattened_list.extend(sublist)\n    return flattened_list\n\ndef frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = flatten_list(list1)\n    freq_dict = {}\n    for element in flattened_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if j in freq:\n                    freq[j] += 1\n                else:\n                    freq[j] = 1\n        else:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem not in freq_dict:\n                    freq_dict[subitem] = 1\n                else:\n                    freq_dict[subitem] += 1\n        else:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n\nnumbers = [1, 2, 3, 4, 5]\nprint(multiply_num(numbers))"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and returns the product of all the numbers\n    in the list divided by the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    This function multiplies all the numbers in a list and divides the result by the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        return bin(n)[2:]  # use bin() function to convert to binary and slice the first two characters (the '0b' prefix)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    This function converts the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    elif n < 0:\n        raise ValueError(\"Cannot convert negative numbers to binary.\")\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # check if n is negative, since binary representation of negative numbers is not defined\n    if n < 0:\n        raise ValueError(\"Decimal number should be non-negative\")\n\n    # convert decimal number to binary string\n    binary_string = bin(n)[2:]\n\n    # add leading zeros if necessary to ensure the binary string has at least one digit\n    if not binary_string:\n        binary_string = \"0\"\n\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:] # Convert to binary using built-in bin() function, then remove the '0b' prefix\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n\n    # Convert number to string and find its length\n    num_str = str(num)\n    num_len = len(num_str)\n\n    # Create a list of possible palindromes\n    palindromes = []\n    for i in range(num_len):\n        for j in range(i, num_len):\n            palindromes.append(int(num_str[i:j+1]))\n\n    # Remove duplicates and sort palindromes\n    palindromes = sorted(list(set(palindromes)))\n\n    # Find the next smallest palindrome\n    next_palindrome = palindromes[0]\n    for palindrome in palindromes:\n        if palindrome > num:\n            next_palindrome = palindrome\n            break\n\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert input integer to string\n    num_str = str(num)\n\n    # check if input integer is already a palindrome\n    if num_str == num_str[::-1]:\n        # convert integer to list of digits\n        digits = [int(digit) for digit in num_str]\n\n        # find the index of the last non-zero digit in the list of digits\n        last_nonzero_digit_index = -1\n        for i in range(len(digits)-1, -1, -1):\n            if digits[i]!= 0:\n                last_nonzero_digit_index = i\n                break\n\n        # if all digits are non-zero, the next smallest palindrome will be the smallest possible palindrome with 1 more digit\n        if last_nonzero_digit_index == -1:\n            # add a digit to the beginning of the list of digits\n            digits.insert(0, 1)\n            # convert list of digits back to string\n            num_str = ''.join([str(digit) for digit in digits])\n            # increment the last digit to make it a two-digit number\n            num_str = str(int(num_str) + 1)\n        # otherwise, we can add a digit to the last non-zero digit to make the next smallest palindrome\n        else:\n            # increment the last non-zero digit\n            digits[last_nonzero_digit_index] += 1\n            # convert list of digits back to string\n            num_str = ''.join([str(digit) for digit in digits])\n            # find the index of the last digit in the list of digits\n            last_digit_index = len(digits) - 1\n            # if the last digit is a 9, we need to carry the 1 to the next digit\n            while digits[last_digit_index] == 9:\n                # carry the 1 to the next digit\n                digits[last_digit_index-1] += 1\n                # reset the last digit to 0\n                digits[last_digit_index] = 0\n                # move to the next digit\n                last_digit_index -= 1\n            # if the last digit is not a 9, we can just increment it\n            else:\n                digits[last_digit_index] += 1\n            # convert list of digits back to string\n            num_str = ''.join([str(digit) for digit in digits])\n\n    # convert string back to integer and return\n    return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num + 1\n    else:\n        while not is_palindrome(num):\n            num += 1\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num += 1\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Handle edge cases\n    if num == 0:\n        return 1\n    if num < 0:\n        return None\n    \n    # Check if the number itself is a palindrome\n    if is_palindrome(num):\n        # Check for next palindrome number\n        for i in range(num + 1, sys.maxsize):\n            if is_palindrome(i):\n                return i\n    \n    # If the number is not a palindrome, return the next smallest one\n    return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the number to a string and check if it's already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        # if the number is already a palindrome, increment it by 1 and check if the new number is a palindrome\n        num += 1\n        while not str(num) == str(num)[::-1]:\n            num += 1\n        return num\n    else:\n        # if the number is not already a palindrome, check if the next smallest palindrome is the same as the original number\n        palindrome = num + 1\n        while not str(palindrome) == str(palindrome)[::-1]:\n            palindrome += 1\n        return palindrome\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    next_palindrome = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # Find the first digit of the palindrome\n    first_digit = int(str(num)[0])\n    \n    # Find the largest palindrome that can be formed with the same digits\n    largest_palindrome = int(''.join(sorted(str(num), reverse=True)))\n    \n    # If the largest palindrome has the same first digit as the input number, increment it by 1\n    if first_digit == int(str(largest_palindrome)[0]):\n        largest_palindrome += 1\n        \n    return largest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = num + 1\n    while True:\n        if str(palindrome) == str(palindrome)[::-1]:\n            return palindrome\n        palindrome += 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the input number is a palindrome\n    if str(num) == str(num)[::-1]:\n        # If the number is a palindrome, return the next smallest palindrome\n        return num + 1\n    \n    # If the number is not a palindrome, find the next smallest palindrome by incrementing the number and checking if the new number is a palindrome\n    else:\n        # Initialize the next smallest palindrome to be the input number plus 1\n        next_palindrome = num + 1\n        \n        # Check if the next smallest palindrome is a palindrome\n        while str(next_palindrome)!= str(next_palindrome)[::-1]:\n            # If the next smallest palindrome is not a palindrome, increment it by 1\n            next_palindrome += 1\n        \n        # Return the next smallest palindrome\n        return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return \"Input must be a positive integer.\"\n    elif num == 1:\n        return 2\n    else:\n        # convert to a string to check if it is already a palindrome\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            # check if the number ends in 9 (909, 999, etc)\n            if int(num_str[-1]) == 9:\n                return int(num_str[:-1] + '1' + '1')\n            else:\n                return int(num_str[:-1] + str(int(num_str[-1]) + 1))\n        else:\n            # find the smallest number that is a palindrome and add 1 to it\n            i = num + 1\n            while True:\n                num_str = str(i)\n                if num_str == num_str[::-1]:\n                    return i\n                i += 1"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a kth index as input and returns the kth element of the array.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    return sorted(arr)[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function finds the kth element in the given array using 1-based indexing.\n\n    Args:\n    arr (list): A list of integers.\n    k (int): An integer representing the position of the element to be found.\n\n    Returns:\n    int: Returns the kth element in the given array.\n    \"\"\"\n\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Invalid value for k.\")\n\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and a value k and returns the kth element in the array using 1-based indexing.\n    '''\n    if k <= len(arr):\n        return arr[k-1]\n    else:\n        return \"The value of k is greater than the length of the array.\""
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_words = [words[0]]\n    for word in words[1:]:\n        camel_case_words.append(word.capitalize())\n    return ''.join(camel_case_words)"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join([word.title() for word in words[1:]])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a string in snake case and returns the corresponding string in camel case.\n    \"\"\"\n    # split the string into words based on snake_case\n    words = word.split('_')\n    \n    # initialize the camel_case string\n    camel_case = ''\n    \n    # iterate over the words and capitalize the first letter of each word except for the first word\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i]\n        else:\n            camel_case += words[i].capitalize()\n    \n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and converts it to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    elif n == 1:\n        return 2 * (m - 1)\n    elif m == 1:\n        return 2 * (n - 1)\n    else:\n        return (n - 1) * (m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables for number of integers and digits\n    num_integers = 0\n    num_digits = 0\n    \n    # Initialize variables for the number of positive and negative integers\n    pos_integers = 0\n    neg_integers = 0\n    \n    # Iterate through the numbers from 1 to n and check if they are divisible by m\n    for i in range(1, n+1):\n        if i % m == 0:\n            # Count the number of integers and digits in the current number\n            num_integers += 1\n            num_digits += len(str(i))\n            \n            # Check if the current number is positive or negative\n            if i > 0:\n                pos_integers += 1\n            else:\n                neg_integers += 1\n    \n    # Calculate the Eulerian number a(n, m)\n    if num_integers % 2 == 0:\n        eulerian_num = (num_integers // 2) * m\n    else:\n        eulerian_num = ((num_integers // 2) + 1) * m\n    \n    # If there are an odd number of positive integers, add 1 to the Eulerian number\n    if pos_integers % 2!= 0:\n        eulerian_num += 1\n    \n    # If there are an odd number of negative integers, subtract 1 from the Eulerian number\n    if neg_integers % 2!= 0:\n        eulerian_num -= 1\n    \n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a and b to 0\n    a = 0\n    b = 0\n    # Initialize count to 0\n    count = 0\n    # Loop through each digit in n\n    for i in n:\n        # If the digit is odd, add it to a\n        if i % 2 == 1:\n            a += int(i)\n            count += 1\n        # If the digit is even, add it to b\n        else:\n            b += int(i)\n    # Loop through each digit in m\n    for j in m:\n        # If the digit is odd, subtract it from a\n        if j % 2 == 1:\n            a -= int(j)\n            count += 1\n        # If the digit is even, subtract it from b\n        else:\n            b -= int(j)\n    # Return the Eulerian number a(n, m)\n    return a * b"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function takes two parameters, n and m, and returns the Eulerian number a(n, m).\n    '''\n    if n < 2 or m < 2: \n        return None\n    \n    # Initialize the number to be returned\n    result = 0\n    \n    # Loop through all possible combinations of n and m\n    for i in range(n): \n        for j in range(m): \n            # Calculate the Eulerian number for this combination\n            eulerian = (i+j+1) * (n-i) * (m-j)\n            \n            # Add it to the result\n            result += eulerian\n    \n    return result"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    eulerian_sum = (n * (n + 1)) // 2\n    eulerian_sum -= m * (m + 1) // 2\n    return eulerian_sum"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n - 1, m) + m - 1"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m).\n    \"\"\"\n    # Compute the Eulerian phi function\n    phi = n * m // gcd(n, m)\n\n    # Compute the Eulerian totient function\n    totient = phi * (phi - 1) // 2\n\n    # Compute the Eulerian prime function\n    prime = 1\n    for i in range(2, int(totient**0.5) + 1):\n        if totient % i == 0:\n            prime = 0\n            break\n\n    # Determine if a(n, m) is a prime number\n    if prime == 1:\n        return 1\n    else:\n        return 0"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    eulerian = (m * (m + 1)) // 2 + (n * (n + 1)) // 2\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the result to 0\n    result = 0\n    \n    # Check if n is even\n    if n % 2 == 0:\n        # If n is even, the Eulerian number a(n, m) is n\n        result = n\n    else:\n        # If n is odd, the Eulerian number a(n, m) is n * (2m + 1)\n        result = n * (2 * m + 1)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 0\n    k = 0\n    while True:\n        # Check if there are still factors of 2 in n\n        while n % 2 == 0:\n            n //= 2\n            a += 1\n        # Check if there are still factors of 3 in n\n        while n % 3 == 0:\n            n //= 3\n            a += 1\n        # Check if there are still factors of 5 in n\n        while n % 5 == 0:\n            n //= 5\n            a += 1\n        # Check if there are still factors of 7 in n\n        while n % 7 == 0:\n            n //= 7\n            a += 1\n        # Check if there are still factors of 11 in n\n        while n % 11 == 0:\n            n //= 11\n            a += 1\n        # Check if there are still factors of 13 in n\n        while n % 13 == 0:\n            n //= 13\n            a += 1\n        # Check if there are still factors of 17 in n\n        while n % 17 == 0:\n            n //= 17\n            a += 1\n        # Check if there are still factors of 19 in n\n        while n % 19 == 0:\n            n //= 19\n            a += 1\n        # Check if there are still factors of 23 in n\n        while n % 23 == 0:\n            n //= 23\n            a += 1\n        # Check if there are still factors of 29 in n\n        while n % 29 == 0:\n            n //= 29\n            a += 1\n        # Check if there are still factors of 31 in n\n        while n % 31 == 0:\n            n //= 31\n            a += 1\n        # Check if there are still factors of 37 in n\n        while n % 37 == 0:\n            n //= 37\n            a += 1\n        # Check if there are still factors of 41 in n\n        while n % 41 == 0:\n            n //= 41\n            a += 1\n        # Check if there are still factors of 43 in n\n        while n % 43 == 0:\n            n //= 43\n            a += 1\n        # Check if there are still factors of 47 in n\n        while n % 47 == 0:\n            n //= 47\n            a += 1\n        # Check if there are still factors of 53 in n\n        while n % 53 == 0:\n            n //= 53\n            a += 1\n        # Check if there are still factors of 59 in n\n        while n % 59 == 0:\n            n //= 59\n            a += 1\n        # Check if there are still factors of 61 in n\n        while n % 61 == 0:\n            n //= 61\n            a += 1\n        # Check if there are still factors of 67 in n\n        while n % 67 == 0:\n            n //= 67\n            a += 1\n        # Check if there are still factors of 71 in n\n        while n % 71 == 0:\n            n //= 71\n            a += 1\n        # Check if there are still factors of 73 in n\n        while n % 73 == 0:\n            n //= 73\n            a += 1\n        # Check if there are still factors of 79 in n\n        while n % 79 == 0:\n            n //= 79\n            a += 1\n        # Check if there are still factors of 83 in n\n        while n % 83 == 0:\n            n //= 83\n            a += 1\n        # Check if there are still factors of 89 in n\n        while n % 89 == 0:\n            n //= 89\n            a += 1\n        # Check if there are still factors of 97 in n\n        while n % 97 == 0:\n            n //= 97\n            a += 1\n        # Check if there are still factors of 101 in n\n        while n % 101 == 0:\n            n //= 101\n            a += 1\n        # Check if there are still"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    This function takes in a list of lists and sorts each sublist of strings in ascending order.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of True values in a list.\n\n    Args:\n    lst (list): The list to count True values in.\n\n    Returns:\n    int: The number of True values in the list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuple.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function appends the given list to the given tuple.\n    \"\"\"\n    # Convert the list to a tuple and return the result.\n    return tuple(test_list) + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function takes two lists and a tuple as inputs. It appends the given list to the given tuple.\n    \"\"\"\n    new_tup = test_tup + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuple.\n    \"\"\"\n    return tuple(list(test_tup) + test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuple.\n\n    :param test_list: list\n    :param test_tup: tuple\n    :return: tuple\n    \"\"\"\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_list + list(test_tup))"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into one sorted list.\n    '''\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n    \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n    i = 0\n    result = []\n    while heap:\n        smallest = heapq.heappop(heap)\n        result.append(smallest)\n        if i < len(num1) and smallest == num1[i]:\n            heapq.heappush(heap, num1[i+1])\n            i += 1\n        elif i < len(num2) and smallest == num2[i]:\n            heapq.heappush(heap, num2[i+1])\n            i += 1\n        elif i < len(num3) and smallest == num3[i]:\n            heapq.heappush(heap, num3[i+1])\n            i += 1\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] <= num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] <= num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create an empty heap\n    heap = []\n\n    # Push the first element of each list into the heap\n    for num in [num1, num2, num3]:\n        heapq.heappush(heap, num[0])\n\n    # Create an empty list to store the merged list\n    merged_list = []\n\n    # While the heap is not empty\n    while heap:\n        # Pop the smallest element from the heap and append it to the merged list\n        merged_list.append(heapq.heappop(heap))\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            heapq.heappush(merged_list, num1[0])\n            num1.pop(0)\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            heapq.heappush(merged_list, num2[0])\n            num2.pop(0)\n        else:\n            heapq.heappush(merged_list, num3[0])\n            num3.pop(0)\n    while num1:\n        heapq.heappush(merged_list, num1[0])\n        num1.pop(0)\n    while num2:\n        heapq.heappush(merged_list, num2[0])\n        num2.pop(0)\n    while num3:\n        heapq.heappush(merged_list, num3[0])\n        num3.pop(0)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while len(merged_list) < len(num1) + len(num2) + len(num3):\n        if num1 and num2 and num3:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        elif num1:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a min heap from the three input lists\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, (num1[0], 0, 0))\n    heapq.heappush(heap, (num2[0], 1, 0))\n    heapq.heappush(heap, (num3[0], 2, 0))\n\n    # Create an empty list to store the merged list\n    merged_list = []\n\n    # Pop the smallest element from the heap and add it to the merged list\n    while heap:\n        val, lst_idx, num_idx = heapq.heappop(heap)\n        merged_list.append(val)\n\n        # Add the next element from the same list to the heap\n        if num_idx + 1 < len(num1) and lst_idx == 0:\n            heapq.heappush(heap, (num1[num_idx + 1], 0, num_idx + 1))\n        elif num_idx + 1 < len(num2) and lst_idx == 1:\n            heapq.heappush(heap, (num2[num_idx + 1], 1, num_idx + 1))\n        elif num_idx + 1 < len(num3) and lst_idx == 2:\n            heapq.heappush(heap, (num3[num_idx + 1], 2, num_idx + 1))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a max heap to store the merged list\n    merged_list = []\n    heapq.heapify(merged_list)\n\n    # Add all the elements of the three lists into the heap\n    for lst in [num1, num2, num3]:\n        for num in lst:\n            heapq.heappush(merged_list, num)\n\n    # Extract the elements from the heap and add them to a new list\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap1 = [(-n, i) for i, n in enumerate(num1)]\n    heapq.heapify(heap1)\n    heap2 = [(-n, i) for i, n in enumerate(num2)]\n    heapq.heapify(heap2)\n    heap3 = [(-n, i) for i, n in enumerate(num3)]\n    heapq.heapify(heap3)\n\n    merged = []\n    while heap1 and heap2 and heap3:\n        if -heap1[0][0] <= -heap2[0][0] and -heap1[0][0] <= -heap3[0][0]:\n            merged.append(heap1[0][1])\n            heapq.heappop(heap1)\n        elif -heap2[0][0] <= -heap1[0][0] and -heap2[0][0] <= -heap3[0][0]:\n            merged.append(heap2[0][1])\n            heapq.heappop(heap2)\n        else:\n            merged.append(heap3[0][1])\n            heapq.heappop(heap3)\n\n    merged.extend([heap1[0][1], heap2[0][1], heap3[0][1]])\n\n    return [num1[i] for i in merged]"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and a number n as inputs and returns the number of numbers with an odd value\n    when rotating the binary string s n times.\n    \"\"\"\n    s_list = list(s)\n    total = 0\n    for i in range(n):\n        rotated_list = s_list[i:] + s_list[:i]\n        for j in rotated_list:\n            if int(j) % 2!= 0:\n                total += 1\n    return total"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    This function takes two parameters:\n    s - binary string to be rotated\n    n - number of times the string is to be rotated\n\n    The function returns the number of numbers with an odd value when the binary string is rotated n times.\n    '''\n    # convert the binary string into a list of integers\n    s_list = [int(i) for i in s]\n    \n    # rotate the binary string n times\n    for i in range(n):\n        s_list = s_list[-1:] + s_list[:-1]\n        \n    # count the number of odd numbers in the rotated string\n    count = 0\n    for i in s_list:\n        if i % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.replace('0','').replace('1','0').replace('','1') # rotating the binary string n times\n    count = s.count('1') # counting the number of 1's in the rotated binary string\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    s (str): A binary string.\n    n (int): The number of times to rotate the binary string.\n\n    Returns:\n    int: The number of numbers with an odd value.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n\n    # Rotate the binary string n times\n    s = s[n:] + s[:n]\n\n    # Count the number of odd numbers\n    count = sum(1 for i in s if i % 2!= 0)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    # Convert the string to a list of integers\n    s = [int(i) for i in s]\n    \n    # Rotate the list n times\n    s = s[-n:] + s[:-n]\n    \n    # Count the number of odd values in the rotated list\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        for digit in rotated:\n            if int(digit) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    s = s + s\n    for i in range(n):\n        for j in range(len(s)):\n            if int(s[j]) % 2 == 1:\n                count += 1\n        s = s[1:] + s[0]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the string to a binary number\n    num = int(s, 2)\n    \n    # Rotate the binary number n times\n    rotated_num = num << n\n    \n    # Count the number of odd digits\n    count = 0\n    while rotated_num > 0:\n        digit = rotated_num % 10\n        if digit % 2 == 1:\n            count += 1\n        rotated_num //= 10\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes a binary string s and the number of rotations n as inputs and returns the number of numbers with an odd value when rotating the binary string the given number of times.\n    '''\n    # Convert the binary string into a list of digits\n    digits = [int(d) for d in s]\n\n    # Rotate the binary string n times\n    rotated = digits[n:] + digits[:n]\n\n    # Count the number of odd numbers in the rotated binary string\n    odd_count = sum(digit % 2!= 0 for digit in rotated)\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n        s (str): A binary string.\n        n (int): The number of times to rotate the binary string.\n\n    Returns:\n        int: The number of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(x) for x in s]\n\n    # Rotate the binary string the given number of times\n    rotated_s = s[-n:] + s[:-n]\n\n    # Count the number of odd numbers in the rotated string\n    count = 0\n    for num in rotated_s:\n        if num % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            for k in range(len(nestedlist[i])):\n                if nestedlist[i][k] in nestedlist[j]:\n                    common.append(nestedlist[i][k])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common_elements.intersection_update(set(nestedlist[i]))\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i+1:])):\n                if nestedlist[i][j] in nestedlist[i+1+k]:\n                    if nestedlist[i][j] not in common_elements:\n                        common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist:\n        common_elements.intersection_update(set(lst))\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements += [value for value in nestedlist[i] if value in nestedlist[j]]\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = set()\n    for inner_list in nestedlist:\n        common_elements.update(inner_list)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function finds the common elements in given nested lists.\n    \"\"\"\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in result:\n                result.append(nestedlist[i][j])\n    for i in range(len(nestedlist)-1):\n        for j in range(i+1, len(nestedlist)):\n            common = []\n            for k in range(len(nestedlist[i])):\n                if nestedlist[i][k] in nestedlist[j]:\n                    common.append(nestedlist[i][k])\n            if common:\n                result = [x for x in result if x not in common]\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    :param text: string to check\n    :return: True if the string represents an integer, False otherwise\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \n    :param text: The string to check.\n    :return: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as an argument and checks if it represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if the given string represents an integer or not.\n\n    Args:\n    text (str): the string to check\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Check if all dictionaries in a list are empty.\n\n    Args:\n        list1 (list): A list of dictionaries.\n\n    Returns:\n        bool: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = True\n    for i in list1:\n        if i:\n            result = False\n            break\n    return result"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = True\n    for dic in list1:\n        if dic:\n            result = False\n            break\n    return result"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    This function checks whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dict(list1):\n    '''\n    This function takes a list as an argument and returns True if all the dictionaries in the list are empty, otherwise, it returns False.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    This function checks whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dict_list(dict_list):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in dict_list:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dict_list(list1):\n    \"\"\"\n    This function checks whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n\n    Parameters:\n    nums (tuple of integers): The tuple of positive integers to convert.\n\n    Returns:\n    int: The resulting integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers and returns a single integer\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] * 10**(len(nums)-1) + tuple_to_int(nums[1:])"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result = result * 10 + nums[i]\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                continue\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_element = float(element)\n                new_sublist.append(new_element)\n            except ValueError:\n                pass\n        result.append(new_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    This function takes a list of lists as an input and converts all possible\n    convertible elements to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all elements in a list of lists that can be converted to float to float.\n    \"\"\"\n    for i, row in enumerate(test_list):\n        for j, item in enumerate(row):\n            try:\n                test_list[i][j] = float(item)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, str) and item.replace('.', '', 1).isdigit():\n            result.append(float(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n            elif isinstance(test_list[i][j], list):\n                test_list[i][j] = list_to_float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i, sublist in enumerate(test_list):\n        for j, element in enumerate(sublist):\n            try:\n                test_list[i][j] = float(element)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Converts a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function converts a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    This function converts a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    # First, we'll find the sum of all the elements of the array\n    total_sum = sum(arr)\n    \n    # We'll loop through the array and subtract each element from the total sum\n    for num in arr:\n        total_sum -= num\n        \n        # If the resulting sum is zero, we've found the element that appears only once\n        if total_sum == 0:\n            return num\n        \n    # If we've reached this point, it means that there are no duplicates in the array\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # check if the array has odd number of elements\n    if n % 2 == 1:\n        return arr[n//2]\n    else:\n        # if the array has even number of elements,\n        # then the element that appears only once is the one that is smaller than the middle element\n        return arr[n//2-1]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Loop through the dictionary to find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return \"Element not found\""
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Keep moving the pointers until they meet or cross each other\n    while left < right:\n        # Check if the left pointer is pointing to the same element as the right pointer\n        if arr[left] == arr[right]:\n            # If so, the element must be duplicated, so move the left pointer to the right\n            left += 1\n        else:\n            # If not, the element must be unique, so move the right pointer to the left\n            right -= 1\n    \n    # If the left pointer is pointing to the same element as the right pointer,\n    # then the element must be unique, otherwise it must be duplicated\n    if left == right:\n        # Return the element that appears only once\n        return arr[left]\n    else:\n        # If no element appears only once, return None\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    i = 0\n    j = n - 1\n    only_element = None\n    \n    # Loop through the array\n    while i <= j:\n        # Calculate the middle index\n        mid = (i + j) // 2\n        \n        # If the middle element appears only once\n        if (mid == 0 or arr[mid-1]!= arr[mid]) and (mid == n-1 or arr[mid+1]!= arr[mid]):\n            only_element = arr[mid]\n            break\n        \n        # If the middle element appears more than once, search the left half of the array\n        elif arr[mid] > arr[mid+1]:\n            j = mid - 1\n        \n        # If the middle element appears more than once, search the right half of the array\n        else:\n            i = mid + 1\n    \n    # Return the only element that appears only once\n    return only_element"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None # no element appears only once"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        j = i + 1\n        k = n - 1\n        while j < k:\n            mid = (j + k) // 2\n            if arr[mid] == arr[i]:\n                j = mid + 1\n            else:\n                k = mid - 1\n        if j == n:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes in a sorted array and finds the element that appears only once.\n    \"\"\"\n    # Initialize a variable to keep track of the number of occurrences of each element in the array\n    count = 0\n    \n    # Initialize a variable to keep track of the first occurrence of each element in the array\n    first_occurrence = {}\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is not in the dictionary, add it with a count of 1\n        if arr[i] not in first_occurrence:\n            first_occurrence[arr[i]] = i\n            count += 1\n        # If the current element is in the dictionary, increment its count and update its first occurrence\n        else:\n            count += 1\n            first_occurrence[arr[i]] = i\n    \n    # Loop through the array again and find the element that appears only once\n    for i in range(len(arr)):\n        if count == 1 and first_occurrence[arr[i]] == i:\n            return arr[i]\n        else:\n            count -= 1"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1] * list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1]) * abs(list1[i][1] * list1[j][0])\n            \n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]) * abs(list1[j][0]) * abs(list1[i][1]) * abs(list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) + abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst) - 1):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            for k in range(j+1, len(list1)):\n                product = abs(list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]*list1[k][0]*list1[k][1])\n                if product > max_product:\n                    max_product = product\n                    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            \n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a list of amicable numbers\n    amicable_numbers = []\n    # Loop through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if i is amicable\n        j = sum(int(digit) for digit in str(i))\n        if i < j < limit and i == sum(range(1, j+1)) and j == sum(range(1, i+1)):\n            # Add i and j to the list of amicable numbers\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n    # Return the sum of the amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        divisor_sum = sum_divisors(num)\n        if divisor_sum!= num and sum_divisors(divisor_sum) == num:\n            sum += num\n    return sum\n\ndef sum_divisors(num):\n    '''\n    Returns the sum of all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes an integer limit as input and returns the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n    # Create a list of all integers from 1 to limit\n    nums = list(range(1, limit+1))\n    \n    # Create a dictionary to store the amicable numbers\n    amicables = {}\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # Check if the current number is already in the dictionary\n        if num in amicables:\n            continue\n        \n        # Get the sum of all divisors of the current number\n        divisors_sum = sum([i for i in range(1, num) if num % i == 0])\n        \n        # Check if the sum of divisors is in the dictionary\n        if divisors_sum in amicables:\n            amicables[num] = amicables[divisors_sum] + num\n        else:\n            # If not, add the current number to the dictionary\n            amicables[num] = num\n    \n    # Return the sum of all amicable numbers\n    return sum(amicables.values())"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisors(n):\n    '''Return a list of all divisors of a number.'''\n    divs = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n // i:\n                divs.append(n // i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for n in range(1, limit):\n        if n < divisors(n)[-1]: # ignore numbers with divisors greater than n\n            continue\n        div_sum = sum(divisors(n))\n        if n!= div_sum and n == sum(divisors(div_sum)):\n            total_sum += n\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        divisors = [x for x in range(1, num) if num % x == 0]\n        divisor_sum = sum(divisors)\n        if num!= divisor_sum and divisor_sum < limit and num == sum(range(1, divisor_sum+1)):\n            sum += num + divisor_sum\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisors(n):\n    div = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            div.append(i)\n            if n // i!= i:\n                div.append(n // i)\n    return div\n\ndef amicable_numbers_sum(limit):\n    amicables = []\n    for num in range(2, limit+1):\n        divs = divisors(num)\n        divs.remove(num)\n        sum_divs = sum(divs)\n        if sum_divs > num and sum_divs < limit and num == divs[divs.index(sum_divs)]:\n            amicables.append(num)\n    return sum(amicables)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit + 1):\n        divisors = [d for d in range(1, i//2 + 1) if i % d == 0]\n        divisors.remove(i)\n        if sum(divisors) == i and i!= sum(divisors):\n            total += i\n            print(i, divisors, total)\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(2, limit+1):\n        divisors = set()\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.add(i)\n        if sum(divisors) == num and num!= sum(set(range(1, num))):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(2, limit):\n        div1 = sum([i for i in range(2, num) if num % i == 0])\n        div2 = sum([i for i in range(2, div1) if div1 % i == 0])\n        if div2!= num and div1 == div2:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_sum_of_divisors(n):\n    '''\n    Returns the sum of all divisors of n, including 1 and n itself.\n    '''\n    s = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            s += i\n    return s\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if i!= get_sum_of_divisors(i):\n            j = get_sum_of_divisors(i)\n            if i == get_sum_of_divisors(j):\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Get the angle of a complex number in degrees.\n    '''\n    return cmath.phase(a) * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return round(angle,2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    \n    # traverse each character of the string\n    for i in range(n):\n        # traverse each character from the current position to the end of the string\n        for j in range(i+1, n+1):\n            # count the number of 0s and 1s in the current substring\n            count_0s = string[i:j].count('0')\n            count_1s = string[i:j].count('1')\n            \n            # calculate the absolute difference between the number of 0s and 1s\n            diff = abs(count_0s - count_1s)\n            \n            # update the maximum difference found so far\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    max_length = 0\n    curr_length = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_length += 1\n        else:\n            curr_length -= 1\n            \n        max_length = max(max_length, curr_length)\n        \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zero_count = sub_string.count('0')\n            one_count = sub_string.count('1')\n            if abs(zero_count - one_count) > max_length:\n                max_length = abs(zero_count - one_count)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            length = abs(count_0 - count_1)\n            max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            temp = string[i:j]\n            count_0 = temp.count('0')\n            count_1 = temp.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    max_len = 0\n    for i in range(len(string)):\n        count_0 = string[i:].count('0')\n        count_1 = string[i:].count('1')\n        len_diff = abs(count_0 - count_1)\n        if len_diff > max_len:\n            max_len = len_diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    max_length = 0\n    current_length = 0\n    current_bit = string[0]\n    for bit in string:\n        if bit == current_bit:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n            current_bit = bit\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_length:\n                max_length = diff\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            length = abs(zeros - ones)\n            max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zero_count = sub_string.count('0')\n            one_count = sub_string.count('1')\n            length = abs(zero_count - one_count)\n            max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the prime factors of each number\n    prime_factors_a = []\n    for i in range(2, a+1):\n        while(a % i == 0):\n            prime_factors_a.append(i)\n            a = a / i\n\n    prime_factors_b = []\n    for i in range(2, b+1):\n        while(b % i == 0):\n            prime_factors_b.append(i)\n            b = b / i\n\n    # Find the common prime factors between the two numbers\n    common_factors = set(prime_factors_a).intersection(set(prime_factors_b))\n\n    # Find the sum of the common prime factors\n    sum_of_common_factors = sum(common_factors)\n\n    return sum_of_common_factors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef sum_of_common_divisors(a, b):\n    return sum([i for i in range(1, gcd(a, b) + 1) if a % i == 0 and b % i == 0])\n\nprint(sum_of_common_divisors(12, 18)) # Output: 6"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the set of factors for each number\n    factors_a = set(range(1, a+1))\n    factors_b = set(range(1, b+1))\n    # Find the intersection of the sets of factors\n    common_factors = factors_a.intersection(factors_b)\n    # Calculate the sum of the common factors\n    return sum(common_factors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    def find_divisors(num):\n        \"\"\"\n        This function finds all the divisors of a given number.\n        \"\"\"\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    def common_divisors(div_a, div_b):\n        \"\"\"\n        This function returns a list of common divisors of two lists of divisors.\n        \"\"\"\n        common = []\n        for i in div_a:\n            if i in div_b and i not in common:\n                common.append(i)\n        return common\n    \n    div_a = find_divisors(a)\n    div_b = find_divisors(b)\n    common = common_divisors(div_a, div_b)\n    return sum(common)\n"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the smaller number\n    n = min(a, b)\n\n    # Initialize a list to store the common divisors\n    divisors = []\n\n    # Iterate over the numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if both numbers have the same remainder when divided by i\n        if a % i == b % i == 0:\n            divisors.append(i)\n\n    # Calculate the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    def find_divisors(n):\n        \"\"\"\n        This function takes an integer as input and returns a list of its divisors.\n        \"\"\"\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # Find the divisors of both numbers\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n\n    # Find the common divisors\n    common_divisors = set(divisors_a) & set(divisors_b)\n\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n\n    :param a: first number\n    :param b: second number\n    :return: sum of common divisors\n    \"\"\"\n    # Find the maximum value between a and b\n    max_value = max(a, b)\n\n    # Initialize the sum of common divisors to 0\n    sum_divisors = 0\n\n    # Iterate over the range of 2 to the maximum value\n    for i in range(2, max_value + 1):\n        # Check if both a and b have a common divisor with i\n        if a % i == 0 and b % i == 0:\n            # If yes, add i to the sum of common divisors\n            sum_divisors += i\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the maximum number\n    max_num = max(a, b)\n\n    # Find the minimum number\n    min_num = min(a, b)\n\n    # Initialize the sum of common divisors to zero\n    sum_of_common_divisors = 0\n\n    # Check if the maximum number is divisible by the minimum number\n    if max_num % min_num == 0:\n        # If yes, add the minimum number to the sum of common divisors\n        sum_of_common_divisors = min_num\n\n    # Check if the minimum number is divisible by the maximum number\n    elif min_num % max_num == 0:\n        # If yes, add the maximum number to the sum of common divisors\n        sum_of_common_divisors = max_num\n\n    # Find the common divisors of the two numbers\n    common_divisors = [i for i in range(1, max_num + 1) if max_num % i == 0 and min_num % i == 0]\n\n    # Add the common divisors to the sum of common divisors\n    sum_of_common_divisors += sum(common_divisors)\n\n    # Return the sum of common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the maximum of two given numbers\n    max_num = max(a, b)\n\n    # Initialize the sum of common divisors as 0\n    common_divisor_sum = 0\n\n    # Iterate through all numbers from 1 to the maximum of two given numbers\n    for i in range(1, max_num + 1):\n        # Check if i is a common divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum of common divisors\n            common_divisor_sum += i\n\n    # Return the sum of common divisors\n    return common_divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integer arguments and returns their product.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    This function multiplies two integers and returns the result.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters.\n\n    Parameters:\n    n (int): The maximum length of the words to be returned.\n    words (list of str): A list of words to be searched.\n\n    Returns:\n    list of str: A list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str.split():\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    \n    # calculate the sum of each row, column, and diagonal\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n - i - 1] for i in range(n))\n    \n    # check if the sum of each row, column, and diagonal is equal to the magic sum\n    return row_sums == col_sums == [magic_sum] * n and diag_sum1 == diag_sum2 == magic_sum"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check that the matrix is a square\n    n = len(my_matrix)\n    if not all(len(row) == n for row in my_matrix):\n        return False\n    \n    # Check that the sum of each row and column is the same\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    if row_sums!= col_sums:\n        return False\n    \n    # Check that the sum of the diagonals is the same\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_sum!= diag2_sum:\n        return False\n    \n    # If all checks passed, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # check if all rows and columns have the same sum\n    if row_sums!= col_sums:\n        return False\n\n    # calculate the sum of the diagonal and the antidiagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    antidiagonal_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    # check if the sums are equal\n    if diagonal_sum!= antidiagonal_sum:\n        return False\n\n    # if all conditions are satisfied, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Calculate the sum of the matrix diagonals\n    sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[0][2] + my_matrix[2][0]\n    # Calculate the sum of the matrix elements\n    sum_elements = 0\n    for i in range(3):\n        for j in range(3):\n            sum_elements += my_matrix[i][j]\n    # Calculate the difference between the sum of the matrix diagonals and the sum of the matrix elements\n    diff = abs(sum_diagonals - sum_elements)\n    # If the difference is zero, then the matrix is a magic square\n    if diff == 0:\n        print(\"The matrix is a magic square!\")\n    else:\n        print(\"The matrix is not a magic square.\")"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a square matrix as input and checks whether it is a magic square.\n    A magic square is a square matrix of size n x n where the sum of the entries in each row, column, and diagonal is the same.\n    \"\"\"\n    n = len(my_matrix)\n    magic_sum = (n * (n ** 2 + 1)) // 2\n\n    # calculate row sums\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n\n    # calculate column sums\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n\n    # calculate diagonal sums\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(my_matrix[i][n - i - 1] for i in range(n))\n\n    # check if all row sums, column sums, and diagonal sums are equal to the magic sum\n    if all(row_sums[i] == magic_sum for i in range(n)) and \\\n       all(col_sums[j] == magic_sum for j in range(n)) and \\\n       diagonal_sum1 == magic_sum and diagonal_sum2 == magic_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(n)]\n\n    # Calculate the sum of the diagonals\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    # Check if the sums are equal\n    if row_sums!= col_sums or diagonal_sum1!= diagonal_sum2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n*n + 1) // 2\n    total_sum = 0\n    for i in range(n):\n        for j in range(n):\n            total_sum += my_matrix[i][j]\n    if total_sum!= magic_sum:\n        return False\n    magic_sum = n * (n*n + 1) // 2\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= magic_sum:\n            return False\n    for j in range(n):\n        col_sum = sum(my_matrix[i][j] for i in range(n))\n        if col_sum!= magic_sum:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    A magic square is a square matrix where the sum of each row,\n    column, and diagonal is the same.\n    \"\"\"\n    n = len(my_matrix)\n    if n % 2 == 0 or n < 3:\n        return False\n    \n    # Check if the sum of the first row is equal to the sum of the last row,\n    # the sum of the first column is equal to the sum of the last column,\n    # and the sum of the main diagonal is equal to the sum of the secondary diagonal.\n    row_sums = [sum(row) for row in my_matrix]\n    column_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    diag_sum_1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum_2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    if row_sums!= column_sums or diag_sum_1!= diag_sum_2:\n        return False\n    \n    # Check if each sub-matrix (except the main one) has the same sum.\n    sub_matrix_sums = []\n    for i in range(n//2):\n        for j in range(n//2):\n            sub_matrix = [my_matrix[k][l] for k in range(i*2, i*2+2) for l in range(j*2, j*2+2)]\n            sub_matrix_sum = sum(sub_matrix)\n            sub_matrix_sums.append(sub_matrix_sum)\n            \n    if len(set(sub_matrix_sums)) > 1:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    \n    # Calculate the sum of the first column\n    col_sum = sum(my_matrix[i][0] for i in range(len(my_matrix)))\n    \n    # Calculate the sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if all the sums are equal\n    return row_sum == col_sum == diag_sum1 == diag_sum2"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        print(\"Not a square matrix.\")\n        return False\n\n    # calculate the sum of the diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # calculate the sum of the anti-diagonal elements\n    anti_diagonal_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n\n    # check if the sum of diagonal and anti-diagonal elements are equal\n    if diagonal_sum!= anti_diagonal_sum:\n        print(\"Not a magic square.\")\n        return False\n\n    # calculate the sum of the rows and columns\n    row_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    col_sums = [sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix[0]))]\n\n    # check if the sum of the rows and columns are equal\n    if row_sums!= col_sums:\n        print(\"Not a magic square.\")\n        return False\n\n    # print the matrix is a magic square\n    print(\"The matrix is a magic square.\")\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary with default value as 0\n    freq_dict = defaultdict(int)\n\n    # iterate through the list and update the frequency of each element in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the maximum frequency among all elements in the dictionary\n    max_freq = max(freq_dict.values())\n\n    # find the element with maximum frequency\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    for num, count in counts.items():\n        if count == max_count:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    \n    # Count the frequency of each element in the list\n    for num in nums:\n        freq_dict[num] += 1\n        \n    max_freq = 0\n    max_num = None\n    \n    # Find the item with maximum frequency\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = max(count.values())\n    for num, freq in count.items():\n        if freq == max_count:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)  # initialize a dictionary with default value of 0\n    \n    for num in nums:\n        freq_dict[num] += 1  # increment the frequency count for each number in the list\n        \n    max_freq = max(freq_dict.values())  # get the maximum frequency count\n    \n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item  # return the item with maximum frequency count"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n    \n    return max_item, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    return max_item, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = 0\n    max_num = None\n    for num, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = [i for i, char in enumerate(string) if char.lower() in vowels]\n    reversed_vowels = [string[i] for i in reversed(vowel_indices)]\n    non_vowel_indices = [i for i, char in enumerate(string) if char.lower() not in vowels]\n    reversed_non_vowels = [string[i] for i in reversed(non_vowel_indices)]\n    return ''.join(reversed_vowels + reversed_non_vowels)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_list = []\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    for vowel in vowel_list:\n        new_str += vowel\n    new_str = new_str[::-1]\n    for i, char in enumerate(str1):\n        if char in vowels:\n            str1 = str1[:i] + new_str[i-1] + str1[i+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    vowels_indices = []\n    \n    # Find all vowels and their indices in the string\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_list.append(str1[i])\n            vowels_indices.append(i)\n    \n    # Reverse the vowels in the string\n    for i in range(len(vowels_indices)):\n        if vowels_indices[i]!= len(str1) - 1:\n            str1 = str1[:vowels_indices[i]] + str1[vowels_indices[i] + 1]\n            str1 = str1[:vowels_indices[i] + 1] + str1[vowels_indices[i]] + str1[vowels_indices[i] + 2:]\n    \n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_found = False\n    start, end = 0, len(str1) - 1\n    while start < end:\n        if str1[start] in vowels and str1[end] in vowels:\n            str1 = str1[:start] + str1[end] + str1[start+1:end] + str1[start] + str1[end+1:]\n            start += 1\n            end -= 1\n        elif str1[start] in vowels:\n            end -= 1\n        elif str1[end] in vowels:\n            start += 1\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = []\n    for i in str1:\n        if i in vowels:\n            vowel_list.append(i)\n    vowel_list.reverse()\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            new_str += vowel_list.pop()\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = [i for i, c in enumerate(s) if c in vowels]\n    vowel_indices.reverse()\n    result = ''\n    for i in range(len(s)):\n        if i in vowel_indices:\n            result += s[i]\n        else:\n            result += s[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    start = 0\n    end = len(str1) - 1\n    while start < end:\n        if str1[start] in vowels and str1[end] in vowels:\n            str1[start], str1[end] = str1[end], str1[start]\n            start += 1\n            end -= 1\n        elif str1[start] in vowels and str1[end] not in vowels:\n            end -= 1\n        elif str1[start] not in vowels and str1[end] in vowels:\n            start += 1\n        else:\n            start += 1\n            end -= 1\n    return \"\".join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i].lower() in vowels and str1[j].lower() in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i].lower() in vowels:\n            j -= 1\n        elif str1[j].lower() in vowels:\n            i += 1\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    vowels_indices = [i for i, c in enumerate(str1_list) if c in vowels]\n    for i in range(len(vowels_indices)//2):\n        j = vowels_indices[i]\n        k = vowels_indices[-i-1]\n        str1_list[j], str1_list[k] = str1_list[k], str1_list[j]\n    return \"\".join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    vowels_indices.reverse()\n    result = \"\"\n    for i in range(len(str1)):\n        if i in vowels_indices:\n            if str1[i] == \"y\":\n                result += \"y\"\n            else:\n                result += str1[vowels_indices.index(i)]\n        else:\n            result += str1[i]\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function converts a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = str(tup1).strip('()')\n    return tup1"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as an argument and converts it into a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function will calculate the sum of all the negative numbers in a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    \n    # Loop through the list of numbers and add the negative numbers to the negative_sum variable\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n            \n    # Return the negative_sum variable\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of negative numbers in the list.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    count = 1\n    while count <= n:\n        hex_num += count\n        count += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    h = 2*n*(2*n - 1)\n    return h"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    h = n * (2 * n - 1)\n    return h"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    This function finds the nth hexagonal number.\n    \"\"\"\n    hex_num = (2*n) ** 2 + n \n    return hex_num "
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2*n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_nonzeros = 0\n\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_nonzeros += 1\n\n    if count_nonzeros == 0:\n        return \"Cannot divide by zero\"\n    else:\n        return count_zeros / count_nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    total = len(nums)\n    ratio = zeroes / total\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    ratio = zeroes / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    ratio = count / len(nums)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return None\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zeros = 0\n    count_non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    \n    return count_zeros / count_non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zeros = 0\n    count_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    if count_zeros == 0:\n        return \"All numbers are non-zero.\"\n    else:\n        return f\"Ratio of zeroes to non-zeroes: {count_zeros/count_non_zeros:.2f}\""
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    if count_zero == 0:\n        return \"Cannot divide by zero\"\n    else:\n        return count_zero / count_non_zero"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # To check whether a given number can be represented as sum of non-zero powers of 2 or not, we can iterate over all possible powers of 2 and check if it is possible to add them up to the given number.\n    # We can also optimize this approach by observing that the maximum power of 2 that can be added to a given number is log2(n).\n    # We can use this information to iterate over only up to this power, which reduces the number of iterations and makes the algorithm more efficient.\n    for i in range(int(n**0.5)+1):\n        if 2**i == n:\n            return True\n        elif 2**i > n:\n            return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a list to store the powers of 2.\n    powers_of_two = []\n    # Loop through numbers from 0 to the given number and check if it is a power of 2.\n    for i in range(n+1):\n        if 2**(i) == n:\n            # If the number is a power of 2, append it to the list of powers of 2.\n            powers_of_two.append(i)\n    # If the list of powers of 2 is not empty, return True, else return False.\n    if powers_of_two:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        while n % 2 == 0:\n            n = n // 2\n        i = 3\n        while i <= n:\n            if n % i == 0:\n                return False\n            i = i * 2\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes a number 'n' as input and returns True if it can be represented as the sum of non-zero powers of 2,\n    otherwise it returns False.\n    '''\n    # Initialize a variable'sum_of_powers' to 0\n    sum_of_powers = 0\n    \n    # Loop through all the numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is a power of 2\n        if (i & (i-1)) == 0:\n            # If it is, add i to'sum_of_powers'\n            sum_of_powers += i\n    \n    # If'sum_of_powers' is equal to n, then n can be represented as the sum of non-zero powers of 2,\n    # otherwise it can't.\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # A set of powers of two\n    powers_of_two = set()\n    power = 1\n    while power <= n:\n        powers_of_two.add(power)\n        power *= 2\n    \n    # Check if the sum of non-zero powers of 2 equals the given number\n    for i in range(1, n+1):\n        if i in powers_of_two:\n            powers_of_two.remove(i)\n        else:\n            break\n    if sum(powers_of_two) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    # Convert n to binary representation\n    binary = bin(n)[2:]\n    # Check if the binary representation starts with a 1\n    if binary[0]!= '1':\n        return False\n    # Initialize the power of 2\n    power_of_two = 1\n    # Iterate over the binary digits from right to left\n    for digit in binary[1:]:\n        if digit == '1':\n            # Check if the current power of 2 can be added to the result\n            if n - power_of_two >= power_of_two:\n                n -= power_of_two\n            else:\n                return False\n        power_of_two <<= 1\n    # If the loop finishes, the number can be represented as sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(32):\n            power_of_two = 2 ** i\n            if n == power_of_two:\n                return True\n            elif n < power_of_two:\n                return False\n            elif n > power_of_two and (n - power_of_two) % (2 * power_of_two) == 0:\n                return True\n            elif n > power_of_two and (n - power_of_two) % (2 * power_of_two)!= 0:\n                return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes an integer 'n' as input and returns True if 'n' can be represented as sum of non-zero powers of 2,\n    otherwise it returns False.\n    '''\n    # Initialize a variable 'count' to keep track of the number of 1's in the binary representation of 'n'.\n    count = 0\n    \n    # Loop through all the powers of 2 from 1 to n.\n    for i in range(1, n+1):\n        # Check if i is a power of 2.\n        if (i & (i-1)) == 0:\n            # If i is a power of 2, check if it is a non-zero power.\n            if i & n:\n                # If i is both a power of 2 and a non-zero power of 'n', increment 'count' by 1.\n                count += 1\n    \n    # Check if 'count' is equal to the number of 1's in the binary representation of 'n'.\n    if count == bin(n).count('1'):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes an integer 'n' as input and returns True if 'n' can be represented as sum of non-zero powers of 2, else False.\n    '''\n    if n <= 0:  # Base Case: If n is less than or equal to 0, it cannot be represented as sum of non-zero powers of 2.\n        return False\n    elif n == 1:  # Base Case: If n is equal to 1, it can be represented as sum of non-zero powers of 2.\n        return True\n    else:\n        for i in range(31):  # We need to check all possible powers of 2 up to 2^31.\n            power_of_two = 2 ** i\n            if power_of_two > n:\n                break\n            if n % power_of_two == 0:\n                n = n - power_of_two\n        if n == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    elif n & (n-1) == 0: # checks if n is a power of 2 (i.e. n & (n-1) == 0)\n        return is_Sum_Of_Powers_Of_Two(n >> 1) # recursively checks the sum of powers of 2 for n divided by 2\n    else:\n        return is_Sum_Of_Powers_Of_Two(n-1) or is_Sum_Of_Powers_Of_Two(n-2) # checks if n-1 and n-2 can be represented as powers of 2"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Returns the circumference of a circle with radius r.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as an argument and returns the circumference of the circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Computes the circumference of a circle with radius r.\n\n    Parameters:\n    r (float): the radius of the circle\n\n    Returns:\n    float: the circumference of the circle\n    \"\"\"\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.append(num)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            flattened_list.extend(sublist)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for element in sublist:\n            flattened.append(element)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    singly_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            singly_list.extend(extract_singly(sublist))\n        else:\n            singly_list.append(sublist)\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            for sub_item in item:\n                flat_list.append(sub_item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists as input and returns a flattened list of all numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            for j in i:\n                flattened_list.append(j)\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty list to store the flattened numbers\n    flattened_list = []\n    \n    # Loop through each element in the list\n    for element in test_list:\n        # If the element is itself a list, loop through each element in that list and append it to the flattened list\n        if isinstance(element, list):\n            for sub_element in element:\n                flattened_list.append(sub_element)\n        # If the element is not a list, simply append it to the flattened list\n        else:\n            flattened_list.append(element)\n    \n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start from the largest index and move towards the smallest index\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the maximum element is not at the end of the list, move it to the end\n        if max_index!= i:\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n            # Reverse the unsorted part of the list to make it sorted\n            nums[i+1:] = nums[-1:i:-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start with the entire list and work our way down to 1\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the list\n        max_idx = nums.index(max(nums[:i]))\n        # If max_idx is not equal to i, we need to flip it up to i\n        if max_idx!= i-1:\n            # Flip the maximum element to the beginning of the list\n            nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n            # Flip the entire list up to i\n            nums = nums[:i][::-1] + nums[i:]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index!= i-1:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Implement the pancake sort algorithm to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        # reverse the sublist from 0 to max_index\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # reverse the whole list\n        nums = nums[::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    # Find the maximum element in the list\n    max_idx = nums.index(max(nums))\n\n    # Reverse the list from 0 to max_idx\n    nums[:max_idx+1] = nums[:max_idx+1][::-1]\n\n    # Reverse the list from 0 to the second occurrence of the maximum element\n    nums[:nums[::-1].index(nums[max_idx]) + 1] = nums[:nums[::-1].index(nums[max_idx]) + 1][::-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # One pancake at a time\n    for i in range(n, 1, -1):\n        # Find index of the maximum element in the unsorted part of the list\n        max_index = i - 1\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Move the maximum element to the end of the list\n        nums[i-1], nums[max_index] = nums[max_index], nums[i-1]\n        # Reverse the elements in the unsorted part of the list\n        for j in range(i-1, 0, -1):\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    # Traverse through all array elements\n    for i in range(n):\n        # Find the maximum element in the unsorted array\n        max_idx = nums.index(max(nums[:n-i]))\n        \n        # Move the maximum element to the end of the array\n        nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n        \n        # Move the maximum element to its correct position\n        nums = nums[:n-i-1][::-1] + nums[n-i-1:]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # We will perform n iterations of the pancake sort algorithm\n    for i in range(n):\n        # We will find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:n-i]))\n        # We will reverse the elements before the maximum index\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # We will reverse the entire list\n        nums = nums[::-1]\n        # We will update the value of n to include the elements that were sorted\n        n -= max_index+1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n\n    # Find the maximum element in the list and its index\n    max_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n\n    # If the maximum element is not at the end of the list, move it to the end\n    if max_index!= len(nums) - 1:\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n\n    # Bubble up the maximum element to the end of the list\n    for i in range(len(nums) - 1, 0, -1):\n        if nums[i] > nums[i - 1]:\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n        else:\n            break\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # One round of pancake sorting goes through the list from left to right\n    for i in range(n):\n        # Find the index of the largest element in the unsorted part of the list\n        max_index = max(range(i, n), key=nums.__getitem__)\n        # If the largest element is not at the beginning, move it to the beginning\n        if max_index!= i:\n            # Reverse the unsorted part of the list from the beginning to the largest element\n            nums[i:max_index+1] = nums[i:max_index+1][::-1]\n            # Reverse the entire list from the beginning to the largest element\n            nums[i] = nums[max_index]\n    # One round of pancake sorting goes through the list from right to left\n    for i in range(n-2, -1, -1):\n        # Find the index of the largest element in the unsorted part of the list\n        max_index = max(range(i+1), key=nums.__getitem__)\n        # If the largest element is not at the end, move it to the end\n        if max_index!= i:\n            # Reverse the unsorted part of the list from the largest element to the end\n            nums[i:max_index+1] = nums[i:max_index+1][::-1]\n            # Reverse the entire list from the largest element to the end\n            nums[max_index] = nums[i]\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the number of items that are identical in the same position.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    This function will take a tuple as input and will return the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in it.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in it.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as an argument and returns the maximum absolute difference between any two elements in the array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes in a list and returns the maximum absolute difference between any two elements in the list.\n    \"\"\"\n    if len(arr) < 2:\n        return \"List should have at least two elements.\"\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    else:\n        max_diff = abs(arr[1] - arr[0])\n        for i in range(2, len(arr)):\n            diff = abs(arr[i] - arr[i-1])\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] > max_diff:\n                max_diff = arr[j] - arr[i]\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum absolute difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if x * a + y * b == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n+1):\n        if n % x == 0:\n            y = n // x\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if n % x == 0:\n            y = n // x\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    else:\n        x = n // b\n        y = n - (a * x)\n        if y % a == 0:\n            return (x, y // a)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == n:\n            return (1, 0)\n        else:\n            return None\n    elif a == 0:\n        if b == n:\n            return (0, 1)\n        else:\n            return None\n    else:\n        d = a * b\n        if n % d == 0:\n            x = n // d\n            y = 1\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a and b are both 0\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n\n    # Check if a is 0\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n\n    # Check if b is 0\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n\n    # Check if gcd(a, b) is 1\n    if abs(a) == abs(b) and n % abs(a) == 0:\n        x = n // abs(a)\n        y = (n - a * x) // b\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if n % x == 0:\n            y = n // x\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n):\n        if (a*x) % n == b:\n            return (x, n//a)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if x*a + y*b == n:\n                return (x,y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from list1 that are present in list2.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from list1 that are present in list2.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are also in list2.\n    '''\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from list1 that are present in list2.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function removes all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from list1 that are present in list2.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2 + 1):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return n * (n+1) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of the series (n - 2*i) from i=0 to n // 2.\n\n    :param n: the number of terms in the series\n    :return: the sum of the series\n    \"\"\"\n    if n % 2 == 0:\n        n -= 1  # if n is even, the last term is (n - 1), so we need to remove it from the sum\n    return sum(range(n // 2 + 1)) * 2 - (n // 2) ** 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n//2 + 1):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    return sum(range((n + 1) // 2))"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the angle at each vertex using the formula tan(theta) = opposite / adjacent\n    angle = 360 / s\n    \n    # Calculate the length of the adjacent side using the Pythagorean theorem\n    adjacent = l / tan(pi / s)\n    \n    # Calculate the area of the polygon using the formula: area = (n * s^2) / 4 * tan(pi / n)\n    area = (s * adjacent**2) / 4 * tan(pi / s)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(n, s):\n    \"\"\"\n    Calculate the area of a regular polygon given the number of sides and length of each side.\n    \"\"\"\n    return (n * s**2) / (4 * tan(pi / n))"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s * tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given its number of sides s and its length l.\n    '''\n    if s < 3:\n        return \"Not a valid polygon\"\n    else:\n        return 0.5 * s * l * tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.5 * l * s**2) / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l * s) / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.5 * s * l * tan(pi / s))\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\ndiv_sum_a = div_sum(a)\ndiv_sum_b = div_sum(b)\n\nif sum(div_sum_a) == sum(div_sum_b):\n    print(\"The sum of the divisors of\", a, \"and\", b, \"are the same.\")\nelse:\n    print(\"The sum of the divisors of\", a, \"and\", b, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            div_list.append(i)\n            if n/i!= i:\n                div_list.append(n/i)\n    div_list = list(set(div_list)) # remove duplicates\n    div_list.sort()\n    div_sum = sum(div_list)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    This function determines if the sum of the divisors of two integers are the same.\n    '''\n    div1 = []\n    div2 = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            div1.append(i)\n            if i!= n//i:\n                div2.append(n//i)\n    return sum(div1) == sum(div2)"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Get all the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n//i: \n                divisors.append(n//i) \n    divisors.sort() \n\n    # Check all possible pairs of divisors and return True if their sum is equal to n\n    for i in range(len(divisors)): \n        for j in range(i+1, len(divisors)): \n            if divisors[i] + divisors[j] == n: \n                return True \n    return False "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    This function checks if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if (n/i) == i:\n                return True\n            elif (n/i)!= i:\n                return False\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            sum_divisors.append(i)\n            if i!= n//i:\n                sum_divisors.append(n//i)\n    sum_divisors.sort()\n    if sum_divisors[-1]*sum_divisors[-2] == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and checks whether the sum of the \n    divisors of any two integers in the range [1,n] is equal to the sum of the \n    divisors of any two integers in the range [1,n].\n    '''\n    \n    # Initialize a boolean variable to keep track of the result\n    result = False\n    \n    # Iterate over all pairs of integers in the range [1,n]\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            \n            # Calculate the sum of the divisors of the two integers\n            sum_i = sum([k for k in range(1,int(math.sqrt(i))+1) if i%k == 0]) + i\n            sum_j = sum([k for k in range(1,int(math.sqrt(j))+1) if j%k == 0]) + j\n            \n            # Check if the sum of the divisors of the two integers is equal\n            if sum_i == sum_j:\n                result = True\n                break\n        if result:\n            break\n    \n    return result"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1): \n        if n%i == 0: \n            return i + n//i \n    return None"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the divisors of n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    # Check if the sum of the divisors is the same\n    for i in range(len(divisors)):\n        for j in range(i+1, len(divisors)):\n            if divisors[i] + divisors[j] == n:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            if (n / i) == i:\n                return True\n    return False"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as an input and returns the count of characters that occur at the same position as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            if i == alphabet.index(str1[i].lower()):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and counts the number of characters that occur at the same position in the string as in the English alphabet.\n    '''\n    # Convert the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    # Create a dictionary to store the count of characters at each position in the string\n    char_count = {}\n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n        # Check if the character is a letter\n        if char.isalpha():\n            # If the character is a letter, check if its position is in the dictionary\n            if i in char_count:\n                # If the position is in the dictionary, increment the count for that position by 1\n                char_count[i] += 1\n            else:\n                # If the position is not in the dictionary, add it with a count of 1\n                char_count[i] = 1\n    # Loop through the dictionary and count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for i in range(len(str1)):\n        if i in char_count and char_count[i] > 0:\n            count += 1\n    # Return the count of characters that occur at the same position as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    This function takes a string as input and returns a dictionary containing the count of characters that occur at the same position as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = {}\n    for char in str1.lower():\n        if char in alphabet:\n            count[alphabet.index(char)] = count.get(alphabet.index(char), 0) + 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1.lower():\n        if char in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import string\n\ndef count_char_position(str1):\n    count = 0\n    alphabet = string.ascii_lowercase\n    for i, char in enumerate(str1):\n        if char.lower() in alphabet:\n            if i == alphabet.index(char.lower()):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = [0] * 26\n    str1 = str1.lower() # converting string to lowercase for case-insensitive comparison\n    for char in str1:\n        if char.isalpha():\n            pos = ord(char) - ord('a')\n            count[pos] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # initialize a list to hold the counts for each letter of the alphabet\n    counts = [0] * 26\n    \n    # convert the string to lowercase\n    str1 = str1.lower()\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is a letter of the alphabet\n        if char.isalpha():\n            # get the index of the character in the English alphabet\n            index = ord(char) - ord('a')\n            # increment the count for that letter\n            counts[index] += 1\n    \n    # return the list of counts for each letter of the alphabet\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {}\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n    # Convert the string to lowercase and iterate through each character\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            # If the character is an alphabet, add it to the dictionary with its position as the key\n            if str1[i] not in count:\n                count[str1[i]] = [i+1]\n            else:\n                count[str1[i]].append(i+1)\n\n    # Count the number of characters that occur at the same position in the string as in the English alphabet\n    count_same_position = 0\n    for char in alphabet:\n        if char in count:\n            count_same_position += len(count[char])\n\n    return count_same_position"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    # convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    # create a dictionary to store the character counts at each position\n    char_counts = {}\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # check if the character is a letter and if it's at the same position as in the alphabet\n        if char.isalpha() and ord(char) == i + 97:\n            # if the character is already in the dictionary, increment its count\n            if char in char_counts:\n                char_counts[char] += 1\n            # if the character is not in the dictionary, add it and set its count to 1\n            else:\n                char_counts[char] = 1\n    # return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0 or A[i] ^ A[j] == 2:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n)) - 2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length() + 1"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 2\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** int(n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 1\n    else:\n        return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    return 2**(n-1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    # check if n is already a power of 2\n    if n and not (n & (n-1)):\n        return n\n    \n    # find the next power of 2\n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Parameters:\n    a (list): the list to search\n    x (int): the number to search for\n\n    Returns:\n    int: the number of occurrences of x in a\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    This function takes two arguments:\n    - a (list): A list of elements\n    - x (int/float/string): The element to be searched for in the list\n\n    The function returns the number of occurrences of the element x in the list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list and a number as input and returns the number of occurrences of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n\n    :param a: List of numbers\n    :param x: The number to count occurrences for\n    :return: The number of times x appears in the list a\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Return the sum of the numbers in the list within the specified range.\n\n    Args:\n    lst: a list of numbers\n    start: the index of the first number in the range (inclusive)\n    end: the index of the last number in the range (inclusive)\n\n    Returns:\n    The sum of the numbers in the list within the range [start, end], inclusive.\n    If the range is invalid (i.e., start > end), returns None.\n    \"\"\"\n    if start > end:\n        return None\n    else:\n        return sum(lst[start:end+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check that m and n are valid indices for list1\n    if m < 0 or n > len(list1) - 1:\n        raise ValueError(\"Invalid indices for list1\")\n    \n    # Compute the sum of the elements in the range [m, n]\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    \n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    This function finds the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(lst, m, n):\n    '''\n    This function takes a list as input, along with two indices (m and n) to specify the range.\n    It returns the sum of all numbers in the list within the given range.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += lst[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of numbers in a list within a range specified by two indices.\n\n    :param lst: List of numbers.\n    :param m: Start index (inclusive).\n    :param n: End index (inclusive).\n    :return: Sum of numbers in the specified range.\n    \"\"\"\n    return sum(lst[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes in the length of the sides of a pentagon and returns the perimeter of the pentagon.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of a side of a regular pentagon as input and returns its perimeter.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n\na = float(input(\"Enter the length of the first side of the pentagon: \"))\nprint(\"The perimeter of the pentagon is\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.lower().count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.lower().count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s) - 2:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    This function counts the number of times the string \"std\" appears in the given string.\n    '''\n    count = s.count(\"std\")\n    print(f\"The string'std' appears {count} times in the given string.\")"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    if'std' in s:\n        count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of times the string'std' occurs in the input string.\n    '''\n    count = 0\n    if'std' in s:\n        count = s.count('std')\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize the first data type as the type of the first element\n    data_type = type(test_tuple[0])\n    \n    # Iterate over the rest of the elements in the tuple\n    for elem in test_tuple:\n        # If the current element has a different data type than the first one, return False\n        if type(elem)!= data_type:\n            return False\n    \n    # If all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes a tuple as input and checks whether all elements have the same data type or not.\n    If all elements have the same data type, it returns True, else it returns False.\n    \"\"\"\n    # Initialize a variable to keep track of the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    \n    # Iterate through the elements of the tuple and check if all elements have the same data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type or False if not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Check if all the elements in tuple have the same data type.\n    \n    :param test_tuple: A tuple to be checked.\n    :return: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return True\n    \n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize variables\n    count = 0\n    current = arr[0]\n\n    # Traverse through the array and count the frequency of the current element\n    for i in range(n):\n        if arr[i] == current:\n            count += 1\n        else:\n            count -= 1\n            if count == 0:\n                current = arr[i]\n                count = 1\n\n    # Check if the current element occurs more than n/2 times\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. \n    (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[0] or x > arr[n-1]:\n        return False\n    \n    # Find the first and last occurrences of the element x in the array\n    first_occurrence = arr.index(x)\n    last_occurrence = arr[::-1].index(x)\n    \n    # If the number of occurrences of the element is greater than n/2, return True\n    if last_occurrence - first_occurrence + 1 > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[0] or x > arr[n-1]:\n        return False\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif arr[i] > x:\n            return False\n    \n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    # Check if the majority element occurs more than n/2 times\n    if arr[0] == x:\n        count = 1\n    else:\n        count = 0\n        \n    for i in range(1, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            count -= 1\n            \n        if count > n/2:\n            return True\n    \n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    # Find the index of the element x in the sorted array\n    i = 0\n    j = n - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    # If we reach here, x is not present in the array\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    # Initialize variables\n    count = 0\n    \n    # Traverse through the array\n    for i in range(n):\n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n    \n    # If the count is greater than n/2, return True\n    if count > n//2:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer n as input and returns the number of set bits (binary digits with value 1) in the given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1 \n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function will count the number of set bits in a given number.\n    \"\"\"\n    count = 0\n    # Loop through all the bits of the number\n    while n:\n        # Check if the rightmost bit is set or not\n        if n & 1:\n            count += 1\n        # Shift the number to the right by one bit\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    '''\n    Remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([string[i] for i in range(len(string)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as an argument and returns a new string\n    with the characters which have odd index values removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a string that removes the characters which have odd index values.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as an argument and removes the characters which have odd index values.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum value among them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes a number n, l and r as input parameters, where n is the number to be checked, l is the left end of the range and r is the right end of the range.\n    It checks whether all the bits in the range [l,r] are set or not.\n    If all the bits are set, it returns True, otherwise, it returns False.\n    '''\n    if (n >> l) & ((1 << (r - l + 1)) - 1) == (1 << (r - l + 1)) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to store the mask value\n    mask = 0\n    \n    # Generate a mask value with all the bits set to 1\n    for i in range(l, r+1):\n        mask |= (1 << i)\n    \n    # Check if the mask value is equal to n\n    if mask == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r < l:\n        return False\n    elif r == l:\n        if n & (1 << r) == 0:\n            return True\n        else:\n            return False\n    else:\n        for i in range(l, r+1):\n            if n & (1 << i)!= 0:\n                return False\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three parameters:\n    n: A number representing the bitmask.\n    l: A number representing the lower bound of the range.\n    r: A number representing the upper bound of the range.\n    \n    It checks whether all the bits in the given range are set or not.\n    Returns True if all the bits are set and False if any bit is unset.\n    '''\n    \n    # Calculate the mask for the given range\n    mask = (1 << r) - (1 << l) - 1\n    \n    # Calculate the bitwise AND operation between n and the mask\n    result = n & mask\n    \n    # If the result is equal to the mask, all the bits are set in the range\n    if result == mask:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Calculate the number of bits set in the given range\n    bits_set = (2 ** (r - l + 1) - 1) & ~((2 ** (l - 1)) - 1) & n\n\n    # Check if all the bits are set in the range\n    if bits_set == (2 ** (r - l + 1) - 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters:\n    - n: an integer (the number whose bits we want to check)\n    - l: an integer (the leftmost bit position)\n    - r: an integer (the rightmost bit position)\n    \n    It returns a boolean value:\n    - True if all the bits are set in the given range,\n    - False otherwise.\n    \"\"\"\n\n    # Create a mask to select the bits in the range [l, r]\n    mask = (1 << (r - l + 1)) - 1\n\n    # Clear the bits in the range [l, r] in n\n    n &= ~mask\n\n    # Check if all the bits are set\n    return n == 0"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits are set in the given range or not.\n\n    :param n: An integer, the integer to check\n    :param l: An integer, the left endpoint of the range\n    :param r: An integer, the right endpoint of the range\n    :return: True if all the bits are set in the range, False otherwise\n    \"\"\"\n    # Compute the bitmask for the range\n    range_mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n\n    # Compute the result as the bitwise AND of the integer and the bitmask\n    result = n & range_mask\n\n    # Check whether all the bits in the result are set to 1\n    return result == range_mask"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    if l < 0 or r > n:\n        return \"Invalid range\"\n    mask = ((1 << (r+1)) - (1 << l)) - 1\n    return ((mask << (n-r-1)) & (1 << n)-1) == 0"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    '''\n    # Calculate the left and right bits of the range\n    left_bits = l - 1\n    right_bits = n - r\n    \n    # Check if all the bits are set in the given range or not\n    if left_bits & right_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n\n    Parameters:\n    n (int): A positive integer\n    l (int): The left endpoint of the range\n    r (int): The right endpoint of the range\n\n    Returns:\n    bool: True if all the bits are set in the given range, False otherwise\n    '''\n\n    # Bitwise AND operation between all numbers in the range\n    bitwise_result = 1\n    for i in range(l,r+1):\n        bitwise_result &= i\n\n    # Check if the bitwise result is equal to the original number\n    if bitwise_result == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize two pointers, one at the beginning of the array and the other at the end\n    i = 0\n    j = n - 1\n\n    # Iterate through the array and swap negative elements with positive elements\n    while i < j:\n        if arr[i] >= 0:\n            i += 1\n        elif arr[j] < 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Separate negative and positive elements\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Sort negative and positive elements separately\n    negatives.sort()\n    positives.sort()\n    \n    # Combine the sorted elements\n    result = negatives + positives\n    \n    # Update the original array with the result\n    for i in range(n):\n        arr[i] = result[i]\n    \n    # Return the updated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n\n    # Splitting the array into negative and positive subarrays\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    # Re-arranging the negative subarray so that it appears first in the array\n    for i in range(len(negative)):\n        arr[i] = negative[i]\n\n    # Re-arranging the positive subarray so that it appears second in the array\n    for i in range(len(positive)):\n        arr[len(negative) + i] = positive[i]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearrange the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_arr = []\n    positive_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative_arr.append(arr[i])\n        else:\n            positive_arr.append(arr[i])\n    return negative_arr + positive_arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Find the indices of negative and positive elements\n    neg_indices = [i for i in range(n) if arr[i] < 0]\n    pos_indices = [i for i in range(n) if arr[i] >= 0]\n    \n    # Rearrange the negative and positive elements\n    for i in range(len(neg_indices)):\n        j = i\n        while j < len(neg_indices) and arr[neg_indices[j]] >= arr[neg_indices[i]]:\n            j += 1\n        arr[neg_indices[i]], arr[neg_indices[j-1]] = arr[neg_indices[j-1]], arr[neg_indices[i]]\n        \n    for i in range(len(pos_indices)):\n        j = i\n        while j < len(pos_indices) and arr[pos_indices[j]] < arr[pos_indices[i]]:\n            j += 1\n        arr[pos_indices[i]], arr[pos_indices[j-1]] = arr[pos_indices[j-1]], arr[pos_indices[i]]\n        \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # separate the negative and positive elements\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n\n    # combine the negative and positive elements in the required order\n    return negatives + positives"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    # Find the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    \n    # Split the array into negative and positive arrays\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    \n    # Rearrange the negative array\n    neg_arr.sort(reverse=True)\n    \n    # Rearrange the positive array\n    pos_arr.sort()\n    \n    # Combine the negative and positive arrays\n    new_arr = neg_arr + pos_arr\n    \n    # Return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    neg = []\n    pos = []\n    zero = []\n    \n    # separate the elements of the array into three lists based on their sign\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        elif arr[i] > 0:\n            pos.append(arr[i])\n        else:\n            zero.append(arr[i])\n    \n    # sort the negative and positive lists separately\n    neg.sort(reverse=True)\n    pos.sort()\n    \n    # merge the three lists back into the original array\n    i = j = 0\n    for k in range(n):\n        if i < len(neg):\n            arr[k] = neg[i]\n            i += 1\n        elif j < len(pos):\n            arr[k] = pos[j]\n            j += 1\n        else:\n            arr[k] = zero[0]\n            zero.pop(0)\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two pointers, one pointing to the first negative element and the other pointing to the first positive element\n    i, j = 0, n\n    \n    # Traverse the array and swap negative and positive elements as required\n    while j < len(arr):\n        if arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n    \n    # Print the re-arranged array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    arr[:n] = negatives + positives\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a string with a specified character.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in a string with a specified character.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in a string with a given character.\n\n    Parameters:\n    str1 (str): The string to replace blank spaces in.\n    char (str): The character to replace blank spaces with.\n\n    Returns:\n    str: The modified string with blank spaces replaced with the given character.\n    '''\n\n    # Split the string into a list of words\n    words = str1.split()\n\n    # Join the words with the given character and return the modified string\n    return char.join(words)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces all the blank spaces in the given string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces the blank spaces in a string with a specified character.\n    :param str1: the input string\n    :param char: the character to replace the blank spaces with\n    :return: the modified string\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a string with a given character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"  \",\"\")\n    str1 = str1.replace(\"   \",\"\")\n    str1 = str1.replace(\"    \",\"\")\n    str1 = str1.replace(\"     \",\"\")\n    str1 = str1.replace(\"      \",\"\")\n    str1 = str1.replace(\"       \",\"\")\n    str1 = str1.replace(\"        \",\"\")\n    str1 = str1.replace(\"         \",\"\")\n    str1 = str1.replace(\"          \",\"\")\n    str1 = str1.replace(\"           \",\"\")\n    str1 = str1.replace(\"            \",\"\")\n    str1 = str1.replace(\"             \",\"\")\n    str1 = str1.replace(\"              \",\"\")\n    str1 = str1.replace(\"               \",\"\")\n    str1 = str1.replace(\"                \",\"\")\n    str1 = str1.replace(\"                 \",\"\")\n    str1 = str1.replace(\"                  \",\"\")\n    str1 = str1.replace(\"                   \",\"\")\n    str1 = str1.replace(\"                    \",\"\")\n    str1 = str1.replace(\"                     \",\"\")\n    str1 = str1.replace(\"                      \",\"\")\n    str1 = str1.replace(\"                       \",\"\")\n    str1 = str1.replace(\"                        \",\"\")\n    str1 = str1.replace(\"                         \",\"\")\n    str1 = str1.replace(\"                          \",\"\")\n    str1 = str1.replace(\"                           \",\"\")\n    str1 = str1.replace(\"                            \",\"\")\n    str1 = str1.replace(\"                             \",\"\")\n    str1 = str1.replace(\"                              \",\"\")\n    str1 = str1.replace(\"                               \",\"\")\n    str1 = str1.replace(\"                                \",\"\")\n    str1 = str1.replace(\"                                 \",\"\")\n    str1 = str1.replace(\"                                  \",\"\")\n    str1 = str1.replace(\"                                   \",\"\")\n    str1 = str1.replace(\"                                    \",\"\")\n    str1 = str1.replace(\"                                     \",\"\")\n    str1 = str1.replace(\"                                      \",\"\")\n    str1 = str1.replace(\"                                       \",\"\")\n    str1 = str1.replace(\"                                        \",\"\")\n    str1 = str1.replace(\"                                         \",\"\")\n    str1 = str1.replace(\"                                          \",\"\")\n    str1 = str1.replace(\"                                           \",\"\")\n    str1 = str1.replace(\"                                            \",\"\")\n    str1 = str1.replace(\"                                             \",\"\")\n    str1 = str1.replace(\"                                              \",\"\")\n    str1 = str1.replace(\"                                               \",\"\")\n    str1 = str1.replace(\"                                                \",\"\")\n    str1 = str1.replace(\"                                                 \",\"\")\n    str1 = str1.replace(\"                                                  \",\"\")\n    str1 = str1.replace(\"                                                   \",\"\")\n    str1 = str1.replace(\"                                                    \",\"\")\n    str1 = str1.replace(\"                                                     \",\"\")\n    str1 = str1.replace(\"                                                      \",\"\")\n    str1 = str1.replace(\"                                                       \",\"\")\n    str1 = str1.replace(\"                                                        \",\"\")\n    str1 = str1.replace(\"                                                         \",\"\")\n    str1 = str1.replace(\"                                                          \",\"\")\n    str1 = str1.replace(\"                                                           \",\"\")\n    str1 = str1.replace(\"                                                            \",\"\")\n    str1 = str1.replace(\"                                                             \",\"\")\n    str1 = str1.replace(\"                                                              \",\"\")\n    str1 = str1.replace(\"                                                               \",\"\")\n    str1 = str1.replace(\"                                                                    \",\"\")\n    str1 = str1.replace(\"                                                                     \",\"\")\n    str1 = str1.replace(\"                                                                      \",\"\")\n    str1 = str1.replace(\"                                                                       \",\"\")\n    str1 = str1.replace(\"                                                                        \",\"\")\n    str1 = str1.replace(\"                                                                         \",\"\")\n    str1 = str1.replace(\"                                                                          \",\"\")\n    str1 = str1.replace(\"                                                                           \",\"\")\n    str1 = str1.replace(\"                                                                            \",\"\")\n    str1 = str1.replace(\"                                                                             \",\"\")\n    str1 = str1.replace(\"                                                                              \",\"\")\n    str1 = str1.replace(\"                                                                               \",\"\")\n    str1 = str1.replace(\"                                                                                \",\"\")\n    str1 = str1.replace(\"                                                                                 \",\"\")\n    str1 = str1.replace(\"                                                                                  \",\"\")\n    str1 = str1.replace(\"                                                                                   \",\"\")\n    str1 = str1.replace(\"                                                                                    \",\"\")\n    str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]  # create a heap of the first n items in the list\n    heapq.heapify(heap)  # heapify the heap\n    for item in list1[n:]:  # iterate through the remaining items in the list\n        if item > heap[0]:  # if the item is larger than the smallest item in the heap\n            heapq.heapreplace(heap, item)  # remove the smallest item and add the item to the heap\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list lst.\n    \"\"\"\n    heap = lst[:n]  # create a heap with the first n items in lst\n    heapq.heapify(heap)  # convert the heap into a heap\n\n    for item in lst[n:]:  # iterate through the remaining items in lst\n        if item > heap[0]:  # if the item is larger than the smallest item in the heap\n            heapq.heappushpop(heap, item)  # replace the smallest item in the heap with the item\n    \n    return heap[::-1]  # return the n largest items in descending order"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef largest_n_numbers(nums, n):\n    largest_nums = []\n    heap = []\n\n    for num in nums:\n        if len(largest_nums) < n:\n            heapq.heappush(heap, num)\n            largest_nums.append(num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n                largest_nums[largest_nums.index(heap[0])] = num\n    \n    return largest_nums"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    \"\"\"\n    Returns a list of the n largest numbers from the input list.\n    \"\"\"\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, -num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-heapq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use heapq to create a max heap from the list\n    heap = list1[:n]\n    heapq.heapify(heap)\n\n    # Iterate over the remaining elements in the list\n    for i in range(n, len(list1)):\n        # If the current element is larger than the smallest item in the heap,\n        # remove the smallest item and add the current element to the heap.\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n\n    # Return the heap as a list\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n    \"\"\"\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for i in lst[n:]:\n        if i > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap\n"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns its lateral surface area.\n    '''\n    lateralsurface = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Parameters: r (float): radius of the cylinder\n                h (float): height of the cylinder\n    Returns:    lateralsurface (float): lateral surface area of the cylinder\n    '''\n    lateralsurface = 2 * 3.141592653589793 * r * h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    lateralsurface = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*math.pi*r*h + 2*math.pi*r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface_area = 2 * math.pi * r * (r + h)\n    return lateralsurface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Input: r - radius of cylinder\n           h - height of cylinder\n    Output: lateral surface area of cylinder\n    '''\n    lateral_surface_area = 2 * 3.14159 * r * h\n    return lateral_surface_area\n"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns the volume of the cube.\n    '''\n    volume = l ** 3 # volume of a cube = side length cubed\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    volume = l ** 3   # Formula for volume of a cube\n    return volume   # Returns the volume of the cube\n    \n"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    mask = 0xAAAAAAAA # 0b10101010... binary pattern of even bits\n    return (n & ~mask) | ((n & mask) << 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \n    Args:\n        n (int): A number whose even bits need to be set.\n    \n    Returns:\n        int: A number with all even bits set.\n    \"\"\"\n    # create a mask to select even bits\n    mask = 0xAAAAAAAA # 10101010101010101010101010101010 in binary\n    \n    # apply the mask to n to set all even bits\n    result = n & mask\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes an integer as input and sets all even bits of the integer.\n    '''\n\n    # Define a mask to set all even bits to 1\n    mask = 0xAAAAAAAA # Using a binary representation of the mask\n\n    # Apply the mask to the input number to set all even bits to 1\n    result = n & mask\n\n    # Return the modified number\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes an integer as input and returns the number with all even bits set.\n    '''\n    even_bit_set_num = 0\n    for i in range(32):\n        if n & (1 << i):\n            even_bit_set_num |= (1 << i)\n    return even_bit_set_num"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function sets all even bits of a given number.\n    \"\"\"\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number to 1.\n    \"\"\"\n    # Iterate through all even bits of the number\n    for i in range(0, 32, 2):\n        # Set the i-th bit of the number to 1\n        n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and returns the same number with all the even bits set.\n    '''\n    # Convert the number to binary and get the binary representation of the number\n    binary_num = bin(n)[2:]\n\n    # Iterate through each character in the binary representation\n    for i, bit in enumerate(binary_num):\n        # Check if the current bit is even\n        if int(bit) % 2 == 0:\n            # Set the current bit to 1\n            binary_num = binary_num[:i] + '1' + binary_num[i+1:]\n\n    # Convert the binary representation back to decimal and return it\n    return int(binary_num, 2)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # check if n is a positive integer\n    if type(n)!= int or n < 0:\n        return None\n    \n    # set all even bits to 1\n    n = n | 0x55555555\n    \n    # set all odd bits to 0\n    n = n & 0xAAAAAAAA\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes an integer as input and returns a number with all even bits set to 1.\n    \"\"\"\n    mask = 0b11111111 # binary mask with all bits set to 1\n    even_mask = 0b01010101 # binary mask with all even bits set to 1\n    n = (n & mask) | (n & even_mask)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns a number with all even bits set to 1.\n    \"\"\"\n    # Get the binary representation of the input number\n    binary_rep = bin(n)[2:]\n\n    # Create a new binary string with all even bits set to 1\n    new_binary_rep = \"\"\n    for bit in binary_rep:\n        if int(bit) % 2 == 0:\n            new_binary_rep += \"1\"\n        else:\n            new_binary_rep += \"0\"\n\n    # Convert the new binary string back to an integer and return it\n    return int(new_binary_rep, 2)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = Counter(test_list)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object from the list of tuples\n    counter = Counter(test_list)\n    # create a dictionary with key-value pairs of each tuple and its count\n    result_dict = {}\n    for item, count in counter.items():\n        result_dict[item] = count\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if len(s[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if len(str[i:j]) > 0: \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function takes a string as input and returns the count of non-empty substrings of the string.\n    \"\"\"\n    count = 0  # initialize a variable to keep track of the number of substrings\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            sub_str = str[i:j]  # slice the string from index i to j\n            if len(sub_str) > 0:  # check if the sub-string is not empty\n                count += 1  # increment the count if it is not empty\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function takes a string as an input and returns the number of non-empty substrings of that string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    \n    # Iterate over the values of the first element of the sequence\n    for i in range(m//2 + 1):\n        \n        # Compute the minimum and maximum value of the second element of the sequence\n        j_min = i + 1\n        j_max = min(m//2, n - 1)\n        \n        # Compute the total number of possible second elements of the sequence\n        num_j = j_max - j_min + 1\n        \n        # Compute the total number of possible sequences of length n with the first element i and the remaining n-1 elements\n        total_sequences += num_j ** (n - 1)\n        \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    prev_seq = get_total_number_of_sequences(m, n-1)\n    new_seq = 0\n    for i in range(1, m//2+1):\n        new_seq += prev_seq*prev_seq\n    if m % 2 == 0:\n        new_seq += prev_seq*(prev_seq+1)\n    else:\n        new_seq += prev_seq*(prev_seq+1)//2\n    return new_seq"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m - 1\n    \n    total_sequences = 0\n    \n    for i in range(2, m):\n        total_sequences += get_total_number_of_sequences(i, n - 1)\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n, such that each element is a positive integer\n    and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables to keep track of the current and previous numbers\n    curr_num = 1\n    prev_num = 0\n    \n    # Initialize a variable to keep track of the total number of sequences\n    total = 0\n    \n    # Iterate through each position in the sequence\n    for i in range(n):\n        # Compute the lower bound for the next number\n        lower_bound = curr_num * 2\n        \n        # Update the current number to be the midpoint between the lower and upper bounds\n        curr_num = (lower_bound + m - 1) // 2\n        \n        # Increment the total number of sequences\n        total += m - lower_bound + 1\n    \n    # Return the total number of sequences\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        count = 0\n        prev = 1\n        for i in range(2, m+1):\n            if i >= 2*prev and i <= m:\n                count += get_total_number_of_sequences(m, n-1)\n            prev = i\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(m//2, m):\n            count += get_total_number_of_sequences(i, n-1)\n        return count\n\nprint(get_total_number_of_sequences(10, 3))"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if m < n or m < 2:\n        return 0\n\n    a = m // 2\n\n    # initialize the sequence with the first element\n    seq = [a]\n\n    # loop through the remaining elements and generate all possible sequences\n    for i in range(1, n):\n        new_seq = []\n        for j in range(1, len(seq) + 1):\n            # check if the current element satisfies the condition\n            if 2 * seq[j - 1] <= m:\n                new_seq.append(seq[j - 1] * 2)\n                for k in range(j, len(seq)):\n                    new_seq.append(seq[k])\n                break\n        seq = new_seq\n\n    return len(seq)"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater\n    than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    \n    # initialize variables to keep track of the count of sequences\n    count = 0\n    prev = 2\n    \n    # iterate through all possible values of the first element\n    for i in range(2, m):\n        # calculate the maximum value for the second element\n        max_val = min(prev + i, m)\n        \n        # calculate the number of possible sequences with the first element\n        num_seqs = (max_val - prev) // i\n        \n        # update the count of sequences and the previous element\n        count += num_seqs\n        prev = max_val\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    count = 0\n    prev = 0\n    \n    # Loop through each number in range n\n    for i in range(n):\n        # Calculate the maximum number in the sequence\n        max_num = m - (prev * 2)\n        \n        # Increment the count by the number of possible sequences of length n with each element greater than or equal to twice the previous element but less than or equal to max_num\n        count += (max_num - prev) // 2\n        \n        # Update the previous number\n        prev = max_num\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(1, m+1):\n            count += get_total_number_of_sequences(m, n-1)\n        return count"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an argument and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Counts the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    return int(math.ceil(root + 1)**2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N))**2 == N: # if given number is a perfect square, return the square root of the number + 1\n        return int(math.sqrt(N)) + 1\n    else: # if given number is not a perfect square, return the square root of the number + 1 (rounded up)\n        return int(math.ceil(math.sqrt(N)))**2\n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root): # check if the square root is an integer\n        return N + 1 # return the next perfect square\n    else:\n        return int(math.ceil(root))**2 # round up the square root to the nearest integer and return the next perfect square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    \n    # Increment the square root by 1 and return its square\n    return (sqrt_N+1)**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # check if the given number is a perfect square\n    if math.sqrt(N).is_integer():\n        # return the square of the given number plus 1\n        return N + 1\n    else:\n        # find the square root of the given number\n        sqrt_N = math.sqrt(N)\n        # find the next integer after the square root\n        next_int = math.ceil(sqrt_N)\n        # return the square of the next integer\n        return next_int ** 2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.floor(math.sqrt(N))\n    next_square = root + 1\n    while True:\n        perfect_square = next_square * next_square\n        if perfect_square > N:\n            return perfect_square\n        next_square += 1"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return int(root) + 1\n    else:\n        return int(math.ceil(root))**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculate the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # Round up to the nearest integer\n    sqrt_N = math.ceil(sqrt_N)\n    \n    # Return the square of the rounded-up square root\n    return sqrt_N**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find the square root of the given number\n    sqrt_N = math.sqrt(N)\n    \n    # round up to the nearest integer\n    sqrt_N = math.ceil(sqrt_N)\n    \n    # add 1 to the square root to get the next perfect square\n    next_square = sqrt_N**2 + 1\n    \n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    return (root+1)**2\n    \nprint(next_Perfect_Square(12)) # Output: 16\nprint(next_Perfect_Square(25)) # Output: 36\nprint(next_Perfect_Square(16)) # Output: 25"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables to keep track of the max sum and the current sum of increasing and decreasing subsequences\n    max_sum = float('-inf')\n    increasing_sum = 0\n    decreasing_sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n\n        # If the current element is greater than the previous element, add it to the increasing sum and subtract the previous element from the decreasing sum\n        if i > 0 and arr[i] > arr[i-1]:\n            increasing_sum += arr[i]\n            decreasing_sum -= arr[i-1]\n\n        # If the current element is smaller than the previous element, add it to the decreasing sum and subtract the previous element from the increasing sum\n        elif i > 0 and arr[i] < arr[i-1]:\n            decreasing_sum += arr[i]\n            increasing_sum -= arr[i-1]\n\n        # If the current element is the first element or the previous element is smaller than the current element, add it to the increasing sum\n        elif i == 0 or arr[i-1] < arr[i]:\n            increasing_sum += arr[i]\n\n        # If the current element is the first element or the previous element is greater than the current element, add it to the decreasing sum\n        else:\n            decreasing_sum += arr[i]\n\n        # Update the max sum if the current sum is greater than the max sum\n        if increasing_sum + decreasing_sum > max_sum:\n            max_sum = increasing_sum + decreasing_sum\n\n    # Return the max sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = max(dp[i][k] + dp[k+1][j] for k in range(i, j))\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence for the given array.\n    A bitonic sequence is a sequence that is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables for storing the maximum sum and the current sum of increasing subsequence\n    max_sum = 0\n    curr_sum = 0\n    \n    # Traverse the array from left to right\n    for i in range(n):\n        # If the current element is greater than the next element, update the current sum\n        if i < n-1 and arr[i] < arr[i+1]:\n            curr_sum += arr[i]\n        # If the current element is smaller than the next element, update the maximum sum and reset the current sum\n        elif i < n-1 and arr[i] > arr[i+1]:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = 0\n    \n    # Update the maximum sum with the last increasing subsequence\n    max_sum = max(max_sum, curr_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    # Compute maximum sum using Kadane's algorithm\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        # Initialize variables\n        dp_inc = [0] * n\n        dp_dec = [0] * n\n        \n        # Fill in dp arrays\n        dp_inc[0] = arr[0]\n        dp_dec[0] = arr[0]\n        \n        for i in range(1, n):\n            dp_inc[i] = max(dp_inc[i-1], arr[i] + dp_dec[i-1])\n            dp_dec[i] = max(dp_dec[i-1], arr[i] + dp_inc[i-1])\n            \n        return max(dp_inc[n-1], dp_dec[n-1])"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # Create a list to store the maximum sum of increasing subsequence for each prefix\n        inc_sums = [0] * n\n        inc_sums[0] = arr[0]\n        inc_sums[1] = max(arr[0], arr[1])\n        for i in range(2, n):\n            inc_sums[i] = max(inc_sums[i-1], arr[i] + inc_sums[i-2])\n        \n        # Create a list to store the maximum sum of decreasing subsequence for each suffix\n        dec_sums = [0] * n\n        dec_sums[n-1] = arr[n-1]\n        dec_sums[n-2] = max(arr[n-1], arr[n-2])\n        for i in range(n-3, -1, -1):\n            dec_sums[i] = max(dec_sums[i+1], arr[i] + dec_sums[i+2])\n        \n        # Calculate the maximum sum of a bitonic subsequence for each index i\n        max_sums = [0] * n\n        for i in range(n):\n            if i == 0:\n                max_sums[i] = max(inc_sums[i], dec_sums[i+1])\n            elif i == n-1:\n                max_sums[i] = max(inc_sums[i-1], dec_sums[i])\n            else:\n                max_sums[i] = max(max(inc_sums[i-1], dec_sums[i]), arr[i] + max(inc_sums[i], dec_sums[i+1]))\n        \n        return max(max_sums)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence for the given array.\n    A sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n\n    # Find the first increasing subsequence\n    max_sum = 0\n    tails = [0] * n\n    for i in range(n):\n        tails[i] = max(tails[i-1] + arr[i], 0)\n        if tails[i] > max_sum:\n            max_sum = tails[i]\n\n    # Find the first decreasing subsequence\n    max_sum = 0\n    heads = [0] * n\n    for i in range(n-1, -1, -1):\n        heads[i] = max(heads[i+1] + arr[i], 0)\n        if heads[i] > max_sum:\n            max_sum = heads[i]\n\n    # Return the maximum of the two sums\n    return max(max_sum, sum(arr))"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0]*n\n    \n    # Finding maximum sum for increasing subsequence of length 1\n    max_inc = arr[0]\n    for i in range(1, n):\n        max_inc = max(max_inc, arr[i])\n        dp[i] = max_inc\n    \n    # Finding maximum sum for decreasing subsequence of length 1\n    max_dec = arr[n-1]\n    for i in range(n-2, -1, -1):\n        max_dec = max(max_dec, arr[i])\n        dp[i] += max_dec\n    \n    # Finding maximum sum for bitonic subsequence of length greater than 1\n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i + len - 1\n            dp[i] = max(dp[i], dp[j])\n            for k in range(i+1, j):\n                if arr[k] > arr[k+1] and arr[k] > arr[k-1]:\n                    dp[i] += arr[k]\n    \n    return dp[0]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    for i in range(n):\n        dp[0][i] = arr[i]\n        dp[1][i] = arr[i]\n    for j in range(1, n):\n        for i in range(j):\n            if arr[i] < arr[j]:\n                dp[0][j] = max(dp[0][j], dp[1][i] + arr[j])\n            else:\n                dp[1][j] = max(dp[1][j], dp[0][i] + arr[j])\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize variables\n    max_sum = 0\n    inc_sum = [0] * n\n    dec_sum = [0] * n\n    prev_inc = [0] * n\n    prev_dec = [0] * n\n\n    # Base case\n    if n == 1:\n        return arr[0]\n    \n    # Initialize variables for first element\n    inc_sum[0] = arr[0]\n    dec_sum[0] = 0\n    prev_inc[0] = 0\n    prev_dec[0] = 0\n\n    # Iterate through the array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # Update max_sum\n            max_sum = max(max_sum, inc_sum[i-1])\n            \n            # Update inc_sum\n            inc_sum[i] = arr[i] + prev_inc[i-1]\n            prev_inc[i] = inc_sum[i-1]\n            \n            # Update dec_sum\n            dec_sum[i] = 0\n            prev_dec[i] = 0\n        else:\n            # Update max_sum\n            max_sum = max(max_sum, dec_sum[i-1])\n            \n            # Update dec_sum\n            dec_sum[i] = arr[i] + prev_dec[i-1]\n            prev_dec[i] = dec_sum[i-1]\n            \n            # Update inc_sum\n            inc_sum[i] = 0\n            prev_inc[i] = 0\n            \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n        number (float): The number to find the square root of.\n\n    Returns:\n        float: The square root of the input number.\n    \"\"\"\n    guess = number / 2\n    while abs(guess*guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # first guess\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2  # update guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2.0\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number / guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) >= 0.001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while abs(guess**2 - number) > 0.000001:\n        guess = (guess + number/guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes the square root of a given number using the Babylonian method.\n    \"\"\"\n    if number == 0:\n        return 0\n    else:\n        guess = number/2\n        while abs(guess*guess - number) > 0.00001:\n            guess = (guess + number/guess)/2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    for i in range(10):\n        x = (x + (number/x)) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    epsilon = 0.0001\n    while abs(guess**2 - number) >= epsilon:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n\n    Parameters:\n    number (float): The number whose square root is to be computed.\n\n    Returns:\n    float: The square root of the input number.\n    '''\n    guess = number\n    while True:\n        new_guess = 0.5 * (guess + number / guess)\n        if abs(new_guess - guess) < 0.0001:\n            break\n        guess = new_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2\n    epsilon = 0.000001\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-2,-1,-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    for k in range(2,n):\n        for i in range(n-k):\n            j = i+k\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D table to store the lengths of longest palindromic subsequence of substrings\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for L in range(2, n + 1):\n        for i in range(n - L + 1):\n            j = i + L - 1\n            if str[i] == str[j] and L == 2:\n                # All characters are same, then length is 2\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                # If the first and last characters are the same, then length is 2 + value of the previous substring\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                # If the first and last characters are not the same, then length is the maximum of the two previous substrings\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store results of subproblems\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1.\n    # The loop structure is same as standard LPS problem.\n    for L in range(2, n + 1):\n        for i in range(n - L + 1):\n            j = i + L - 1\n            if str[i] == str[j] and L == 2:\n                # If the first and last characters are same,\n                # then only subsequence of length 2 is possible.\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                # If the first and last characters are same,\n                # then include this character in subsequence.\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                # If the first and last characters are not same,\n                # then take the maximum of two values\n                # (i.e., without including the character and\n                # including the character).\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        dp[i][i] = 1\n  \n    # check for sub-string of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 2\n        else: \n            dp[i][i+1] = 1\n  \n    # Check for sub-string of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) \n  \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(s):\n    n = len(s)\n    # Initialize dp table with zeros\n    dp = [[0 for x in range(n)] for y in range(n)]\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n    # Check for substrings of length greater than 1\n    for k in range(2, n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if s[i] == s[j] and k == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str): \n    n = len(str) \n\n    # Create a table to store lengths of different subsequences \n    dp = [[0 for x in range(n)] for y in range(n)] \n\n    # All subsequences of length 1 are palindromes \n    for i in range(n): \n        dp[i][i] = 1\n\n    maxLength = 1 # All single characters are palindromes \n\n    # Check for subsequences of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 2\n            maxLength = 2\n\n    # Check for subsequences of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1 \n            if str[i] == str[j] and k == 2: \n                dp[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2 \n                maxLength = max(maxLength, dp[i][j])\n\n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i + L - 1\n            if str[i] == str[j] and L == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1.0 / i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array containing the common elements present in both arrays.\n    \"\"\"\n    # Create a set from the first array to easily find common elements\n    set1 = set(array_nums1)\n    # Create a new list to store the common elements\n    common_elements = []\n    # Loop through the second array and check if each element is in the set of the first array\n    for element in array_nums2:\n        if element in set1:\n            common_elements.append(element)\n    # Return the new array of common elements\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays of integers.\n\n    Parameters:\n    array_nums1 (list): first array of integers\n    array_nums2 (list): second array of integers\n\n    Returns:\n    list: a list of the common elements in both arrays\n    \"\"\"\n\n    # Convert the input arrays to sets to get faster lookups\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert arrays to sets to use the intersection method\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # Find the intersection between the two sets\n    intersection = set1.intersection(set2)\n    # Convert the set back to an array and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Find the intersection of two arrays of integers.\n    '''\n    # Create sets from the two arrays\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # Convert the intersection set back to a sorted list\n    result = sorted(list(intersection))\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # create an empty list to store the intersection of the two arrays\n    intersection_list = []\n\n    # iterate over the first array\n    for num in array_nums1:\n        # check if the number is present in the second array\n        if num in array_nums2:\n            # add the number to the intersection list if it is present in both arrays\n            intersection_list.append(num)\n\n    # return the intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Counts the number of times `x` appears in the tuple `tup`.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the number of times the element appears in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts `elem` before each element in the list `lst`.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result[1:]  # Remove the first element (which is `elem`) from the result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts an element before each element of a list.\n\n    Args:\n    - lst: list of elements\n    - elem: element to insert\n\n    Returns:\n    - new_lst: list with inserted element before each element of lst\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(elem)\n        new_lst.append(item)\n    return new_lst[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in the list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    return [elem] + [x for x in lst]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    result.pop(0)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(f\"Polar form of {num} is {cmath.polar(num)}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar_coords = cmath.polar(num)\n        polar_coordinates.append((polar_coords[0], polar_coords[1]))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes in a list of complex numbers as input and converts it to its polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    # Convert input numbers to complex numbers\n    complex_nums = [complex(num) for num in numbers]\n\n    # Convert complex numbers to polar coordinates\n    polar_coords = [cmath.polar(num) for num in complex_nums]\n\n    # Extract magnitude and angle from polar coordinates\n    magnitudes = [round(coord[0], 2) for coord in polar_coords]\n    angles = [round(coord[1], 2) for coord in polar_coords]\n\n    # Combine magnitudes and angles into a list of tuples\n    results = list(zip(magnitudes, angles))\n\n    # Print results\n    print(results)"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append([polar[0], polar[1]])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        print(f\"Polar coordinates of {num}: r = {r}, phi = {phi}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r, theta = cmath.polar(num)\n        print(f\"{num} = {r} (cos({theta}) + sin({theta})i)\")\n"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        print(\"Polar coordinates of {} are: {}+{}j\".format(num, round(cmath.polar(num)[0], 2), round(cmath.polar(num)[1], 2)))"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"Polar coordinates of {} are: {} and {}\".format(num, polar[0], polar[1]))"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        polar.append(cmath.polar(num))\n    return polar"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function counts the number of integer elements in the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function counts the number of integer elements in a given list.\n\n    Parameters:\n    list1 (list): A list of elements.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combo for combo in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = combinations_with_replacement(l, n)\n    return [(comb,) for comb in combs]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(i,) for i in l] + [tuple(i) for i in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(x) for x in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    \n    for i in range(2, n):\n        is_prime = True\n        \n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if all(num%i!=0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than the given non-negative number n\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Main function to count the number of prime numbers less than a given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n\n    :param a: First number to be swapped.\n    :param b: Second number to be swapped.\n    :return: A tuple containing the swapped numbers.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_sum = sum(test_tup1) + sum(test_tup2)\n\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            curr_sum = sum(test_tup1[:i]) + sum(test_tup2[:j])\n            if curr_sum > max_sum:\n                max_tup = (test_tup1[:i] + test_tup2[:j], test_tup1[i:], test_tup2[j:])\n                max_sum = curr_sum\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tuple += (test_tup1[i],)\n        else:\n            max_tuple += (test_tup2[i],)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize the maximum value to the first element of the first tuple\n    max_value = test_tup1[0]\n    \n    # Check if the second tuple has at least one element\n    if len(test_tup2) > 0:\n        # If so, compare the first element of the first tuple with the first element of the second tuple\n        if max_value < test_tup2[0]:\n            # If the first element of the first tuple is smaller, update the maximum value\n            max_value = test_tup2[0]\n    \n    # Check if the second tuple has at least two elements\n    if len(test_tup2) > 1:\n        # If so, compare the second element of the first tuple with the first element of the second tuple\n        if max_value < test_tup2[1]:\n            # If the second element of the first tuple is smaller, update the maximum value\n            max_value = test_tup2[1]\n    \n    # Check if the second tuple has at least three elements\n    if len(test_tup2) > 2:\n        # If so, compare the third element of the first tuple with the first element of the second tuple\n        if max_value < test_tup2[2]:\n            # If the third element of the first tuple is smaller, update the maximum value\n            max_value = test_tup2[2]\n    \n    # Check if the second tuple has at least four elements\n    if len(test_tup2) > 3:\n        # If so, compare the fourth element of the first tuple with the first element of the second tuple\n        if max_value < test_tup2[3]:\n            # If the fourth element of the first tuple is smaller, update the maximum value\n            max_value = test_tup2[3]\n    \n    # Check if the second tuple has at least five elements\n    if len(test_tup2) > 4:\n        # If so, compare the fifth element of the first tuple with the first element of the second tuple\n        if max_value < test_tup2[4]:\n            # If the fifth element of the first tuple is smaller, update the maximum value\n            max_value = test_tup2[4]\n    \n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert tuples to lists so we can modify them\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Loop through each element in the tuples and compare them\n    for i in range(len(list1)):\n        if list1[i] < list2[i]:\n            # If the element in list1 is less than the element in list2,\n            # swap them so that the maximum is in list1\n            list1[i], list2[i] = list2[i], list1[i]\n\n    # Return the tuple with the maximum values\n    return tuple(list1)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple that maximizes the sum of all the elements in both tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup2)):\n            temp_tup += (test_tup1[i]+test_tup2[j],)\n        if temp_tup == ():\n            continue\n        elif max_tup == () or sum(temp_tup) > sum(max_tup):\n            max_tup = temp_tup\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the tuple with the maximum elements.\n    \"\"\"\n    if len(test_tup1) >= len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize the maximum values to the first element of each tuple\n    max_val1 = test_tup1[0]\n    max_val2 = test_tup2[0]\n    \n    # Iterate through the tuples and compare each element to the maximum values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_val1:\n            max_val1 = test_tup1[i]\n            \n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_val2:\n            max_val2 = test_tup2[i]\n    \n    # Return the maximum values as a tuple\n    return (max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and returns a tuple containing the two elements that are maximized between the two tuples.\n    \"\"\"\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple = test_tup1[i], test_tup2[i]\n            break\n        elif test_tup2[i] > test_tup1[i]:\n            max_tuple = test_tup2[i], test_tup1[i]\n            break\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    max_sum = -float('inf')\n\n    for tup in (test_tup1, test_tup2):\n        sum_tup = sum(tup)\n        if sum_tup > max_sum:\n            max_tup = tup\n            max_sum = sum_tup\n\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    i = 0\n    count = 0\n    while count < n:\n        i += 1\n        if is_prime(i):\n            if is_prime(int((i - 1) * i / 2 + 1)):\n                count += 1\n                if count == n:\n                    return i"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    This function finds the nth newman-shanks-williams prime number.\n    '''\n    count = 0\n    i = 2\n    while count < n:\n        j = 2\n        is_prime = True\n        while j <= int(i**0.5):\n            if i % j == 0:\n                is_prime = False\n                break\n            j += 1\n        if is_prime:\n            count += 1\n        if count == n:\n            return i\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 1:\n        return \"n must be a positive integer\"\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    else:\n        primes = [2, 3, 5, 7]\n        count = 4\n        while count < n:\n            next_prime = primes[-1] + 2\n            is_prime = True\n            for prime in primes:\n                if next_prime % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(next_prime)\n                count += 1\n        return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 0:\n        return None\n    \n    if n == 1:\n        return 2\n    \n    if n == 2:\n        return 3\n    \n    primes = [2, 3]\n    i = 3\n    \n    while len(primes) < n:\n        i += 2\n        is_prime = True\n        for j in range(len(primes)):\n            if primes[j] > int(i**0.5) + 1:\n                break\n            if i % primes[j] == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    \n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i-1) and is_prime(i+1):\n            count += 1\n        i += 1\n    return i-1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    elif n == 1:\n        return 2\n    \n    else:\n        i = 1\n        count = 0\n        while count < n:\n            j = 1\n            prime = True\n            while j*j <= i:\n                if i % j == 0:\n                    prime = False\n                    break\n                j += 1\n            if prime:\n                count += 1\n                if count == n:\n                    return i\n            i += 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        m = 2\n        p = 3\n        while n > 3:\n            m = 6*m - 1\n            p = m*m - 2\n            n -= 1\n        return p"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return \"Invalid input, please enter a positive integer.\"\n    elif n == 1:\n        return 2\n    else:\n        prev_prime = 2\n        curr_prime = 3\n        for i in range(n-1):\n            next_prime = 4*curr_prime - prev_prime\n            prev_prime = curr_prime\n            curr_prime = next_prime\n        return curr_prime"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i) and is_prime(i - 2):\n            count += 1\n        i += 1\n    return i - 2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 3\n    while count < n:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 2  # only odd numbers are candidates"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i]/test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # create an empty tuple to store the results\n    results_tup = ()\n    \n    # iterate over the tuples using a for loop\n    for i in range(len(test_tup1)):\n        # perform element-wise division using the / operator\n        results_tup += (test_tup1[i] / test_tup2[i],)\n        \n    return results_tup"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        raise ValueError(\"L should be less than or equal to the length of the list\")\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes a list and an integer L as input and splits the given list into two parts.\n    The first part of the list has a length of L and is returned as the first element of the tuple,\n    while the second part of the list is the remaining part of the list and is returned as the second element of the tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L is greater than the length of the given list\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Split the list into two parts, where the length of the first part is L.\n    \"\"\"\n    if L > len(list1):\n        return None  # Cannot split list into two parts with length L\n\n    # Split the list into two parts using slicing\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"L cannot be greater than the length of the input list\")\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list(list1)\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    This function takes the age of a human in years and returns the age of a dog in dog's years.\n    '''\n    dog_age_in_dog_years = round(h_age * 7)\n    return dog_age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round(h_age * 7 / 12, 1)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age / 7"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age // 7\n    months = (h_age % 7) * 12\n    return f\"{years} years and {months} months\"\n\nprint(dog_age(365)) # Output: 1 year and 0 months\nprint(dog_age(1095)) # Output: 2 years and 11 months"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round(h_age / 7)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list into sublists for every nth element, where n is the step value.\n    \"\"\"\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Loop through the list using the step parameter as the increment\n    for i in range(0, len(S), step):\n        # Append a slice of the list to the result list\n        result.append(S[i:i+step])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list S for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list into sublists of size n.\n\n    :param S: A list of elements to split.\n    :param step: The number of elements in each sublist.\n    :return: A list of sublists.\n    \"\"\"\n    n = len(S)\n    return [S[i:i+step] for i in range(0, n, step)]"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a cube's side length as input and returns its lateral surface area.\n    '''\n    return 6*(l**2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6*(l**2)\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 4 * (l ** 2)\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * (l**2)\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n*2, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n    \n    # Return the sum of the squares\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through the first n odd numbers and add their squares to the sum\n    for i in range(1, n*2, 2):\n        sum += i**2\n        \n    # Return the sum of squares\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_of_squares = 0\n    # Loop over the first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # Add the square of each odd number to the sum\n        sum_of_squares += i**2\n    # Return the final sum\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n*2, 2):\n        result += i**2\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the counter to 1\n    count = 1\n    # Initialize the result to 0\n    result = 0\n    # Loop while the counter is less than or equal to n\n    while count <= n:\n        # Multiply the result by the counter\n        result *= count\n        # Increment the counter\n        count += 1\n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    star = 1\n    count = 1\n    while count < n:\n        star += 2\n        count += 1\n    return star"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    num = 1\n    for i in range(2, n+1):\n        num = num * i\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        print('*' * num)\n        num += 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * find_star_num(n//2)\n    else:\n        return 2 * find_star_num(n//2) + 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    star_num = 1\n    while count <= n:\n        print(star_num)\n        star_num += 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    i = 1\n    \n    while count < n:\n        print('*'*i)\n        count += 1\n        i += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Start with the first star number (1**2)\n    num = 1\n    \n    # Iterate until we reach then'th star number\n    for i in range(n):\n        # Multiply the current number by 2 to get the next one\n        num *= 2\n    \n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count <= n:\n        num += 1\n        if num % 2 == 0:\n            continue\n        if num % 3 == 0:\n            continue\n        if num % 5 == 0:\n            continue\n        if num % 7 == 0:\n            continue\n        count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 21\n    elif n == 4:\n        return 85\n    else:\n        return (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * n))))))))))))))))))))))\n"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ascii value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as an input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            result += arr[i]\n    return result"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Returns the sum of even numbers at even positions of a list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    while count < n:\n        num = 2*count + 1\n        power = num**5\n        sum += power\n        count += 1\n        \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        even_num = 2 * count + 2\n        sum += even_num ** 5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        num = 2 * count + 2\n        sum += num ** 5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    result = 0\n    count = 0\n    num = 0\n    while count < n:\n        num += 2\n        result += num ** 5\n        count += 1\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    power = 5\n    sum = 0\n    count = 0\n    while count < n:\n        number = 2 * count + 2  # Generate the next even number\n        power_number = number ** power  # Raise the even number to the fifth power\n        sum += power_number  # Add the power of the even number to the running sum\n        count += 1  # Increment the count\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    count = 0\n\n    while count < n:\n        num = 2*count + 2\n        sum += num**5\n        count += 1\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    i = 0\n    \n    while i < n:\n        even_sum += (i*2 + 2)**5\n        i += 1\n        \n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total_sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            total_sum += count ** 5\n        count += 1\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    \n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n            count += 1\n        else:\n            count += 1\n            \n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Returns a list containing the rear element of each tuple in the input list.\n    \"\"\"\n    return [t[1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Checking if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n    \n    # Subtracting the elements of the tuples with the same index\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to 0\n    even_sum = 0\n    # Loop through even indices from 0 to n\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient using math.comb()\n        coeff = math.comb(n, i)\n        # Add the coefficient to the sum if it is even\n        if i % 2 == 0:\n            even_sum += coeff\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Returns the sum of even index binomial coefficients for the given value of n.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through all even numbers from 0 to n\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient for i and n\n        binomial = math.comb(n, i)\n        # Check if i is even\n        if i % 2 == 0:\n            # If i is even, add its binomial coefficient to the sum\n            sum += binomial\n    # Return the sum\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        sum += binomial_coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum to 0\n    even_sum = 0\n    # Iterate from 0 to n/2\n    for i in range(n//2+1):\n        # Calculate the binomial coefficient using math.comb() function\n        binomial_coeff = math.comb(n, 2*i)\n        # Check if the index is even\n        if i % 2 == 0:\n            even_sum += binomial_coeff\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(0, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        sum += binomial_coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    s = 0\n    for i in range(0, n+1, 2):\n        s += math.comb(n, i)\n    return s"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize the sum to 0\n    even_sum = 0\n    \n    # Loop through all even indices from 0 to n-2 (since we only need odd indices)\n    for i in range(0, n-2, 2):\n        # Compute the binomial coefficient (n choose i)\n        coeff = math.comb(n, i)\n        \n        # Check if the index is even and add to the sum if it is\n        if i % 2 == 0:\n            even_sum += coeff\n            \n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(0, n+1, 2):\n            b = math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n            sum += b\n        return sum"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (22/7) * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h\n\nprint(volume_cylinder(5, 10)) # expected output: 785.3975"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Computes the volume of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n\n    Returns:\n    float: the volume of the cylinder.\n    \"\"\"\n    return 3.14159 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    pi = 3.14159265359\n    volume = pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[len(test_tup)-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[test_tup.index(i) + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == test_tup.index(test_tup[-1]):\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    This function takes a tuple as an input and returns the number of elements in the tuple that occurs before the tuple element.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            return count\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] is not None:\n            count += 1\n        elif count > 0:\n            return count\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    num = 0\n    while count <= n:\n        num += count * 10**(count-1)\n        count += 1\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 10\n        count += 1\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 1\n    decagonal = 0\n    \n    while count < n:\n        decagonal += num\n        num += 10\n        count += 1\n    \n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal_num = 0\n    while count <= n:\n        decagonal_num += 10*count\n        count += 1\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the counter variable\n    count = 0\n    # Initialize the decagonal number variable\n    decagonal = 0\n    \n    # Loop until we find the nth decagonal number\n    while count < n:\n        # Increment the counter\n        count += 1\n        # Increment the decagonal number by 10\n        decagonal += 10\n        \n    # Return the nth decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        num += 1\n        dec_num = int(str(num) + str(num+1) + str(num+2))\n        if dec_num == num:\n            count += 1\n    return num - 1 if n > 0 else \"Invalid input\""
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    i = 1\n    while i <= n:\n        decagonal += i\n        i += 1\n    return decagonal\n\nprint(is_num_decagonal(1))  # Output: 1\nprint(is_num_decagonal(5))  # Output: 55\nprint(is_num_decagonal(10)) # Output: 365"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # Initialize variables\n    decagonal = 0\n    count = 1\n\n    # Loop until the nth decagonal number is found\n    while count <= n:\n        decagonal += count * 10\n        count += 1\n\n    # Return the nth decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n and returns True if n is a decagonal number,\n    and False otherwise. A decagonal number is a number where the sum of the\n    first n triangular numbers is equal to the nth triangular number.\n    \"\"\"\n    triangular_numbers = [n * (n+1) // 2 for n in range(1, 1000000)]  # Generate a list of the first 1000000 triangular numbers\n    decagonal_numbers = [n * (n+1) * (n+2) // 6 for n in range(1, 1000000)]  # Generate a list of the first 1000000 decagonal numbers\n    if triangular_numbers[n-1] in decagonal_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal_num = 0\n    while count <= n:\n        decagonal_num += 10*count\n        count += 1\n    return decagonal_num\n"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Sequential search algorithm to find an element in a list.\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    is_found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            is_found = True\n            index = i\n            break\n    \n    return (is_found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and an element and returns a tuple containing a boolean value that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # Initialize variables\n    found = False\n    index = -1\n\n    # Loop through the array\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    # Return the tuple with the boolean value and index position\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Function to search an element in a list using sequential search\n    :param dlist: List of elements\n    :param item: Element to be searched\n    :return: Tuple containing a boolean indicating if the element is in the list and the index position of the element (or -1 if the element is not found)\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for element in test_list:\n        if element not in unique:\n            unique.append(element)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in a list are unique.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists of equal length as input and returns a new list containing the element-wise subtraction of the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n\n    Parameters:\n    nums1 (list): The first list of numbers.\n    nums2 (list): The second list of numbers.\n\n    Returns:\n    result (list): The result of subtracting nums1 and nums2 element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    This function takes two lists as input and subtracts them element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    :param nums1: list of numbers\n    :param nums2: list of numbers\n    :return: list of numbers\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]  # convert the integer to a list of digits\n    freq = [digits.count(d) for d in digits]  # count the frequency of each digit\n    for i in freq:\n        if i > digits[digits.index(i)]:  # if the frequency is greater than the digit itself, return False\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]  # convert integer to list of digits\n    digits_freq = [digits.count(digit) for digit in range(10)]  # count frequency of each digit\n    return all(freq <= digit for freq, digit in zip(digits_freq, digits))  # check if frequency is less than or equal to digit"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in str(n):\n        if int(i) > n//10:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n): \n    # Convert integer to string\n    n = str(n)\n    # Create a dictionary to store frequency of each digit\n    freq = {}\n    # Iterate over each digit in the integer\n    for digit in n:\n        # If digit is already present in the dictionary, increment its value\n        if digit in freq:\n            freq[digit] += 1\n        # If digit is not present in the dictionary, add it and set its value to 1\n        else:\n            freq[digit] = 1\n    # Iterate over each digit in the integer again and check its frequency\n    for digit in n:\n        # If frequency of digit is greater than or equal to digit itself, return False\n        if freq[digit] >= int(digit):\n            return False\n    # If all digits have frequency less than or equal to their value, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    # Convert integer to string to iterate over each digit\n    n_str = str(n)\n    \n    # Initialize an empty dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Iterate over each digit in the string and update the frequency dictionary\n    for digit in n_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in n_str:\n        if freq[digit] > int(digit):\n            return False\n    \n    # If all digits satisfy the condition, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # Iterate through each digit in the string\n    for digit in n_str:\n        # If the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency by 1\n        else:\n            freq[digit] += 1\n\n    # Iterate through each digit in the string\n    for digit in n_str:\n        # If the frequency of the digit is greater than or equal to the digit itself, return False\n        if freq[digit] >= int(digit):\n            return False\n\n    # If the function has not returned False, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    frequency = [digits.count(d) for d in range(10)]\n    return frequency <= digits\n"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    freq = [0] * 10  # initialize frequency list to 0 for each digit\n    while n > 0:\n        digit = n % 10\n        freq[digit] += 1\n        n //= 10\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string to iterate over its digits\n    digits = str(n)\n    \n    # Iterate over each digit in the string and check its frequency\n    for digit in digits:\n        if digits.count(digit) > int(digit):\n            return False\n    \n    # If all digits have a frequency less than or equal to the digit itself, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for digit in freq:\n        if digit > int(digit):\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n    \"\"\"\n    return all(elem == x for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element as input and checks if all the elements in the list are equal to the given element.\n    '''\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element, otherwise it returns False.\n    \"\"\"\n    return all(x == element for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(elem == element for elem in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, element):\n    '''\n    This function checks whether all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): A list of elements.\n    element (any): An element.\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    '''\n\n    # Check if the list is empty\n    if not lst:\n        return False\n\n    # Check if all items in the list are equal to the given element\n    return all(x == element for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    Checks if all elements of a list are equal to a given element.\n    \"\"\"\n    if len(set(lst)) == 1 and lst[0] == element:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function checks whether all the elements in a list are equal to a given element.\n\n    :param lst: list to be checked\n    :param elem: element to be checked against\n    :return: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Function to check if all items in the list are equal to the given element.\n    \"\"\"\n    return all(i == elem for i in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Check if a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a(?=b{2,3})')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a[b]{2,3}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(bb{2,3}|bbb{2,})$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a.*(bb){1,2}')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb){1,2}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function takes in a string as input and checks if the string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*(b{2,3})'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum % k == 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        curr_sum = sum(a[i:i+k])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    This function takes an array 'a' of size 'n', and an integer 'k' as input.\n    It returns the largest sum of a contiguous subarray in the modified array which is formed by repeating the given array 'k' times.\n    \"\"\"\n    \n    # Initialize the variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Iterate through the array k times\n    for i in range(k):\n        for j in range(n):\n            curr_sum += a[j]\n        \n        # Update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # Reset the current sum for the next iteration\n        curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    This function takes an array `a` of length `n` and a number `k` as input. It returns the maximum sum of a contiguous subarray that can be formed by repeating the given array `k` times.\n    \"\"\"\n    \n    # Find the sum of the original array\n    total_sum = sum(a)\n    \n    # Find the sum of the subarray that can be formed by repeating the given array k times.\n    subarray_sum = 0\n    for i in range(k):\n        subarray_sum += sum(a)\n    \n    # Return the maximum sum of the subarray\n    return max(total_sum, subarray_sum)"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the original array\n    original_array_sum = sum(a)\n    \n    # Find the sum of the modified array which is formed by repeating the given array k times\n    modified_array_sum = original_array_sum * k\n    \n    # Calculate the sum of every contiguous subarray of length k in the modified array\n    subarray_sum = [sum(a[i:i+k]) for i in range(n-k+1)]\n    \n    # Find the maximum sum of a contiguous subarray of length k in the modified array\n    max_subarray_sum = max(subarray_sum)\n    \n    # Return the maximum sum of a contiguous subarray of length k in the modified array\n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the sum of the first array as the maximum sum\n    max_sum = sum(a)\n\n    # Repeat the array k-1 times and calculate the sum of each array\n    for i in range(k-1):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += a[j]\n            a[j] += a[j-1]\n\n        # Update the maximum sum if the sum of current array is greater than the previous maximum sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # initialize the sum array with zeros\n    sum_arr = [0] * (n+1)\n    max_sum = float('-inf')\n\n    # initialize the sum of first array\n    for i in range(1, n+1):\n        sum_arr[i] = sum_arr[i-1] + a[i-1]\n\n    # iterate over the arrays to find the maximum sum\n    for i in range(k):\n        for j in range(i+1, n+k-i+1):\n            sub_sum = sum_arr[j] - sum_arr[i] + a[i] * (j - i)\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    This function finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Create a modified array by repeating the given array k times\n    mod_a = a * k\n    \n    # Initialize variables for the maximum sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Iterate over the modified array and find the maximum sum of a contiguous subarray\n    for i in range(len(mod_a)):\n        curr_sum += mod_a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    curr_start = 0\n\n    for i in range(n*k):\n        curr_sum += a[i % n]\n        if i >= n and curr_sum - a[i % n] >= curr_sum // k:\n            curr_sum -= a[curr_start % n]\n            curr_start += 1\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = -float('inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = (curr_sum + a[i]) % k\n        if curr_sum == 0:\n            max_sum = a[i]\n        elif curr_sum < k - 1:\n            max_sum = max(max_sum, curr_sum * a[i])\n        else:\n            max_sum = max(max_sum, curr_sum * a[i] + (k - 1) * a[i])\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n:\n        sum += (2*i + 1)**2\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, (n*2)+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate from 2 to 2n, and add the square of each even number to the sum\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    \n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) == max(len(lst) for lst in list1):\n            max_length_list.append(lst)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_list = None\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    \n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list with the maximum length.\n    '''\n    max_list = []\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            result = [list1[i]]\n        elif len(list1[i]) == max_len:\n            result.append(list1[i])\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes in a list of lists as input and returns a list of maximum length in the input list.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    for sublist in list1:\n        if len(sublist) == max_len:\n            return sublist"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize dp array with 0 for all elements\n    dp = [0]*(n) \n  \n    # Base case for the first post\n    dp[0] = k \n  \n    # Base case for the second post \n    if n >= 2: \n        dp[1] = k * (k-1) \n  \n    # Fill the remaining elements using the recursive formula \n    for i in range(2, n): \n        dp[i] = (k-1) * (dp[i-1] + dp[i-2]) \n  \n    return dp[n-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if k == 1:\n        return n\n    \n    dp = [0] * (n + 1)\n    dp[1] = k\n    for i in range(2, n + 1):\n        dp[i] = (dp[i-1] * (k-1)) + dp[i-2]\n    \n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * k for _ in range(n)]\n    for i in range(k):\n        dp[1][i] = 1\n    for i in range(2, n):\n        for j in range(k):\n            for m in range(k):\n                if m!= j:\n                    dp[i][j] += dp[i-1][m]\n    return dp[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # initialize the first two rows\n    for i in range(1, k+1):\n        dp[1][i] = i\n        dp[2][i] = k - i + 1\n    \n    # fill the rest of the dp table\n    for i in range(3, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1] + dp[i-2][j]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base cases\n    if n == 0: \n        return 1\n    if n == 1: \n        return k\n    \n    # Initialize dp table\n    dp = [[0 for j in range(k+1)] for i in range(n+1)] \n    \n    # Fill the table in a bottom-up manner\n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            if i == 1: \n                dp[i][j] = j\n            else: \n                dp[i][j] = dp[i-1][j] + dp[i-2][j]\n                if j >= i-1: \n                    dp[i][j] -= dp[i-1][j-i+1]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0]*k for _ in range(n)] # create a 2D array to store the number of ways for each number of posts and each color\n    \n    # base case\n    dp[0][0] = 1 # there is only 1 way to paint the fence with no adjacent posts having the same color\n    \n    # recursive case\n    for i in range(1, n):\n        for j in range(k):\n            # if the previous post has the same color, we can only paint the current post with a different color\n            dp[i][j] = dp[i-1][j]\n            \n            # if the previous post has a different color, we can paint the current post with the same color or a different color\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n                \n    # return the total number of ways to paint the fence\n    return dp[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    count = 0\n    for i in range(1, k + 1):\n        count += count_no_of_ways(n - 1, k)\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    else:\n        same = count_no_of_ways(n-1, k)\n        diff = count_no_of_ways(n-1, k-1)\n        return same + diff\n\nprint(count_no_of_ways(4, 3)) # Output: 11"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a list to store the number of ways for each color\n    count = [0] * k\n    \n    # Initialize the first two colors to 1\n    count[0] = 1\n    count[1] = 1\n    \n    # Calculate the number of ways for the remaining colors\n    for i in range(2, k):\n        count[i] = count[i-1] * (k-1) // k\n        \n    # Calculate the number of ways for the remaining posts\n    for i in range(n-2):\n        temp = count[:]\n        for j in range(k):\n            temp[j] *= (k-1) // k\n            \n        count = temp\n    \n    # Return the total number of ways\n    return count[-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D array to store the number of ways for each color for each fence post\n    dp = [[0] * k for _ in range(n)]\n\n    # Base case: one color for the first and last post\n    for i in range(k):\n        dp[0][i] = 1\n        dp[n-1][i] = 1\n\n    # Fill in the remaining entries in the dp array\n    for i in range(1, n-1):\n        for j in range(k):\n            dp[i][j] = sum(dp[i-1][:j] + dp[i+1][j:])\n\n    # The number of ways is the sum of all entries in the dp array\n    return sum(dp[i] for i in range(n))"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n,m):\n    \"\"\"\n    This function takes two arguments n and m and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n,m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    This function takes two arguments - n and m - and returns the quotient of n and m, rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n // m\n    else:\n        return n // m + 1"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes two parameters w and h representing the lengths of the two shorter sides of a right angled triangle.\n    It calculates the length of the third side using the Pythagorean theorem and returns the value.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 == 0:\n        return \"The triangle is not a right angled triangle.\"\n    else:\n        return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes two sides of a right angled triangle (w and h)\n    and returns the third side.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(lst):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the maximum value in the list.\n    \"\"\"\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all divisors of the input number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate through all numbers from 1 to number\n    for i in range(1, number+1):\n        # Check if i is a divisor of number\n        if number % i == 0:\n            # Add i to sum\n            sum += i\n    \n    # Return the sum of all divisors\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    This function takes an integer number as input and returns the sum of all its divisors.\n    '''\n    # Initialize a variable to store the sum of divisors\n    div_sum = 0\n    # Iterate through all numbers from 1 to the input number (inclusive)\n    for i in range(1, number+1):\n        # Check if the input number is divisible by the current number\n        if number % i == 0:\n            # If it is divisible, add it to the sum of divisors\n            div_sum += i\n    # Return the sum of divisors\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as an argument and returns the sum of all its divisors.\n    '''\n    sum_divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its divisors.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    # Merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n            merge_sort(left_half)\n            merge_sort(right_half)\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] < right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    count += len(left_half) - i\n                    j += 1\n                k += 1\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n    merge_sort(arr)\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in a given array using merge sort.\n    \"\"\"\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n        left_inv = get_Inv_Count(left_arr)\n        right_inv = get_Inv_Count(right_arr)\n        inv_count = left_inv + right_inv\n        i = j = k = 0\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] <= right_arr[j]:\n                arr[k] = left_arr[i]\n                i += 1\n            else:\n                arr[k] = right_arr[j]\n                j += 1\n                inv_count += len(left_arr[i:])\n            k += 1\n        while i < len(left_arr):\n            arr[k] = left_arr[i]\n            i += 1\n            k += 1\n        while j < len(right_arr):\n            arr[k] = right_arr[j]\n            j += 1\n            k += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in a given array.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr, 0\n\n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left_arr, left_inv_count = get_Inv_Count(arr[:mid])\n    right_arr, right_inv_count = get_Inv_Count(arr[mid:])\n\n    # Merge the two sorted halves and count inversions\n    merged_arr = []\n    inv_count = left_inv_count + right_inv_count\n    i, j = 0, 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            merged_arr.append(left_arr[i])\n            i += 1\n        else:\n            merged_arr.append(right_arr[j])\n            j += 1\n            inv_count += len(left_arr[i:])\n\n    merged_arr += left_arr[i:]\n    merged_arr += right_arr[j:]\n\n    return merged_arr, inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_Inv_Count(arr):\n    merge_sort(arr)\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion is defined as a pair of elements (i, j) such that i < j and arr[i] > arr[j].\n    \"\"\"\n\n    n = len(arr)\n    inv_count = 0\n\n    # Base case\n    if n == 1:\n        return inv_count\n\n    # Divide the array into two halves\n    mid = n // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    # Recursively count inversions in left and right halves\n    left_inv_count = get_Inv_Count(left_arr)\n    right_inv_count = get_Inv_Count(right_arr)\n\n    # Merge the two halves and count inversions\n    i = j = k = 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            arr[k] = left_arr[i]\n            i += 1\n        else:\n            arr[k] = right_arr[j]\n            j += 1\n            inv_count += len(left_arr[i:])\n\n    # Add the remaining elements of left_arr to arr\n    while i < len(left_arr):\n        arr[k] = left_arr[i]\n        i += 1\n        k += 1\n\n    # Add the remaining elements of right_arr to arr\n    while j < len(right_arr):\n        arr[k] = right_arr[j]\n        j += 1\n        k += 1\n\n    return inv_count + left_inv_count + right_inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    inv_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Perform merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left = arr[:mid]\n            right = arr[mid:]\n            \n            merge_sort(left)\n            merge_sort(right)\n            \n            i = j = k = 0\n            \n            while i < len(left) and j < len(right):\n                if left[i] <= right[j]:\n                    arr[k] = left[i]\n                    i += 1\n                else:\n                    arr[k] = right[j]\n                    inv_count += len(left[i:]) # Count the number of inversions\n                    j += 1\n                k += 1\n            \n            while i < len(left):\n                arr[k] = left[i]\n                i += 1\n                k += 1\n            \n            while j < len(right):\n                arr[k] = right[j]\n                j += 1\n                k += 1\n            \n    merge_sort(arr)\n    \n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr) \n    inv_count = 0\n    \n    # Perform merge sort\n    merge_sort(arr, 0, n-1, inv_count)\n    \n    return inv_count\n\ndef merge_sort(arr, l, r, inv_count):\n    if l < r:\n        m = (l + r) // 2\n        merge_sort(arr, l, m, inv_count)\n        merge_sort(arr, m+1, r, inv_count)\n        merge(arr, l, m, r, inv_count)\n\ndef merge(arr, l, m, r, inv_count):\n    left = arr[l:m+1]\n    right = arr[m+1:r+1]\n    i, j = 0, 0\n    k = l\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            inv_count += len(left[i:])\n            j += 1\n        k += 1\n        \n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n        \n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a nested list structure into a single list.\n\n    Args:\n        nested_list (list): A list of lists.\n\n    Returns:\n        list: A flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes in a nested list structure and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list += flatten_list(element)\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as an input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for i in lst:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Step 1: Create a dictionary to store the frequency of each element in the list of tuples\n    freq = defaultdict(int)\n    for element in stdata:\n        freq[element[0]] += element[1]\n\n    # Step 2: Create a list of tuples with the elements and their frequency\n    freq_list = [(k,v) for k,v in freq.items()]\n\n    # Step 3: Sort the list of tuples based on the frequency in descending order\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Step 4: Find the maximum aggregate by multiplying the first k elements with their frequency\n    max_agg = 0\n    for i in range(len(freq_list)):\n        max_agg += freq_list[i][1] * freq_list[i][0]\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Step 1: Create a dictionary to store the sum of the tuples\n    # and their corresponding frequency.\n    freq_dict = defaultdict(int)\n    for item in stdata:\n        freq_dict[item] += 1\n    \n    # Step 2: Calculate the maximum aggregate by considering the\n    # frequency of each tuple.\n    max_agg = 0\n    for item, freq in freq_dict.items():\n        max_agg += freq * (freq + 1) / 2\n    \n    # Step 3: Return the maximum aggregate.\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the prefix sums and the corresponding indexes\n    prefix_sum_dict = defaultdict(list)\n    prefix_sum_dict[0].append(0)\n    max_agg = 0\n    current_sum = 0\n    \n    # iterate over the input list and calculate the prefix sum\n    for i, num in enumerate(stdata):\n        current_sum += num\n        prefix_sum_dict[current_sum].append(i)\n        \n        # check if the current prefix sum has a higher aggregate than the current maximum\n        if current_sum > max_agg:\n            max_agg = current_sum\n    \n    # find the indexes of the maximum aggregate in the input list\n    max_agg_indexes = prefix_sum_dict[max_agg]\n    \n    return max_agg_indexes"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n\n    # Iterate through the list of tuples and increment the frequency of each element\n    for item in stdata:\n        freq[item[0]] += item[1]\n        freq[item[1]] += item[0]\n\n    # Create a dictionary to store the maximum aggregate for each element\n    max_agg = defaultdict(int)\n\n    # Iterate through the dictionary of frequencies and calculate the maximum aggregate for each element\n    for item in freq:\n        max_agg[item] = freq[item] * (freq[item] - 1) // 2\n\n    # Calculate the maximum aggregate for the entire list of tuples\n    max_aggregate = sum(max_agg.values()) // 2\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    counts = defaultdict(int)\n    total = 0\n    for s, t in stdata:\n        counts[s] += 1\n        counts[t] += 1\n        total += s\n        total += t\n    n = len(stdata)\n    max_agg = 0\n    for i in range(1, n+1):\n        cur_agg = total - (i * (n-i))\n        if cur_agg > max_agg:\n            max_agg = cur_agg\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the sum of each team's scores\n    team_scores = defaultdict(int)\n    for team, score in stdata:\n        team_scores[team] += score\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            agg = team_scores[stdata[i][0]] + team_scores[stdata[j][0]]\n            if agg > max_agg:\n                max_agg = agg\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dict_data = defaultdict(list)\n    for key, value in stdata:\n        dict_data[key].append(value)\n    \n    max_key = max(dict_data, key=lambda k: sum(dict_data[k]))\n    return sum(dict_data[max_key])"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    dp = defaultdict(lambda: [0]*n)\n    dp[0][0] = stdata[0][0]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i-1][0], stdata[i][0])\n        dp[i][1] = max(dp[i-1][0]+stdata[i][1], dp[i-1][1])\n    return dp[n-1][1]"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = defaultdict(int)\n    for elem in stdata:\n        freq_dict[elem] += 1\n\n    # Create a dictionary to store the aggregate of each prefix of the list\n    agg_dict = defaultdict(int)\n    for i in range(len(stdata)):\n        prefix = stdata[i:]\n        agg_dict[tuple(prefix)] = sum(prefix)\n\n    # Find the maximum aggregate\n    max_agg = 0\n    for key in agg_dict:\n        max_agg = max(max_agg, agg_dict[key])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples containing the start time and the duration of an activity and returns the maximum aggregate.\n    '''\n    \n    # Sort the list of tuples by start time\n    stdata.sort(key=lambda x: x[0])\n    \n    # Initialize a dictionary to store the start time of each activity and its duration\n    activity = defaultdict(int)\n    \n    # Initialize variables to store the current time and the maximum aggregate\n    current_time = 0\n    max_agg = 0\n    \n    # Iterate through the sorted list of tuples\n    for start, duration in stdata:\n        \n        # Calculate the end time of the activity\n        end = start + duration\n        \n        # If the start time of the activity is greater than the current time, add the duration to the current time and update the maximum aggregate if necessary\n        if start > current_time:\n            current_time += duration\n            max_agg = max(max_agg, current_time)\n            \n        # If the end time of the activity is greater than the current time, subtract the duration from the current time and update the maximum aggregate if necessary\n        elif end > current_time:\n            current_time -= duration\n            max_agg = max(max_agg, current_time)\n            \n        # If the activity starts and ends within the current time, add the duration to the current time and update the maximum aggregate if necessary\n        else:\n            current_time += duration\n            max_agg = max(max_agg, current_time)\n            \n        # Update the start time of the activity in the dictionary\n        activity[start] = duration\n    \n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_i = bin(i)[2:]\n        if len(bin_i)!= 2*n:\n            continue\n        if bin_i[:n] == bin_i[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        if sum(map(int, binary_str[:n])) == sum(map(int, binary_str[n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        first_n_bits = binary_str[:n]\n        last_n_bits = binary_str[n:]\n        if sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Generate all binary sequences of length 2n\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        \n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(int(binary[:n])) == sum(int(binary[n:])):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bin_num = bin(i)[2:].zfill(n)\n        if sum(int(bin_num[j]) for j in range(n)) == sum(int(bin_num[j]) for j in range(n, 2*n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    This function finds the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        # convert the integer to binary and add leading zeros to make it of length 2n\n        binary_string = bin(i)[2:].zfill(2*n)\n        # check if the sum of first n bits is same as the sum of last n bits\n        if int(binary_string[:n], 2) + int(binary_string[n:], 2) == i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        first_sum = sum([int(bit) for bit in binary[:n]])\n        last_sum = sum([int(bit) for bit in binary[n:]])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # All possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert integer i to its binary representation in a string\n        binary = bin(i)[2:].zfill(n)\n        # Convert the binary string to a list of integers\n        binary_list = [int(x) for x in binary]\n        # Compute the sum of the first n bits\n        sum_first = sum(binary_list[:n])\n        # Compute the sum of the last n bits\n        sum_last = sum(binary_list[-n:])\n        # Check if the two sums are equal\n        if sum_first == sum_last:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:]\n        if len(bits) < 2*n:\n            bits = \"0\"*(2*n - len(bits)) + bits\n        if bits[:n] == bits[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Iterate through all possible binary numbers of length n\n    for i in range(2**n):\n        \n        # Convert the integer to binary string and reverse it\n        binary = bin(i)[2:].zfill(n)[::-1]\n        \n        # Check if the sum of first n bits is equal to sum of last n bits\n        if sum(int(x) for x in binary[:n]) == sum(int(x) for x in binary[n:]):\n            count += 1\n            \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return depth\n    return max(dict_depth(value, depth+1) for key, value in d.items())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise TypeError('Input must be a dictionary')\n    \n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            max_depth = max(max_depth, depth)\n    \n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d, level=0):\n    \"\"\"\n    Returns the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return level\n    return max(dict_depth(v, level+1) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    \n    depth = 1\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Returns the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(value) for key, value in d.items())"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array of integers and a list of ranges of valid indices for the given rotation.\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Check if the index is within the valid range for the given rotation\n    if not any(index in range(start, end) for start, end in ranges):\n        raise ValueError(f\"Index {index} is not within any of the valid ranges for rotation {rotations}\")\n\n    # Calculate the index after the specified number of rotations\n    rotated_index = (index - ranges[rotations][0]) % len(arr) + ranges[rotations][0]\n\n    # Return the element at the rotated index\n    return arr[rotated_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Split the ranges into start and end index of each range\n    start_end = [range.split('-') for range in ranges.split(',')]\n    \n    # Create a list of all numbers between start and end index\n    nums = []\n    for start, end in start_end:\n        nums += range(int(start), int(end)+1)\n    \n    # Rotate the list of numbers by the number of rotations\n    nums = nums[rotations:] + nums[:rotations]\n    \n    # Find the element at the given index in the rotated list\n    element = nums[index]\n    \n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Reverse the entire array\n    arr = arr[::-1]\n\n    # Rotate the array the given number of times\n    for i in range(rotations):\n        arr = [arr[-1]] + arr[:-1]\n\n    # Get the range of elements to search for\n    start_index = (index - 1) % ranges\n    end_index = index % ranges\n\n    # Search for the element in the range\n    for i in range(start_index, end_index):\n        if arr[i] == index:\n            return i\n    \n    # If element not found, return -1\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after rotating the array\n    by a given number of rotations.\n    '''\n\n    # Find the element at the given index before rotations\n    element_before_rotation = arr[index]\n\n    # Rotate the array by the given number of rotations\n    arr = arr[ranges:] + arr[:ranges]\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Find the element at the given index after rotations\n    element_after_rotation = arr[index]\n\n    return element_after_rotation\n"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Initialize variables\n    start = 0\n    end = ranges - 1\n    element = -1\n\n    # Check if index is out of range\n    if index < 0 or index >= ranges:\n        return -1\n\n    # Find element at given index after number of rotations\n    for i in range(rotations):\n        mid = start + (end - start) // 2\n        if index <= mid:\n            end = mid\n            element = arr[end]\n        else:\n            start = mid + 1\n            element = arr[start]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # initialize variables\n    n = len(arr)\n    start = ranges[0]\n    end = ranges[1]\n    mid = (start + end) // 2\n    \n    # perform binary search to find the pivot element\n    while start <= end:\n        if arr[mid] == arr[(mid + n - 1) % n]:\n            break\n        elif arr[mid] < arr[(mid + n - 1) % n]:\n            end = mid - 1\n        else:\n            start = mid + 1\n        mid = (start + end) // 2\n    \n    # rotate the array to the right number of rotations\n    pivot_index = mid\n    new_index = (pivot_index + rotations) % n\n    \n    # find the element at the given index\n    if index < pivot_index:\n        return find_Element(arr[pivot_index:new_index], [0, pivot_index], index)\n    elif index >= new_index:\n        return find_Element(arr[new_index:pivot_index], [pivot_index, n-1], index - new_index)\n    else:\n        return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Shift the indices based on the number of rotations\n    rotated_index = (index + rotations) % len(arr)\n    \n    # Calculate the starting and ending indices of the range to search through\n    start_index = (rotated_index - ranges[0]) % len(arr)\n    end_index = (rotated_index - ranges[1]) % len(arr)\n\n    # If the starting index is greater than the ending index, swap them\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n\n    # Find the element at the given index\n    for i in range(start_index, end_index + 1):\n        if arr[i] == arr[rotated_index]:\n            return i\n\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    This function takes in an array, ranges, rotations and index and returns the element at the given index after number of rotations.\n    '''\n    # Rotate the array based on the number of rotations\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Determine the range of the array to search\n    range_left = ranges[0]\n    range_right = ranges[1]\n\n    # Check if the given index is within the range\n    if index < range_left or index > range_right:\n        return \"Invalid index\"\n\n    # Calculate the actual index of the element after rotation\n    actual_index = index - range_left\n\n    # Return the element at the actual index\n    return arr[actual_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    n = len(arr)\n    # Find the index of the first element of the subarray rotated by rotations.\n    start = (index - ranges) % n\n    end = start + ranges\n\n    # Rotate the subarray and find the element at the given index.\n    subarray = arr[start:end]\n    subarray.rotate(rotations)\n    return subarray[index % ranges]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Get the range of the array that needs to be searched\n    start_index = ranges[0]\n    end_index = ranges[1]\n\n    # Get the number of rotations\n    rotations = rotations % len(arr)\n\n    # Get the index of the desired element\n    index = index % len(arr)\n\n    # Rotate the array\n    rotated_arr = arr[rotations:] + arr[:rotations]\n\n    # Find the desired element\n    element = rotated_arr[index]\n\n    return element"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p\\w+', word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return \"There are not enough words starting with 'p'.\"\n    else:\n        return p_words[0] + \" \" + p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    filtered_words = [word for word in words if re.match(r'^p\\w*', word)]\n    if len(filtered_words) < 2:\n        return \"Not enough words starting with 'p' found\"\n    return filtered_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.match(r'^p', word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w+\\b')\n    for word in words:\n        if pattern.match(word):\n            return word, words[words.index(word)+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    regex = re.compile(r'^p\\w*\\s')\n    filtered_words = [word for word in words if regex.match(word)]\n    return filtered_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Returns two words from a list of words starting with letter 'p'.\n    \"\"\"\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            if len(result) < 2:\n                result.append(word)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\\w+\")\n    filtered_words = list(filter(pattern.match, words))\n    if len(filtered_words) < 2:\n        return None\n    return filtered_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*\\b')\n    matches = [word for word in words if pattern.match(word)]\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*\\s\\w*')\n    filtered_words = [word for word in words if pattern.match(word)]\n    if len(filtered_words) < 2:\n        return \"There are less than 2 words starting with 'p' in the list.\"\n    else:\n        return filtered_words[0], filtered_words[1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    max_sum = 0\n    prefix_sum = 0\n    dp = [0] * n\n    for i in range(n):\n        prefix_sum += a[i]\n        if i >= index:\n            dp[i] = max(dp[j] + a[i] for j in range(i + 1) if a[j] < a[i])\n        if i == index - 1:\n            for j in range(k, n):\n                dp[i] = max(dp[i], prefix_sum - (dp[j - 1] if j > 0 else 0))\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the prefix sum of the array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n        \n    # Create a list to store the indices of the elements in increasing order of their prefix sum\n    indices = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if prefix_sum[j] > prefix_sum[indices[i-1]]:\n                indices[i] = j\n                \n    # Initialize the maximum sum and current sum to 0\n    max_sum = 0\n    curr_sum = 0\n    \n    # Traverse the indices list from 1 to index+1\n    for i in range(1, index+1):\n        # Add the prefix sum of the ith element to the current sum\n        curr_sum += prefix_sum[indices[i]]\n        \n        # Check if the current sum is greater than the maximum sum and kth element is after i\n        if curr_sum > max_sum and k > i:\n            # Update the maximum sum\n            max_sum = curr_sum\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k < index:\n        return 0\n\n    max_sum = 0\n    for i in range(index):\n        if a[i] <= a[k]:\n            max_sum += a[i]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a list to store the maximum sum and the corresponding index of increasing subsequence\n    max_sum = 0\n    max_index = -1\n    \n    # Initialize two variables to store the sum and index of increasing subsequence ending at the current index\n    curr_sum = 0\n    curr_index = -1\n    \n    # Iterate from 0 to index-1\n    for i in range(index):\n        # If a[i] is less than a[k-1] and the sum of increasing subsequence ending at i plus a[k-1] is greater than curr_sum, update curr_sum and curr_index\n        if a[i] < a[k-1]:\n            if curr_sum + a[k-1] > curr_sum:\n                curr_sum += a[k-1]\n                curr_index = i+1\n        # If a[i] is less than a[k-1] and the sum of increasing subsequence ending at i plus a[k-1] is not greater than curr_sum, update curr_sum and curr_index only if curr_index is -1 or i+1 is less than curr_index\n        elif a[i] < a[k-1] and curr_sum + a[k-1] <= curr_sum:\n            if curr_index == -1 or i+1 < curr_index:\n                curr_sum += a[k-1]\n                curr_index = i+1\n                \n    # If curr_sum is greater than max_sum, update max_sum and max_index\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n        max_index = curr_index\n        \n    # Iterate from index+1 to n-1\n    for i in range(index+1, n):\n        # If a[i] is less than a[k-1] and the sum of increasing subsequence ending at i minus a[k-1] is greater than curr_sum, update curr_sum and curr_index\n        if a[i] < a[k-1]:\n            if curr_sum + a[k-1] > curr_sum:\n                curr_sum += a[k-1]\n                curr_index = i+1\n        # If a[i] is less than a[k-1] and the sum of increasing subsequence ending at i minus a[k-1] is not greater than curr_sum, update curr_sum and curr_index only if curr_index is -1 or i+1 is less than curr_index\n        elif a[i] < a[k-1] and curr_sum + a[k-1] <= curr_sum:\n            if curr_index == -1 or i+1 < curr_index:\n                curr_sum += a[k-1]\n                curr_index = i+1\n                \n    # If curr_sum is greater than max_sum, update max_sum and max_index\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n        max_index = curr_index\n        \n    return max_sum, max_index"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if n == 0:\n        return 0\n\n    if index == n:\n        return 0\n\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n\n    return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index-1))\n"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    \n    # Initialize the array to store the sum of increasing subsequences up to i\n    # and the corresponding ending index of each increasing subsequence\n    sums = [0] * n\n    ends = [0] * n\n    \n    # Initialize the first increasing subsequence with the element at index i\n    sums[index] = a[index]\n    ends[index] = index\n    \n    # Compute the sum of increasing subsequences up to each prefix ending at i\n    for i in range(index):\n        if a[i] < a[index]:\n            # If the element at i is smaller than the element at index,\n            # consider it as part of the increasing subsequence ending at index\n            sums[i] = sums[index] + a[i]\n            ends[i] = index\n    \n    # Find the maximum sum of increasing subsequences up to index i\n    max_sum = sums[index]\n    max_end = index\n    \n    # Look for a larger increasing subsequence ending at a prefix that is\n    # separated from the prefix by k positions\n    for i in range(index-k, -1, -1):\n        if sums[i] > max_sum:\n            max_sum = sums[i]\n            max_end = i\n    \n    # Add the maximum sum of the increasing subsequence up to index i\n    # and also including the element at index k\n    return max_sum + a[k]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize a list to store the maximum sum of increasing subsequence ending at each index\n    dp = [0] * n\n    \n    # Initialize the maximum sum of increasing subsequence ending at index 0 to be the value at index 0\n    dp[0] = a[0]\n    \n    # Loop through the prefix array from index 1 to index n-1\n    for i in range(1, n):\n        # Initialize the maximum sum of increasing subsequence ending at index i to be the value at index i\n        dp[i] = a[i]\n        \n        # Loop through the previous indexes from index 0 to i-1\n        for j in range(i):\n            # If the value at index i is greater than the value at index j, and the sum of the maximum sum of increasing subsequence ending at index j and index i is greater than the previous maximum sum found so far, update the maximum sum of increasing subsequence ending at index i to be the sum of the maximum sum of increasing subsequence ending at index j and index i\n            if a[i] > a[j] and dp[j] + dp[i] > dp[i]:\n                dp[i] = dp[j] + dp[i]\n        \n        # Check if k is after i and greater than the value at index i, and if the sum of the maximum sum of increasing subsequence ending at index i and the value at index k is greater than the previous maximum sum found so far, update the maximum sum of increasing subsequence ending at index i to be the sum of the maximum sum of increasing subsequence ending at index i and the value at index k\n        if k > i and a[k] > a[i] and dp[i] + a[k] > dp[i]:\n            dp[i] = dp[i] + a[k]\n    \n    # Return the maximum sum of increasing subsequence ending at the index specified in the input\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            dp[i][j] = a[j]\n            for r in range(i, j):\n                if dp[i][r] + dp[r+1][j] > dp[i][j]:\n                    dp[i][j] = dp[i][r] + dp[r+1][j]\n            if k > i and k <= j:\n                dp[i][j] = max(dp[i][j], dp[i][k-1] + dp[k][j])\n    return dp[0][n-1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n)\n    for i in range(n):\n        for j in range(i+1):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j]+a[i])\n            else:\n                dp[i] = dp[j]\n        if a[i] == k:\n            if i < index:\n                dp[i] += k\n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    prefix_sum = [0] * (n+1)\n    max_sum = float('-inf')\n\n    # Fill prefix_sum array\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n\n    # Find maximum sum of increasing subsequence including the kth element\n    for i in range(index, n+1):\n        if i!= k:\n            temp_sum = prefix_sum[i] - prefix_sum[k]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    :param tuplex: A tuple to get the colon from.\n    :param m: An integer representing the starting index of the colon.\n    :param n: An integer representing the ending index of the colon.\n    :return: A new tuple that is the colon of the original tuple.\n    \"\"\"\n    # Copy the original tuple to avoid modifying it.\n    new_tuplex = deepcopy(tuplex)\n    # Convert negative indices to positive indices.\n    if m < 0:\n        m = len(tuplex) + m\n    if n < 0:\n        n = len(tuplex) + n\n    # Get the new tuple by slicing the original tuple.\n    return new_tuplex[m:n+1]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    return tuplex_copy[m:n+1]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[m:n]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a copy of the tuple, starting from index m and ending at index n.\n    '''\n    return deepcopy(tuplex[m:n+1])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): A tuple.\n        m (int): The starting index of the colon (inclusive).\n        n (int): The ending index of the colon (exclusive).\n\n    Returns:\n        tuple: A tuple containing the elements of the input tuple in the range [m, n).\n    \"\"\"\n    return deepcopy(tuplex[m:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    \n    Parameters:\n    tuplex (tuple): The tuple to get the colon from.\n    m (int): The starting index of the colon (inclusive).\n    n (int): The ending index of the colon (exclusive).\n    \n    Returns:\n    tuple: The colon of the tuple.\n    '''\n    \n    # Make a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Slice the tuple using Python's syntax\n    new_tuplex = new_tuplex[m:n]\n    \n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n > len(tuplex) or m > len(tuplex):\n        return None\n    \n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    # Make a deep copy of the tuple\n    tuplex = deepcopy(tuplex)\n    \n    # Compute the start and end indices of the colon\n    start = max(0, m)\n    end = min(len(tuplex), n+1)\n    \n    # Slice the tuple and return the result\n    return tuplex[start:end]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        m, n = n, m  # Swap m and n if m is greater than n\n\n    colon_tuplex = deepcopy(tuplex)  # Make a copy of the original tuple\n    colon_tuplex = colon_tuplex[m:n+1]  # Get a slice of the tuple\n\n    return colon_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a dictionary to store the products of each factor pair\n    product_dict = {}\n    \n    # Loop through both lists and select one factor from each list\n    for num1 in nums1:\n        for num2 in nums2:\n            # Calculate the product of the selected factors\n            product = num1 * num2\n            \n            # If the product is greater than the current largest product, update the dictionary\n            if len(product_dict) < N:\n                product_dict[product] = (num1, num2)\n            else:\n                smallest_product = min(product_dict)\n                if product > smallest_product:\n                    del product_dict[smallest_product]\n                    product_dict[product] = (num1, num2)\n    \n    # Return a list of the largest N products and their corresponding factors\n    return [(num1, num2) for product, (num1, num2) in sorted(product_dict.items(), reverse=True)][:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n\n    # Create a list to store the products\n    products = []\n\n    # Loop through the lists and select one factor from each list\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n\n    # Sort the list in descending order and return the first N elements\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        product1 = nums1[i]\n        product2 = nums2[i]\n        if product1 >= product2:\n            largest_product = product1\n        else:\n            largest_product = product2\n        largest_products.append(largest_product)\n    largest_products.sort(reverse=True)\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function takes two lists of numbers as input, nums1 and nums2, and an integer N.\n    It returns a list containing the N largest products that can be obtained by multiplying a single factor from each list.\n    \"\"\"\n    # Initialize an empty list to store the products\n    products = []\n    # Iterate through each element in the two lists\n    for num1 in nums1:\n        for num2 in nums2:\n            # Multiply the two numbers and append the result to the products list\n            product = num1 * num2\n            products.append(product)\n    # Sort the products in descending order and return the top N elements\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products of pairs of factors\n    products = []\n\n    # Loop through the first list and select one factor from each element\n    for num1 in nums1:\n        # Loop through the second list and select one factor from each element\n        for num2 in nums2:\n            # Multiply the two selected factors and append the product to the list\n            products.append(num1*num2)\n\n    # Sort the products in descending order and return the specified number of largest products\n    return sorted(products, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Parameters:\n        nums1 (list): List of integers\n        nums2 (list): List of integers\n        N (int): Number of products to return\n\n    Returns:\n        list: List of the specified number of largest products\n    \"\"\"\n\n    products = []\n\n    # Iterate through each element in nums1\n    for num1 in nums1:\n        # Iterate through each element in nums2\n        for num2 in nums2:\n            # Calculate the product of the two factors\n            product = num1 * num2\n            # Append the product to the list of products\n            products.append(product)\n\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n\n    # Return the specified number of largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the lists to store the factors and products\n    factors1 = []\n    factors2 = []\n    products = []\n    \n    # Loop through each number in the first list\n    for i in nums1:\n        # Loop through each number in the second list\n        for j in nums2:\n            # Check if the product of the two numbers is greater than the current largest product\n            if i*j > max(products) or len(products) < N:\n                # If so, add the factors to the corresponding list and the product to the products list\n                factors1.append(i)\n                factors2.append(j)\n                products.append(i*j)\n                \n    # Combine the factors from both lists into a single list of tuples\n    factors = list(zip(factors1, factors2))\n    \n    return factors, products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products\n    products = []\n    \n    # Loop through the first list\n    for i in range(N):\n        # Loop through the second list\n        for j in range(N):\n            # Calculate the product and append it to the list of products\n            products.append(nums1[i] * nums2[j])\n            \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the specified number of largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function finds the specified number of largest products from two given lists, selecting one factor from each list.\n    :param nums1: List of integers\n    :param nums2: List of integers\n    :param N: Number of largest products to find\n    :return: List of tuples containing the factors of the largest products\n    \"\"\"\n\n    # Initialize the largest products list and the index of the largest product found\n    largest_products = []\n    index = 0\n\n    # Loop through the two lists and find the largest product from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n\n            # Check if the product is greater than the previous largest product\n            if len(largest_products) < N or product > largest_products[-1][0]:\n                # If the largest products list has less than N elements or the current product is greater than the\n                # largest product in the list, add the current product to the list\n                largest_products.append((product, (nums1[i], nums2[j])))\n                largest_products.sort(reverse=True)\n                index += 1\n\n                # If the largest products list has more than N elements, remove the smallest product from the list\n                if len(largest_products) > N:\n                    del largest_products[0]\n\n    return [product[1] for product in largest_products]\n"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products\n    products = []\n\n    # Iterate over the lists and select one factor from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the selected factors\n            product = nums1[i] * nums2[j]\n\n            # Append the product to the list of products\n            products.append(product)\n\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n\n    # Return the specified number of largest products\n    return products[:N]"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 7)) # Output: 7"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two arguments a and b and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(3, 6)) # Output: 6"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    return n | (n + 1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in the binary representation of the given integer.\n    \"\"\"\n    mask = 1\n    while ((mask & n)!= 0):\n        mask <<= 1\n    return mask"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    # check if n is zero or negative\n    if n <= 0:\n        return 1\n    # if n is odd, set the right most set bit to 0 and return n\n    if n & 1 == 1:\n        return n & ~(n - 1)\n    # if n is even, set the right most set bit to 1 and shift it left by 1 position to get the result\n    return n | (n + 1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in a number.\n    \"\"\"\n    return n & (-n)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in a number.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n & ~(n-1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    # Start from the rightmost bit and check if it is set or not\n    # If it is not set, set it and return the modified number\n    # If it is already set, move to the left and repeat the process\n    while (n & 1) == 1:\n        n >>= 1\n    n |= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit of a given integer n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n & (~(n - 1))"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes a binary number `n` as input and sets the left most unset bit to 1.\n    Returns the modified binary number.\n    \"\"\"\n    # Initialize the left most unset bit as 1\n    left_most_unset_bit = 1\n    # Loop through all the bits of the binary number\n    while left_most_unset_bit & n:\n        # Shift the left most unset bit to the left by 1 bit\n        left_most_unset_bit <<= 1\n    # Set the left most unset bit to 1 in the original binary number\n    return n | left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Using bitwise left shift operator to set the left most bit\n    n = n | (n << 1)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function returns the number with the left most unset bit set to 1.\n    \"\"\"\n    # XORing n with n + 1 moves the right most set bit to the left by one position.\n    # Adding 1 to the result will set the left most unset bit to 1.\n    return n ^ (n + 1) + 1"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone with base radius r and height h.\n    \"\"\"\n    volume = (1.0 / 3.0) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h / 3\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(r, h))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(radius, height))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes two parameters: the radius of the base of the cone and the height of the cone.\n    It returns the volume of the cone.\n    '''\n    volume = (1.0/3.0) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculates the volume of a cone given its radius and height.\n\n    Parameters:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: the volume of the cone\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2 // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (power*2) <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        n = n - power\n        power = power * 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while (power * 2) <= n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer 'n' as input and returns the highest power of 2 that is less than or equal to 'n'.\n    '''\n    power = 0\n    while (2**power) <= n: \n        power += 1\n    return 2**(power-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    if n == 0:\n        return 0\n    else:\n        power = 1\n        while (power * 2) <= n:\n            power *= 2\n        return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize a variable to store the highest power of 2\n    highest_power = 1\n    \n    # loop from 1 to n\n    for i in range(1, n+1):\n        # check if i is a power of 2\n        if i & (i-1) == 0:\n            highest_power = i\n    \n    # return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer 'n' as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}'th Lucas number is: {find_lucas(n)}\")"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        l1, l2 = 2, 1\n        for i in range(2, n+1):\n            l3 = l1 + l2\n            l1 = l2\n            l2 = l3\n        return l2"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = [string.format(elem) for elem in list_]\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        nested_dict = {}\n        nested_dict[\"key1\"] = l1[i]\n        nested_dict[\"key2\"] = l2[i]\n        nested_dict[\"key3\"] = l3[i]\n        result.append(nested_dict)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a new dictionary\n    new_dict = {}\n\n    # iterate through the three lists\n    for i in range(len(l1)):\n        # create a new sub-dictionary\n        sub_dict = {}\n        # add the values from the three lists to the sub-dictionary\n        sub_dict['key1'] = l1[i]\n        sub_dict['key2'] = l2[i]\n        sub_dict['key3'] = l3[i]\n        # add the sub-dictionary to the new dictionary\n        new_dict[i] = sub_dict\n\n    return new_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]]['sublist1'] = l2[i]\n        result[l1[i]]['sublist2'] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # iterate through each list and assign the values to the corresponding keys in the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Converts three lists to a nested dictionary where the first list is used\n    as keys for the outer dictionary, the second list as keys for the inner\n    dictionaries, and the third list as the values for those keys.\n\n    Example:\n    >>> l1 = ['a', 'b', 'c']\n    >>> l2 = [1, 2, 3]\n    >>> l3 = ['apple', 'banana', 'cherry']\n    >>> convert_list_dictionary(l1, l2, l3)\n    {'a': {1: 'apple', 2: 'banana', 3: 'cherry'},\n     'b': {1: 'apple', 2: 'banana', 3: 'cherry'},\n     'c': {1: 'apple', 2: 'banana', 3: 'cherry'}}\n    \"\"\"\n    result = {}\n    for i, key in enumerate(l1):\n        inner_dict = {}\n        for j, subkey in enumerate(l2):\n            inner_dict[subkey] = l3[j]\n        result[key] = inner_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert a list of three lists to a nested dictionary.\n\n    Args:\n        l1: a list of strings\n        l2: a list of integers\n        l3: a list of floats\n\n    Returns:\n        A nested dictionary where the keys are the elements of l1, and the values are\n        dictionaries with keys \"integer\" and \"float\" and their respective values\n        extracted from the corresponding lists.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {\"integer\": l2[i], \"float\": l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] in result:\n            result[l1[i]][l2[i]] = l3[i]\n        else:\n            result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    max_sum = get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)\n    \n    if max_sum > n:\n        return max_sum\n    else:\n        return n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n\nprint(get_max_sum(10))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Find the maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    This function finds the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0 and n % 3 == 0 and n % 4 == 0 and n % 5 == 0:\n        return (n/2) + (n/3) + (n/4) + (n/5)\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        max_sum = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                max_sum += i\n        return max_sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"Maximum sum possible:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list of lists as input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_length_list = [list]\n        elif len(list) == max_length:\n            max_length_list.append(list)\n    return max_length_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if the given tuple contains no duplicates.\n\n    Parameters:\n    test_tup (tuple): The tuple to be checked.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character that has frequency 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower() # converting the string to lowercase\n    freq_dict = {} # dictionary to store frequency of characters\n    \n    for char in str1:\n        if char not in freq_dict:\n            freq_dict[char] = 1\n        else:\n            freq_dict[char] += 1\n            \n    for char in str1:\n        if freq_dict[char] == 1:\n            return char # return the first non-repeated character\n            \n    return None # if no non-repeated character is found\n            "
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    \n    for char in str1:\n        if char_counts[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first character that is not repeated.\n    If there are no such characters, it returns None.\n    \"\"\"\n    # Initialize a dictionary to keep track of the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the string again to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated characters were found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create an empty dictionary to store the character counts\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string again\n    for char in str1:\n        # If the character has a count of 1, return it as the first non-repeating character\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None # If there is no non-repeated character"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first character in the string\n    that is not repeated in the string. If all characters are repeated, it returns None.\n    '''\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create an empty dictionary to store character frequencies\n    char_freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in char_freq:\n            char_freq[char] += 1\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            char_freq[char] = 1\n    \n    # Loop through each character in the string again\n    for char in str1:\n        # If the character's frequency is 1, return it as the first non-repeated character\n        if char_freq[char] == 1:\n            return char\n    \n    # If no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nstring1 = 'hello'\nstring2 = 'world'\nstring3 = 'racecar'\nstring4 = 'python'\n\nprint(check_char(string1)) # False\nprint(check_char(string2)) # False\nprint(check_char(string3)) # True\nprint(check_char(string4)) # False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if not re.match(regex, string):\n        return False\n    else:\n        first_char = string[0]\n        last_char = string[-1]\n        return first_char == last_char"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    This function checks whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    elif string[0] == string[-1]:\n        return True\n    else:\n        return False\n\nstring = input('Enter a string: ')\n\nif check_char(string):\n    print(f'{string} starts and ends with the same character.')\nelse:\n    print(f'{string} does not start and end with the same character.')"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the string starts and ends with the same character\n    pattern = r'^(.)(.*)\\1$'\n    match = re.match(pattern, string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^([a-z]).*\\1$'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    # Define regex pattern to match the string\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n\n    # Check if the string matches the pattern\n    match = re.match(regex, string)\n\n    # If the string matches the pattern, return True\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 1:\n        return True\n    \n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function finds the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    # Find the median\n    if len(numbers) % 2 == 0:\n        # If there are even number of numbers, average the middle two numbers\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        # If there is only one middle number, return it\n        median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        # If there are two middle numbers, take their average\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1])/2\n    else:\n        # If there is only one middle number, take it\n        median = sorted_numbers[len(sorted_numbers)//2]\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median value\n    if len(sorted_numbers) % 2 == 0:\n        # If there are two middle numbers, take their average\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        # If there is only one middle number, take it as the median\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # Find the middle number(s) of the sorted numbers\n    if len(set(sorted_numbers)) == 1:\n        # If all three numbers are the same, the median is the same as the middle number\n        return sorted_numbers[1]\n    elif len(set(sorted_numbers)) == 2:\n        # If two of the three numbers are the same, the median is the average of the middle two numbers\n        return (sorted_numbers[1] + sorted_numbers[2])/2\n    else:\n        # If all three numbers are different, the median is the middle number\n        return sorted_numbers[1]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function finds the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median value.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    # Find the median value\n    if len(numbers) % 2 == 0:\n        # If there are two middle numbers, take the average\n        median = (numbers[len(numbers)//2-1] + numbers[len(numbers)//2])/2\n    else:\n        # If there is only one middle number, return it\n        median = numbers[len(numbers)//2]\n    # Return the median value\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    # Find the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    numbers = sorted([a, b, c])\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of the sum of digits of each number in the list.\n    '''\n    # create an empty list to store the sum of digits of each number\n    sum_list = []\n    # loop through each number in the input list\n    for num in nums:\n        # convert the number to a string to iterate through its digits\n        digits = str(num)\n        # initialize a variable to store the sum of digits\n        digit_sum = 0\n        # loop through each digit in the number string\n        for digit in digits:\n            # add the integer value of the digit to the digit_sum variable\n            digit_sum += int(digit)\n        # append the digit_sum to the sum_list\n        sum_list.append(digit_sum)\n    # return the sum_list\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num //= 10\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num //= 10\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of integers as input and returns the sum of digits of each number in the list.\n    '''\n    total = 0\n    for num in nums:\n        while num > 0:\n            total += num % 10\n            num = num // 10\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        total = 0\n        for digit in str(num):\n            total += int(digit)\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        sum_list.append(sum_digits)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        result.append(sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        sum_list.append(sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of digits of each number in the list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of digits of each number.\n    \"\"\"\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and performs the mathematical bitwise xor operation across them.\n    '''\n    # Initialize an empty list to store the bitwise xor result\n    result = []\n    \n    # Perform the bitwise xor operation on each element of the tuples and append the result to the list\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n        \n    # Return the list of bitwise xor results\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs bitwise XOR operation on their elements.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq = set()\n    for i in test_list:\n        if isinstance(i, tuple):\n            freq.add(i)\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        freq[tup] = freq.get(tup, 0) + 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(i) for i in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq_dict = {}\n    for tuple_item in test_list:\n        if tuple_item in freq_dict:\n            freq_dict[tuple_item] += 1\n        else:\n            freq_dict[tuple_item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        tup = ()\n        for j in range(len(test_tup1[i])):\n            tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result.append(tup)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0]), (test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (tuple(map(sum, zip(test_tup1[i], test_tup2[i]))), )\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (tuple(x + y for x, y in zip(test_tup1[i], test_tup2[i])),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        res_tup += (temp_tup,)\n    return res_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp_tup = ()\n        for i in range(len(tup1)):\n            temp_tup += (tup1[i] + tup2[i],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two arguments, a and b, and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns their minimum.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two arguments, first one is the tuple in which we want to check for the element,\n    and the second one is the element we want to search in the tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n\n    :param tuplex: the tuple to search for the element\n    :param tuple1: the tuple to search in\n    :return: True if the element is found, False otherwise\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(tuplex == tuple1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n    :param tuplex: Tuple in which we want to check for element.\n    :param tuple1: Element we want to check in the tuple.\n    :return: True if element exists in the tuple, else False.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input and returns True if the element exists in the first tuple, otherwise False.\n    '''\n    if tuple1.count(tuplex) > 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function returns True if the given number is odd and False if it is even.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as an input and returns whether it's odd or even.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even\")\n    else:\n        print(f\"{x} is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"The number {x} is even.\")\n    else:\n        print(f\"The number {x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    This function will check if the given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if the parity is odd, and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    # Initialize the next bigger number as None\n    next_bigger = None\n    # Loop over all possible pairs of adjacent digits\n    for i in range(len(digits) - 1):\n        if digits[i] < digits[i+1]:\n            # Swap the digits and create the next bigger number\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            next_bigger = int(''.join(digits))\n            # We can exit the loop since we found the next bigger number\n            break\n    # Return the next bigger number or None if we didn't find one\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Convert n to a string to manipulate its digits\n    n_str = str(n)\n\n    # Find the largest digit in n_str and its index\n    max_digit = max(n_str)\n    max_idx = n_str.index(max_digit)\n\n    # Swap the largest digit with the last digit in n_str\n    n_str_list = list(n_str)\n    n_str_list[max_idx], n_str_list[-1] = n_str_list[-1], n_str_list[max_idx]\n    n_str = ''.join(n_str_list)\n\n    # Convert n_str back to an integer and return it\n    return int(n_str)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Find the rightmost position where we can swap two digits\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    # If no such position exists, the number is already the largest possible\n    if i == 0:\n        return -1\n    # Swap the digits at the rightmost position and the digit just before it\n    digits[i-1], digits[i] = digits[i], digits[i-1]\n    # Sort the digits in descending order and concatenate them to form the next bigger number\n    bigger_digits = sorted(digits[i:], reverse=True)\n    next_bigger = int(''.join(str(digit) for digit in digits[:i] + bigger_digits))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the first index of the maximum digit\n    max_index = digits.index(max(digits))\n    \n    # Swap the maximum digit with the digit at index len(digits)-1\n    digits[max_index], digits[-1] = digits[-1], digits[max_index]\n    \n    # Sort the digits from index len(digits)-2 to 0\n    digits[max_index+1:] = sorted(digits[max_index+1:], reverse=True)\n    \n    # Convert the digits back to a number and return it\n    return int(\"\".join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # find the index of the rightmost non-9 digit\n    rightmost_non_9_index = len(digits) - 1\n    while rightmost_non_9_index >= 0 and digits[rightmost_non_9_index] == 9:\n        rightmost_non_9_index -= 1\n    \n    # if all digits are 9, return -1 (no next bigger number possible)\n    if rightmost_non_9_index < 0:\n        return -1\n    \n    # find the next non-9 digit to the right of the rightmost non-9 digit\n    next_non_9_index = rightmost_non_9_index + 1\n    while next_non_9_index < len(digits) and digits[next_non_9_index] == 9:\n        next_non_9_index += 1\n    \n    # if no next non-9 digit to the right of the rightmost non-9 digit, return -1 (no next bigger number possible)\n    if next_non_9_index >= len(digits):\n        return -1\n    \n    # swap the rightmost non-9 digit with the next non-9 digit to the right of it\n    digits[rightmost_non_9_index], digits[next_non_9_index] = digits[next_non_9_index], digits[rightmost_non_9_index]\n    \n    # sort the digits to the right of the rightmost non-9 digit in descending order\n    digits[rightmost_non_9_index+1:] = sorted(digits[rightmost_non_9_index+1:], reverse=True)\n    \n    # convert the list of digits back to an integer and return it\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string\n    n = str(n)\n\n    # Reverse the digits of the number\n    n_rev = n[::-1]\n\n    # Check if the reversed number is greater than the original number\n    if int(n_rev) > int(n):\n        return int(n_rev)\n\n    # Find the next permutation of the digits of the original number\n    digits = list(map(int, n))\n    i = len(digits) - 1\n    while i > 0 and digits[i-1] >= digits[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    digits[i:] = digits[len(digits)-1:i-1:-1]\n    n_perm = \"\".join(map(str, digits))\n\n    # Check if the permuted number is greater than the original number\n    if int(n_perm) > int(n):\n        return int(n_perm)\n\n    # If no greater number can be obtained, return -1\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # convert the number to a string for easier manipulation\n    n_str = str(n)\n    \n    # initialize variables to keep track of the next bigger number\n    next_bigger = None\n    max_num = None\n    \n    # loop through all possible permutations of the digits\n    for i in range(len(n_str)):\n        for j in range(i+1, len(n_str)):\n            # swap the digits at positions i and j\n            swapped_str = n_str[:i] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]\n            swapped_num = int(swapped_str)\n            \n            # check if the swapped number is bigger than the current max and not equal to the original number\n            if swapped_num > n and (max_num is None or swapped_num > max_num):\n                max_num = swapped_num\n                next_bigger = swapped_num\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_len = len(n)\n    if n_len == 1:\n        return -1\n    for i in range(n_len-1):\n        if n[i] < n[i+1]:\n            j = i+1\n            while j < n_len and n[j] > n[i]:\n                j += 1\n            if j == n_len:\n                return -1\n            else:\n                n = n[:i] + n[j] + n[i+1:j] + n[i] + n[j+1:]\n                return int(n)\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string and split it into digits\n    digits = [int(d) for d in str(n)]\n\n    # Initialize variables for the next bigger number and its digits\n    bigger = None\n    bigger_digits = None\n\n    # Iterate over all possible permutations of the digits\n    for perm in permutations(digits):\n        # Check if the current permutation is greater than the original number\n        if int(''.join(str(d) for d in perm)) > n:\n            # If it is, update the next bigger number and its digits\n            bigger = int(''.join(str(d) for d in perm))\n            bigger_digits = perm\n\n    # If there is a next bigger number, return it along with its digits\n    if bigger is not None:\n        return bigger, bigger_digits\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string and a list of digits\n    n_str = str(n)\n    n_list = list(n_str)\n\n    # find the index of the last digit\n    last_index = len(n_list) - 1\n\n    # loop through the list and find the first digit to swap\n    for i in range(last_index):\n        if n_list[i] < n_list[i+1]:\n            # swap the digits and convert back to an integer\n            n_list[i], n_list[i+1] = n_list[i+1], n_list[i]\n            next_bigger = int(''.join(n_list))\n            return next_bigger\n\n    # if no swap is possible, return -1 (indicating the end of the sequence)\n    return -1"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n    heapq.heapify(pairs)\n    return heapq.nsmallest(k, pairs)\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k)) # Output: [(1, 2), (1, 4), (1, 6)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n\n    # Create a min-heap of pairs (num1, num2) where num1 is from nums1 and num2 is from nums2\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(heap, pair)\n\n    # Extract k smallest pairs from heap and return as a list\n    for i in range(k):\n        pairs.append(heapq.heappop(heap))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    \n    for num in nums1:\n        heapq.heappush(heap, (num, nums2[0]))\n    \n    for i in range(k):\n        pair = heapq.heappop(heap)\n        pairs.append(pair)\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n    return heapq.nsmallest(k, heap)"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heapq.heapify(pairs)\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (num1 + num2, num1, num2))\n            else:\n                heapq.heappushpop(pairs, (num1 + num2, num1, num2))\n    return sorted(pairs, key=lambda x: x[0])[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        for num2 in nums2:\n            pair = (num, num2)\n            if len(pairs) < k:\n                heapq.heappush(pairs, pair)\n            else:\n                if pair > pairs[0]:\n                    heapq.heappop(pairs)\n                    heapq.heappush(pairs, pair)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (abs(num1 - num2), num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num+num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [(x[1], x[2]) for x in heap]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num+num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1:])\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')  # initialize a very large number as the minimum product\n    \n    for tup in list1:\n        for tup2 in list1:\n            if tup!= tup2:\n                product = tup[0] * tup[1] * tup2[0] * tup2[1]  # calculate the product of the tuples\n                if product < min_product:\n                    min_product = product  # update the minimum product if needed\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product to infinity\n    min_product = float('inf')\n    \n    # iterate over pairs of tuples in list1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # compute the product of the two tuples and update min_product if necessary\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                \n    # return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < list1[j][0] * list1[i][1]:\n                min_product = min(min_product, list1[i][0] * list1[j][1])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if min_product is None or product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous values and returns the minimum value in the list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(lst):\n    '''\n    This function takes a heterogeneous list as input and returns the minimum value in the list.\n    '''\n    min_val = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    This function finds the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_num = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_num:\n                min_num = listval[i]\n        return min_num"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(lst):\n    '''\n    This function finds the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value variable to be the first element of the list\n    min_val = lst[0]\n    # Loop through the list starting from the second element\n    for i in range(1, len(lst)):\n        # If the current element is smaller than the minimum value variable, update the minimum value variable\n        if lst[i] < min_val:\n            min_val = lst[i]\n    # Return the minimum value variable\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = re.findall(r'[a-zA-Z]+', word)\n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0]]\n    for word in words[1:]:\n        camel_case_words.append(word.capitalize())\n    # Join the words into a camel case string\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the given word using \"_\" as the delimiter\n    words = word.split(\"_\")\n    \n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    \n    # Join the words with the first letter of each word capitalized\n    camel_case_word = \"\".join([word.capitalize() for word in words])\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function converts the given snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = re.findall(r'[a-zA-Z]+', word)\n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0].lower()]\n    for word in words[1:]:\n        camel_case_words.append(word.capitalize())\n    # Join the words back to a camel case string\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Converts the given snake case string to camel case string.\n\n    Args:\n    word (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string converted from the snake case string.\n    \"\"\"\n\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Convert the first letter of each word to uppercase and join them back\n    camel_case_word = ''.join(word.capitalize() for word in words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word by underscore and get all the parts\n    parts = word.split(\"_\")\n    # Convert the first letter of each part to upper case\n    parts = [part.capitalize() for part in parts]\n    # Join all the parts together with the first letter of the original word\n    camel_case_word = \"\".join(parts)\n    # Convert the first letter of the original word to lower case\n    camel_case_word = camel_case_word[0].lower() + camel_case_word[1:]\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as an input and returns a new list with all odd numbers removed.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function removes all odd numbers from the given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list of numbers as input and returns a new list with all the odd numbers removed.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    Parameters:\n        lst (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        The nth element from the list of tuples.\n\n    \"\"\"\n    return lst[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and extracts the nth element from each tuple.\n    '''\n    result = []\n    for tpl in list1:\n        result.append(tpl[n-1])\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from the given list of tuples.\n    '''\n    return lst[n-1][n-1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n] for tup in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \"\"\"\n    # Create a list of the n-th elements\n    nth_elements = [elem[n-1] for elem in list1]\n    \n    return nth_elements"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in lst]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \"\"\"\n    return lst[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in list1 exists in list2,\n    otherwise it returns False.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    This function takes two lists as arguments and checks whether any value in the first list exists in the second list or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as inputs and returns True if any value in list1 exists in list2,\n    and False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n    list1 (list): A sequence to check for overlaps.\n    list2 (list): A sequence to check for overlaps.\n\n    Returns:\n    bool: True if any value in list1 exists in list2, False otherwise.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function returns True if any value in list1 exists in list2, otherwise it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns True if there is an overlap\n    between the two sequences, otherwise it returns False.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two lists as input and checks whether any value in the first list exists in the second list or not.\n    Returns True if there is an overlap, otherwise returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(n):\n        for j in range(i + 1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes an array of integers as input and returns the maximum product of two integers from the array.\n    \"\"\"\n    max_product = float('-inf')  # initialize max_product to negative infinity\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            product = arr[i] * arr[j]  # calculate the product of two numbers from the array\n            if product > max_product:  # update max_product if the product is greater than the previous max_product\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    return max_pair, max_product\n\narr = [2, 4, 6, 8, 10]\nprint(\"Maximum product pair: \", max_Product(arr))"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a pair with the highest product.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result = (arr[i], arr[j])\n    return result"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = max3 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return max(max1*max2*max3, max1*min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max1 = -1\n    max2 = -1\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max1 = arr[i]\n                max2 = arr[j]\n    \n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for i in range(n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n            \n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n    return (max1-1)*(max2-1)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf') # initialize max1 and max2 to negative infinity\n    min1 = min2 = float('inf') # initialize min1 and min2 to positive infinity\n    \n    for num in arr:\n        if num > max1:\n            max1, max2 = num, max1\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min1, min2 = num, min1\n        elif num < min2:\n            min2 = num\n            \n    return max(max1*max2, min1*min2) # return the maximum product of max1 and max2 and min1 and min2"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    groups = {}\n    for tup in Input:\n        first_element = tup[0]\n        if first_element in groups:\n            groups[first_element].append(tup)\n        else:\n            groups[first_element] = [tup]\n    return list(groups.values())"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tup in Input:\n        if tup[0] in result:\n            result[tup[0]].append(tup[1:])\n        else:\n            result[tup[0]] = [tup[1:]]\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = None\n    for t in Input:\n        if common_first is None:\n            common_first = t[0]\n        elif common_first!= t[0]:\n            return None\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if len(common_elements) == 0:\n            common_elements.append(i[0])\n        else:\n            if i[0] not in common_elements:\n                common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = Input[0][0]  # assume first tuple has the common element\n    for tup in Input:\n        if tup[0]!= common_element:\n            return None  # if any tuple has a different first element, return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for t in Input:\n        if common_first_element is None:\n            common_first_element = t[0]\n        else:\n            if t[0]!= common_first_element:\n                return None\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple_ in Input:\n        if common_element is None:\n            common_element = tuple_[0]\n        elif common_element!= tuple_[0]:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns the common first element in the tuples.\n    '''\n    first_elements = set(tuple[0] for tuple in Input)\n    if len(first_elements) > 1:\n        return \"There are multiple common first elements in the tuples.\"\n    else:\n        return first_elements.pop()"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = Input[0][0]\n    for tpl in Input:\n        if tpl[0]!= common_element:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    # Create an empty dictionary to store the tuples\n    d = {}\n    # Iterate over each tuple in the input list\n    for tup in Input:\n        # Check if the first element of the tuple is already in the dictionary\n        if tup[0] in d:\n            # If the first element is already present, append the tuple to the list of tuples with the same first element\n            d[tup[0]].append(tup)\n        else:\n            # If the first element is not present, create a new key in the dictionary with the first element as the key and initialize a new list with the tuple as the value\n            d[tup[0]] = [tup]\n    # Return the dictionary\n    return d"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_max(lst):\n    \"\"\"\n    Find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list \n    with maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(str(ele)) > max_len:\n            max_len = len(str(ele))\n            max_ele = ele\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(max(lst, key=len))\n    for i in lst:\n        if len(i) == max_length:\n            return i"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max(lst):\n    '''\n    This function takes a list as an argument and returns the element of the list with the maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    max_elem = [elem for elem in lst if len(elem) == max_len]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(list(map(round, list1)))\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    total_sum_times_len = total_sum * len(rounded_list)\n    print(total_sum_times_len)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n*2, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of the cubes of the first 'n' even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count ** 3\n        count += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_sum(n):\n    \"\"\"\n    Returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    return sum(i ** 3 for i in range(2, n*2, 2))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    # Initialize the sum to zero\n    sum_of_cubes = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, 2*n, 2):\n        # Add the cube of the current number to the sum\n        sum_of_cubes += i**3\n    \n    # Return the sum of cubes\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_of_cubes = 0\n    even_num = 0\n    \n    # Loop through first n even natural numbers\n    for i in range(1, n+1):\n        even_num += 2\n        sum_of_cubes += even_num**3\n    \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function will find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(5))  # Output: 225"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize the sum variable to 0\n    cube_sum = 0\n\n    # Loop through first n even natural numbers\n    for i in range(2, n*2, 2):\n        # Add the cube of the even natural number to the sum\n        cube_sum += i**3\n\n    # Return the sum of cubes\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): A tuple of strings to be concatenated.\n    delimiter (str): A string delimiter to be used for concatenation.\n\n    Returns:\n    str: A concatenated string.\n\n    \"\"\"\n    result = \"\"\n    for word in test_tup:\n        result += word + delimiter\n    return result.strip(delimiter)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result.rstrip(delimiter)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple and a delimiter as arguments and returns a new tuple with each element of the original tuple concatenated by the delimiter.\n    '''\n    result = ()\n    for i in test_tup:\n        result += (str(i) + delimiter,)\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1] # remove the last delimiter"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            result += str(test_tup[i])\n        else:\n            result += str(test_tup[i]) + delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    This function takes a tuple as input and returns a concatenated string of all the elements of the tuple.\n    The string is concatenated by the delimiter provided as input.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    This function takes a tuple as input and concatenates each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    return delimiter.join(test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_average_of_cubes(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as an input and returns the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum and count variables\n    sum = 0\n    count = 1\n\n    # Iterate until count reaches n\n    while count <= n:\n        # Calculate cube of count and add it to the sum\n        sum += count ** 3\n        count += 1\n\n    # Calculate the average of the sum and return the result\n    return sum / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_cube = 0\n    for i in range(1, n+1):\n        total_cube += i**3\n    average_cube = total_cube / n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes in an integer n and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # cube the number\n        cube = i ** 3\n        # add cube to sum\n        sum += cube\n    \n    # find average of cubes of first n natural numbers\n    average = sum / n\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n)"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_average_of_cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    # initialize the sum and count variable\n    sum = 0\n    count = 0\n\n    # iterate over first n natural numbers\n    for i in range(1, n+1):\n        # find the cube of the number and add to the sum\n        cube = i ** 3\n        sum += cube\n        count += 1\n\n    # calculate the average of cubes\n    average = sum / count\n\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = [len(s)-1 for s in test_tuple]\n    rear_elements = [s[i] for s, i in zip(test_tuple, rear_indices)]\n    return tuple(rear_elements)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    rear_index = len(test_tuple[0]) - 1 # assume all strings in the tuple have the same length\n    rear_tuple = tuple(s[rear_index] for s in test_tuple)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple = rear_tuple + (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return tuple(rear_list)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for i in test_tuple:\n        rear_tuple += (i[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        result.append(i[::-1][0])\n    return tuple(result)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = tuple(string[-1] for string in test_tuple)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for word in test_tuple:\n        rear_tuple += (word[-1],)\n    return rear_tuple"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    This function takes a list and an element as input and returns the count of sublists \n    containing the given element.\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            count += count_element_in_list(lst[i], x)\n        elif lst[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes a list as input and returns the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        else:\n            if list1[i] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if isinstance(list1[i], list): \n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        for j in range(len(list1[i])): \n            if list1[i][j] == x: \n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sub_list = list1[i]\n        if x in sub_list:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Filter out odd numbers from a list of numbers.\n    \n    :param nums: a list of numbers\n    :type nums: list\n    \n    :return: a list of odd numbers\n    :rtype: list\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use a regular expression to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        # Extract the year, month and day from the matched groups\n        year, month, day = match.groups()\n        # Format the new date as dd-mm-yyyy\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy, mm, dd = map(int, re.findall('\\d+', dt))\n    new_date = '{}-{}-{}'.format(dd, mm, yyyy)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Using regular expression to extract date parts\n    parts = re.findall(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    # Reversing the order of the parts\n    parts = [parts[0][2], parts[0][1], parts[0][0]]\n    # Joining the parts with the separator '-'\n    formatted_date = '-'.join(parts)\n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    try:\n        # Use regular expression to split the date into day, month and year\n        day, month, year = re.findall(r'\\d+', dt)\n\n        # Rearrange the date in dd-mm-yyyy format\n        new_dt = '-'.join([day, month, year])\n\n        return new_dt\n    \n    except ValueError:\n        print(\"Invalid date format. Please enter date in yyyy-mm-dd format.\")"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Split the date into year, month, and day\n    year, month, day = map(int, re.findall(r'\\d+', dt))\n\n    # Convert year, month, and day to dd-mm-yyyy format\n    new_dt = '{:02d}-{:02d}-{}'.format(day, month, year)\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    :param dt: string representing a date in yyyy-mm-dd format\n    :return: string representing the same date in dd-mm-yyyy format\n    \"\"\"\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Using regex to match the pattern of yyyy-mm-dd format\n    pattern = re.compile(r'^(\\d{4})-(\\d{2})-(\\d{2})$')\n    match = pattern.match(dt)\n    # If the pattern is matched, change the format to dd-mm-yyyy and return the result\n    if match:\n        year, month, day = match.groups()\n        new_dt = '-'.join([day, month, year])\n        return new_dt\n    else:\n        return 'Invalid date format. Please use yyyy-mm-dd format.'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    This function sorts the given array using shell sort algorithm.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Sorts the given array using shell sort algorithm.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    This function takes an array as input and sorts it using shell sort algorithm.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Function to sort the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n                \n            my_list[j] = temp\n            \n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function takes an array as an input and sorts it using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] and test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract the elementwise AND tuples from the given two tuples.\n\n    Args:\n    test_tup1: a tuple of integers\n    test_tup2: a tuple of integers\n\n    Returns:\n    A tuple of tuples containing the elementwise AND values.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i],))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Create an empty list to store the elementwise and tuples\n    result = []\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through the second tuple\n        for j in range(len(test_tup2)):\n            # Check if the current elements of the tuples are True\n            if test_tup1[i] and test_tup2[j]:\n                # Append the current and tuple to the result list\n                result.append((test_tup1[i], test_tup2[j]))\n    # Return the result list\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with element-wise logical AND operation between corresponding elements of the input tuples.\n    \"\"\"\n    result_tup = tuple(i and j for i,j in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"The equation has no real roots.\"\n    else:\n        x = (-b + delta**0.5)/(2*a)\n        return x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # calculate the discriminant\n    d = b ** 2 - 4 * a * c\n    \n    # check if discriminant is negative\n    if d < 0:\n        return None\n    \n    # calculate the roots of the equation\n    root1 = (-b + d ** 0.5) / (2 * a)\n    root2 = (-b - d ** 0.5) / (2 * a)\n    \n    # return the root that is between -1 and 1\n    if -1 <= root1 <= 1:\n        return root1\n    elif -1 <= root2 <= 1:\n        return root2\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d == 0:\n        x = -b / (2*a)\n        return x\n    elif d > 0:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        return (x1, x2)\n    else:\n        return \"Imaginary Roots\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        return \"Not a parabola\"\n    else:\n        directrix = -b / (2 * a)\n        return directrix"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d >= 0:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return x1, x2\n    else:\n        return \"The parabola has no real directrix.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be zero.\")\n    else:\n        directrix = -b / (2 * a)\n        return directrix"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"Cannot find the directrix of a line\"\n    else:\n        x = -b / (2 * a)\n        return x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Finds the directrix of a parabola given its coefficients.\n\n    Args:\n        a (float): The coefficient of the x^2 term.\n        b (float): The coefficient of the x term.\n        c (float): The constant term.\n\n    Returns:\n        float: The x-coordinate of the directrix.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the x-coordinate of the directrix\n        x = (-b + discriminant**0.5) / (2*a)\n        return x\n    else:\n        raise ValueError(\"The parabola has no real directrix.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d < 0:\n        return None\n    else:\n        x = (-b + d**0.5)/(2*a)\n        return x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return x\n    else:\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1).intersection(set(list2)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element, otherwise it returns False.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes three parameters:\n    base1: The length of the first base of the trapezium.\n    base2: The length of the second base of the trapezium.\n    height: The height of the trapezium.\n    \n    It returns the median length of the trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the median length of the trapezium\n    median = area / (base1 + base2)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculates the median length of a trapezium given its bases and height.\n    '''\n    # Calculate the median\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the median length\n    length = 2 * area / median\n    \n    return length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = ((base1 + base2) / 2) * height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the median of the two bases\n    median = (base1 + base2) / 2\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the median length of the trapezium\n    median_length = 2 * area / (base1 + base2)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median\n    median = (base1 + base2) / 2\n    \n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # find the length of the median\n    median_length = area / median\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments: base1, base2, and height.\n    base1 and base2 are the lengths of the two parallel sides of the trapezium.\n    height is the height of the trapezium.\n    The function returns the median length of the trapezium.\n    '''\n    if base1 > base2:\n        base1, base2 = base2, base1\n    area = (base1 + base2) / 2 * height\n    median = area / (base1 + base2)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median length of the trapezium\n    median = (base1 + base2) / 2\n    # calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    # calculate the median length of the trapezium\n    median_length = 2 * area / (base1 + base2)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes three parameters: base1, base2 and height of a trapezium.\n    It returns the median length of the trapezium.\n    \"\"\"\n    # Find the semi-perimeter of the trapezium\n    s = (base1 + base2) / 2\n    # Find the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # Find the median length of the trapezium\n    median = (2 * area) / s\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the median length of the trapezium\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the median area of the trapezium\n    median_area = area / 2\n    \n    # Return the median length of the trapezium\n    return median, median_area"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(f\"{number} is greater than {element}.\")\n            return True\n    print(f\"{number} is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and returns True if the number is greater than the elements of the array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if number > i:\n            print(f\"{number} is greater than {i}\")\n            return True\n    print(f\"{number} is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and returns True if the number is greater than all the elements of the array and False otherwise.\n    '''\n    for i in arr:\n        if i <= number:\n            return False\n    return True"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    if n < 0:\n        n = -n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Find the last digit of the given number\n    last_digit = n % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    # Check if n is negative\n    if n < 0:\n        # If n is negative, find the last digit of its absolute value\n        return last_Digit(abs(n))\n    else:\n        # If n is positive, return the last digit of n\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of that number.\n    '''\n    if n < 0:\n        n *= -1\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n        last_digit = n % 10\n    else:\n        last_digit = n % 10\n    \n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    if n < 0:\n        n = abs(n)\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list with only the negative numbers.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function will return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of negative numbers.\n    \"\"\"\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing the negative numbers from the input list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from a given list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes all the odd characters from a given string.\n    \"\"\"\n    return ''.join(char for i, char in enumerate(string) if i % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and removes all the odd characters from it.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all the odd characters from a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes in a string and removes all the odd characters from it.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and removes all odd characters from it.\n    '''\n    return ''.join(filter(lambda x: int(x) % 2 == 0, str1))"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                    count += 1\n    \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs in the given list of tuples.\n    A tuple pair is bidirectional if the first element of one tuple is equal to the second element of the other tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in [(x, y) for x, y in zip(test_list[i+1:], test_list[j+1:])]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]) or \\\n               (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list as input and counts the number of bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                if (test_list[i], test_list[j]) in test_list:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][1] and test_list[i][1] > test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuples in a list of tuples.\n    A tuple is bidirectional if its elements are in the same order in both tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the variable to store the result\n    result = 0\n    \n    # Iterate over each element in the list\n    for num in L:\n        # Multiply the current element with the result\n        result *= num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    This function takes a list of integers and returns a single integer that is the result of joining the integers in the list.\n    \"\"\"\n    # Join the integers in the list using the sum() function\n    result = sum(L)\n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = int(''.join(str(num) for num in L))\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the sentence using regular expression\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # If there are no adverbs, return None\n    if not adverbs:\n        return None\n\n    # Find the position of the first adverb in the sentence\n    position = text.find(adverbs[0])\n\n    # Return the position and the first adverb\n    return position, adverbs[0]"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all adverbs using regex\n    adverbs = re.findall(r'\\b(?:about|above|across|after|against|along|amid|among|around|as|at|before|behind|below|beneath|beside|between|beyond|but|by|concerning|considering|despite|down|during|except|following|for|from|in|inside|into|like|near|of|off|on|onto|opposite|out|outside|over|past|regarding|round|since|than|through|throughout|till|to|toward|under|underneath|until|up|upon|versus|via|with|within|without)\\b', text)\n    # check if any adverbs were found\n    if adverbs:\n        # find the position of the first adverb\n        pos = text.find(adverbs[0])\n        # return the adverb and its position\n        return f\"{adverbs[0]} is the first adverb in the sentence and its position is {pos}\"\n    else:\n        # return a message if no adverbs were found\n        return \"No adverbs found in the sentence\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = re.compile(r'\\b(very|extremely|quite|really|rather|very much|really well|quite well)\\b')\n    match = pattern.search(text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = re.compile(r\"\\b(very|extremely|really|quite|rather|really|really well|amazingly|incredibly|really well)\\b\")\n    match = pattern.search(text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    \n    # If no adverbs found, return None\n    if not adverbs:\n        return None\n    \n    # Find the first adverb and its position in the sentence\n    first_adverb = adverbs[0]\n    first_adverb_pos = text.find(first_adverb)\n    \n    return {'adverb': first_adverb, 'position': first_adverb_pos}"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb: {match.group()}, Position: {match.start()}\")"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression to match adverbs\n    pattern = r'\\b(very|quite|really|very well|extremely|really well|really nicely|absolutely|truly|perfectly|utterly|positively|perfectly)\\b'\n    # Find all matches of the regular expression in the text\n    matches = re.finditer(pattern, text)\n    # If no matches found, return None\n    if not matches:\n        return None\n    # Extract the first match and its position\n    match = next(matches)\n    start_pos = match.start()\n    end_pos = match.end()\n    # Return the adverb and its positions as a tuple\n    return (text[start_pos:end_pos], (start_pos, end_pos))"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as an argument and returns the position of the first adverb in the sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    else:\n        return \"No adverb found in the sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns the position of the first adverb in the sentence.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        adverb_position = match.start()\n        print(\"The first adverb is '{}' and its position is {}.\".format(adverb, adverb_position))\n    else:\n        print(\"No adverb found in the given sentence.\")"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns its surface area.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function calculates the surface area of a cube of a given size.\n\n    Parameters:\n    l (float): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns its surface area.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function calculates the surface area of a cube.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a cube length as input and returns its surface area.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / total"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for num in list1:\n        if num < 0 and abs(num) > largest:\n            largest = abs(num)\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < largest_num and num < 0:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None  # initialize largest to None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num  # update largest if num is negative and larger than current largest\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf') #initializing the largest variable to negative infinity\n    for num in list1:\n        if num < largest: #if the current number is smaller than the largest, update the largest to the current number\n            largest = num\n    return largest #return the largest negative number found in the list"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    If there are no negative numbers in the list, it returns None.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    if largest_num == float('-inf'):\n        return \"None of the numbers in the list are negative.\"\n    else:\n        return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function returns the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]  # initialize max_neg to the first element of the list\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num  # update max_neg if a negative number is found that is larger than the current max_neg\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    If there are no negative numbers in the list, it returns None.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0], x[1][K:]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tpl in test_list:\n        trimmed_tpl = tuple(tpl[i] for i in range(K))\n        trimmed_list.append(trimmed_tpl)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[K+1:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        result.append((tpl[0], tpl[1][K:]))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        result.append(trimmed_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0][K:], x[1][K:]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for elem in tup:\n            if isinstance(elem, str):\n                trimmed_tup += (elem[:K],)\n            else:\n                trimmed_tup += (elem,)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for t in test_list:\n        trimmed_list.append(tuple(t[K:]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = []\n        for i in range(len(tup)):\n            if i >= K and i < len(tup) - K:\n                trimmed_tup.append(tup[i])\n        trimmed_list.append(tuple(trimmed_tup))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[-K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Counts the occurrence of all elements of lst in tup.\n    \"\"\"\n    counter = Counter(lst)\n    return tuple((k, tup.count(k)) for k in lst)"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    res = []\n    for i in tup:\n        res.append(cnt[i])\n    return res"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Count the occurrence of all elements of lst in tup.\n\n    :param tup: tuple of elements to search\n    :param lst: list of elements to count\n    :return: dictionary of elements and their occurrences in lst\n    \"\"\"\n    counter = Counter(lst)\n    result = {}\n    for elem in tup:\n        if elem in counter:\n            result[elem] = counter[elem]\n        else:\n            result[elem] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return count.items()"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two parameters:\n    1. Tuple tup: A tuple of elements\n    2. List lst: A list of elements\n    It returns a dictionary containing the count of all elements in the list as values and their corresponding elements as keys.\n    '''\n    count = Counter(lst)\n    result = {}\n    for key in count:\n        if key in tup:\n            result[key] = count[key]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)  # Count the occurrence of each element of list in a dictionary\n    result = []\n    for element in tup:\n        if element in count:\n            result.append(count[element])  # Append the count of each element in the tuple to the result list\n        else:\n            result.append(0)  # If the element is not in the list, append 0 to the result list\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in lst:\n        if i in tup:\n            count_dict[i] = tup.count(i)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function counts the occurrence of all elements of lst in the tuple tup.\n    '''\n    count = Counter(tup) \n    return [count[i] for i in lst]"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in a tuple and a list as input. \n    It returns a dictionary that contains the count of all elements of the list in the tuple. \n    '''\n    count_dict = Counter(lst)\n    for element in tup:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary \n    where the keys are the elements of the list and the values are the number of \n    times they occur in the tuple.\n    '''\n    c = Counter(tup)\n    count_dict = {}\n    for i in lst:\n        if i in c:\n            count_dict[i] = c[i]\n        else:\n            count_dict[i] = 0\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of cubes of individual elements in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubed_nums = []\n    for num in nums:\n        cubed_nums.append(num**3)\n    return cubed_nums"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of their cubes.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as an input and returns a list of the cubes of the individual elements.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers and returns a list of cubes of individual elements in the given list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of Perrin numbers up to n.\n    '''\n    perrin = [1, 2]\n    total = 3\n    \n    while len(perrin) <= n:\n        next_perrin = perrin[-1] + perrin[-2]\n        perrin.append(next_perrin)\n        total += next_perrin\n        \n    return total"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [1, 1] #initialize the list with the first two perrin numbers\n    s = 2 #initialize the sum to 2\n    for i in range(2, n): #start the loop from 2 to n-1\n        p.append(p[i-1]+p[i-2]) #calculate the next perrin number and append to the list\n        s += p[i] #add the perrin number to the sum\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(1, n+1):\n        p += i * (3*i-1) // 2\n    return p"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*(i+1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [0, 1]\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            p.append(p[i-1] + p[i-2])\n        return p[n]"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    This function calculates the sum of perrin numbers.\n    '''\n    result = 0\n    p = 1\n    while p <= n:\n        result += p\n        p = p * 2 - 1\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through the numbers from 1 to n and add each perrin number to the sum\n    for i in range(1, n+1):\n        if i % 2 == 0 or i % 3 == 0:\n            sum += i\n            \n    # Return the final sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    \"\"\"\n    This function calculates the sum of perrin numbers up to n.\n    \"\"\"\n    if n == 0: \n        return 0\n    else: \n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (i-1)\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    if len(str_list) % size!= 0:\n        raise ValueError(\"Length of list is not divisible by size.\")\n    else:\n        result_list = []\n        for i in range(0, len(str_list), size):\n            result_list.append(str_list[i:i+size])\n        return result_list\n"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(l[i:i+str])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a list of strings from a given list of string values of a specified size.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified number of strings of a given size from a list of strings.\n\n    :param str_list: A list of strings.\n    :param size: An integer representing the desired size of each extracted string.\n    :return: A list of extracted strings.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(l[i:i+str])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings as input and a size as an argument.\n    It then extracts the specified size of strings from the list and returns them in a new list.\n    '''\n    result_list = []\n    for string in str_list:\n        if len(string) == size:\n            result_list.append(string)\n    return result_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(''.join(l[i:i+str]))\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove whitespaces\n    new_text = re.sub('\\s+', '', text1)\n    return new_text"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes actual cost and sale amount as input and returns loss amount if the sale has loss else 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes actual cost and sale amount as arguments and returns the loss amount if sale amount is less than actual cost, otherwise it returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments, actual_cost and sale_amount.\n    actual_cost: The actual cost of the item before sale.\n    sale_amount: The amount of the item sold.\n    If the actual_cost is greater than or equal to sale_amount, then it means there is no loss amount.\n    Otherwise, the loss amount is equal to the difference between actual_cost and sale_amount.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Returns the loss amount on a sale if the given sale amount has loss, else returns 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the loss amount on a sale if the given amount has loss else return 0.\n    :param actual_cost: The actual cost of the item before the sale\n    :param sale_amount: The amount of the item sold\n    :return: The loss amount on the sale if the sale has a loss, else 0\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function takes the actual cost and the sale amount as input and returns the loss amount if the sale amount has loss else returns 0.\n    \"\"\"\n    loss_percent = (sale_amount - actual_cost) / actual_cost * 100\n    if loss_percent < 0:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate loss amount on sale if sale amount is greater than actual cost, else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on a sale.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of all even factors of 'n'\n    \"\"\"\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n//i:\n                factors.append(n//i)\n    even_factors = [f for f in factors if f % 2 == 0]\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function finds the sum of even factors of a number.\n    '''\n    # Find the sum of even factors of the given number\n    even_factors_sum = 0\n    \n    # Loop through all the numbers from 1 to the square root of the given number\n    for i in range(1, int(math.sqrt(n))+1):\n        \n        # Check if the number is a factor of the given number\n        if n % i == 0:\n            \n            # If the number is a factor, check if it's even and add it to the sum if it is\n            if i % 2 == 0:\n                even_factors_sum += i\n                \n            # If the number is a factor and also even, add the factor to the sum\n            if n // i == i:\n                even_factors_sum += n // i\n                \n            # If the number is a factor but not even, add the factor to the sum\n            else:\n                even_factors_sum += n // i + i\n                \n    return even_factors_sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all even factors of that number.\n    \"\"\"\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    sum_factors = sum(filter(lambda x: x % 2 == 0, factors))\n    return sum_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all even factors of n.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                sum_of_factors += i\n            else:\n                sum_of_factors += i\n                sum_of_factors += n//i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Find the sum of even factors of a number.\n    \"\"\"\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    even_factors = [x for x in factors if x % 2 == 0]\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bz\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    return pattern.findall(text)"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in the text.\n    '''\n    # Regular expression to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    # Find all matches in the text using the regular expression\n    matches = re.findall(pattern, text)\n    # Return the matches as a list\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # Define a pattern to match words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and matches a word containing 'z'.\n    '''\n    # Using regular expression to match words containing 'z'\n    pattern = re.compile(r'\\b[a-zA-Z]+z[a-zA-Z]*\\b')\n    # Finding all matches in the string and returning as a list\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in the input text.\n    '''\n    # Use regular expression to match words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    \n    # Return the matching words\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z' in the given text.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found.'"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function will match a word containing the letter \"z\" in the given text.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"This month has 30 days.\")\n    elif monthnum == 2:\n        print(\"This month has 28 days (except for leap years).\")\n    else:\n        print(\"This month has 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return \"Invalid month number\"\n\nmonthnum = int(input(\"Enter the month number (1-12): \"))\nprint(check_monthnumb_number(monthnum))"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"Month number\", monthnum2, \"contains 30 days.\")\n    elif monthnum2 == 2:\n        print(\"Month number\", monthnum2, \"contains 28 or 29 days.\")\n    else:\n        print(\"Month number\", monthnum2, \"contains 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check whether a given month number has 31 days.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        raise ValueError(\"Invalid month number: {}\".format(monthnum))"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes in a month number as an argument and returns True if the month number contains 31 days, False otherwise.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number and checks whether it contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Month number must be between 1 and 12\""
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days, False otherwise.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublst = lst[i]\n    return min_sublst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_sublist(lst):\n    '''\n    This function takes a list as an argument and returns the sublist with minimum length.\n    '''\n    min_len = len(lst[0]) # initialize min_len to the length of the first sublist\n    min_sublist = lst[0] # initialize min_sublist to the first sublist\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min(lst):\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublst in lst:\n        if len(sublst) < min_len:\n            min_len = len(sublst)\n            min_lst = sublst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = i\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst[1:]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    \n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes the length and breadth of a rectangle and returns its area.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(length, width):\n    '''\n    This function takes the length and width of a rectangle and returns its area.\n    '''\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as inputs and returns the area of the rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as input parameters and returns the area of the rectangle.\n    \"\"\"\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings using regular expression\n    uppercase_substrings = re.findall('[A-Z][^A-Z]*', str1)\n\n    # Replace uppercase substrings with empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    # Return modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Create a regular expression pattern that matches any uppercase letters\n    pattern = re.compile('[A-Z]+')\n    \n    # Use the pattern to find all matches in the string\n    matches = pattern.findall(str1)\n    \n    # Loop over each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Use regular expression to match all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Convert the uppercase substrings to lowercase and replace them in the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, substring.lower())\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a new list with the first element of each sublist.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list\n    with the first element of each sublist.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a list of the first element of each sublist in the input list.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst: \n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the count of uppercase characters in it.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the count of uppercase characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as input and returns the count of uppercase characters in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Returns the number of uppercase characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and counts the number of upper case characters in it.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n    \"\"\"\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst]\n    else:\n        result = []\n        for i in range(len(lst)):\n            rest = lst[:i] + lst[i+1:]\n            for c in combinations_list(rest):\n                result.append([lst[i]] + c)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    if len(lst) == 1:\n        return [lst]\n    else:\n        comb_lst = []\n        for i in range(len(lst)):\n            rest = lst[:i] + lst[i+1:]\n            for c in combinations_list(rest):\n                comb_lst.append([lst[i]] + c)\n        return comb_lst"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(list1[i] + list1[j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    \"\"\"\n    n = len(lst)\n    res = []\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if i & (1<<j):\n                combo.append(lst[j])\n        res.append(combo)\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function finds all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst) + 1):\n        result += list(map(''.join, itertools.combinations(lst, i)))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns all possible combinations of the elements of a given list.\n    \"\"\"\n    if len(lst) == 0:\n        return []\n\n    result = []\n    for i in range(len(lst)):\n        remaining = lst[:i] + lst[i+1:]\n        for c in combinations_list(remaining):\n            result.append([lst[i]] + c)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    res = []\n    n = len(lst)\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if i & (1 << j):\n                combo.append(lst[j])\n        res.append(combo)\n    return res"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    temp_product = 1\n    for i in range(len(arr)):\n        temp_product *= arr[i]\n        if temp_product > max_product:\n            max_product = temp_product\n        if temp_product < 0:\n            temp_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n        if current_product < 0:\n            current_product = 1\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_product = float('-inf')\n    curr_product = 1\n\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n\n        if curr_product > max_product:\n            max_product = curr_product\n\n        if curr_product < 0:\n            curr_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function finds the maximum product subarray of a given array.\n    '''\n    max_product = float('-inf')  # initialize max_product to negative infinity\n    curr_product = 1  # initialize curr_product to 1\n    max_left = 0  # initialize max_left to 0\n    max_right = 0  # initialize max_right to 0\n    n = len(arr)\n    \n    for i in range(n):\n        curr_product *= arr[i]  # multiply current element with current product\n        \n        if curr_product > max_product:  # if current product is greater than max_product\n            max_product = curr_product  # update max_product\n            max_left = i  # update max_left index\n            \n            # update max_right index\n            for j in range(i+1, n):\n                if arr[j] == 0:\n                    max_right = j-1\n                    break\n                else:\n                    max_right = j\n    \n    return max_product, arr[max_left:max_right+1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n        \n        if current_product == 0:\n            current_product = 1\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_product = 1\n    min_ending_product = 1\n    \n    for num in arr:\n        max_ending_product *= num\n        min_ending_product *= num\n        \n        if max_ending_product > max_product:\n            max_product = max_ending_product\n            \n        if min_ending_product < 0 and min_ending_product < max_ending_product:\n            max_ending_product = min_ending_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n        \n        if current_product < 0:\n            current_product = 1\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n            \n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum product subarray.\n\n    \"\"\"\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], max(max_ending_here * arr[i], min_ending_here * arr[i]))\n        min_ending_here = min(arr[i], min(temp * arr[i], min_ending_here * arr[i]))\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function takes a dictionary and a value as input and checks if all values in the dictionary are equal to the given value n.\n    '''\n    for value in dictionary.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for val in list(dict.values()):\n        if val!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        print(f\"All values are the same: {values[0]}\")\n    else:\n        print(f\"Values are not the same: {values}\")"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_list = []\n    for i in dict.values():\n        value_list.append(i)\n    if len(set(value_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        if value not in values:\n            values.append(value)\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = list(dict.values())\n    return all(values[0] == value for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return len(set(values)) == 1"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        print(f\"All values in the dictionary are same. The value is {list(values)[0]}\")\n    else:\n        print(f\"Values are not same in the dictionary.\")"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        first_value = list(dict.values())[0]\n        for value in list(dict.values()):\n            if value!= first_value:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    value = list(dict.values())[0]\n    if all(value == item for item in dict.values()):\n        print(f\"All values are same in the dictionary.\")\n    else:\n        print(f\"All values are not same in the dictionary.\")"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        # Initialize the maximum product and the maximum and second maximum elements of the array\n        max_product = float('-inf')\n        max_element = arr[0]\n        second_max_element = arr[1]\n\n        # Traverse the array from the third element and update the maximum product\n        for i in range(2, n):\n            if arr[i] > max_element:\n                second_max_element = max_element\n                max_element = arr[i]\n            elif arr[i] > second_max_element:\n                second_max_element = arr[i]\n\n            # Calculate the maximum product\n            max_product = max(max_product, max_element * second_max_element)\n\n        return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum product.\n\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        min_ending_here = arr[0]\n        min_so_far = arr[0]\n\n        for i in range(1, n):\n            if arr[i] > max_ending_here:\n                max_ending_here = arr[i]\n                max_so_far = max(max_so_far * arr[i], arr[i])\n                min_ending_here = arr[i]\n                min_so_far = min(min_so_far * arr[i], arr[i])\n            elif arr[i] < min_ending_here:\n                max_ending_here = arr[i]\n                max_so_far = max(max_so_far * arr[i], arr[i])\n                min_ending_here = arr[i]\n                min_so_far = min(min_so_far * arr[i], arr[i])\n            else:\n                max_ending_here = max(max_ending_here * arr[i], arr[i])\n                max_so_far = max(max_so_far * arr[i], arr[i])\n                min_ending_here = min(min_ending_here * arr[i], arr[i])\n                min_so_far = min(min_so_far * arr[i], arr[i])\n\n        return max(max_so_far, min_so_far)"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_so_far = arr[0]\n        min_so_far = arr[0]\n        max_ending_here = arr[0]\n        max_product_ending_here = arr[0]\n        \n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n            min_so_far = min(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n            max_product_ending_here = max(max_product_ending_here, max_ending_here, max_so_far)\n            \n        return max_product_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    # Initialize the maximum product and maximum subsequence product\n    max_product = arr[0]\n    max_subseq_product = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # If the current element is greater than the maximum subsequence product, update it\n        if arr[i] > max_subseq_product:\n            max_subseq_product = arr[i]\n        # Otherwise, update the maximum product if the current subsequence product is greater than the previous maximum product\n        elif arr[i] < max_subseq_product:\n            max_product = max(max_product, max_subseq_product * arr[i])\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_ending_here * arr[i]:\n                max_ending_here = arr[i]\n            elif arr[i] < min_ending_here * arr[i]:\n                min_ending_here = arr[i]\n            else:\n                max_ending_here = arr[i]\n                min_ending_here = arr[i]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1] * arr[i], dp[i-2] * arr[i], arr[i])\n    return dp[-1]"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize variables\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # Traverse through the array and update max_ending_here, min_ending_here and max_product\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n\n        max_product = max(max_product, max_ending_here * min_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    result = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        min_so_far = min(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        result = max(result, max_so_far)\n    \n    return result"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here *= arr[i]\n        \n        if arr[i] < min_ending_here * arr[i]:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here *= arr[i]\n            \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initializing an empty list to store the pairwise additions\n    pairwise_adds = []\n    # iterating over the elements of the tuple\n    for i in range(len(test_tup)-1):\n        # adding the pairwise sum of the neighboring elements to the list\n        pairwise_adds.append(test_tup[i] + test_tup[i+1])\n    # returning the list of pairwise additions\n    return pairwise_adds"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]+test_tup[i+1],)\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] + test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup = new_tup + (test_tup[i] + test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)-1):\n        sum_tup += (test_tup[i] + test_tup[i+1],)\n    return sum_tup"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and a number n and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a number as input and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product = product % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers else False.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains consecutive numbers, else False.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        for j in range(i+1, len(l)): \n            if l[i]+1 == l[j]: \n                return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Check if a given list contains consecutive numbers.\n    \n    Args:\n    l (list): a list of integers\n    \n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_consecutive(l):\n    '''\n    Check whether a list contains consecutive numbers or not.\n\n    Args:\n        l (list): List of integers.\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set([tuple(sorted(t)) for t in test_list1])\n    set2 = set([tuple(sorted(t)) for t in test_list2])\n    intersection_set = set1.intersection(set2)\n    result_list = [list(t) for t in intersection_set]\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the lists to sets to find the intersection of tuples\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of tuples\n    intersection = set1.intersection(set2)\n    # convert the set back to a list\n    result_list = list(intersection)\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists of tuples as input and returns the tuple intersection of the two lists.\n    '''\n    # Create a set of tuples from the first list and a set of tuples from the second list.\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets.\n    intersection = set1.intersection(set2)\n    \n    # Convert the set of tuples back to a list of tuples.\n    result_list = list(intersection)\n    \n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1 & set2\n    return intersection_set"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for i in test_list1:\n        for j in test_list2:\n            if set(i) == set(j):\n                if i not in result:\n                    result.append(i)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if set(i) == set(j):\n                if i not in intersection_list:\n                    intersection_list.append(i)\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert the list to set to get unique tuples\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n    # find the intersection of the sets\n    intersection_set = test_set1.intersection(test_set2)\n    # convert the intersection set back to list\n    intersection_list = list(intersection_set)\n    # sort the intersection list in a specific way\n    intersection_list.sort(key=lambda x: tuple(sorted(x)))\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = set()\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if set(tuple1) == set(tuple2) or set(tuple1) == set(tuple2[::-1]):\n                result.add(tuple1)\n    return list(result)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists as input and returns the intersection of the tuples in the two lists.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list of tuples\n    intersection_list = list(map(tuple, intersection))\n    \n    return intersection_list"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with another character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of the character 'ch' in the string'str1' with 'newch'.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in the string'str1' with a new character 'newch'.\n\n    Args:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace with.\n\n    Returns:\n    str: The modified string with replaced characters.\n\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of the character 'ch' in the string'str1' with the character 'newch'.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character ch in a given string str1 with new character newch.\n    :param str1: The input string.\n    :param ch: The character to be replaced.\n    :param newch: The new character to replace the old character with.\n    :return: A new string with all occurrences of ch replaced with newch.\n    \"\"\"\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of ch in str1 with newch.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary sorted by value in descending order.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(Counter(dict1).items(), key=lambda x: x[1]))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an input and returns a sorted list of tuples\n    where each tuple contains a key and its corresponding value in descending order.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes in a dictionary and sorts it by its values in descending order.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort() # sort the array in ascending order\n    return nums[-1] + nums[0] # return the sum of the last and first element in the sorted array\n"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n            \n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return None\n    \n    # Find the smallest and largest values in the array\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    \n    # Return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    This function takes in a list of numbers as an argument and returns the sum of the largest and smallest number in the list.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n\n    # Finding the smallest and largest numbers in the list\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    # Returning the sum of the smallest and largest numbers\n    return smallest + largest"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are lowercase, False otherwise.\n    \"\"\"\n    # convert the string to lowercase using the lower() method\n    string_lower = string.lower()\n    # check if the lowercase string is equal to the original string\n    if string_lower == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and converts it to lowercase.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n        string (str): The string to be converted.\n\n    Returns:\n        str: The converted string in lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case and False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are lowercase, else it returns False.\n    \"\"\"\n    # convert the string to lower case\n    lower_string = string.lower()\n    # check if all characters in the lower case string are lowercase\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'(?<!\\w)[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    # using regex to find all lowercase substrings in the string\n    pattern = re.compile('[a-z]+')\n    matches = pattern.findall(str1)\n\n    # using a set to remove duplicates\n    unique_matches = set(matches)\n\n    # using a for loop to replace all lowercase substrings with empty string\n    for match in unique_matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    # Get the absolute value of the number to avoid negative values\n    abs_n = abs(n)\n    # Convert the absolute value of the number to a string\n    abs_n_str = str(abs_n)\n    # Return the first character of the string as an integer\n    return int(abs_n_str[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        n *= -1\n    while n >= 10:\n        n //= 10\n    return n"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its first digit.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return n // 10**((len(str(n))-1))"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        n *= -1\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes in a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function returns the first digit of the given number.\n\n    :param n: A number (int or float).\n    :return: The first digit of the given number (int).\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_digit(n):\n    # Convert the number to a string to access its first character\n    num_str = str(n)\n    # Return the first character of the string as an integer\n    return int(num_str[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_digit(n):\n    '''\n    This function takes an integer as an argument and returns the first digit of the number.\n    '''\n    if n < 0:\n        return None\n    else:\n        return int(str(n)[0])"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a list with only the odd integers in the input list.\n    \"\"\"\n    return [x for x in lst if x % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list of odd integers\n    \"\"\"\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(list):\n    '''\n    This function takes a list of integers and returns a new list with only the odd integers.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_odd(numbers):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for number in numbers:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list with only the odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_odd(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    result = []\n    for num in numbers:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_n - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n + 1):\n        sum_of_cubes += i ** 3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of the first n natural numbers\n    sum_of_n = sum(range(1, n + 1))\n    \n    # Find the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i ** 3 for i in range(1, n + 1))\n    \n    # Return the difference between the two sums\n    return sum_of_n ** 3 - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_n = sum(range(1, n+1))\n    return sum_n - sum_cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Find the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Find the difference\n    difference = sum_of_cubes - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    # calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) / 2\n    \n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # calculate the difference and return it\n    return sum_cubes - sum_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    diff = sum_of_cubes - sum_of_numbers\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of the first n natural numbers\n    sum_of_n = (n * (n + 1)) // 2\n    \n    # Find the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate and return the difference\n    return sum_of_n**2 - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_natural_numbers - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    This function returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:  # Check if the xor value is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if ((A[i]^A[j])%2!=0):\n                count+=1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    This function toggles the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Check if the length of the strings is different, if yes then return 0\n    if len(str1)!= len(str2):\n        return 0\n    \n    # Calculate the sum of the per-digit differences\n    digit_sum = 0\n    for i in range(len(str1)):\n        digit_sum += abs(int(str1[i]) - int(str2[i]))\n        \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    distance = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    for i in range(len(n1_str)):\n        distance += abs(int(n1_str[i]) - int(n2_str[i]))\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_distance = 0\n    n1_digits = list(str(n1))\n    n2_digits = list(str(n2))\n    for i in range(len(n1_digits)):\n        total_distance += abs(int(n1_digits[i]) - int(n2_digits[i]))\n    return total_distance"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    # initialize a variable to store the sum of the per-digit differences\n    diff_sum = 0\n    # iterate over the characters in the strings and compute the difference\n    for i in range(len(s1)):\n        diff_sum += abs(int(s1[i]) - int(s2[i]))\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to access their digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize the sum of digit differences to 0\n    digit_diff_sum = 0\n    \n    # Loop through the digits of both integers and add the absolute difference to the sum\n    for i in range(len(n1_str)):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n        \n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and get their lengths\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    # Initialize the sum of differences to zero\n    diff_sum = 0\n\n    # Loop through the indices of the digits in the two numbers\n    for i in range(n1_len):\n        # Get the current digit of the first number and the corresponding digit of the second number\n        d1 = int(n1_str[i])\n        d2 = int(n2_str[i])\n        # Calculate the absolute difference between the two digits and add it to the sum\n        diff_sum += abs(d1 - d2)\n\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert numbers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    # Find the per-digit difference between the numbers\n    diff = sum(abs(d1 - d2) for d1, d2 in zip(digits1, digits2))\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Get the list of digits of n1\n    digits1 = [int(d) for d in str(n1)]\n    # Get the list of digits of n2\n    digits2 = [int(d) for d in str(n2)]\n    # Initialize the sum of the digit distances\n    digit_distance_sum = 0\n    # Loop through each digit in the list of digits of n1\n    for d1 in digits1:\n        # Loop through each digit in the list of digits of n2\n        for d2 in digits2:\n            # Calculate the absolute difference between the digits and add it to the sum\n            digit_distance_sum += abs(d1 - d2)\n    # Return the sum of the digit distances\n    return digit_distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    digit_diff_sum = 0\n    for i in range(len(n1_digits)):\n        digit_diff_sum += abs(n1_digits[i] - n2_digits[i])\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of per-digit difference between them.\n    '''\n    num1 = abs(n1)\n    num2 = abs(n2)\n    digit_diff_sum = 0\n    \n    while num1 > 0 or num2 > 0:\n        digit_diff_sum += abs(num1 % 10 - num2 % 10)\n        num1 //= 10\n        num2 //= 10\n        \n    return digit_diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function will find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    # Initialize the maximum sum and the current sum to zero\n    max_sum = 0\n    curr_sum = 0\n    \n    # Traverse through all elements of the array\n    for i in range(size):\n        # Add the current element to the current sum\n        curr_sum += a[i]\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # If the current sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 1:\n        return a[0]\n\n    # Initialize the maximum sum and the current sum with the first element of the array\n    max_sum = a[0]\n    current_sum = a[0]\n\n    # Traverse the array from the second element to the last element\n    for i in range(1, size):\n        # Add the current element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the maximum sum variable to the first element of the list\n    max_sum = a[0]\n\n    # Initialize the current sum variable to zero\n    current_sum = 0\n\n    # Traverse through the list and update the current sum and maximum sum variables\n    for i in range(size):\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum variable\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets to find the union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # Convert the set back to a sorted tuple and return it\n    union_tup = tuple(sorted(union_set))\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n\n    # Sort the elements of the union tuple in ascending order\n    union_tup = sorted(union_tup)\n\n    # Print the sorted union tuple\n    print(\"Union of the two tuples: \", union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n\n    # Sort the union tuple in ascending order\n    sorted_union_tup = sorted(union_tup)\n\n    # Print the sorted union tuple\n    print(sorted_union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the union of the elements of two given tuples and outputs them in sorted order.\n    \"\"\"\n    # converting tuples to sets to find the union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # converting the set back to tuple and sorting it\n    final_tup = tuple(sorted(union_set))\n    \n    # returning the final tuple\n    return final_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    sorted_union_list = sorted(list(union_set))\n    return sorted_union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = test_tup1 + test_tup2\n    union_tup = sorted(list(set(union_tup)))\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to sets to perform union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the union of the two sets\n    union_set = set1.union(set2)\n\n    # Convert the set to a sorted list and return it\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the first tuple to remove duplicates\n    set1 = set(test_tup1)\n    # Create a set from the second tuple to remove duplicates\n    set2 = set(test_tup2)\n    # Find the union of the two sets and sort the resulting set in ascending order\n    union_set = sorted(set1.union(set2))\n    # Print the resulting set\n    print(union_set)"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of sublists and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists in a given list.\n\n    :param lst: A list of integers.\n    :return: The length of the longest sublist.\n    \"\"\"\n    max_len = 0\n    current_len = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_len += 1\n        else:\n            max_len = max(max_len, current_len)\n            current_len = 0\n    max_len = max(max_len, current_len)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Write a Python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    max_len = 0\n    for sublst in lst:\n        if len(sublst) > max_len:\n            max_len = len(sublst)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]+\"|\\S+'\n    matches = re.findall(pattern, text)\n    values = [match.strip('\"') for match in matches if match.strip('\"').isnumeric() == False]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Regular expression pattern to match strings between quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    # Search for all matches of the pattern in the input string\n    matches = pattern.findall(text)\n    # Return a list of all matches\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as an input and returns a list of characters of that string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input: please enter a non-negative integer.\"\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Error: Input must be a non-negative integer\"\n    else:\n        sum_digits = 0\n        while n > 0:\n            sum_digits += n % 10\n            n = n // 10\n        return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = list(str(n))\n    \n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through each digit and add it to the total\n    for digit in digits:\n        total += int(digit)\n        \n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    This function returns the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input must be a non-negative integer\"\n    elif n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of its digits.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    # Finding the sum of digits\n    digit_sum = 0\n    while n!= 0:\n        digit_sum += n % 10\n        n //= 10\n    \n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    elif n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an input and returns True if the list is sorted in ascending order and False if it is not sorted.\n    '''\n    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    sorted_list = sorted(list1)\n    if list1 == sorted_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an input and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Args:\n    list1 (list): the list to be checked\n\n    Returns:\n    bool: True if the list is sorted, False otherwise\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if it is sorted in ascending order, else False.\n    \"\"\"\n    if lst == sorted(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order, else False.\n    \"\"\"\n    if lst == sorted(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    :param list1: The list to be checked.\n    :return: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    and False otherwise.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    my_list = []\n    for i in range(length):\n        my_dict = {}\n        my_list.append(my_dict)\n    return my_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Sorts each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    if len(unique_nums) < 2:\n        return None\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and removes duplicate numbers\n    from each list. It returns a new list with unique numbers from each list.\n    '''\n    unique_nums = []\n    for sub_list in nums:\n        unique_nums.append(list(set(sub_list)))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(set(lst))\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists of numbers as input and returns a list of two unique numbers from each list.\n    '''\n    # initialize an empty list to store unique numbers\n    unique_nums = []\n    \n    # loop through each list in the input\n    for lst in nums:\n        # loop through each number in the list\n        for num in lst:\n            # if the number is not already in the unique_nums list, append it to the list\n            if num not in unique_nums:\n                unique_nums.append(num)\n                \n                # if the length of unique_nums is now 2, return the list\n                if len(unique_nums) == 2:\n                    return unique_nums\n    \n    # if there are less than 2 unique numbers in the input, return an empty list\n    return []"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        else:\n            unique_nums.remove(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set()\n    for num in list_data:\n        unique_numbers.add(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    # create a set of unique numbers from the list\n    unique_nums = set(list_data)\n\n    # calculate the product of unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    This function returns the product of all the unique numbers in the given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function calculates the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder with a given radius and height.\n    \"\"\"\n    area_base = 2 * math.pi * r * h\n    area_top = 2 * math.pi * r ** 2\n    total_area = area_base + area_top\n    return total_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns its surface area.\n    '''\n    SA = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return SA"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns its surface area.\n    '''\n    surfacearea = 2*3.14*r*h + 2*3.14*r**2\n    return surfacearea"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the surface area of the cylinder\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surfacearea"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder given its radius and height.\n    '''\n    surface_area = 2 * 3.14159 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder with radius r and height h.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(A).issubset(set(B)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and checks whether A is a sublist of B or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check whether a list is a sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        j = 0\n        while j < len(A) and B[i+j] == A[j]:\n            j += 1\n        if j == len(A):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B: # If both lists are equal, then it is a sublist\n        return True\n    \n    # If length of A is greater than B, then it is not a sublist\n    if len(A) > len(B):\n        return False\n    \n    # Iterate through all possible substrings of B of length len(A)\n    for i in range(len(B)-len(A)+1):\n        j = 0\n        while j < len(A) and B[i+j] == A[j]:\n            j += 1\n        if j == len(A):\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    This function takes two lists as input and returns True if the first list is a sublist of the second list else False.\n    '''\n    if A == []:\n        return True\n    elif len(A) > len(B):\n        return False\n    else:\n        return A == B[0:len(A)] or is_Sub_Array(A,B[1:])"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    j = 0\n    for i in range(len(B)):\n        if B[i] == A[j]:\n            j += 1\n            if j == len(A):\n                return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check if A is a sublist of B.\n    \"\"\"\n    if not B:  # If B is an empty list, A cannot be a sublist of B\n        return False\n\n    start = 0  # Start index of A in B\n    while start <= len(B) - len(A):  # Iterate over possible starting positions\n        if B[start:start+len(A)] == A:  # Check if the sublist matches A\n            return True\n        start += 1  # Move to the next possible starting position\n\n    return False  # If no match is found, A is not a sublist of B"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check if A is a sublist of B.\n\n    :param A: a list\n    :param B: another list\n    :return: True if A is a sublist of B, False otherwise\n    \"\"\"\n\n    # check if A is a sublist of B by comparing their lengths and values\n    if len(A) > len(B):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        if A == B[i:i+len(A)]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list is sublist of another or not.\n    \"\"\"\n\n    # If B is empty, return True because A is always a sublist of B\n    if not B:\n        return True\n\n    # If B is not empty, then we need to check whether the first element of B\n    # is present in A. If it is, then we can recursively check whether the\n    # remaining elements of B are present in A.\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n\n    # If the first element of B is not present in A, then we need to check\n    # whether the remaining elements of B are present in the sublist A[1:].\n    return is_Sub_Array(A[1:], B)"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check whether A is a sublist of B or not.\n\n    :param A: list A\n    :param B: list B\n    :return: True if A is a sublist of B, False otherwise\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(len(B)-len(A)+1):\n            if B[i:i+len(A)] == A:\n                return True\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a positive integer n as input and returns the last digit of n!\n    '''\n    # Find the factorial of n using math.factorial()\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        \n    # Find the last digit of the factorial using str() and slicing\n    last_digit = str(factorial)[-1]\n    \n    # Convert the last digit to an integer\n    last_digit = int(last_digit)\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit in factorial of n.\n    '''\n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    fact = 1\n    for i in range(1,n+1): \n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n!\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function returns the last digit in the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n and returns the last digit of n!\n    \"\"\"\n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import zip_longest\n\ndef interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = list(zip_longest(list1, list2, list3, fillvalue=None))\n    return [elem for sublist in flat_list for elem in sublist if elem is not None]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function finds the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples are not of the same length.\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elems.append((test_tup1[i], test_tup2[i]))\n    return dissimilar_elems"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append((i, test_tup1[i], test_tup2[i]))\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            result.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                result.append(item)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    This function takes a nested mixed tuple and an even function as input.\n    It returns the nested tuple with all the uneven elements removed.\n    '''\n    # Initialize an empty list to store the even elements\n    even_list = []\n    # Iterate over the elements of the nested tuple\n    for i in test_tuple:\n        # If the element is not a tuple, check if it is even using the even_fnc\n        if not isinstance(i, tuple):\n            if even_fnc(i):\n                even_list.append(i)\n        # If the element is a tuple, recursively call the even_fnc on the tuple\n        else:\n            even_list.append(even_ele(i, even_fnc))\n    # Convert the even_list to a nested tuple and return it\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        new_tuple.append(tuple(filter(even_fnc, tup)))\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_item = even_fnc(item)\n            new_tuple.append(even_item)\n        else:\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes a nested tuple as input and applies a function even_fnc\n    to remove the uneven elements from the tuple.\n    \"\"\"\n    result_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            sub_tuple = []\n            for j in i:\n                if even_fnc(j):\n                    sub_tuple.append(j)\n            result_tuple.append(tuple(sub_tuple))\n        else:\n            if even_fnc(i):\n                result_tuple.append(i)\n    return tuple(result_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            new_item = even_ele(item, even_fnc)\n            if new_item:\n                result.append(new_item)\n        else:\n            if even_fnc(item):\n                result.append(item)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, (int, float)):\n            new_tuple.append(item)\n        elif isinstance(item, (list, tuple)):\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple\n\ndef even_or_odd(lst):\n    '''\n    A helper function to determine if a list is even or odd.\n    '''\n    if len(lst) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_fnc(i))\n        else:\n            result.append(i)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested mixed tuple and a function as input and returns a nested mixed tuple with uneven elements removed.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            temp_tuple = ()\n            for j in i:\n                if even_fnc(j):\n                    temp_tuple += (j,)\n            new_tuple += (temp_tuple,)\n        else:\n            if even_fnc(i):\n                new_tuple += (i,)\n    return new_tuple\n\ndef is_even(num):\n    '''\n    This function returns True if the number is even, False otherwise.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested tuple as input and removes uneven elements using the given even_fnc function.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list = []\n            for j in i:\n                if even_fnc(j):\n                    even_list.append(j)\n            result.append(tuple(even_list))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return result"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base\n    base_area = 4 * b * s\n    # calculate the area of the faces\n    face_area = b * s + (b/2) * (b/2)\n    # calculate the total surface area\n    total_area = base_area + 4 * face_area\n    # return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes a base edge and a height of a square pyramid as input and returns the surface area of the pyramid.\n    '''\n\n    # Calculate the surface area of the base of the pyramid\n    base_surface_area = 4 * base_edge ** 2\n\n    # Calculate the surface area of each square face of the pyramid\n    face_surface_area = 2 * base_edge * height\n\n    # Calculate the total surface area of the pyramid\n    total_surface_area = base_surface_area + 4 * face_surface_area\n\n    return total_surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Returns the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4 * base_edge * height + base_edge ** 2"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (2*b*s) + (2*(b**2))\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in the base edge and height of a square pyramid and returns the surface area of the pyramid.\n    '''\n    # calculate the area of one face of the pyramid\n    area_one_face = (b**2 + s**2) / 2\n    \n    # calculate the area of the base\n    area_base = b**2\n    \n    # calculate the total surface area\n    total_area = 4 * area_one_face + 2 * area_base\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes two arguments: b (base edge) and s (height). \n    It returns the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of square base\n    area_square = 4 * b**2\n    \n    # calculate the area of square face\n    area_face = 2 * (b**2 + s**2)\n    \n    # calculate the area of the triangle on the base\n    area_base = b * s\n    \n    # calculate the total surface area\n    total_area = area_square + area_face + area_base\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b, h):\n    '''\n    Calculate the surface area of a square pyramid with given base edge and height.\n    '''\n    area = 4 * b * h + 2 * (b * b + h * h)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each square face\n    square_area = (b**2) / 2\n    \n    # Calculate the area of the triangular base\n    tri_base_area = (b * s) / 2\n    \n    # Calculate the total surface area\n    total_area = 2 * square_area + 4 * tri_base_area\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b, h):\n    '''\n    This function takes in the base edge and height of a square pyramid and returns the surface area of the pyramid.\n    '''\n    # Calculate the area of the base\n    base_area = 4 * (b**2)\n\n    # Calculate the area of the square of the height\n    square_height_area = (h**2) * 4\n\n    # Calculate the area of the pyramid\n    pyramid_area = (b * h) * 2\n\n    # Calculate the total surface area\n    total_surface_area = base_area + square_height_area + pyramid_area\n\n    # Return the total surface area\n    return total_surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Calculates the surface area of a square pyramid with given base edge and height.\n    '''\n    area = 4 * b * s + 2 * b * b\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not bool(dict1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty.\")\n    else:\n        print(\"Dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    catalan_nums = [0, 1]\n    for i in range(2, num + 1):\n        catalan_nums.append(catalan_nums[i-1] * (2*i - 1) // i)\n    return catalan_nums[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    c = 1\n    for i in range(2, num + 1):\n        c = (2 * i - 1) * c // i\n    return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        c = 1\n        for i in range(2, n+1):\n            c = (2*i-1)*c//i\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function takes an integer num as input and returns the nth catalan number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        catalan_list = [0] * (num + 1)\n        catalan_list[0] = 1\n        catalan_list[1] = 1\n        for i in range(2, num + 1):\n            catalan_list[i] = (4 * i - 2) * catalan_list[i - 1] // (i + 1)\n        return catalan_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = [0] * (num + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num + 1):\n            catalan[i] = (4 * i - 2) * catalan[i - 1] // (i + 1)\n        return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        catalan_array = [1, 1]\n        for i in range(2, num+1):\n            catalan_array.append(catalan_array[i-1] + catalan_array[i-2]*(2*i-1)//i)\n        return catalan_array[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        catalan = [0] * (num + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num + 1):\n            catalan[i] = 0\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    else:\n        catalan = [0] * (num + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num + 1):\n            catalan[i] = 0\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    c = [1]\n    for i in range(n):\n        c.append(c[-1] * (2*i + 1) // (i+2))\n    return c[-1]"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        adverb = match.group()\n        start, end = match.span()\n        print(f'Adverb: {adverb}, Start: {start}, End: {end}')"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f'Adverb ending with \"ly\" found at position {match.start()}')"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb ending with 'ly' found at position {match.start()} and {match.end()}\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all adverbs ending with \"ly\" in the text\n    adverbs = re.findall(r\"\\w+ly\", text)\n    \n    # If no adverbs were found, return None\n    if not adverbs:\n        return None\n    \n    # Find the position of the first adverb ending with \"ly\"\n    pos = text.find(adverbs[0])\n    \n    return adverbs[0], pos"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb ending with 'ly' found at position {match.start()}: {match.group()}\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # find all adverbs ending with ly\n    adverbs = re.findall(r'\\w+ly', text)\n\n    # find their positions in the text\n    positions = [m.start() for m in re.finditer(r'\\w+ly', text)]\n\n    # return the first adverb and its position\n    return adverbs[0], positions[0]"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    # Find all the adverbs in the text using regular expression\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    \n    # If there are no adverbs ending with \"ly\", return None\n    if not adverbs:\n        return None\n    \n    # Find the first adverb ending with \"ly\" and its position in the text\n    first_ly_adverb = adverbs[0]\n    position = text.find(first_ly_adverb)\n    \n    return {'adverb': first_ly_adverb, 'position': position}"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with 'ly' and returns the position of the adverb in the given text.\n    '''\n    pattern = r'\\b\\w+ly\\b'  # pattern for adverbs ending with 'ly'\n    match = re.search(pattern, text)  # search for the first match in the text\n    \n    if match:  # if a match is found\n        start, end = match.span()  # get the start and end positions of the adverb\n        adverb = text[start:end]  # get the adverb from the text\n        return adverb, start  # return the adverb and its position\n    else:\n        return None, None  # return None if no match is found"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a list of items and the number of most expensive items to find.\n    It uses the heapq module to create a max-heap of the items based on their price, and then\n    returns the n most expensive items from the heap.\n\n    Args:\n        items (list): A list of dictionaries containing item details including the 'name' and 'price' keys.\n        n (int): The number of most expensive items to find.\n\n    Returns:\n        list: A list of dictionaries containing the n most expensive items.\n    \"\"\"\n    # Create a max-heap of items based on their price\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    # Return the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min-heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    # Sort the heap to return the n most expensive items in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap using a list\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        # Keep the heap size at most n\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items in decreasing order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap[::-1]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    # Add items to the heap\n    for item in items:\n        heapq.heappush(heap, item['price'])\n\n    # Get the n most expensive items\n    result = []\n    for i in range(n):\n        result.append({'name': items[0]['name'], 'price': heapq.heappop(heap)})\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    :param items: list of dictionaries, where each dictionary represents an item with keys 'name' and 'price'\n    :param n: integer, the number of most expensive items to return\n    :return: list of dictionaries, the n most expensive items in the input dataset\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n\n    Parameters:\n    l (list): The list to be split.\n    n (int): The index at which the list should be split.\n\n    Returns:\n    list: The original list with the first part added to the end.\n    '''\n\n    first_part = l[:n]\n    last_part = l[n:]\n\n    return last_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function takes a list and an integer as input.\n    The function splits the list at the nth element and adds the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    last_part = l[n:]\n    l.clear()\n    l.extend(last_part)\n    l.extend(first_part)\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    second_part.extend(first_part)\n    return second_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list l and an integer n as input and splits the list at the nth element and adds the first part to the end.\n    '''\n    return l[n-1:] + l[:n-1]"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an input and returns the same list as a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as an argument and returns a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n    \"\"\"\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Returns the difference between the largest and smallest value in a list of numbers.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds the perfect squares between a and b (inclusive).\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == 0 or i == 1:\n            continue\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                break\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num == 1:\n            continue\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                break\n        else:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        root = int(i ** 0.5)\n        if root ** 2 == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of all the perfect squares between those two integers.\n    '''\n    # initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n    \n    # loop through all the numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        \n        # check if the number is a perfect square\n        root = int(num ** 0.5)\n        if num == root ** 2:\n            \n            # if it is a perfect square, append it to the list\n            perfect_squares_list.append(num)\n    \n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # convert the input to integers\n    a = int(a)\n    b = int(b)\n    \n    # initialize an empty list to store the result\n    result = []\n    \n    # iterate over all numbers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        root = int(i ** 0.5)\n        if i == root ** 2:\n            # if it is, append it to the result list\n            result.append(i)\n    \n    # return the list of perfect squares\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == 1:\n            result.append(1)\n        elif i > 1:\n            j = 1\n            while j*j <= i:\n                if i % j == 0:\n                    result.append(j)\n                    if j*j!= i:\n                        result.append(i//j)\n                j += 1\n            result = list(set(result))\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of perfect squares between the two numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == 0 or i == 1:\n            continue\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num**0.5)\n        if root**2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            result.append(i)\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in polar coordinates and returns the corresponding rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))[0]\n    theta = cmath.polar(complex(x,y))[1]\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n\n    :param rho: radial distance from the origin\n    :type rho: float\n    :param theta: angle from the positive x-axis\n    :type theta: float\n    :return: tuple of the form (x, y) representing the rectangular coordinates\n    :rtype: tuple\n    \"\"\"\n    return (rho * cmath.cos(theta), rho * cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x, y))[0]\n    theta = cmath.polar(complex(x, y))[1]\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))[0]\n    theta = cmath.polar(complex(x,y))[1]\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(x,y)\n    return z.real, z.imag"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    This function takes in polar coordinates (x,y) and returns the corresponding rectangular coordinates.\n    '''\n    r = abs(complex(x,y))\n    theta = cmath.phase(complex(x,y))\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    return x * cmath.exp(complex(0, 1) * y)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] # swap first and last elements\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has at least 2 elements\n    if length >= 2:\n        # Get the first and last elements of the list\n        first = newList[0]\n        last = newList[length-1]\n\n        # Swap the first and last elements\n        newList[0] = last\n        newList[length-1] = first\n\n        # Print the new list with the first and last elements swapped\n        print(\"The new list with first and last elements swapped is:\", newList)\n    else:\n        print(\"The list should have at least two elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    This function takes in a list and interchanges the first and last elements of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n\n    res = 1\n    for i in range(k):\n        res = (res * (n - i)) // (i + 1)\n\n    return res\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n        n (int): The upper limit of the sum.\n        k (int): The number of terms in the binomial series.\n\n    Returns:\n        int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        product = 1\n        for j in range(i+1):\n            product *= (n-j)/(j+1)\n        sum += product\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return \"Invalid input\"\n    elif k == 0 or k == n:\n        return 1\n    else:\n        result = 1\n        for i in range(k):\n            result = result * (n - i)\n            result = result // (i + 1)\n        return result\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial coefficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, k+1):\n            result = result * (n-i+1) // i\n        return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    binomial = 1\n    for i in range(k):\n        binomial *= (n-i)/(i+1)\n    return binomial"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n or k<0: \n        return 0\n    elif k==0 or k==n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k) \n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    b_coeff = 1\n    sum = 0\n    for i in range(k):\n        sum += b_coeff\n        b_coeff = (b_coeff * (n - i)) // (i + 1)\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    ip_parts = ip.split('.')\n    new_ip_parts = []\n    for part in ip_parts:\n        if part.startswith('0') and len(part) > 1:\n            new_ip_parts.append(part[1:])\n        else:\n            new_ip_parts.append(part)\n    new_ip = '.'.join(new_ip_parts)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(\"^(0+)\", \"\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n    \"\"\"\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\A|\\b)0+(\\d{1,2})', r'\\g<1>\\g<2>', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+([1-9])', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'0+(\\d+)', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into octets\n    octets = ip.split('.')\n    \n    # Loop through each octet and remove any leading zeroes\n    for i, octet in enumerate(octets):\n        if octet.startswith('0'):\n            octets[i] = octet[1:]\n    \n    # Join the octets back together\n    return '.'.join(octets)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(?=\\d)', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    # Finding the first even and first odd number of the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # Finding the difference of the first even and first odd number\n    diff = abs(even_num - odd_num)\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as an input and returns the difference between the first even and first odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    if even_num and odd_num:\n        return abs(even_num - odd_num)\n    else:\n        return \"No even or odd numbers found in the list.\""
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    if even_num and odd_num:\n        return abs(even_num - odd_num)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Return the difference between the first even and first odd number in a list.\n    \"\"\"\n    even = next(num for num in lst if num % 2 == 0)\n    odd = next(num for num in lst if num % 2!= 0)\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n\n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n\n    return abs(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Returns the difference between the first even and first odd numbers of a given list.\n    \"\"\"\n    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in lst if num % 2 == 1]\n    return evens[0] - odds[0] if evens and odds else None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and finds the difference of the first even and first odd number of the list.\n\n    Args:\n    lst (list): A list of integers\n\n    Returns:\n    int: The difference of the first even and first odd number in the list\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list to find the first even and first odd number\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            break\n    \n    # If there are no even numbers in the list, return None\n    if even_num is None:\n        return None\n    \n    # If there is only one number in the list, return None\n    if odd_num is None:\n        return None\n    \n    # Return the difference of the first even and first odd number\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    \n    even = odd = first_even = first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n                first_even = i\n            elif i > first_even:\n                even = num\n                first_even = i\n        else:\n            if odd is None:\n                odd = num\n                first_odd = i\n            elif i > first_odd:\n                odd = num\n                first_odd = i\n    \n    if even is not None and odd is not None:\n        return even - odd\n    else:\n        return None"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    # Convert the strings to lists of digits\n    str1_list = [int(i) for i in str1]\n    str2_list = [int(i) for i in str2]\n\n    # Create a dictionary to store the count of each digit in str1_list\n    count_dict = {}\n    for i in str1_list:\n        count_dict[i] = count_dict.get(i, 0) + 1\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate over each digit in str2_list and find the corresponding digit in str1_list and swap them if necessary\n    for i in range(len(str2_list)):\n        if str2_list[i]!= str1_list[i]:\n            # If the count of the digit in str1_list is less than or equal to 1, swap the digit with the next available digit in str1_list\n            if count_dict[str2_list[i]] <= 1:\n                for j in range(i+1, len(str1_list)):\n                    if str2_list[i] == str1_list[j]:\n                        str2_list[i], str2_list[j] = str2_list[j], str2_list[i]\n                        result += 1\n                        break\n            # If the count of the digit in str1_list is greater than 1, decrement the count of the digit in str1_list and add 1 to the result\n            else:\n                count_dict[str2_list[i]] -= 1\n                result += 1\n\n    return result"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    count = 0\n    swapped_indices = []\n    str1_len = len(str1)\n    str2_len = len(str2)\n\n    # Iterate over both strings simultaneously\n    for i in range(str1_len):\n        # Check if the current characters match\n        if str1[i] == str2[i]:\n            continue\n\n        # Check if the current characters have already been swapped\n        if i in swapped_indices:\n            continue\n\n        # Find the index of the character in the second string\n        index = str2.find(str1[i], i)\n\n        # Swap the characters\n        str1 = str1[:i] + str2[index] + str1[i+1:]\n        str2 = str2[:index] + str1[i] + str2[index+1:]\n\n        # Update the swapped indices\n        swapped_indices.append(i)\n        swapped_indices.append(index)\n\n        # Increment the swap count\n        count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    count = 0\n    n = len(str1)\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while str1[i]!= str2[j]:\n                j += 1\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:j] + str1[j] + str2[j+1:]\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    # Initializing the variables\n    count = 0\n    n = len(str1)\n    \n    # Creating a dictionary to store the count of each character in str1\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterating through the string and swapping the characters if necessary\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            if freq[str1[i]] > 0 and freq[str2[i]] > 0:\n                count += 1\n                freq[str1[i]] -= 1\n                freq[str2[i]] -= 1\n            else:\n                return -1\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize a dictionary to store the count of each digit\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Initialize a variable to store the total swaps\n    swaps = 0\n    \n    # Loop through the second string and compare each digit to the corresponding digit in the first string\n    for i in range(len(str2)):\n        # If the digit in the second string is greater than the digit in the first string, we need to swap them\n        if int(str2[i]) > int(str1[i]):\n            # Subtract the count of the digit in the first string from the count of the digit in the second string\n            count[str2[i]] -= 1\n            count[str1[i]] += 1\n            # Increment the swaps by 1\n            swaps += 1\n    \n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    i = 0\n    while i < n:\n        if str1[i]!= str2[i]:\n            j = i+1\n            while j < n and str1[j]!= str2[i]:\n                j += 1\n            if j == n:\n                return -1 # If no such j is found, then return -1\n            str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    # Initialize variables\n    n = len(str1)\n    min_swaps = 0\n\n    # Convert both binary strings to lists of integers\n    str1_list = [int(x) for x in str1]\n    str2_list = [int(x) for x in str2]\n\n    # Check if both binary strings are of equal length\n    if n!= len(str2):\n        return -1\n\n    # Loop through each element of both lists and count the number of swaps required\n    for i in range(n):\n        if str1_list[i]!= str2_list[i]:\n            # Check if the current bit is different in both strings\n            # If it is different, count the number of swaps required to bring both bits in the same position\n            j = i\n            while str1_list[i]!= str2_list[j]:\n                str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n                min_swaps += 1\n                j += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of 0's and 1's\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n\n    # Initialize a dictionary to keep track of the indices of the elements in lst1\n    indices = {}\n    for i in range(len(lst1)):\n        indices[lst1[i]] = i\n\n    # Initialize a variable to keep track of the number of swaps required\n    swaps = 0\n\n    # Iterate over the elements in lst2 and find the index of the corresponding element in lst1\n    for i in range(len(lst2)):\n        if lst2[i] in indices:\n            # If the element is found in lst1, update the index of the element in lst2\n            lst2[i], lst2[indices[lst2[i]]] = lst2[indices[lst2[i]]], lst2[i]\n            # Update the dictionary to reflect the change in index\n            indices[lst2[i]] = i\n            # Increment the number of swaps required\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            for j in range(i+1,n):\n                if str1[j] == str2[i]:\n                    str1[i],str1[j] = str1[j],str1[i]\n                    count += 1\n                    break\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert strings to lists\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Initialize variables\n    count = 0\n    n = len(list1)\n\n    # Traverse the lists and find the index of different digits\n    for i in range(n):\n        if list1[i]!= list2[i]:\n            count += 1\n            idx1 = i\n            idx2 = str2.index(list1[i])\n            list1[i], list1[idx2] = list1[idx2], list1[i]\n            list2[i], list2[idx1] = list2[idx1], list2[i]\n\n    # Return the count of swaps\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size\n"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sum(sys.getsizeof(t) for t in tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize two pointers\n    i = 0\n    j = 0\n    \n    # Iterate until kth element is found\n    while k > 0:\n        # If the element pointed by i is smaller than the element pointed by j, increment i\n        if arr1[i] <= arr2[j]:\n            i += 1\n        # Else increment j\n        else:\n            j += 1\n        # Decrement k\n        k -= 1\n    \n    # Return the element pointed by the final pointer\n    return max(arr1[i-1], arr2[j-1])"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays and a value of k as input.\n    It finds the kth element from the two arrays and returns it.\n    If k is greater than the total number of elements in the two arrays, it returns None.\n    '''\n\n    # Calculate the total number of elements in the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    total_elements = n1 + n2\n\n    # If k is greater than the total number of elements, return None\n    if k > total_elements:\n        return None\n\n    # Initialize variables for pointers\n    i = 0\n    j = 0\n    count = 0\n\n    # Loop through both arrays\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            count += n1 - i\n            i += 1\n        else:\n            j += 1\n\n    # If k is greater than the count, it means that the kth element is in the second array\n    if k > count:\n        return arr2[k - count - 1]\n    else:\n        return arr1[k]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays as input and returns the kth element from the merged array.\n    \"\"\"\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a value k as input.\n    It returns the kth element present in both the arrays.\n    \"\"\"\n    \n    # Get the length of both the arrays\n    n1, n2 = len(arr1), len(arr2)\n    \n    # Initialize two pointers to traverse both the arrays\n    i, j = 0, 0\n    \n    # Traverse both arrays until kth element is found\n    while k > 0:\n        # If first array element is smaller\n        if i >= n1 or (j < n2 and arr2[j] < arr1[i]):\n            j += 1\n        # If second array element is smaller\n        elif j >= n2 or (i < n1 and arr1[i] < arr2[j]):\n            i += 1\n        # If both elements are equal\n        else:\n            i += 1\n            j += 1\n            \n        k -= 1\n    \n    # Return the kth element present in both arrays\n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    n = len(arr1)\n    m = len(arr2)\n    while i < n and j < m:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n        if k == 0:\n            return max(arr1[i-1], arr2[j-1])\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = len(arr1) - 1\n    j = len(arr2) - 1\n    while i >= 0 and j >= 0 and k > 0:\n        if arr1[i] > arr2[j]:\n            i -= 1\n        else:\n            j -= 1\n        k -= 1\n    if k > 0:\n        return None\n    return max(arr1[i+1], arr2[j+1])"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the total number of elements in both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    n = n1 + n2\n    \n    # Initialize pointers for both arrays\n    i = 0\n    j = 0\n    \n    # Loop through both arrays until kth element is found\n    while k > 0:\n        # If pointer i is within bounds for array 1 and element at i is smaller than element at j,\n        # then increment pointer i\n        if i < n1 and (j >= n2 or arr1[i] <= arr2[j]):\n            i += 1\n        # Otherwise, increment pointer j\n        else:\n            j += 1\n        # Decrement k\n        k -= 1\n        \n    # Return the kth element\n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j-n1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if arr1[mid1] > arr2[mid2]:\n        if k <= len(arr1) - mid1:\n            return find_kth(arr1[mid1:], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2+1:], k - len(arr1) + mid1)\n    else:\n        if k <= len(arr2) - mid2:\n            return find_kth(arr1, arr2[mid2:], k)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k - len(arr2) + mid2)\n"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n\n    if m > n:\n        arr1, arr2, m, n = arr2, arr1, n, m\n\n    start = max(0, k - n)\n    end = min(k, m)\n    while start <= end:\n        mid1 = start + (end - start) // 2\n        mid2 = k - mid1\n\n        if arr1[mid1] > arr2[mid2-1] and arr1[mid1-1] <= arr2[mid2]:\n            return arr1[mid1]\n        elif arr1[mid1] <= arr2[mid2]:\n            start = mid1 + 1\n        else:\n            end = mid1 - 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n\n    if n1 == 0:\n        return arr2[k-1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    # Divide k into two parts, where each part is a subarray.\n    # The number of elements in the first part is greater than or equal to the number of elements in the second part.\n    # We can find the middle elements of both arrays and compare them.\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n\n    if n1 == 0:\n        return arr2[k-1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    # Divide k into two parts, where each part is a subarray.\n    # The number of elements in the first part is greater than or equal to the number of elements in the second part.\n    # We can find the middle elements of both arrays and compare them.\n    # Then, we can recursively find the kth element in the remaining subarrays.\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n\n    # Find the middle elements of both arrays.\n    mid1 = n1 // 2\n    mid2 = k // 2\n\n    # Compare the middle elements of both arrays.\n    if arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    else:\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    An Armstrong number is a number that is equal to the sum of cubes of its digits.\n    \"\"\"\n    # Convert the number to a string to iterate over its digits\n    number_str = str(number)\n\n    # Calculate the sum of cubes of digits\n    sum_of_cubes = sum([int(digit)**3 for digit in number_str])\n\n    # Check if the sum of cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n        \n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Check if a number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string to iterate over its digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Calculate the sum of the raised digits to the power of the number of digits\n    sum_of_powers = sum([digit ** len(str(n)) for digit in digits])\n\n    # If the sum is equal to the original number, it is an armstrong number\n    return sum_of_powers == n"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as input and checks whether it is an Armstrong number or not.\n    \"\"\"\n    # calculate the number of digits in the number\n    digits = len(str(number))\n    # initialize a variable to store the sum of the nth power of each digit\n    sum_of_power = 0\n    # iterate through each digit in the number\n    for digit in str(number):\n        # raise the digit to the power of the number of digits and add it to the sum_of_power variable\n        sum_of_power += int(digit) ** digits\n    # check if the sum_of_power is equal to the original number\n    if sum_of_power == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as input and returns True if the number is Armstrong, else it returns False.\n    \"\"\"\n\n    # Convert the number to a string\n    number = str(number)\n\n    # Calculate the length of the number\n    n = len(number)\n\n    # Calculate the sum of the nth power of each digit\n    sum = 0\n    for digit in number:\n        sum += int(digit) ** n\n\n    # Check if the sum is equal to the original number\n    if sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as input and returns True if it is an Armstrong number,\n    otherwise, it returns False.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    # Get the length of the number\n    number_len = len(number_str)\n    # Calculate the sum of the nth power of each digit\n    sum_of_powers = sum([int(digit)**number_len for digit in number_str])\n    # If the sum is equal to the original number, it is an Armstrong number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(number)\n    \n    # Calculate the length of the number\n    num_len = len(num_str)\n    \n    # Calculate the sum of the nth power of each digit\n    sum_of_powers = sum([int(digit)**num_len for digit in num_str])\n    \n    # Check if the sum of powers is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    order = len(str(number))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_armstrong_number(number):\n    '''\n    Check whether the given number is an Armstrong number or not.\n    '''\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Get the length of the number\n    length = len(number_str)\n\n    # Initialize the sum to zero\n    sum_of_powers = 0\n\n    # Calculate the sum of the power of each digit\n    for digit in number_str:\n        sum_of_powers += int(digit) ** length\n\n    # If the sum is equal to the original number, then it is an Armstrong number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    # find the number of digits in the number\n    num_digits = len(str(number))\n    # repeat for each digit in the number\n    for i in range(num_digits):\n        # extract the i-th digit from the number\n        digit = number // 10**i % 10\n        # add the square of the digit to the sum\n        sum += digit ** num_digits\n    # check if the sum is equal to the number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        return \"Error: Input must be a positive integer.\"\n    else:\n        total = 0\n        for i in range(1, number + 1):\n            total += i\n        average = total / number\n        return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    '''\n    Function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum/n\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer input n and returns the sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n    average = sum_of_numbers / n\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    \n    # calculate and return the sum and average\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    '''\n    # Initialize sum and count to zero\n    sum = 0\n    count = 0\n    \n    # Iterate through the first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n        \n    # Calculate the average and return the sum and average as a tuple\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Find the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return total, average"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, else False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is even,\n    and False if the number is odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as an input and returns True if it is even,\n    otherwise, it returns False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes in a number as input and returns True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even,\n    otherwise False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and checks whether it is even or odd.\n    If it is even, it returns True else it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, and False if it is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_even(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is even,\n    and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict and char_dict[char] == 0:\n            return char\n        elif char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 0\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character.\n    If there is no repeated character, it returns None.\n    '''\n    # Convert the string to a list of characters to check for repeated characters\n    str1_list = list(str1)\n\n    # Create an empty dictionary to store the characters and their indices\n    char_dict = {}\n\n    # Iterate through the string list and check if the character is already in the dictionary\n    for i, char in enumerate(str1_list):\n        if char in char_dict:\n            # If the character is already in the dictionary, return it\n            return char\n        else:\n            # If the character is not in the dictionary, add it to the dictionary with its index\n            char_dict[char] = i\n\n    # If there is no repeated character, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None # if no repeated character found"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    # convert the string to a set to remove duplicates\n    str_set = set(str1)\n    # loop through the string and check if each character is in the set\n    for char in str1:\n        if char in str_set:\n            # if the character is in the set, return the character\n            return char\n    # if no repeated characters were found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there are no repeated characters, it returns None.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic\n\ndef is_lucid(n):\n    \"\"\"\n    A function to check if a number is Lucid or not.\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        flag = True\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        lucid.append(i)\n        i += 2\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        # Check if the number is lucid\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for num in range(1, n+1):\n        if num > 1 and all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            result.append(num)\n    return result"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    This function will return a list of all Lucid Numbers smaller than or equal to n.\n    \"\"\"\n    ludics = []\n    for num in range(2, n+1):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            ludics.append(num)\n    return ludics"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # split the string into a list of words\n    reversed_words = []  # create an empty list to store the reversed words\n    for word in words:\n        reversed_word = word[::-1]  # reverse the word\n        reversed_words.append(reversed_word)  # add the reversed word to the list\n    reversed_string =''.join(reversed_words)  # join the reversed words with spaces\n    return reversed_string  # return the reversed string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Splitting the string into words\n    reversed_words = [word[::-1] for word in words] # Reversing each word\n    reversed_string =''.join(reversed_words) # Joining the reversed words back into a string\n    return reversed_string # Returning the reversed string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as input and reverses the order of words in the string.\n    \"\"\"\n    # Splitting the string into a list of words\n    words_list = s.split()\n\n    # Reversing the order of words in the list\n    words_list.reverse()\n\n    # Joining the words in the list with a space in between\n    reversed_string =''.join(words_list)\n\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string into a list of words\n    reversed_words = [word[::-1] for word in words] # reverse each word in the list\n    return''.join(reversed_words) # join the reversed words back into a string separated by spaces"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = [word[::-1] for word in words]  # reverse each word\n    reversed_sentence =''.join(reversed_words)  # join the reversed words with a space\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into a list of words\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]  # reverse each word\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)  # join the reversed words back into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = []  # create an empty list to store the reversed words\n\n    # iterate over each word in the list and reverse it\n    for word in words:\n        reversed_word = \"\"\n        for char in word:\n            reversed_word = char + reversed_word\n        reversed_words.append(reversed_word)\n\n    # join the reversed words into a string and return it\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = [word[::-1] for word in s]\n    s = \" \".join(s)\n    return s"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the equivalent radians value.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n\nprint(radian_degree(30)) # output: 0.5235987755982988"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef degree_to_radian(degree):\n    '''\n    This function takes a float value in degrees and converts it to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees and returns the equivalent angle in radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Converts degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians\n"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literal = match.group()\n        print(f\"Literal: {literal}, Start index: {start}, End index: {end}\")"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(0), match.start(), match.end()))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return (match.group(), match.start(), match.end())"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return (matches[0], text.index(matches[0]), text.index(matches[0]) + len(matches[0]))\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    bell_num = [1]\n    for i in range(1, n+1): \n        bell_num.append(sum(bell_num[-1:i-1:-1]))\n    return bell_num[-1]\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell = [0] * (n + 1)\n        bell[0] = 1\n        for i in range(1, n + 1):\n            bell[i] = bell[i - 1] * (i)\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    bell = [0] * (n + 1)\n    for i in range(n + 1):\n        bell[i] = 1\n        for j in range(i):\n            bell[i] = bell[i] * (i - j) // (j + 1)\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1]\n    for i in range(2, n+1):\n        bell.append(bell[i-1]+bell[i-2])\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell * i\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[-i:]))\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell_list = [1]\n        for i in range(1, n+1):\n            bell_list.append(sum(bell_list[-i:]))\n        return bell_list[-1]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) < k:\n        return \"Invalid index\"\n    else:\n        list1 = list1[:k-1] + list1[k:]\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(lst, k):\n    '''\n    This function takes a list and a number k as input and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input.\n    It returns a new list with the same elements as the input list, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and removes the k'th element from the list.\n    \"\"\"\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a value k, and returns a new list with the same elements as the input list, but with the k'th element removed.\n    \"\"\"\n    list1 = list1[:k-1] + list1[k:]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and an integer L as input and returns a new list with the same elements as the input list,\n    but the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a value k and returns a new list with all elements of list1 except the k'th element.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = [row[N-1] for row in test_list]\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    This function takes in a list of lists representing a matrix and returns the maximum value in the Nth column.\n    \"\"\"\n    max_val = None\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Returns the maximum value of the Nth column of a matrix represented as a list of lists.\n    \"\"\"\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_value = max(max_value, row[N])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n_column = [lst[N-1] for lst in test_list]\n    return max(n_column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) >= N:\n            val = row[N-1]\n            if val > max_val:\n                max_val = val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = []\n    for i in range(len(test_list)):\n        column.append(test_list[i][N-1])\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    \n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1:\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if len(row) > N-1 and row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(i) for i in zip(*lst)]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_lst = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first\n    element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n        result.append(cum_sum)\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function will take a list as input and return the cumulative sum of all the values present in the list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initializing the cumulative sum variable to zero\n    cumulative_sum = 0\n    \n    # Iterating through the list of tuples\n    for tup in test_list:\n        # Adding the value of each tuple to the cumulative sum\n        cumulative_sum += tup[1]\n    \n    # Returning the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list of tuples and returns the cumulative sum of all the values that are present in the given list of tuples.\n    '''\n    cummulative_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cummulative_sum += val\n    return cummulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list as an argument and returns the cumulative sum of all the values in the list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    result = []\n    total = 0\n    for num in test_list:\n        total += num\n        result.append(total)\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the average values for each tuple\n    avg_list = []\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the average value for the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average value to the avg_list\n        avg_list.append(avg)\n    # Return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        length = len(num)\n        average = total / length\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        total = 0\n        for j in i:\n            total += j\n        result.append(total/len(i))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        total = 0\n        count = 0\n        for num in t:\n            total += num\n            count += 1\n        averages.append(total / count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    averages = []\n\n    # Iterate over each tuple in the input tuple of tuples\n    for tpl in nums:\n        # Compute the sum of the tuple elements\n        total = sum(tpl)\n        # Compute the average value\n        avg = total / len(tpl)\n        # Append the average value to the list of averages\n        averages.append(avg)\n\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples are not of the same length.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should have the same length\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuple lengths must be the same\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i], )\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i], )\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    if steps <= 1:\n        return steps\n    \n    dp = [[0]*(d+1) for _ in range(steps+1)]\n    \n    for i in range(steps+1):\n        dp[i][0] = 0\n    \n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            dp[i][j] = dp[i-1][j] + 1\n            \n            if j-steps[i-1] >= 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-steps[i-1]] + 1)\n                \n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    # Check if d is zero or negative, if yes, return -1 (no jumps required)\n    if d <= 0:\n        return -1\n    \n    # Check if d is less than or equal to steps, if yes, return 1 (one jump required)\n    if d <= steps:\n        return 1\n    \n    # Initialize a list to store the number of jumps required for each possible step\n    jumps = [0] * (d + 1)\n    \n    # Initialize the first step as 1 (to reach the first point)\n    jumps[0] = 1\n    \n    # Iterate over all possible steps from 1 to d\n    for i in range(1, d + 1):\n        # Calculate the number of jumps required for each possible step based on the previous jump\n        for j in range(steps):\n            if i + j <= d:\n                jumps[i + j] = min(jumps[i + j], jumps[i] + 1)\n    \n    # Return the number of jumps required for the final step\n    return jumps[d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the list of jumps required to reach each point\n    jumps = [float('inf') for i in range(d+1)]\n    jumps[0] = 0\n\n    # Traverse through all points from 1 to d and update the list of jumps required\n    for i in range(1, d+1):\n        for j in range(i):\n            if j + steps[j] >= i and jumps[j]!= float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n\n    # Return the number of jumps required to reach the point of form (d, 0)\n    return jumps[d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    n = len(steps)\n    dp = [[0 for i in range(d+1)] for j in range(n)]\n\n    for i in range(n):\n        for j in range(d+1):\n            if j == 0:\n                dp[i][j] = float('inf')\n            elif j >= steps[i]:\n                dp[i][j] = dp[i-1][j-steps[i]] + 1\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[n-1][d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    # Initialize a list to store the number of jumps required to reach each point\n    jumps = [float('inf')] * d\n    \n    # Initialize the first jump as 1 (from origin to first step)\n    jumps[0] = 1\n    \n    # Iterate through each step and calculate the number of jumps required to reach that step\n    for i in range(1, steps):\n        for j in range(min(i, d-1), -1, -1):\n            if i < j + steps and jumps[j]!= float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    \n    # Return the number of jumps required to reach the destination (d, 0)\n    return jumps[d-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    if steps < 1 or d < 1:\n        return 0\n    \n    jumps = 1\n    current_jump = 1\n    \n    while current_jump < d:\n        if current_jump + steps > d:\n            return jumps\n        else:\n            current_jump += steps\n            jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    if steps == 0:\n        return 0\n    elif steps < 0:\n        return -1\n    else:\n        jumps = 1\n        step = steps\n        while step >= d:\n            jumps += 1\n            step -= d\n        return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if steps == 0:\n        return steps\n    \n    if d == 0:\n        return steps\n    \n    if d < 0:\n        return -1\n    \n    if d > steps:\n        return -1\n    \n    res = min_Jumps(steps-d, d-1) + 1\n    \n    if d == steps:\n        res = res + 1\n    \n    return res\n"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 0:\n        return 0\n    elif steps < 0 or d < 0:\n        return -1\n    elif d == 0 and steps == 1:\n        return 1\n    elif d == 0 and steps > 1:\n        return -1\n    else:\n        if d >= steps:\n            return 1\n        else:\n            return min_Jumps(steps-1, d) + 1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    # Initialize a matrix to store the minimum number of jumps to reach each point\n    dp = [[float('inf')]*d for i in range(d)]\n    \n    # Initialize the first column to be 1 since we can only jump once to reach the first column\n    for i in range(d):\n        dp[i][0] = 1\n        \n    # Loop through each step in the input array\n    for step in steps:\n        # Loop through each possible starting point\n        for i in range(d):\n            # Loop through each possible ending point\n            for j in range(step, d):\n                # Update the minimum number of jumps required to reach the end point\n                dp[j][i] = min(dp[j][i], dp[j-step][max(i-step, 0)] + 1)\n                \n    # Return the minimum number of jumps required to reach the end point\n    return dp[d-1][0]"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n\n    :param nums1: first list of numbers\n    :param nums2: second list of numbers\n    :return: a list of the quotient of each pair of corresponding elements of nums1 and nums2\n    \"\"\"\n    quotient_list = []\n    for i in range(len(nums1)):\n        quotient_list.append(nums1[i] / nums2[i])\n    return quotient_list"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of the same length\")\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divides two lists element-wise and returns a new list with the results.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise and returns the result.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = ''\n    other_chars = ''\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            other_chars += char\n    return other_chars + nums"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Create an empty list to store the words with numbers and other words\n    num_words = []\n\n    # Iterate over the words\n    for word in words:\n        # Check if the word is a number\n        if word.isdigit():\n            # Add the word to the list of numbers\n            num_words.append(word)\n        else:\n            # Add the word to the list of non-number words\n            num_words.append(word)\n\n    # Join the list of non-number words and numbers to form the final string\n    final_str =''.join(num_words)\n\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    This function moves all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            if num_str:\n                test_str = test_str.replace(num_str, '') + num_str\n                num_str = ''\n            test_str += char\n    if num_str:\n        test_str = test_str.replace(num_str, '') + num_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    non_num_list = []\n\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n\n    return ''.join(non_num_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    # Splitting the string into words\n    words = test_str.split()\n\n    # Creating an empty list to store the words without numbers\n    new_words = []\n\n    # Looping through each word in the list\n    for word in words:\n        # Checking if the word contains a digit\n        if any(char.isdigit() for char in word):\n            # If it contains a digit, adding it to the new list\n            new_words.append(word)\n        else:\n            # If it doesn't contain a digit, adding it to the new list\n            new_words.append(word)\n\n    # Joining the words in the new list to form a new string\n    new_str = \" \".join(new_words)\n\n    # Returning the new string\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ''\n    other_chars = ''\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            other_chars += char\n    return other_chars + nums"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            result += char\n    return result + \"\".join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Move all numbers to the end of the given string.\n    \"\"\"\n    # Split the string into a list of words and a list of numbers\n    words, nums = [], []\n    for word in test_str.split():\n        if word.isdigit():\n            nums.append(word)\n        else:\n            words.append(word)\n    \n    # Concatenate the words and numbers in the original order\n    result = \"\"\n    for word in words:\n        result += word + \" \"\n    for num in nums:\n        result += num + \" \"\n    \n    # Remove the trailing space\n    return result[:-1]"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    This function takes a string as input and moves all the numbers to the end of the string.\n    '''\n    # Create two empty strings to hold the numbers and the non-numbers respectively.\n    nums = \"\"\n    non_nums = \"\"\n\n    # Loop through each character in the input string.\n    for char in test_str:\n        # If the character is a number, append it to the nums string.\n        if char.isdigit():\n            nums += char\n        # Otherwise, append it to the non_nums string.\n        else:\n            non_nums += char\n    \n    # Combine the non_nums string with the nums string and return the result.\n    return non_nums + nums"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[j] % a[i-1] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[i-1] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return dp[-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    for i in range(n):\n        if i == 0:\n            dp[i] = 1\n        elif i == 1:\n            dp[i] = 2 if a[i] % 2 == 0 else 1\n        else:\n            dp[i] = dp[i-1] + 1 if a[i] % 2 == 0 and dp[i-1] + 1 > dp[i-2] else dp[i-1]\n    return dp[-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 1:\n        return 1\n\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 1\n    i = 0\n    while i < len(a) - 1:\n        if a[i] % a[i+1] == 0:\n            max_size = max(max_size, i+2)\n            i += 1\n        else:\n            i += 1\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 1 if a[0] % a[1] == 0 else 0\n\n    for i in range(2, n):\n        dp[i] = 1 + dp[i-2] if a[i-2] % a[i] == 0 and dp[i-2]!= 0 else dp[i-1]\n\n    return dp[-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[False for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][i] = True\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[j][i] = dp[j][i-1] or dp[j+1][i-1]\n                if dp[j][i] and i-j+1 > res:\n                    res = i-j+1\n\n    return res"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [[0] * n for i in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 1\n            elif a[j] % a[i] == 0:\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = dp[i][j-1]\n    return dp[0][n-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i]%a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size and returns the median of the two lists.\n    \"\"\"\n    if n % 2 == 0:\n        # If the list size is even, find the average of the middle two elements\n        return (arr1[n//2] + arr1[(n//2)-1] + arr2[n//2] + arr2[(n//2)-1]) / 4\n    else:\n        # If the list size is odd, return the middle element\n        return (arr1[n//2] + arr2[n//2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Create a merged list by combining the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Find the median of the merged list\n    if n % 2 == 0:\n        median = (merged_list[n//2] + merged_list[n//2 - 1]) / 2\n    else:\n        median = merged_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists as input and returns their median.\n    '''\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr1[mid - 1] + arr1[mid]) / 2.0\n    else:\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted arrays and their size as input, and returns the median of the two arrays.\n    '''\n    # merge the two arrays\n    merged_arr = arr1 + arr2\n    \n    # sort the merged array\n    merged_arr.sort()\n    \n    # find the median\n    median = 0\n    \n    if n % 2 == 0: # if n is even\n        median = (merged_arr[n//2] + merged_arr[n//2 - 1]) / 2\n    else: # if n is odd\n        median = merged_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted arrays as input and returns their median.\n    \"\"\"\n    if n % 2 == 0:\n        # If the length of the array is even, then the median is the average of the middle two elements.\n        return (arr1[n//2] + arr1[n//2 - 1]) / 2\n    else:\n        # If the length of the array is odd, then the median is the middle element.\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2!= 0:\n        # If the size of both lists is odd, return the middle element of the merged list\n        mid = n // 2\n        return (merge(arr1, arr2, n))[mid]\n    else:\n        # If the size of both lists is even, return the average of the middle two elements of the merged list\n        mid = n // 2\n        return (merge(arr1, arr2, n))[mid - 1] + (merge(arr1, arr2, n))[mid] / 2\n\n\ndef merge(arr1, arr2, n):\n    '''\n    Merge two sorted lists into one sorted list.\n    '''\n    i = j = 0\n    merged_list = [None] * n\n    for k in range(n):\n        if arr1[i] < arr2[j]:\n            merged_list[k] = arr1[i]\n            i += 1\n        else:\n            merged_list[k] = arr2[j]\n            j += 1\n    return merged_list"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Create a new array to store the merged list\n    merged_arr = [0]*n\n    \n    # Merge the two sorted arrays into the new array\n    i = j = 0\n    for k in range(n):\n        if arr1[i] < arr2[j]:\n            merged_arr[k] = arr1[i]\n            i += 1\n        else:\n            merged_arr[k] = arr2[j]\n            j += 1\n    \n    # Find the median\n    median = merged_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one sorted list\n    merged_arr = arr1 + arr2\n    # Find the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2] + merged_arr[n//2 - 1]) / 2\n    else:\n        median = merged_arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merged_arr = []\n    i = j = 0\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n            \n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n    \n    if n % 2 == 0:\n        median = (merged_arr[n//2] + merged_arr[n//2 - 1]) / 2\n    else:\n        median = merged_arr[n//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays into one\n    arr = arr1 + arr2\n    \n    # Sort the merged array\n    arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Computes the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes in two parameters:\n    nums: a list of numbers\n    n: an integer value\n\n    The function returns a new list of numbers, where each number in the original list is raised to the power of n.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are uppercase, else False.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an input and returns True if all the characters in the string are uppercase and False otherwise.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and returns the uppercase version of it.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Assign the first and last element of the list to temp variables\n    temp = newList[0]\n    temp2 = newList[-1]\n    \n    # Assign the last element of the list to the first element of the list\n    newList[0] = temp2\n    \n    # Assign the temp variable to the last element of the list\n    newList[-1] = temp\n    \n    # Print the updated list\n    print(\"Updated list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"List should have atleast two elements\")\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1:\n        print(\"The length of the list should be more than 1.\")\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        print(\"After swapping the first and last element: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and returns a new list with the first and last element interchanged.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem\n        return newList\n    else:\n        return \"List should have at least two elements\""
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Initialize the first and last element in the list\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    # Swap the first and last element in the list\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of the semicircle\n    area_semicircle = math.pi * r**2\n    \n    # calculate the length of the longest side of the triangle\n    side_length = 2 * r * math.tan(math.pi/3)\n    \n    # calculate the area of the triangle\n    area_triangle = 0.5 * side_length**2\n    \n    # return the maximum area of the two possible triangles\n    return max(area_semicircle, area_triangle)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes in the radius of the semicircle and returns the area of the largest\n    triangle that can be inscribed in the semicircle.\n    \"\"\"\n    # Find the height of the triangle by using the formula:\n    # h = r * sin(60)\n    h = r * math.sin(math.pi/3)\n    # Find the area of the triangle using the formula:\n    # area = (sqrt(3)/2) * r^2\n    area = (math.sqrt(3)/2) * r**2 * h\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * r * r / 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n\n    # Calculate the area of the semicircle\n    area_semicircle = math.pi * r * r\n\n    # Calculate the length of the hypotenuse of the triangle\n    hypotenuse = 2 * r * math.sin(math.pi / 3)\n\n    # Calculate the area of the triangle\n    area_triangle = (0.5 * hypotenuse) * hypotenuse\n\n    # Calculate the maximum area of the triangle that can be inscribed in the semicircle\n    max_area = 0.5 * area_semicircle\n\n    # Return the maximum area of the triangle\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    # calculate the length of the legs of the triangle\n    h = r / math.sqrt(3)\n    # calculate the area of the triangle\n    area = 0.5 * r**2 * math.sqrt(3)\n    # calculate the length of the diagonal of the triangle\n    diagonal = 2 * r * math.sqrt(3)\n    # calculate the length of the largest semicircle that can be inscribed in the triangle\n    max_semicircle_radius = 0.5 * diagonal / math.tan(math.pi/6)\n    # calculate the area of the largest semicircle\n    max_semicircle_area = 0.5 * max_semicircle_radius**2 * math.pi\n    # calculate the area of the triangle inscribed in the largest semicircle\n    triangle_in_semicircle_area = 0.5 * r**2\n    # subtract the area of the triangle inscribed in the semicircle to get the remaining area of the triangle\n    remaining_triangle_area = max_semicircle_area - triangle_in_semicircle_area\n    # return the area of the remaining triangle\n    return remaining_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the radius of the inscribed circle\n    c = math.sqrt(r**2 / 2)\n    # Calculate the area of the triangle\n    area = (math.sqrt(3) / 4) * (c**2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    h = r * math.sqrt(3) / 2\n    area = 2 * (h ** 2 * math.sqrt(3) / 3)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = math.pi * r * r / 2 # formula for area of triangle inscribed in a circle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the radius of the circle that is tangent to the semicircle at the center\n    a = r / math.sqrt(2)\n    # Find the height of the triangle (h) that is inscribed in the semicircle at the center\n    h = math.sqrt(r**2 - a**2)\n    # Find the area of the largest triangle\n    area = 0.5 * a * h\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the diameter of the semicircle\n    d = 2 * r\n    \n    # Calculate the length of the legs of the largest triangle\n    a = math.sqrt(d**2 - r**2)\n    \n    # Calculate the area of the triangle\n    area = 0.5 * r**2 * math.sin(math.acos((a**2 + r**2 - d**2) / (2 * a * r)))\n    \n    return area"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number from the list.\n    \"\"\"\n    # get the length of the array\n    n = len(array)\n\n    # if end is None, set it to n-1\n    if end is None:\n        end = n - 1\n\n    # initialize a variable to store the missing number\n    missing_num = start\n\n    # loop through the array and check if the current number is missing\n    for i in range(start, end + 1):\n        if array[i] > start and array[i] - 1!= array[i - 1]:\n            missing_num = array[i]\n            break\n\n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: List of natural numbers sorted in ascending order\n    :param start: Start index of the list (Default=0)\n    :param end: End index of the list (Default=None)\n    :return: Smallest missing number\n    \"\"\"\n\n    # Find the end index if not provided\n    if end is None:\n        end = len(array)-1\n\n    # Initialize variables to keep track of the range of the array\n    min_num = array[start]\n    max_num = array[end]\n\n    # Initialize a dictionary to keep track of the count of each number in the array\n    num_count = {}\n\n    # Iterate over the array and count the number of occurrences of each number\n    for num in range(min_num, max_num+1):\n        num_count[num] = 0\n\n    for num in array[start:end+1]:\n        num_count[num] += 1\n\n    # Iterate over the dictionary to find the smallest missing number\n    for num in range(min_num, max_num+1):\n        if num_count[num] == 0:\n            return num\n\n    # If all numbers are present, return the next number in the range\n    return max_num+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i + 1:\n            continue\n        elif array[i] < i + 1:\n            return i + 1\n        else:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: List of sorted natural numbers\n    :param start: Starting index of the array (default is 0)\n    :param end: Ending index of the array (default is None)\n    :return: Smallest missing number\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Check for invalid input\n    if start < 0 or end >= len(array) or start > end:\n        return \"Invalid input\"\n\n    # Initialize variables\n    n = end - start + 1\n    actual_sum = (n + 1) * n // 2\n    total_sum = sum(array)\n\n    # Check for corner cases\n    if total_sum == actual_sum:\n        return n + 1\n    elif total_sum < actual_sum:\n        return n + 1 - actual_sum + total_sum\n\n    # Loop through the array and calculate the missing numbers\n    missing_numbers = []\n    for i in range(start, end + 1):\n        if i + 1!= array[i]:\n            missing_numbers.append(i + 1)\n\n    # Check for missing numbers at the beginning or end of the array\n    if start == 0:\n        missing_numbers.insert(0, start)\n    if end == len(array) - 1:\n        missing_numbers.append(end + 2)\n\n    # Calculate the smallest missing number\n    missing_numbers.sort()\n    smallest_missing = missing_numbers[0]\n    for i in range(1, len(missing_numbers)):\n        if missing_numbers[i]!= smallest_missing + i:\n            return smallest_missing + i\n\n    return smallest_missing + len(missing_numbers)"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] < 0 or array[i] > end - start + 1:\n            return \"Invalid input\"\n\n    for i in range(start, end + 1):\n        if array[i]!= i - start:\n            return i - start\n\n    return end - start + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: list of natural numbers sorted in ascending order.\n    :param start: starting index (inclusive).\n    :param end: ending index (inclusive).\n    :return: the smallest missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    if end < start:\n        return start\n\n    mid = (start + end) // 2\n\n    if array[mid] == mid:\n        return find_First_Missing(array, mid+1, end)\n\n    return find_First_Missing(array, start, mid-1)"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    # Step 1: Initialize a dictionary to keep track of the frequency of each number in the list.\n    frequency = {}\n    for i in range(start, end + 1):\n        if array[i] not in frequency:\n            frequency[array[i]] = 1\n        else:\n            frequency[array[i]] += 1\n\n    # Step 2: Traverse the dictionary and find the first missing number.\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    # Step 3: If all numbers are present in the list, return the next number after the last element in the list.\n    return end + 2\n"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if end < 0:\n        return None\n    for i in range(start, end + 1):\n        if array[i] < 1 or array[i] > end:\n            return None\n    for i in range(start, end + 1):\n        if array[i] == i+start:\n            continue\n        else:\n            return i+start\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers.\n    :param start: The starting index of the array (optional).\n    :param end: The ending index of the array (optional).\n    :return: The smallest missing number in the array.\n    \"\"\"\n\n    # if end is not provided, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # loop through the array from the start index to the end index\n    for i in range(start, end + 1):\n        # if the current element is missing, return it\n        if array[i]!= i + start:\n            return i + start\n\n    # if the loop completes without returning, all numbers are present and the last missing number is end + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Set all numbers in the array to positive to simplify the algorithm\n    for i in range(len(array)):\n        array[i] = abs(array[i])\n\n    # Mark all numbers as present\n    for i in range(len(array)):\n        j = abs(array[i]) - 1\n        if j < len(array) and array[j] > 0:\n            array[j] *= -1\n\n    # Find the first missing number\n    for i in range(start, len(array)):\n        if array[i] > 0:\n            return i + 1\n\n    # If all numbers are present, the first missing number is the next index\n    return len(array) + 1"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers in the list.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a list containing only even numbers from the input list.\n    '''\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    This function takes in a list of numbers as an argument and returns a list of even numbers from the list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers from the input list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers and returns a new list containing only the even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    # Add adjacent coordinates to the list\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i == 0 and j == 0):\n                continue\n            else:\n                adj.append((ele[0]+i, ele[1]+j))\n    # Remove coordinates already visited\n    adj = [coord for coord in adj if coord not in sub]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the four adjacent coordinates for the given coordinate tuple\n    adj = [(ele[0]+i, ele[1]+j) for i in [-1, 0, 1] for j in [-1, 0, 1] if (i, j)!= (0, 0)]\n    \n    # Exclude the adjacent coordinates that are out of bounds\n    adj = [adj[i] for i in range(len(adj)) if 0 <= adj[i][0] < len(sub) and 0 <= adj[i][1] < len(sub[0])]\n    \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    return [(ele[0]+i, ele[1]+j) for i in [-1, 0, 1] for j in [-1, 0, 1] if i!= 0 or j!= 0]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    \n    # adding adjacent coordinates of (x, y)\n    adj.append((x+1, y))\n    adj.append((x-1, y))\n    adj.append((x, y+1))\n    adj.append((x, y-1))\n    \n    # adding all the sub-coordinates to the adjacent list\n    for i in range(len(sub)):\n        x1, y1 = sub[i]\n        if (x1, y1) not in adj:\n            adj.append((x1, y1))\n    \n    # removing duplicates from the adjacent list\n    adj = list(set(adj))\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    Extract all adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = coord\n    return [(x+dx, y+dy) for dx in range(-1, 2) for dy in range(-1, 2) if (dx, dy)!= (0, 0) and not (dx, dy) in sub]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row = ele[0]\n    col = ele[1]\n    adjac_coords = []\n\n    # check if the adjacent coordinates are within the grid\n    if row > 0:\n        adjac_coords.append((row-1, col))\n    if row < 4:\n        adjac_coords.append((row+1, col))\n    if col > 0:\n        adjac_coords.append((row, col-1))\n    if col < 4:\n        adjac_coords.append((row, col+1))\n\n    return adjac_coords"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    res = [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]\n    if sub:\n        for s in sub:\n            if s in res:\n                res.remove(s)\n    return res"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    This function takes an element (coordinate tuple) and a list of sub-coordinates (default empty list) as input. \n    It returns a list of all adjacent coordinates to the given element.\n    '''\n    \n    x,y = ele\n    \n    adjac_list = [(x-1,y-1), (x,y-1), (x+1,y-1), (x-1,y), (x+1,y), (x-1,y+1), (x,y+1), (x+1,y+1)]\n    \n    if sub:\n        sub_adjac_list = []\n        for coord in adjac_list:\n            if coord not in sub:\n                sub_adjac_list.append(coord)\n        return sub_adjac_list\n    else:\n        return adjac_list"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple of coordinates as input and returns a list of tuples,\n    which represent the adjacent coordinates of the input coordinate tuple.\n    '''\n    # define the coordinates of the eight adjacent cells\n    dx = [-1, -1, -1,  0,  0,  1,  1,  1]\n    dy = [-1,  0,  1, -1,  1, -1,  0,  1]\n    \n    # initialize an empty list to store the adjacent cells\n    adj_cells = []\n    \n    # iterate over the eight directions\n    for i in range(8):\n        # compute the adjacent cell coordinates\n        adj_x = ele[0] + dx[i]\n        adj_y = ele[1] + dy[i]\n        \n        # check if the adjacent cell is within the bounds of the grid and not already in the list\n        if adj_x >= 0 and adj_x < 8 and adj_y >= 0 and adj_y < 8 and (adj_x, adj_y) not in sub:\n            # append the adjacent cell to the list\n            adj_cells.append((adj_x, adj_y))\n    \n    return adj_cells"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function takes a tuple of coordinates as input and returns a list of all the adjacent coordinates\n    '''\n    x, y = ele\n    \n    adj_lst = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    # extract all the adjacent coordinates of the given coordinate tuple\n    \n    if sub!= []:\n        # if sub list is not empty, remove the sub-coordinates from the adjacent coordinates list\n        adj_lst = [coord for coord in adj_lst if coord not in sub]\n    \n    return adj_lst"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    elif '_' in text:\n        return text.replace('_','')\n    else:\n        return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text.replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    \n    # Separate the zeroes and non-zeroes into two separate lists\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n            \n    # Concatenate the two lists to get the final list with zeroes at the end\n    final_list = zeroes + non_zeroes\n    \n    return final_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    zeros = []\n    non_zeros = []\n    \n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n            \n    num_list.clear()\n    num_list.extend(non_zeros)\n    num_list.extend(zeros)\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as an input and moves all the zeroes to the end of the list.\n    \"\"\"\n    # Find the indices of zeroes in the list\n    zero_indices = [i for i, num in enumerate(num_list) if num == 0]\n    \n    # Reverse the list to move the zeroes to the end\n    num_list.reverse()\n    \n    # Move the zeroes to the end of the list\n    for i in zero_indices:\n        num_list[i] = 0\n        \n    # Reverse the list again to put the zeroes back to the original positions\n    num_list.reverse()\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all the zeroes to the end of the given list.\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zeros = []\n    non_zeros = []\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n    return non_zeros + zeros"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.insert(len(num_list)-count, num_list.pop(i))\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n\n    Args:\n    num_list (list): A list of numbers\n\n    Returns:\n    list: A new list with all zeroes at the end of the original list\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as an argument and moves all the zeroes to the end of the list.\n    \"\"\"\n    # initializing two pointers to keep track of the position of non-zeroes and zeroes\n    i = 0\n    j = len(num_list) - 1\n    \n    # Traverse the list from both ends\n    while i < j:\n        # If the current element is not zero, then swap it with the element at the position pointed by i\n        if num_list[i]!= 0:\n            i += 1\n        # If the current element is zero, then swap it with the element at the position pointed by j\n        elif num_list[j] == 0:\n            j -= 1\n        # If the current element is zero and the next element is also zero, then swap them with each other\n        else:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n    \n    # Print the final list after moving the zeroes to the end\n    print(num_list)"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # Create two empty lists\n    zeroes = []\n    non_zeroes = []\n\n    # Iterate through the original list and separate zeroes and non-zeroes\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    # Return the original list with zeroes at the end\n    return non_zeroes + zeroes"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # initialize sum as 0\n    xor_sum = 0\n    # loop through the list\n    for i in range(n):\n        # loop through the list again\n        for j in range(i+1, n):\n            # calculate the xor value and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n    # return the sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of integers and calculates the sum of the XOR of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum+=arr[i]^arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    # initialize sum as 0\n    xor_sum = 0\n    \n    # loop through all possible pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the xor of the current pair of numbers and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    # return the final sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function will find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of XOR of all pairs of numbers in the list.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the list of integers\n    for i in range(n):\n        # XOR of all pairs of integers in the list\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    \n    # Return the sum of XOR of all pairs of integers in the list\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    This function sorts a list using heap sort algorithm.\n    \"\"\"\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for element in iterable:\n        hq.heappush(heap, element)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using heapsort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable[:]  # make a copy of the iterable\n    hq.heapify(heap)  # turn it into a heap\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts a list in ascending order using heap sort algorithm.\n    \"\"\"\n    # convert the list to a heap\n    heap = iterable[:]\n    hq.heapify(heap)\n    # extract elements from the heap and place them in a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    # reverse the sorted list to get the original order\n    sorted_list.reverse()\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the iterable\n    heap = iterable\n    hq.heapify(heap)\n\n    # sort the heap in descending order\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts a list using heap sort algorithm.\n    \"\"\"\n\n    # Convert the iterable to a max-heap.\n    hq.heapify(iterable)\n\n    # Extract elements from the heap one by one and put them in the correct order.\n    for i in range(len(iterable)-1, 0, -1):\n        # Swap the root with the last element of the heap.\n        hq.heappop(iterable)\n        # Heapify the remaining elements.\n        hq.heapify(iterable)\n\n    return iterable"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two arguments - actual_cost and sale_amount. \n    It checks whether the given sale amount has no profit and no loss.\n\n    Returns True if sale_amount has no profit and no loss, otherwise False.\n    \"\"\"\n\n    if sale_amount < actual_cost:\n        print(\"Sale amount cannot be less than actual cost.\")\n        return False\n\n    if (sale_amount - actual_cost) / actual_cost > 0.05:\n        print(\"Sale amount has more than 5% profit or loss.\")\n        return False\n\n    print(\"Sale amount has no profit and no loss.\")\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n    '''\n    if sale_amount > actual_cost:\n        print(\"No profit\")\n    elif sale_amount == actual_cost:\n        print(\"No profit or loss\")\n    else:\n        print(\"No loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    :param actual_cost: The actual cost of the product.\n    :param sale_amount: The amount of the product sold.\n    :return: True if no profit and no loss, else False.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount < actual_cost:\n        return True\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two parameters: actual_cost and sale_amount.\n    actual_cost is the cost of the item before selling, and sale_amount is the amount of the item sold.\n    The function checks whether the sale_amount has no profit and no loss.\n    Returns True if the sale_amount has no profit and no loss, otherwise returns False.\n    '''\n    if sale_amount >= actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes actual_cost and sale_amount as inputs and returns True if there is no profit and no loss, else it returns False.\n    '''\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments:\n    actual_cost: the actual cost of the product\n    sale_amount: the amount of the product sold\n\n    The function checks whether the sale_amount has no profit and no loss.\n    If the sale_amount is greater than or equal to the actual_cost, then it has no profit.\n    If the sale_amount is less than the actual_cost, then it has no loss.\n    If the sale_amount is equal to the actual_cost, then it has both profit and loss.\n    '''\n    if sale_amount >= actual_cost:\n        print(\"The sale has no profit.\")\n    elif sale_amount < actual_cost:\n        print(\"The sale has no loss.\")\n    else:\n        print(\"The sale has both profit and loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss.\n    :param actual_cost: The actual cost of the item.\n    :param sale_amount: The amount of the item sold.\n    :return: True if there is no profit and no loss, False otherwise.\n    '''\n    if sale_amount > actual_cost:\n        print(\"There is profit\")\n        return False\n    elif sale_amount < actual_cost:\n        print(\"There is loss\")\n        return False\n    else:\n        print(\"There is no profit and no loss\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes actual_cost and sale_amount as input and checks whether the given amount has no profit and no loss.\n    :param actual_cost: actual cost of the item\n    :param sale_amount: amount sold\n    :return: True if no profit and no loss, False otherwise\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"No profit\")\n        return False\n    elif sale_amount < actual_cost:\n        print(\"No loss\")\n        return False\n    else:\n        print(\"No profit and no loss\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss\n    :param actual_cost: The actual cost of the item\n    :param sale_amount: The amount received in the sale\n    :return: True if the amount has no profit and no loss, False otherwise\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n    If the sale_amount is greater than the actual_cost, it returns True.\n    If the sale_amount is less than or equal to the actual_cost, it returns False.\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # calculate the wind chill index using the formula WCI = 13.12 + 0.6215*T - 11.37*v^0.16 + 0.3965*T*v^0.16\n    wci = 13.12 + 0.6215*t - 11.37*math.pow(v_ms, 0.16) + 0.3965*t*math.pow(v_ms, 0.16)\n    \n    # round the wind chill index to the next integer\n    wci_rounded = round(wci)\n    \n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert km/h to m/s\n    v_ms = v / 3.6\n    \n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n    \n    # Round the result to the nearest integer\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3 or t > 50:\n        return 'Invalid input'\n    else:\n        w = v * 1.60934  # convert km/h to m/s\n        # formula for wind chill index\n        wc = 13.12 + 0.6215 * t - 11.37 * math.pow(w, 0.16) + 0.3965 * t * math.pow(w, 0.16)\n        return round(wc)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1000 / 3600  # Convert km/h to m/s\n    temperature = t + 273.15  # Convert celsius to kelvin\n    \n    # Calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (math.pow(wind_speed, 0.16)) + 0.3965 * temperature * (math.pow(wind_speed, 0.16))\n    \n    # Round to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + (0.6215 * t) - (35.75 * (math.pow(v, 0.16))) + (0.4275 * t * (math.pow(v, 0.16)))\n    return round(a)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to fahrenheit\n    t = (t * 9/5) + 32\n    \n    # calculate wind chill index\n    wind_chill = 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)\n    \n    # round the result to the nearest integer\n    wind_chill = round(wind_chill)\n    \n    return wind_chill"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert wind velocity from km/h to m/s\n    v_ms = v * 1000 / 3600\n\n    # calculate wind chill index\n    wc_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n\n    # round to the next integer\n    wc_index = round(wc_index)\n\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert the velocity to m/s\n    v_ms = v / 3.6\n    # calculate the wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215*t - 11.37*math.pow(v_ms, 0.16) + 0.3965*t*math.pow(v_ms, 0.16)\n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the Wind Chill Index given the wind velocity in km/h and temperature in celsius.\n    '''\n    v = v * 1000 / 3600  # Convert km/h to m/s\n    t = t + 273.15  # Convert celsius to kelvin\n    wind_chill_index = 13.12 + 0.6215 * v - 11.37 * math.exp(-0.1608 * v) + 0.3965 * t * math.exp(-0.0103 * v)\n    return round(wind_chill_index)"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total += len(name)\n    return total"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_names(names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in names:\n        if name[0].isupper():\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of sample names as input and returns the sum of lengths of names\n    after removing the names that start with a lowercase letter.\n    \"\"\"\n    # creating an empty list to store the names starting with uppercase letters\n    uppercase_names = []\n    # creating an empty list to store the names starting with lowercase letters\n    lowercase_names = []\n    # iterating through the list of sample names\n    for name in sample_names:\n        # checking if the name starts with a lowercase letter\n        if name[0].islower():\n            # if the name starts with a lowercase letter, appending it to lowercase_names list\n            lowercase_names.append(name)\n        else:\n            # if the name starts with an uppercase letter, appending it to uppercase_names list\n            uppercase_names.append(name)\n    # calculating the sum of lengths of names starting with uppercase letters and adding them to the sum of lowercase names\n    total_sum = sum([len(name) for name in uppercase_names]) + sum([len(name) for name in lowercase_names])\n    # returning the total sum\n    return total_sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    new_list = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]+\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function removes the parenthesis and what is in between them from a string.\n    \"\"\"\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(3*n-1)/2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    sum = 1\n    count = 1\n    while count < n:\n        sum += count\n        count += 1\n    return sum\n\nprint(is_nonagonal(1)) # Output: 1\nprint(is_nonagonal(2)) # Output: 3\nprint(is_nonagonal(3)) # Output: 6"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    i = 1\n    nonagonal = 0\n    while i <= n:\n        nonagonal += i\n        i += 1\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Finds the nth nonagonal number.\n    \"\"\"\n    return int((n * (3 * n - 1)) / 2)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    result = 0\n    \n    while count < n:\n        result += num\n        num += 1\n        count += 1\n        \n    return result"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    This function finds the nth nonagonal number.\n    '''\n    # Initialize variables\n    num = 1\n    count = 1\n    \n    # Loop until the nth nonagonal number is found\n    while count < n:\n        num += 1\n        count += num\n        \n    # Return the nth nonagonal number\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Finds the nth nonagonal number.\n    \"\"\"\n    i = 1\n    total = 0\n    while True:\n        total += i\n        i += 1\n        if total >= n:\n            return total - i + 1"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3*n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    count = 1\n    num = 1\n    \n    # loop through each number until nth nonagonal number is found\n    while count < n:\n        # add current number to sum of previous two numbers\n        num += count * (count + 1) / 2\n        count += 1\n        \n    return int(num)"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz.*z\\b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"\\b(?!\\w*z\\w*\\b)\\w*(z)\\w*\\b\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\w(?!.*[Zz])z\\w*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<!\\b)(?<!\\w)z(?!\\w)(?!\\b)\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?!.*(?:z))[a-zA-Z]*z[a-zA-Z]*\\b')\n    matches = pattern.findall(text)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*z)\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains 'z', except at the start and end of the word.\n\n    Args:\n    text: A string to check for z in the middle of words.\n\n    Returns:\n    True if the string contains 'z' in the middle of words, False otherwise.\n    \"\"\"\n    pattern = r'(?<!\\w)z(?!\\w)'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile(r'\\b(?!-)\\w*z\\w*(?<!-)\\b', re.IGNORECASE)\n    match = regex.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(?!^)(?<!\\w)z(?!\\w)\\b')\n    return pattern.search(text) is not None\n"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_array_upto_k(input, k):\n    \"\"\"\n    This function takes in an array and a position k, and reverses the array up to that position.\n    \"\"\"\n    if len(input) < k:\n        print(\"Invalid input, k is greater than or equal to the length of the array.\")\n        return input\n\n    # reverse the entire array\n    input = input[::-1]\n\n    # reverse the array up to k\n    input[:k] = input[:k][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Reverses an array up to a given position.\n\n    Args:\n        input (list): The input list to be reversed.\n        k (int): The position to which the array should be reversed.\n\n    Returns:\n        list: The reversed array.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes two arguments - input and k.\n    input is a list of integers\n    k is the position upto which the array needs to be reversed.\n    '''\n    # reverse the entire array\n    input.reverse()\n\n    # reverse only the elements upto the kth position\n    for i in range(k):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an array as input and reverses the array up to a given position k.\n    \"\"\"\n    # reversing the array from 0 to k-1\n    for i in range(k): \n        input[i], input[k-i-1] = input[k-i-1], input[i]\n        \n    # reversing the array from k to end\n    for i in range(k, len(input)): \n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k - 1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as input and returns the reversed array upto position k.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize variables\n    start = 0\n    end = k-1\n    arr_len = len(input)\n\n    # Swap elements from start and end indices until start index is less than end index\n    while start < end:\n        # Swap elements at start and end indices\n        input[start], input[end] = input[end], input[start]\n        # Move start index to right and end index to left\n        start += 1\n        end -= 1\n\n    # Reverse the array from start index to end index\n    start = 0\n    end = arr_len-1\n    while start < end:\n        # Swap elements at start and end indices\n        input[start], input[end] = input[end], input[start]\n        # Move start index to right and end index to left\n        start += 1\n        end -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array as input and reverses the elements from the beginning to the given position k.\n    '''\n    # Initialize two pointers, one at the beginning and the other at the end of the array\n    start = 0\n    end = len(input) - 1\n    \n    # Swap the elements from the start to the kth position and the kth position to the end\n    while start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n        \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes a tuple and a dictionary as input.\n    It adds the dictionary to the tuple and returns the updated tuple.\n    '''\n    updated_tuple = test_tup + (test_dict,)\n    return updated_tuple"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes a tuple and a dictionary as inputs and returns a tuple.\n    It adds the dictionary to the tuple and returns the updated tuple.\n    '''\n    # converting the dictionary to a tuple\n    dict_tup = tuple(test_dict.items())\n    # joining the tuples\n    final_tup = test_tup + dict_tup\n    # returning the updated tuple\n    return final_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes a tuple and a dictionary as inputs and returns a new tuple with the dictionary added.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize the DP table\n    dp = [[0 for j in range(n)] for i in range(n)]\n    # Initialize the diagonal cells with the cost\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    # Compute the DP table\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) + cost[i][j]\n    # Find the maximum average path\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            # Compute the average path cost\n            avg_cost = (dp[0][n - 1] - dp[i][j]) / (n - i + j)\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n\n    # Initialize the dp table with zeros\n    dp = [[0 for x in range(n)] for y in range(m)]\n\n    # Initialize the first row and column of the dp table with the values of the first row and column of the cost matrix\n    for i in range(m):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n\n    # Fill the rest of the dp table using the following recurrence relation:\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    # We can fill the dp table using a nested loop, but it will take O(mn) time, which is not efficient for large matrices.\n    # Instead, we will fill the dp table in a bottom-up manner, starting from the last row and last column.\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Starting from the last row and last column, we can find the maximum average path by iterating through all possible paths\n    # and computing the average cost of each path. We keep track of the maximum average found so far.\n    max_avg = float('-inf')\n    for i in range(m):\n        for j in range(n):\n            # Compute the number of cells visited in the current path\n            num_cells = i + j\n            if i == 0 and j == 0:\n                # There is only one cell in the path\n                avg_cost = cost[i][j]\n            else:\n                # Compute the average cost of the current path\n                avg_cost = (dp[i][j] - dp[i-1][j-1]) / num_cells\n\n            # Update the maximum average found so far\n            max_avg = max(max_avg, avg_cost)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize dp table\n    dp = [[0 for i in range(n)] for j in range(n)]\n    # Initialize the first row and first column\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    # Find the maximum average path\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            # Compute the average for all paths ending at cell (i, j)\n            if i == 0 and j == 0:\n                continue\n            avg = (dp[i][j] - dp[i-1][j] - dp[i][j-1] + cost[i][j]) / (2 if i == 0 or j == 0 else 3)\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1]"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = float('-inf')\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                continue\n            avg = (dp[i][j] - dp[i-1][j-1]) / (i+j-1)\n            max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for j in range(cols)] for i in range(rows)]\n    max_avg = 0\n    \n    # fill the first row\n    for j in range(cols):\n        dp[0][j] = cost[0][j]\n        if j == 0:\n            continue\n        dp[0][j] += dp[0][j-1]\n        \n    # fill the first column\n    for i in range(1, rows):\n        dp[i][0] = cost[i][0]\n        if i == 1:\n            continue\n        dp[i][0] += dp[i-1][0]\n        \n    # fill the rest of the matrix\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = cost[i][j]\n            if i == 1 and j == 1:\n                continue\n            if i == 1:\n                dp[i][j] += dp[i][j-1]\n            elif j == 1:\n                dp[i][j] += dp[i-1][j]\n            else:\n                dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n    \n    # compute maximum average path\n    for i in range(rows):\n        for j in range(cols):\n            if i == j == 0:\n                continue\n            if i == 0:\n                curr_avg = dp[i][j] / (j+1)\n            elif j == 0:\n                curr_avg = dp[i][j] / (i+1)\n            else:\n                curr_avg = (dp[i][j] - min(dp[i-1][j], dp[i][j-1])) / (i+j-1)\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = 0\n    \n    # Create a dp table to store the maximum average path cost for each cell\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # Fill the dp table\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n                \n    # Compute the maximum average path cost\n    for i in range(n):\n        for j in range(n):\n            # Compute the total cost of the current cell\n            cost_sum = cost[i][j]\n            if i > 0:\n                cost_sum += dp[i-1][j]\n            if j > 0:\n                cost_sum += dp[i][j-1]\n            if i > 0 and j > 0:\n                cost_sum -= dp[i-1][j-1]\n                \n            # Compute the number of cells visited in the current path\n            cells_visited = 1\n            if i > 0:\n                cells_visited += 1\n            if j > 0:\n                cells_visited += 1\n            if i > 0 and j > 0:\n                cells_visited -= 1\n                \n            # Compute the average cost of the current path\n            avg_cost = cost_sum / cells_visited\n            \n            # Update the maximum average path cost\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    # Initialize variables to keep track of the maximum average path found so far\n    max_average = 0\n    max_path = []\n\n    # Loop through each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n\n            # Initialize variables to keep track of the current path being considered\n            current_path = []\n            current_cost = 0\n            current_num_cells = 1\n\n            # Helper function to recursively find all paths starting from a given cell\n            def find_paths(i, j, cost, num_cells):\n                if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                    # If we reach the bottom right cell, add the current path to the max_path list\n                    current_path.append((i, j))\n                    current_path_cost = 0\n                    for cell in current_path:\n                        current_path_cost += cost[cell[0]][cell[1]]\n                    current_path_average = current_path_cost / len(current_path)\n                    if current_path_average > max_average:\n                        max_average = current_path_average\n                        max_path = current_path\n                    return\n                else:\n                    # Try moving right and down from the current cell\n                    if j < len(cost[0]) - 1:\n                        current_path.append((i, j))\n                        find_paths(i, j + 1, cost, num_cells + 1)\n                        current_path.pop()\n                    if i < len(cost) - 1:\n                        current_path.append((i, j))\n                        find_paths(i + 1, j, cost, num_cells + 1)\n                        current_path.pop()\n\n            # Recursively find all paths starting from the current cell\n            find_paths(i, j, cost, current_num_cells)\n\n    # Return the maximum average path found\n    return max_path, max_average"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1] / 2"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Create a 2D table to store the maximum average path so far\n    table = [[0 for j in range(n)] for i in range(n)]\n    # Initialize the first column and first row with the values of the cells\n    for i in range(n):\n        table[i][0] = cost[i][0]\n        table[0][i] = cost[0][i]\n    # Fill the rest of the table using dynamic programming approach\n    for i in range(1, n):\n        for j in range(1, n):\n            table[i][j] = max(table[i-1][j], table[i][j-1]) + cost[i][j]\n    # Compute the maximum average path\n    max_avg = table[n-1][n-1]/2\n    # Traverse the table to find all possible paths\n    paths = []\n    for i in range(n):\n        for j in range(n):\n            if i > 0 and j > 0:\n                paths.append(table[i][j] + paths[-1])\n            elif i > 0:\n                paths.append(table[i][j])\n            elif j > 0:\n                paths.append(table[i][j])\n    # Return the maximum average path\n    return max_avg, paths[-1]\n"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student_name, student_data in students.items():\n        height, weight = student_data\n        if height > h and weight > w:\n            filtered_students[student_name] = student_data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    result = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[student] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height >= min_height and weight >= min_weight:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    \n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    \n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    power_base = base ** power\n    while power_base > 0:\n        digit = power_base % 10\n        base_sum += digit\n        power_base //= 10\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base**power):\n        base_sum += int(digit)\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert power to integer if it's a float\n    power = int(power)\n    # Calculate the sum of digits to the power\n    digit_sum = sum(int(digit) ** power for digit in str(base))\n    return digit_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in str(base**power):\n        total += int(i)\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for i in range(power):\n        power_sum += int(base)\n        base = str(base)\n        base = int(base[0]) + int(base[1])\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    power_base = base ** power\n    for digit in str(power_base):\n        result += int(digit)\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert base to a string and initialize sum to 0\n    base_str = str(base)\n    base_len = len(base_str)\n    sum = 0\n    \n    # Iterate over each digit of the base\n    for i in range(base_len):\n        # Calculate the power of the digit\n        digit_power = int(base_str[i]) ** power\n        \n        # Add the digit power to the sum\n        sum += digit_power\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the power to an integer\n    power = int(power)\n\n    # initialize the sum to zero\n    sum_of_digits = 0\n\n    # convert the base to a string\n    base_string = str(base)\n\n    # iterate through each digit in the string\n    for digit in base_string:\n        # convert the digit to an integer\n        digit = int(digit)\n\n        # add the digit to the sum\n        sum_of_digits += digit ** power\n\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    n = base\n    for i in range(power):\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = r'\"(.*?)\"'\n    matches = re.findall(regex, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Regular expression to find words between quotation marks\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n\n    # Find all matches of pattern in the given text\n    matches = pattern.findall(text1)\n\n    # Return all the matches found in the text\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts the values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0],) * N\n    for i in range(1, N+1):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[i] * test_tup[i+1] for i in range(N))\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    result_tup = (test_tup[i] * test_tup[i+1] for i in range(n))\n    return tuple(result_tup)"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the element-wise sum of the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists as input and returns the sum of their corresponding elements.\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum.\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing the element-wise sum of the two lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The length of the two lists should be equal.\")\n\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists and returns a new list where each element is the sum of the corresponding elements of the input lists.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with the sum of corresponding elements from the input lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Input lists must have the same length.\")\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n        \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    This function takes two lists and returns their element-wise sum.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, _ in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        group = list(g)\n        if len(group) > 1:\n            result.append(group[0])\n        else:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, _ in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return [k for k, g in groupby(nums) if len(list(g)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n\nprint(consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])) # Output: [1, 2, 3, 4]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # groupby() function groups the consecutive duplicates together\n    # and returns a generator object\n    grouped_nums = groupby(nums)\n    result = []\n    for key, group in grouped_nums:\n        # group is a list of consecutive duplicates of key\n        # so we only need the first one and skip the rest\n        if key!= None:\n            result.append(key)\n        else:\n            continue\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function removes consecutive duplicates of a given list.\n    '''\n    # sort the list in ascending order\n    nums = sorted(nums)\n    \n    # use groupby() to group the sorted list by consecutive duplicates\n    result = [list(group) for key, group in groupby(nums)]\n    \n    # return the list of non-consecutive duplicates\n    return [nums[i] for i in range(len(nums)) if len(result[i]) == 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function takes in a list of integers and returns the list with consecutive duplicates removed.\n    '''\n    # Create a list of consecutive duplicates\n    consecutive = [(k, sum(1 for i in g)) for k, g in groupby(nums)]\n\n    # Create a list of non-consecutive duplicates\n    non_consecutive = [i for i in nums if i not in [k for k, v in consecutive]]\n\n    # Return the list with consecutive duplicates removed\n    return non_consecutive + [k for k, v in consecutive if v == 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for _, group in groupby(nums):\n        group = list(group)\n        if len(group) > 1:\n            result.extend(group[:-1])\n            result.append(group[-1])\n        else:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function takes in a list of integers and removes consecutive duplicates of the list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone using the formula\n    area = math.pi * r * h + math.pi * r**2\n    # Subtract the area of the base from the lateral surface area\n    area -= math.pi * r**2\n    # Return the lateral surface area\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * (r + h)\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone given its radius and height.\n    '''\n    return math.pi * r * h + math.pi * r**2"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h + 2 * math.pi * r**2"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius r and height h of a cone and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Use the formula for lateral surface area of a cone\n    area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[., ]+', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[\\s,.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace spaces, commas, or dots with a colon in a given text.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\. ]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r\"[\\s,.]\", \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colons\n    text = re.sub(r'\\s', ':', text)\n\n    # Replace commas with colons\n    text = re.sub(r',', ':', text)\n\n    # Replace dots with colons\n    text = re.sub(r'\\.', ':', text)\n\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize variables for the start and end indices of the array\n    start = 0\n    end = len(A) - 1\n\n    # Loop until the start index is less than or equal to the end index\n    while start <= end:\n        # Calculate the midpoint index of the current subarray\n        mid = (start + end) // 2\n\n        # If the midpoint element is equal to the target element, move the start index to the right to find the first occurrence\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n\n        # If the midpoint element is greater than the target element, move the end index to the left to search the left half of the subarray\n        elif A[mid] > x:\n            end = mid - 1\n\n        # If the midpoint element is less than the target element, move the start index to the right to search the right half of the subarray\n        else:\n            start = mid + 1\n\n    # If the target element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes an sorted array A and a number x as input and returns the index of the first occurrence of x in A. If x is not present in A, it returns -1.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # Check if the element to the left of mid is also x, if yes, then move the right pointer to mid-1\n            if mid > 0 and A[mid-1] == x:\n                right = mid - 1\n            else:\n                return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If the element is not present in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1  # x not found in A"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    :param A: A sorted array of integers.\n    :param x: An integer to search for.\n    :return: The index of the first occurrence of x in A, or -1 if x is not in A.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    ans = 0\n    \n    # iterate through all possible subarrays\n    for i in range(n):\n        for j in range(i, n):\n            # calculate the product of the subarray and add to answer\n            ans += arr[i] * arr[j] * ((j - i + 1) * (j - i + 2)) // 2\n            \n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n    left = [0]*n\n    right = [0]*n\n\n    for i in range(n):\n        left[i] = i\n        right[i] = n-1-i\n\n    for i in range(n):\n        for j in range(i, n):\n            ans += arr[i]*arr[j]*(right[j]-left[i]+1)\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    # initialize the sum of products\n    sum_prod = 0\n    # initialize the current product\n    curr_prod = 1\n    # loop through all sublists of the array\n    for i in range(n):\n        for j in range(i, n):\n            # update the current product by multiplying all the elements in the sublist\n            curr_prod = 1\n            for k in range(i, j+1):\n                curr_prod *= arr[k]\n            # update the sum of products by adding the current product to the sum\n            sum_prod += curr_prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1] * n\n    ans = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] * arr[i])\n            ans += dp[i]\n            \n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize sum of products to zero\n    s = 0\n    # Traverse through all sublists\n    for i in range(n):\n        # Find the product of all elements in sublist\n        p = 1\n        for j in range(i, n):\n            p *= arr[j]\n            # Add product to sum\n            s += p\n    return s"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            sum_prod += prod\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    prefix_prod = [1] * n\n    postfix_prod = [1] * n\n    \n    # calculate prefix product\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n    \n    # calculate postfix product\n    for i in range(n-2, -1, -1):\n        postfix_prod[i] = postfix_prod[i+1] * arr[i+1]\n    \n    # calculate sum of products of subarrays\n    sum_prod = 0\n    for i in range(n):\n        sum_prod += prefix_prod[i] * postfix_prod[i]\n        \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_subarray_prod(arr):\n    n = len(arr)\n    # Initialize variables for sum and product of sublists\n    sublist_sum = 0\n    sublist_prod = 1\n    # Initialize variables for left and right pointers of sublists\n    left = 0\n    right = 0\n    # Initialize variables for sum and product of all sublists\n    sublist_prod_sum = 0\n    # Loop through each element in the list\n    for i in range(n):\n        # Add the product of the current element to the sublist product\n        sublist_prod *= arr[i]\n        # Update the sublist sum and right pointer\n        sublist_sum += arr[i]\n        right = i\n        # Check if the sublist product is greater than the current maximum product\n        if sublist_prod > sublist_prod_sum:\n            sublist_prod_sum = sublist_prod\n        # Check if the sublist product has become negative, reset the sublist\n        if sublist_prod < 0:\n            sublist_prod = 1\n            sublist_sum = arr[i]\n            left = right + 1\n    # Loop through each possible sublist and add its product to the sum\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist_prod = 1\n            sublist_sum = 0\n            for k in range(left, right+1):\n                if k >= i and k < j:\n                    sublist_prod *= arr[k]\n                    sublist_sum += arr[k]\n            if sublist_prod > sublist_prod_sum:\n                sublist_prod_sum = sublist_prod\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_product = [1] * (n + 1)\n    suffix_product = [1] * (n + 1)\n    ans = 0\n\n    for i in range(1, n + 1):\n        prefix_product[i] = prefix_product[i - 1] * arr[i - 1]\n\n    for i in range(n - 1, -1, -1):\n        suffix_product[i] = suffix_product[i + 1] * arr[i]\n\n    for i in range(n):\n        ans += prefix_product[i] * suffix_product[i + 1]\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n\n    suffix_prod = [1] * n\n    prefix_prod[0] = arr[0]\n    suffix_prod[n-1] = arr[n-1]\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i]\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i]\n    sublist_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sublist_sum += prefix_prod[i] * suffix_prod[j]\n    return sublist_sum"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes a number as input and toggles the bits of the number except the first and the last bit.\n    \"\"\"\n    # Find the mask for the bits in the middle\n    mask = (1 << (len(bin(n)) - 3)) - 1\n    \n    # Toggle the bits using the XOR operator\n    n = n ^ mask\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Finding the rightmost bit\n    rightmost_bit = 1 << (len(bin(n))-2)\n    \n    # Clearing the rightmost bit\n    n &= ~rightmost_bit\n    \n    # Finding the leftmost bit\n    leftmost_bit = rightmost_bit >> 1\n    \n    # Setting the leftmost bit\n    n |= leftmost_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles bits of the number except the first and the last bit.\n    \"\"\"\n    mask = 0\n    for i in range(1, 32):\n        mask = (mask << 1) | 1\n    mask = ~mask\n    return (n & mask) ^ (n >> 1)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # Toggling the bits\n    n = (n >> 1) ^ (n << 31)\n    # Returning the result\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the given number\n    binary = bin(n)[2:]\n    \n    # Convert the binary string into a list of bits\n    bits = [int(bit) for bit in binary]\n    \n    # Toggle the bits of the middle two bits (except the first and last)\n    for i in range(1, len(bits)-2):\n        bits[i] = 1 - bits[i]\n        \n    # Convert the list of bits back to a binary string\n    binary = ''.join([str(bit) for bit in bits])\n    \n    # Convert the binary string back to an integer\n    result = int(binary, 2)\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Toggle the bits of n\n    n ^= (n >> 1)\n    # Clear the first and last bits\n    n &= ~(1 << 0 | 1 << 31)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    mask = ((1 << len(bin(n)[2:])) - 2) << 1\n    return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # get all bits except the first and the last one\n    mask = (1 << len(bin(n)) - 3) - 1\n    # invert the bits of the number and apply the mask to get only the middle bits\n    middle_bits = n ^ (mask << 1)\n    # toggle the middle bits\n    toggled_bits = ~middle_bits & ((1 << len(bin(middle_bits))) - 1)\n    # apply the toggled bits to the original number to get the result\n    result = n ^ toggled_bits\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes an integer as input and toggles all the bits of the number except the first and the last bit.\n    \"\"\"\n    # Get the binary representation of the number\n    binary_str = bin(n)[2:]\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through the binary string and toggle all bits except the first and the last bit\n    for i in range(len(binary_str)):\n        if i!= 0 and i!= len(binary_str) - 1:\n            if binary_str[i] == '0':\n                result += 2 ** (len(binary_str) - i - 1)\n            else:\n                result -= 2 ** (len(binary_str) - i - 1)\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # XOR all bits with 111...1111, which clears the first and last bit\n    mask = (1 << n.bit_length()) - 1\n    # XOR all bits with 101...0101, which toggles all bits except the first and the last one\n    toggled = n ^ (n >> 1)\n    # XOR the masked bits with the toggled bits to get the result\n    return toggled ^ mask"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i+1"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if result:\n        return True\n    else:\n        return False\n\nstring = 'Apple'\nprint(check_str(string)) # True\n\nstring = 'Orange'\nprint(check_str(string)) # True\n\nstring = 'Hello'\nprint(check_str(string)) # False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    return pattern.match(string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    This function takes a string as input and returns True if the string starts with a vowel, else False.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1)*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\n\nprint(geometric_sum(5)) # Output: 2.888888888888889"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - 1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1-n**(1/n))/(1-1/n)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n\n    Args:\n    n (int): The number whose geometric sum is to be calculated.\n\n    Returns:\n    float: The calculated geometric sum.\n\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + geometric_sum(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The geometric sum of\", n, \"is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - 1/(n-1)) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize the starting number as 1\n    num = 1\n    # initialize the count of digits as 1\n    count = 1\n    # initialize the index of smallest triangular number with n digits as 1\n    index = 1\n    while count <= n:\n        # calculate the next triangular number\n        num += index\n        # increment the index by 1\n        index += 1\n        # calculate the number of digits in the next triangular number\n        count = int(math.log10(num))+1\n    # return the index of the smallest triangular number with n digits\n    return index-1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 1\n    total = 0\n    while(True):\n        total += count\n        if(len(str(total)) >= n):\n            return count\n        count += 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the index of the first triangular number with n digits\n    index = 10**n - 1\n    \n    # Calculate the smallest triangular number with n digits\n    triangular_number = (index * (index + 1)) // 2\n    \n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function finds the index of the smallest triangular number with n digits.\n    '''\n    # Calculate the number of digits in the nth triangular number\n    num_digits = int(math.log10(n * (n + 1) // 2) + 1)\n    \n    # Check if the number of digits is valid\n    if num_digits <= 0:\n        return \"Invalid input\"\n    elif num_digits == 1:\n        return 0\n    else:\n        # Calculate the nth triangular number\n        triangular_num = int(math.pow(10, num_digits - 1) + 1)\n        \n        # Calculate the index of the smallest triangular number with n digits\n        index = num_digits * (num_digits - 1) // 2\n        \n        # Check if the triangular number is the nth triangular number\n        if triangular_num == n:\n            return index - 1\n        else:\n            return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n+1)//2 + find_Index(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = (n*(n+1))//2\n    return triangular_num - 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    triangular_number = n * (n+1) // 2\n    return int(math.log10(triangular_number))+1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    count = 0\n    for i in range(1, int(math.pow(10, n))):\n        count += 1\n        num = int(math.pow(10, n-1) + i*(math.pow(10, n-1)-1))\n        if int(math.sqrt(2*num))**2 == 2*num:\n            return count\n    return -1 # If no triangular number found with n digits\n\nprint(find_Index(3)) # 167\nprint(find_Index(4)) # 5553"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Calculate the number of digits in the smallest triangular number with n digits\n    num_digits = n * (n + 1) // 2\n    \n    # Convert the number to a string and get its digits\n    digits = [int(d) for d in str(num_digits)]\n    \n    # Find the index of the leftmost digit in the digits list\n    index = 0\n    while digits[index] == 0:\n        index += 1\n    \n    # If all digits are 0, return 0 (there is no triangular number with n digits)\n    if index == len(digits):\n        return 0\n    \n    # Otherwise, return the index of the leftmost non-zero digit in the digits list\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef find_index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    num = 1\n    triangular_num = 0\n    \n    while count < n:\n        triangular_num += num\n        count += 1\n        num += 1\n        \n    # Finding the index of the smallest triangular number\n    index = n\n    triangular_num = math.factorial(n)\n    while triangular_num > 0:\n        triangular_num //= 10\n        index -= 1\n        \n    return index"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a dictionary\n    where each adjacent pair of elements in the tuple is converted\n    to a key-value pair in the dictionary.\n\n    :param test_tup: A tuple of elements\n    :return: A dictionary with key-value pairs created from adjacent elements in the tuple\n    \"\"\"\n    result = {}\n    for i in range(len(test_tup)-1):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input is not a tuple\")\n    \n    dict_ = {}\n    for i in range(len(test_tup)):\n        if i%2==0:\n            dict_[test_tup[i]] = test_tup[i+1]\n    \n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)-1):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(0, len(test_tup), 2):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function converts a given tuple into a dictionary using adjacent elements.\n    \"\"\"\n    res_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            res_dict[test_tup[i]] = test_tup[i+1]\n    return res_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i+1 < len(test_tup):\n            new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if i == 0:\n            same = s[i]\n        elif s[i]!= same:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all characters in the string are same else False.\n    '''\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are same, otherwise False.\n    \"\"\"\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same, else returns False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s:\n        if char!= s[0]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if i == 0:\n            prev = s[i]\n        elif s[i]!= prev:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Returns True if all characters in the string s are the same,\n    and False otherwise.\n    \"\"\"\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in the string are the same or not.\n    '''\n    return len(set(s)) == 1"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron given its side length.\n    '''\n    # Use Heron's formula to calculate the area\n    s = (side * 2) / math.sqrt(3)\n    area = math.sqrt(6) * s * s / 4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(3) / 4) * side**2) / (1 + math.sqrt(3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(6)/4) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    s = (3 * side) / (2 * (math.sqrt(3) + 1))\n    \n    # Calculate the area\n    area = (math.sqrt(3) / 2) * side * s\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6)/4)*side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of one of the sides of a tetrahedron\n    as input and returns the area of the tetrahedron.\n    '''\n    area = (6 * (math.sqrt(2) * side**2)) / (1 + (2/3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 * (math.sqrt(5) - 1) / 2) * side ** 2\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * math.sqrt(6) * side ** 2) / 4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * math.sqrt(6)) / (4 * math.tan(math.pi / 6)) * (side ** 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(2) / 2)) ** 2 * side ** 2\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the given list by specified number of items to the right direction.\n    \"\"\"\n    return lst[-n:] + lst[:-n]\n"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a list to the right by k items.\n    \"\"\"\n    n = len(lst)\n    k = k % n\n    return lst[-k:] + lst[:-k]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    return lst[n:] + lst[:n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    temp = [0] * n\n    for i in range(n):\n        temp[(i+m)%n] = list[i]\n    for i in range(n):\n        list[i] = temp[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and a number n as input and returns the list rotated to the right by n items.\n    \"\"\"\n    return lst[n:] + lst[:n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list and a number m as input and returns a new list with the elements of the original list rotated by m positions to the right.\n    '''\n    n = len(list)\n    if m >= n:\n        m = m % n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    temp = list[n-m:n]\n    list[n-m:n] = list[0:n-m]\n    list[0:n-m] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n   # to handle cases where m is greater than n\n    \n    # Reverse the first m elements\n    lst[:m] = reversed(lst[:m])\n    \n    # Reverse the remaining elements\n    lst[m:] = reversed(lst[m:])\n    \n    # Reverse the entire list\n    lst = reversed(lst)\n    \n    return list(lst)"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right direction by n items.\n    \"\"\"\n    n %= len(lst)\n    lst[:] = lst[-n:] + lst[:-n]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n positions.\n    \"\"\"\n    n = n % len(lst) # To avoid rotation of entire list\n    lst = lst[-n:] + lst[:-n]\n    return lst"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Check if the given tuple has any None value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = set(str(num))\n        if all(int(digit) % num == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    divisible = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            divisible.append(num)\n    return divisible"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return [x for x in range(startnum, endnum+1) if all(int(digit) % x == 0 for digit in str(x))]"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    is_divisible = lambda n: all(int(digit) % n == 0 for digit in str(n))\n\n    divisible_nums = [num for num in range(startnum, endnum+1) if is_divisible(num)]\n\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # create a lambda function to check if a number is divisible by every digit in it\n    is_divisible = lambda num: all(int(digit)!= 0 and num % int(digit) == 0 for digit in str(num))\n\n    # iterate over the range of numbers and check if they are divisible by every digit\n    for num in range(startnum, endnum+1):\n        if is_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for i in range(startnum, endnum+1):\n        digits = [int(d) for d in str(i)]\n        if all(i % d == 0 for d in digits):\n            result.append(i)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return [num for num in range(startnum, endnum+1) if all(int(digit)!= 0 for digit in str(num)) and all(num % int(digit) == 0 for digit in str(num))]\n"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(lambda x: num % x == 0, digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r ** 2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs.\n    It returns the area of the sector. If the angle is larger than 360 degrees,\n    it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / (2 * math.pi)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r ** 2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return round((math.pi * r ** 2) * (a / 360), 2)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r**2 * (a/360) * math.pi\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (math.pi * r ** 2) * (a / 360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a*(math.sin(a*math.pi/180))/(2*math.pi)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360\n"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    \n    # Initialize variables\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Fill L matrix\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # Find the longest common subsequence\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] < L[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0] * (o + 1) for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], lcs[i][j - 1][k], lcs[i][j][k - 1])\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    lcs[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    lcs = [[[0 for k in range(p + 1)] for j in range(n + 1)] for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], lcs[i][j - 1][k], lcs[i][j][k - 1])\n\n    return lcs[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D array to store lengths of LCS for all subsequences of three strings\n    lcs = [[[0]*(o+1) for i in range(n+1)] for j in range(m+1)]\n    \n    # Fill the LCS array using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    \n    # Find the length of the LCS and its corresponding subsequence\n    length = lcs[m][n][o]\n    index = lcs[m][n][o]\n    subsequence = []\n    \n    i = m\n    j = n\n    k = o\n    \n    while index > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            subsequence.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n            \n        elif lcs[i-1][j][k] > lcs[i][j-1][k]:\n            i -= 1\n        elif lcs[i-1][j][k] < lcs[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    # Reverse the subsequence to get the correct order\n    subsequence.reverse()\n    \n    return length, subsequence"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store lengths of longest common suffixes of subsequences of X[0..n-1], Y[0..m-1], and Z[0..o-1]\n    lcs = [[[0] * (o+1) for i in range(m+1)] for j in range(n+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, o+1):\n                if X[j-1] == Y[i-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Read the LCS backwards to get the actual LCS string\n    lcs_str = \"\"\n    i = n\n    j = m\n    k = o\n    while lcs[i][j][k] > 0:\n        if X[j-1] == Y[i-1] == Z[k-1]:\n            lcs_str = X[j-1] + lcs_str\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k]:\n            i -= 1\n        elif lcs[i-1][j][k] < lcs[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs_str"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a matrix to store lcs values\n    m = [[[0 for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n    # fill the matrix using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    m[i][j][k] = m[i-1][j-1][k-1] + 1\n                else:\n                    m[i][j][k] = max(m[i-1][j][k], m[i][j-1][k], m[i][j][k-1])\n    # find the longest common subsequence and return it\n    lcs = \"\"\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif m[i-1][j][k] > m[i][j-1][k]:\n            i -= 1\n        elif m[i-1][j][k] > m[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    lcs = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0]*(o+1) for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[\\w\\d])[A-Z](?=[\\w\\d])', r' \\g<0>', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    words_with_spaces =''.join(words)\n    return words_with_spaces"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    This function takes a string as input and returns the modified string with spaces added between words starting with capital letters.\n    '''\n    # Using regex to split the string into words and then add spaces before each capitalized word\n    words = re.findall(r'\\b[A-Z]\\w+', str1)\n    modified_str = ''\n    for word in words:\n        modified_str += word +''\n    return modified_str[:-1]"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Create a new list with spaces between capital words\n    new_list = []\n    for word in words:\n        if word[0].isupper():\n            new_list.append(' ')\n        new_list.append(word)\n\n    # Join the new list into a string\n    new_string = ''.join(new_list)\n\n    return new_string"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Use regex to find capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Join the capitalized words with spaces in between\n    capitalized_words_spaces =''.join(capitalized_words)\n    \n    # Replace any remaining non-capitalized words with spaces\n    non_capitalized_words_spaces = re.sub(r'\\b[a-z]+\\b','', str1)\n    \n    # Combine the two strings\n    result = capitalized_words_spaces + non_capitalized_words_spaces\n    \n    # Return the result\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'[A-Z][a-z]*', str1)\n    words = [word.strip() for word in words if word!= '']\n    return''.join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regex pattern to match capitalized words\n    pattern = re.compile(r'(?<![\\w\\d])([A-Z][a-z]+)')\n    \n    # Use the regex pattern to find all capitalized words in the string\n    words = re.findall(pattern, str1)\n    \n    # Join the words with spaces and return the modified string\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to find all capital words in the string\n    capital_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Use string replace to add spaces between capital words\n    capital_words_spaces = re.sub(r'\\b([A-Z][a-z]*)', r' \\1', str1)\n    \n    return capital_words_spaces"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with spaces in between\n    result =''.join(words)\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list of strings to a list of tuples\n    nums = [tuple(map(int, x.split())) for x in nums_str]\n    # sort the list of tuples by the second element (i.e., the numeric value) of each tuple\n    nums.sort(key=lambda x: x[1])\n    # convert the list of tuples back to a list of strings\n    nums_str = [str(x[0]) for x in nums]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: [int(c) for c in x])"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function sorts a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: [int(i) if i.isdigit() else i for i in x.split()])"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=lambda x: [int(c) for c in x.split()])"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: [int(c) for c in x])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all the strings to integers and sort the list\n    nums = [int(num_str) for num_str in nums_str]\n    nums.sort()\n\n    # convert the sorted integers back to strings and return the list\n    return [str(num) for num in nums]"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Adding tuple to list using append() method\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Check that both inputs are valid\n    if not isinstance(test_list, list) or not isinstance(test_tup, tuple):\n        return \"Both inputs must be lists or tuples.\"\n    \n    # Append the tuple to the list and return it\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function takes two arguments - test_list and test_tup. \n    It appends the elements of test_tup to test_list and returns the updated list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Adds a tuple to a list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        return False\n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_heap_property = True\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        min_heap_property = False\n        \n    if right < len(arr) and arr[right] < arr[i]:\n        min_heap_property = False\n        \n    return min_heap_property\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    for i in range(len(arr)//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n        \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr):\n        if (2*i + 1) < len(arr) and arr[i] > arr[2*i + 1]:\n            return False\n        if (2*i + 2) < len(arr) and arr[i] > arr[2*i + 2]:\n            return False\n        return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n    else:\n        return True\n\ndef check_min_heap(arr):\n    if len(arr) == 1:\n        return True\n    else:\n        return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    if i >= n:\n        return True\n    \n    left = 2*i + 1\n    right = 2*i + 2\n    \n    if left < n and arr[i] > arr[left]:\n        return False\n    \n    if right < n and arr[i] > arr[right]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    \n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    \n    # Base case for leaf nodes\n    if left_child >= len(arr) and right_child >= len(arr):\n        return True\n    \n    # Check if left child is less than the parent\n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    \n    # Check if right child is less than the parent\n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    \n    # Recursive call for left and right children\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    # If the index is greater than or equal to n/2, then it is already a leaf node.\n    if i >= n//2:\n        return True\n\n    # If the left child of the root exists and is greater than the root, return False.\n    if i * 2 + 1 < n and arr[i] > arr[i * 2 + 1]:\n        return False\n\n    # If the right child of the root exists and is greater than the root, return False.\n    if i * 2 + 2 < n and arr[i] > arr[i * 2 + 2]:\n        return False\n\n    # Recursively check if the left and right subtrees are also min heaps.\n    return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)\n\n\ndef check_min_heap(arr):\n    n = len(arr)\n    # If the array is empty, it cannot represent a min heap.\n    if n == 0:\n        return False\n\n    # Check if the first element is the root of the heap.\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    if len(arr) == 0:\n        return True\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    \n    return True\n\ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    for i in range(len(arr)//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents min heap or not.\n    It recursively checks the left and right subtrees of each node.\n    If any two nodes have a value greater than their parent, it returns False.\n    If the array is a valid min heap, it returns True.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    if left < len(arr) and not check_min_heap_helper(arr, left):\n        return False\n    if right < len(arr) and not check_min_heap_helper(arr, right):\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a valid min heap.\n    It first checks if the array is empty or not.\n    If the array is not empty, it calls the check_min_heap_helper function on the root node.\n    If the root node is valid, it checks if the left and right subtrees are valid min heaps.\n    If both subtrees are valid, it returns True.\n    Otherwise, it returns False.\n    '''\n    if len(arr) == 0:\n        return True\n    if not check_min_heap_helper(arr, 0):\n        return False\n    left = 2 * 0 + 1\n    right = 2 * 0 + 2\n    if left < len(arr) and not check_min_heap(arr[left:]):\n        return False\n    if right < len(arr) and not check_min_heap(arr[right:]):\n        return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Finds the nth Jacobsthal number, which is also the (2n-1)th number in the sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        j_prev = 0\n        for i in range(2, n+1):\n            j = 3*j_prev + j\n            j_prev = j - j_prev\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    This function takes an integer n as input and returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # Sort the tuple list based on the second element of each tuple (i.e. the value to be sorted)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n    test_list: list of tuples, where each tuple has a value and a frequency count\n    K: integer, the number of records to find\n\n    Returns:\n    list of tuples containing the minimum K records\n\n    \"\"\"\n    # Sort the list by frequency count in descending order\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n\n    # Return the first K records\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x:x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    test_list = sorted(test_list, key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Return the first K elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a value of K,\n    and returns a list of the minimum K tuples in the list.\n    '''\n    # First, we sort the list of tuples based on the second element of each tuple (i.e., the value we want to minimize)\n    test_list.sort(key=lambda x: x[1])\n\n    # Then, we return the first K elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes two arguments:\n        - test_list: A list of tuples containing integers as values\n        - K: An integer denoting the number of minimum records to be returned\n    \n    This function returns a list of tuples containing the K minimum records.\n    '''\n    # Sort the test_list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Return the first K tuples in the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return \"Invalid input\"\n    else:\n        # Sort the list of tuples in ascending order based on the second element of each tuple\n        sorted_list = sorted(test_list, key=lambda x: x[1])\n        # Select the first K elements from the sorted list\n        result_list = sorted_list[:K]\n        return result_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    This function extracts common elements from three lists under the same index.\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Returns the second smallest number in a list of numbers.\n    If there is no second smallest number, returns None.\n    \"\"\"\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest if second_smallest!= float('inf') else None"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element in the list (the second smallest number)\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function finds the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers_sorted = sorted(numbers)\n    \n    # Return the second smallest number\n    return numbers_sorted[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initialize two variables to hold the smallest and second smallest numbers\n    smallest = second_smallest = float('inf')\n\n    # Traverse the list and update the smallest and second smallest variables accordingly\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function will match a string that has an 'a' followed by zero or one 'b's.\n    '''\n    pattern = r'a(b)?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)?'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a[b]*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a([b]*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function counts the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function will count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function counts the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in sublist_dict:\n            sublist_dict[tuple(sublist)] = 1\n        else:\n            sublist_dict[tuple(sublist)] += 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists.append(sublist)\n    \n    sublist_dict = {}\n    for sublist in sublists:\n        count = list1.count(sublist)\n        sublist_dict[sublist] = count\n    \n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    '''\n    Returns a dictionary containing unique sublists of lst along with their count.\n    '''\n    unique_lists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = 1\n            else:\n                unique_lists[sublist] += 1\n    return unique_lists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in counts:\n                counts[sublist] += 1\n            else:\n                counts[sublist] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    sub_lists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_list = tuple(lst[i:j])\n            if sub_list not in sub_lists:\n                sub_lists[sub_list] = 1\n            else:\n                sub_lists[sub_list] += 1\n    return sub_lists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    unique_lst = []\n    count = {}\n    for sub_lst in lst:\n        if tuple(sub_lst) not in unique_lst:\n            unique_lst.append(tuple(sub_lst))\n            count[tuple(sub_lst)] = lst.count(sub_lst)\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists.append(sublist)\n    counts = {}\n    for sublist in sublists:\n        count = list1.count(sublist)\n        counts[sublist] = count\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return abs(float_num - int(float_num)) <= 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            return round(num, 2) == float(num)\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            if len(num.split('.')[1]) <= 2:\n                return True\n            else:\n                return False\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) < 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        num = float(num)\n        return abs(num - round(num, 2)) < 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' not in num:  # if there's no decimal point, it's not a decimal number\n        return False\n    integer, fraction = num.split('.')\n    if len(fraction)!= 2:  # if there's more than 2 digits after the decimal point, it's not a decimal number\n        return False\n    if integer.isdigit() and fraction.isdigit():  # if both the integer and fraction parts are digits, it's a decimal number\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n    except ValueError:\n        return False\n    \n    if '.' in num:\n        num_part, decimal_part = num.split('.')\n        if len(decimal_part) > 2:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return abs(round(num, 2) - num) < 1e-10\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    \n    if '.' in num:\n        num_list = num.split('.')\n        if len(num_list[1]) > 2:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_element = len(set(arr))\n    if unique_element == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function will check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n    arr: A list of numbers.\n\n    Returns:\n    True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11] and monthnum3 % 2 == 0:\n        print(\"This month has 30 days.\")\n    elif monthnum3 == 2:\n        print(\"February always has 28 days.\")\n    else:\n        print(\"This month has 31 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month contains 30 days, else False.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and checks whether the month contains 30 days or not.\n    Month numbers are between 1 and 12.\n    \"\"\"\n\n    # Define a list of month lengths\n    month_lengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # Check if the month number is valid\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number.\"\n\n    # Check if the month has 30 days\n    if month_lengths[monthnum - 1] == 30:\n        return \"Month {} has 30 days.\".format(monthnum)\n\n    # If the month doesn't have 30 days, return a message\n    return \"Month {} does not have 30 days.\".format(monthnum)"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"This month contains 30 days\")\n    elif monthnum == 2:\n        print(\"This month contains 28 or 29 days\")\n    else:\n        print(\"This month contains 31 days\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30 days\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum3 == 2:\n        return \"28 or 29 days\"\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"The given month number contains 30 days.\")\n    else:\n        print(\"The given month number does not contain 30 days.\")"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort() # Sorting the array in ascending order\n    min_diff = float('inf') # Initializing minimum difference with infinity\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] < min_diff:\n                min_diff = arr[j] - arr[i]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    arr.sort() # sorting the array\n    min_diff = float('inf') # initializing min_diff to infinity\n    \n    for i in range(n):\n        if i > 0 and arr[i] - arr[i-1] < min_diff: # checking if current element is at least 1 less than the previous element\n            min_diff = arr[i] - arr[i-1] # updating min_diff\n    \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()  # sort the array in ascending order\n    min_diff = float('inf')  # initialize the minimum difference to infinity\n    \n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]  # calculate the difference between the current element and the next element\n        if diff < min_diff:  # if the difference is smaller than the minimum difference so far\n            min_diff = diff  # update the minimum difference\n    \n    return min_diff  # return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    # Initialize the minimum difference and the first element of the array\n    min_diff = float('inf')\n    first = arr[0]\n    # Loop through the array starting from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - first\n        # If the difference is smaller than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n        # If the current element is greater than the previous element, update the first element\n        if arr[i] > first:\n            first = arr[i]\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n\n    :param arr: list of integers\n    :param n: length of the array\n    :return: minimum difference between any two elements in the array\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    arr.sort() # sort the array in ascending order\n    min_diff = arr[1] - arr[0] # initialize the minimum difference as the difference between the first two elements\n    for i in range(1, n-1): # iterate over the remaining elements of the array\n        diff = arr[i+1] - arr[i] # compute the difference between the current element and the next one\n        if diff < min_diff: # if the difference is smaller than the current minimum difference, update the minimum difference\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort() # sorting the array in ascending order\n    min_diff = float('inf') # initializing the minimum difference to infinity\n    \n    # finding the minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()  # Sorting the array in ascending order\n    min_diff = float('inf')  # Initializing the minimum difference to infinity\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]  # Calculating the difference between the current and next element\n        if diff < min_diff:\n            min_diff = diff  # Updating the minimum difference if the difference is smaller\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n): \n    arr.sort() \n    min_diff = float('inf') \n    for i in range(n-1): \n        min_diff = min(min_diff, arr[i+1] - arr[i]) \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize minimum difference variable\n    min_diff = float('inf')\n\n    # loop through the array\n    for i in range(n-1):\n        # calculate the difference between current and next element\n        diff = arr[i+1] - arr[i]\n\n        # update minimum difference if current difference is less than minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # return the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in the given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of digits present in the string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and counts the number of digits in it.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    count = 1\n    i = 2\n\n    while count < n:\n        is_polite = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_polite = False\n                break\n\n        if is_polite:\n            count += 1\n\n        i += 1\n\n    return i - 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        j = i \n        is_polite = True\n        while j!= 1:\n            if j%2 == 0:\n                is_polite = False\n                break\n            j = math.sqrt(j)\n        if is_polite:\n            count += 1\n        i += 1\n    return i - 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Finds the nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    # Initialize the variables\n    count = 1\n    prev_polite = 1\n    \n    # Loop through until we reach the nth polite number\n    while count < n:\n        # Find the next polite number\n        next_polite = prev_polite + 1\n        while True:\n            is_polite = True\n            for i in range(2, int(math.sqrt(next_polite)) + 1):\n                if next_polite % i == 0:\n                    is_polite = False\n                    break\n            if is_polite:\n                break\n            next_polite += 1\n        \n        # Update the count and previous polite number\n        count += 1\n        prev_polite = next_polite\n    \n    # Return the nth polite number\n    return prev_polite"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i):\n            count += 1\n        if count == n:\n            return i\n        i += 1\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        if is_polite_num(num):\n            count += 1\n        num += 1\n    return num - 1\n\ndef is_polite_num(num):\n    '''\n    Helper function to check if a number is polite or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        is_polite = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        num += 1\n    return num - 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while True:\n        if is_prime(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    # Initialize a counter variable to keep track of the number of polite numbers found so far\n    count = 0\n\n    # Initialize the variable to store the current number being checked\n    i = 1\n\n    # Loop until we have found n polite numbers\n    while count < n:\n        # Check if the current number is polite\n        is_polite = True\n\n        # Check if the number is divisible by any integer from 2 to sqrt(i)\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite = False\n                break\n\n        # If the number is polite, increment the counter and continue to the next number\n        if is_polite:\n            count += 1\n\n        # Increment the current number being checked\n        i += 1\n\n    # Return the nth polite number\n    return i-1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 1\n    while True:\n        s = str(i)\n        if s.count('3') == 0 and s.count('2') == 0 and s.count('1') == 0:\n            count += 1\n            if count == n:\n                return i\n        i += 1\n"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        if is_prime(num):\n            count += 1\n        if count == n:\n            return num\n        num += 1\n    return None\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Returns a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    This function returns a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a target sum, and returns the number of pairs whose sum is equal to the target sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. \n    The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    arr.sort() # sort the array\n    \n    left = 0\n    right = n - 1\n    \n    while left < right:\n        current_sum = arr[left] + arr[right]\n        \n        if current_sum == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n            \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a target sum, and returns the number of pairs whose sum is equal to the target sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []  # create an empty list to store the difference between the two lists\n    for i in li1:\n        if i not in li2:\n            diff.append(i)  # add elements from list 1 that are not in list 2 to the diff list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between the two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_set = set(li1) - set(li2)\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 + li2 if x not in li1 or x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Get the difference between two lists.\n    \"\"\"\n    diff_li = []\n    for i in li1:\n        if i not in li2:\n            diff_li.append(i)\n    return diff_li"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_odd_nums = 0\n    odd_num = 1\n    for i in range(n):\n        sum_of_odd_nums += odd_num ** 4\n        odd_num += 2\n    return sum_of_odd_nums"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(1, 2*n+1, 2):\n        # Add the fourth power of the current odd number to the sum\n        sum += i**4\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n should be a positive integer\")\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, 2*n+1, 2):\n            sum += i**4\n        return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2!= 0:\n            sum += count**4\n            count += 1\n        else:\n            count += 1\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Calculate the fourth power of the current odd number\n        num = i ** 4\n        \n        # Add the current number to the sum variable\n        sum += num\n    \n    # Return the sum of fourth power of first n odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop over the first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # Compute the fourth power of the current odd number\n        power = i**4\n        # Add the result to the total\n        total += power\n    \n    # Return the total\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count**4\n        count += 2\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in exp:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack.pop()!= pairs[char]:\n                return False\n        else:\n            return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function takes an expression as input and returns True if the expression is balanced or False if it is not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n\n    stack = deque()\n    for i in exp:\n        if i in \"({[\":\n            stack.append(i)\n        elif i in \")}]\":\n            if not stack:\n                return False\n            if i == \")\":\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n            elif i == \"}\":\n                if stack[-1] == \"{\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                if stack[-1] == \"[\":\n                    stack.pop()\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                balanced = False\n                break\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                balanced = False\n                break\n\n    if stack:\n        balanced = False\n\n    return balanced"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                balanced = False\n                break\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                balanced = False\n                break\n\n    if balanced and not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n    # Removing all the words with k length\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    # Joining the remaining words and returning the result\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Remove all words with k length from the given string.\n    '''\n    words = test_str.split()  # split the string into words\n    filtered_words = [word for word in words if len(word)!= K]  # filter out words with k length\n    return''.join(filtered_words)  # join the remaining words back into a string"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function removes all the words with k length in the given string.\n    \"\"\"\n    # split the string into a list of words\n    words = test_str.split()\n    # create a new list with words of length K\n    new_words = [word for word in words if len(word)!= K]\n    # join the new list of words into a string\n    new_str =''.join(new_words)\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into words\n    for word in words:\n        if len(word) == K: # if the length of the word is equal to K\n            words.remove(word) # remove the word from the list\n    return''.join(words) # join the remaining words with a space in between"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a new list to store the words with k length\n    new_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to k, add it to the new list\n        if len(word)!= K:\n            new_words.append(word)\n\n    # Join the words in the new list with a space and return the result\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words[i] = ''\n    new_str =''.join(words)\n    return new_str"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments:\n    - text: the string in which we want to find the substring(s)\n    - pattern: the substring we want to find\n    \n    It returns a list of tuples, where each tuple contains the position of the substring in the text and the substring itself.\n    If there is no match, it returns None.\n    '''\n    \n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Create a list of tuples containing the position and substring of each match\n    result = [(match.start(), match.group(0)) for match in matches]\n    \n    # If there are no matches, return None\n    if not result:\n        return None\n    \n    # Otherwise, return the list of tuples\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes in two parameters:\n    text - a string to search for substrings within\n    pattern - a regular expression pattern to search for\n    \n    The function will return a list of tuples containing the matched substring and its position in the original text.\n    If there are no matches, it will return None.\n    '''\n    matches = []\n    pattern = re.compile(pattern)\n    for match in pattern.finditer(text):\n        matches.append((match.group(), match.start()))\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.finditer(pattern, text)\n    result = []\n    for m in match:\n        result.append((m.start(), m.group()))\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    result = []\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        result.append((match.start(), match.group()))\n    return result if result else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = []\n    for match in re.finditer(pattern, text):\n        result.append((match.start(), match.group()))\n    return result if result else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.start(), match.group()))\n    return matches if matches else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.group(), match.start()))\n\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.finditer(pattern,text)\n    if match:\n        result = []\n        for m in match:\n            result.append((m.group(),m.start()))\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match_list = []\n    match_positions = []\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Iterate over all matches and store their positions and occurrences\n    for match in matches:\n        match_list.append(match.group())\n        match_positions.append(match.span())\n    # If there are no matches, return None\n    if not match_list:\n        return None\n    # Otherwise, return a list of tuples containing the matches and their positions\n    else:\n        return list(zip(match_list, match_positions))"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    This function checks whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i == 0:\n            if test_str[i] in vowels:\n                count += 1\n        elif i == len(test_str)-1:\n            if test_str[i] in vowels:\n                count += 1\n        else:\n            if test_str[i-1].lower() in vowels and test_str[i].lower() in vowels:\n                count += 1\n                \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    This function takes a string as an input and returns the count of those characters which have vowels as their neighbors.\n    '''\n\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1].lower() in vowels and test_str[i].lower() in vowels:\n            count += 1\n        elif i < len(test_str)-1 and test_str[i+1].lower() in vowels and test_str[i].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels and (i == 0 or test_str[i-1].lower() not in vowels) and (i == len(test_str)-1 or test_str[i+1].lower() not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Count the number of vowels that are adjacent to each other in a given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = set(arr)\n    sum_unique_arr = sum(unique_arr)\n    return sum_unique_arr"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = set(arr)\n    sum_of_unique = sum(unique_nums)\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            sum += num\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Iterate through the given list\n    for i in arr:\n        # If the element is already present in the dictionary, increment its frequency by 1\n        if i in freq:\n            freq[i] += 1\n        # If the element is not present in the dictionary, add it with a frequency of 1\n        else:\n            freq[i] = 1\n    # Create an empty list to store the non-repeated elements\n    non_repeated = []\n    # Iterate through the given list\n    for i in arr:\n        # If the frequency of the element is 1, append it to the non_repeated list\n        if freq[i] == 1:\n            non_repeated.append(i)\n    # Return the sum of the non-repeated elements\n    return sum(non_repeated)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    non_repeated_sum = 0\n    non_repeated_list = []\n    \n    # Iterate through the given list and add non-repeated elements to a new list and sum them up\n    for i in arr:\n        if i not in non_repeated_list:\n            non_repeated_list.append(i)\n            non_repeated_sum += i\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    # iterate over each element in the list\n    for elem in arr:\n        # if the element is not in the dictionary, add it with a frequency of 1\n        if elem not in freq:\n            freq[elem] = 1\n        # if the element is already in the dictionary, increment its frequency\n        else:\n            freq[elem] += 1\n    # create an empty list to store the unique elements in the list\n    unique = []\n    # iterate over each element in the dictionary\n    for key in freq:\n        # if the frequency of the element is 1, append it to the unique list\n        if freq[key] == 1:\n            unique.append(key)\n    # calculate the sum of the unique elements in the list and return it\n    return sum(unique)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    sum_of_non_repeated = sum(unique_arr)\n    return sum_of_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and packs consecutive duplicates of the list elements into sublists.\n    \"\"\"\n    return [[k for k, g in groupby(lst)] for key, group in groupby(lst) if key!= group[0]]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a new list where consecutive duplicates are grouped together\n    in a sublist.\n    '''\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n\n    # Create a list of tuples where the first element is the element and the second element is the count of consecutive duplicates\n    lst_with_count = [(k, len(list(g))) for k, g in groupby(sorted_lst)]\n\n    # Create a new list where consecutive duplicates are grouped together in a sublist\n    new_lst = []\n    for i in range(len(lst_with_count)):\n        if lst_with_count[i][1] == 1:\n            new_lst.append(lst_with_count[i][0])\n        elif lst_with_count[i][1] > 1:\n            new_lst.append([lst_with_count[i][0]])\n\n    return new_lst"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(group_list)\n        else:\n            result.append(key)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for k, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for k, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with consecutive duplicates of \n    elements in the original list grouped together as sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key]"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    # Create an empty dictionary to store the count of each unique sublist\n    count_dict = {}\n\n    # Convert each sublist to a tuple so that it becomes immutable\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n\n        # Check if the sublist tuple already exists in the dictionary\n        if sublist_tuple in count_dict:\n            # If it does, increment the count of the tuple by 1\n            count_dict[sublist_tuple] += 1\n        else:\n            # If it doesn't, add the tuple to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    This function will count the number of unique sublists in a list.\n    '''\n    # Convert the list to a set of tuples to get unique sublists\n    sublists = set(tuple(sublist) for sublist in list1)\n    \n    # Count the number of occurrences of each unique sublist\n    sublist_counts = {}\n    for sublist in sublists:\n        count = list1.count(list(sublist))\n        sublist_counts[sublist] = count\n    \n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list.\n    The function should return a dictionary, where every list is turned to a tuple,\n    and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    unique_lists = {}\n    for sublist in list1:\n        # Convert sublist to tuple to make it hashable and to remove duplicates\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in unique_lists:\n            unique_lists[sublist_tuple] = 1\n        else:\n            unique_lists[sublist_tuple] += 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.append(tuple(lst[i:j]))\n\n    sublist_dict = {}\n    for sublist in sublists:\n        if sublist in sublist_dict:\n            sublist_dict[sublist] += 1\n        else:\n            sublist_dict[sublist] = 1\n\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Given a list of lists, this function returns a dictionary where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create a dictionary to store the count of each unique sublist\n    count_dict = {}\n    # Iterate over all sublists of the input list\n    for sublist in itertools.product(*lst):\n        # Turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        # If the sublist is not already in the dictionary, add it with a count of 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # If the sublist is already in the dictionary, increment its count\n        else:\n            count_dict[sublist_tuple] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in counts:\n                counts[sublist] += 1\n            else:\n                counts[sublist] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in count_dict:\n                count_dict[sublist] += 1\n            else:\n                count_dict[sublist] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list.\n    The function should return a dictionary, where every list is turned to a tuple,\n    and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the count of each unique sublist\n    count_dict = {}\n    \n    # Iterate through each sublist in list1\n    for sublist in list1:\n        # Convert the sublist to a tuple so we can use it as a key in the dictionary\n        sublist_tuple = tuple(sublist)\n        # If the tuple is not already in the dictionary, set its value to 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment its value by 1\n        else:\n            count_dict[sublist_tuple] += 1\n    \n    # Return the dictionary containing the count of each unique sublist\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = set()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.add(tuple(list1[i:j]))\n    count_dict = {}\n    for sublist in sublists:\n        count_dict[sublist] = list1.count(list(sublist))\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for sublist in subsequences(lst):\n        key = tuple(sublist)\n        if key not in counts:\n            counts[key] = 1\n        else:\n            counts[key] += 1\n    return counts\n\ndef subsequences(lst):\n    if not lst:\n        return [[]]\n    else:\n        result = []\n        for i in range(len(lst)):\n            subseq = lst[:i+1]\n            for subseq_set in subsequences(lst[i+1:]):\n                result.append(subseq + subseq_set)\n        return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1,len(test_list)+1):\n        for j in combinations(test_list,i):\n            if sum(j) == 0:\n                result.append(j)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    sums = [sum(comb) for comb in test_list]  # Calculate the sums of each tuple in the list\n    max_sum = max(sums)  # Find the maximum sum\n    \n    result = []\n    for i in range(1, max_sum+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == i:  # Check if the sum of the combinations is equal to the target sum\n                result.append(comb)\n    \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(j) == 15:\n                result.append(j)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                sum_of_triplet = test_list[i][0] + test_list[j][0] + test_list[k][0]\n                if sum_of_triplet == 0:\n                    results.append((test_list[i], test_list[j], test_list[k]))\n    return results"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 24:\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                combinations_list.append((test_list[i], test_list[j]))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            temp_list = [list(x) for x in test_list[i][1]] + [list(x) for x in test_list[j][1]]\n            temp_list = [tuple(x) for x in temp_list]\n            temp_sum = test_list[i][0] + test_list[j][0]\n            temp_list = set(temp_list)\n            temp_list = [list(x) for x in temp_list]\n            temp_list.sort()\n            temp_list = [tuple(x) for x in temp_list]\n            if sum([sum(x) for x in combinations(temp_list, 2)]) == temp_sum:\n                result.append((temp_sum, temp_list))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 15:\n                print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Find all possible combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for r in range(1, len(test_list)+1):\n        for combo in combinations(test_list, r):\n            if sum(tuple(x) for x in combo) == sum(tuple(x) for x in test_list):\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for r in range(1, len(test_list)+1):\n        for combo in combinations(test_list, r):\n            if sum(combo) == 10:\n                result.append(combo)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\n\nif count_divisors(n) % 2 == 0:\n    print(f\"{n} has even number of divisors\")\nelse:\n    print(f\"{n} has odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef is_even(n):\n    if count_divisors(n) % 2 == 0:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter a number: \"))\nif is_even(n):\n    print(n, \"has an even number of divisors\")\nelse:\n    print(n, \"does not have an even number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i!= i:\n                count += 1\n    return count\n\nnum = int(input(\"Enter a number: \"))\ndivisor_count = count_divisors(num)\n\nif divisor_count % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(\"Even number of divisors\")\nelse:\n    print(\"Odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n/i!= i:\n                count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\n\nif count_divisors(n) % 2 == 0:\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    \n    if count % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            count += 1\n    if n**0.5 == int(n**0.5) : \n        count -= 1\n    return count \n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0 : \n    print(f\"The number {n} has even number of divisors.\")\nelse : \n    print(f\"The number {n} has odd number of divisors.\")"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            for k in range(j, n, 2):\n                sum += arr[j:k+1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays of the input array.\n    \"\"\"\n    n = len(arr)\n    # Initialize the sum variable\n    odd_sum = 0\n    # Iterate over the array using two nested loops\n    for i in range(n):\n        for j in range(i, n):\n            # Check if the length of the subarray is odd\n            if (j - i + 1) % 2!= 0:\n                # Add the sum of the subarray to the odd_sum variable\n                odd_sum += sum(arr[i:j+1])\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            temp_sum = sum(arr[j:j+i])\n            if temp_sum % 2!= 0:\n                sum += temp_sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function will take an array and return the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            # if length of subarray is odd\n            if (j - i) % 2!= 0:\n                # calculate sum of subarray\n                temp_sum = 0\n                for k in range(i, j):\n                    temp_sum += arr[k]\n                sum += temp_sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Find the sum of all odd length subarrays.\n\n    Args:\n    arr: A list of integers\n\n    Returns:\n    The sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    # Initialize sum to 0\n    sum = 0\n    for i in range(n):\n        # Check for odd length subarrays starting at i\n        for j in range(i, n, 2):\n            # Calculate sum of current subarray\n            subarray_sum = sum(arr[i:j+1])\n            # Add sum to overall sum\n            sum += subarray_sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Find the sum of all odd length subarrays in a given array.\n\n    Args:\n    arr: list, a list of integers\n    \n    Returns:\n    int, the sum of all odd length subarrays in the given array\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            result += sum(arr[i:j])\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd-length subarrays.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate over all possible odd-length subarrays and add their sum to the total sum\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            subarray_sum = sum(arr[i:j])\n            total_sum += subarray_sum\n    \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function finds the sum of all odd length subarrays in an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarr = arr[i:j]\n            if len(subarr) % 2!= 0:\n                sum += sum(subarr)\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if diff == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / diff) % 6\n    elif cmax == g:\n        h = (b - r) / diff + 2\n    else:\n        h = (r - g) / diff + 4\n    h = round(h * 60)\n    s = 0 if cmax == 0 else round(diff / cmax * 100)\n    v = round(cmax * 100)\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color value to its HSV equivalent.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else round(delta / cmax * 100)\n    \n    value = round(cmax * 100)\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    # Find the maximum and minimum values of the color channels\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the Hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / diff) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / diff) + 240) % 360\n\n    # Calculate the Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (diff / max_val) * 100\n\n    # Calculate the Value\n    value = max_val * 100\n\n    # Return the HSV values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else delta / cmax\n    \n    value = cmax\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = int(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60, 2)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else round(delta / cmax * 100, 2)\n    value = round(cmax * 100, 2)\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / delta) + 360) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / delta) + 240) % 360\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    value = max_val\n    return hue, saturation, value"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num *= num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num *= num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num.append(num)\n        else:\n            odd_num.append(num)\n\n    if len(even_num) > 0 and len(odd_num) > 0:\n        product = even_num[0] * odd_num[0]\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Finds the product of the first even and odd numbers in the given list.\n    \"\"\"\n    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in lst if num % 2 == 1]\n    if len(evens) > 0 and len(odds) > 0:\n        return evens[0] * odds[0]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function finds the product of first even and odd number of a given list.\n    \"\"\"\n    even = 0\n    odd = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    if even!= 0:\n        product = list1[0]\n        for num in list1[1:]:\n            if num % 2 == 0:\n                product *= num\n                break\n    elif odd!= 0:\n        product = list1[0]\n        for num in list1[1:]:\n            if num % 2!= 0:\n                product *= num\n                break\n    else:\n        product = 1\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of first even and odd numbers of the list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1[::-1]:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num * num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num * num\n    return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) > 0 and len(odd) > 0:\n        return even[0] * odd[0]\n    else:\n        return \"There are no even or odd numbers in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function finds the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    # Find the first even number\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # Find the first odd number\n    for num in list1:\n        if num % 2!= 0 and odd_num == None:\n            odd_num = num\n        elif num % 2!= 0:\n            break\n    \n    if even_num!= None and odd_num!= None:\n        result = even_num * odd_num\n        return result\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    if len(even) == 0:\n        return None\n    elif len(odd) == 0:\n        return None\n    else:\n        return even[0] * odd[0]"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd numbers of the list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num * num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num * num\n    return None"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function converts a tuple string to an integer tuple.\n    '''\n    # Split the tuple string into individual elements\n    tuple_list = test_str[1:-1].split(\",\")\n    # Convert each element to an integer and add it to a new list\n    int_tuple_list = [int(elem.strip()) for elem in tuple_list]\n    # Convert the list to a tuple and return it\n    return tuple(int_tuple_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a string of tuples in the format \"(1,2),(3,4)\" and\n    returns a list of integers.\n    '''\n    # Split the string into individual tuples\n    tuple_list = test_str.split('),(')\n    # Create an empty list to store the integer tuples\n    int_tuple_list = []\n    # Loop through each tuple and convert to integer tuple\n    for tup in tuple_list:\n        # Remove the parentheses and split into integer components\n        int_tup = tup.replace('(', '').replace(')', '').split(',')\n        # Convert each component to integer and append to integer tuple list\n        int_tuple_list.append(tuple(int(i) for i in int_tup))\n    return int_tuple_list"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove whitespace characters\n    test_str = test_str.replace(\" \", \"\")\n    \n    # Split the string into a list of tuples\n    lst = test_str.split(\",\")\n    \n    # Convert each tuple string to an integer tuple\n    int_lst = []\n    for tpl in lst:\n        int_tpl = tuple(int(i) for i in tpl.split(\")\"))\n        int_lst.append(int_tpl)\n    \n    # Return the list of integer tuples\n    return int_lst"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    :param test_str: tuple string in the format \"(a, b, c,...)\"\n    :return: integer tuple\n    \"\"\"\n    # remove parentheses and split into separate elements\n    elements = test_str[1:-1].split(', ')\n    # convert each element to integer and store in a list\n    result = [int(elem) for elem in elements]\n    # return the resulting tuple\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Converts a tuple string to an integer tuple.\n    \"\"\"\n    int_tuple = tuple(int(num) for num in test_str[1:-1].split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by comma and convert the resulting list of strings to list of integers\n    int_list = [int(i) for i in test_str.split(',')]\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and remove the brackets and quotes\n    split_str = test_str[1:-1].split(',')\n    # Convert each element to integer and store it in a new tuple\n    int_tuple = tuple(int(x) for x in split_str)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to a tuple of integers.\n    \n    Args:\n    test_str (str): A string representing a tuple of integers separated by commas.\n    \n    Returns:\n    tuple: A tuple of integers.\n    \n    \"\"\"\n    # Remove whitespace from the string\n    test_str = test_str.replace(\" \", \"\")\n    # Split the string into a list of strings representing each integer\n    int_list = test_str.split(\",\")\n    # Convert the list of strings to a list of integers\n    int_list = [int(i) for i in int_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str[1:-1].split(',')\n    int_tuple = tuple(int(i) for i in test_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    split_str = test_str.split(\",\")\n    \n    # Convert each string to an integer and add it to the integer tuple\n    int_tuple = tuple(int(num) for num in split_str)\n    \n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i + 1\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i+1"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i+1"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect_right to find the right insertion point\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb{2}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(bb)+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Matches a string that has an \"a\" followed by three \"b\".\n    '''\n    pattern = r'a.*b.*b.*b.*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function takes a list and a string as input and returns a tuple containing the elements of the list followed by the string.\n    '''\n    return tuple(test_list) + (test_str,)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \"\"\"\n    return tuple(test_str.split()) + tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and checks whether every even index contains an even number.\n    If every even index contains an even number, it returns True. Otherwise, it returns False.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for element in test_tup:\n        if type(element) == tuple:\n            result += remove_nested(element)\n        else:\n            result.append(element)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function removes tuples from the given tuple.\n    '''\n    res = []\n    for i in test_tup:\n        if type(i) is not tuple:\n            res.append(i)\n        else:\n            for j in i:\n                res.append(j)\n    return tuple(res)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            result.append(i)\n        else:\n            for j in i:\n                result.append(j)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = ()\n    for element in test_tup:\n        if type(element) is not tuple:\n            result_tup += (element,)\n        else:\n            continue\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            new_tup.extend(remove_nested(elem))\n        else:\n            new_tup.append(elem)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result_tup.append(item)\n        else:\n            remove_nested(item)\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = ()\n    for i in test_tup:\n        if isinstance(i, tuple):\n            for j in i:\n                result_tup += (j,)\n        else:\n            result_tup += (i,)\n    return result_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function will remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            result.append(i)\n        else:\n            continue\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result_list.extend(remove_nested(item))\n        else:\n            result_list.append(item)\n    return tuple(result_list)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup += (item,)\n        else:\n            new_tup += remove_nested(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function counts the number of lists in a given number of lists.\n\n    Parameters:\n    input_list (list): A list containing lists.\n\n    Returns:\n    int: The number of lists in the input list.\n    \"\"\"\n\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    This function takes a list as an input and returns the count of lists in it.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes a list of lists as input and returns the total number of lists in the list.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as an input and returns the number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the count of lists in the input list.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # binary search algorithm to find the last position of x in arr\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid + 1 < len(arr) and arr[mid+1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # x not found in arr, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    If the element is not present in the array, returns -1.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    last_position = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            last_position = mid\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Returns the index of the last occurrence of x in arr, or -1 if x is not found.\n    '''\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # Found the element; look for the last occurrence to the left\n            last_left = mid - 1\n            while last_left >= 0 and arr[last_left] == x:\n                last_left -= 1\n            return last_left\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1  # x not found"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    This function takes two parameters:\n    1. arr: A sorted array of integers.\n    2. x: An integer element to be searched in the array.\n    \n    The function returns the last position of the element in the array.\n    If the element is not found in the array, the function returns -1.\n    '''\n    low = 0\n    high = len(arr) - 1\n    last_pos = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the index of the last occurrence of x in sorted array arr, or -1 if x is not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # We found x. Look for the last occurrence to the left.\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            # x is in the right half of the array.\n            left = mid + 1\n        else:\n            # x is in the left half of the array.\n            right = mid - 1\n    # x is not found.\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Returns the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments: a sorted array and an element x.\n    It returns the index of the last position of x in the array, or -1 if x is not in the array.\n    \"\"\"\n    # Initialize variables to keep track of the first and last positions of x\n    start = -1\n    end = -1\n\n    # Loop through the array to find the first and last positions of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            if start == -1:\n                start = i\n            end = i\n    \n    # Return the last position of x, or -1 if it is not in the array\n    if start == -1:\n        return -1\n    else:\n        return end"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left - 1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers\n    x (int): The integer for which to find the last position\n\n    Returns:\n    int: The last position of the integer in the list. If the integer is not found, it returns -1.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"^a.*b$\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(text_starta_endb(text)) # Output: False\n\ntext = \"A quick brown fox jumps over the lazy dog\"\nprint(text_starta_endb(text)) # Output: True\n\ntext = \"A quick brown fox jumps over the lazy dog b\"\nprint(text_starta_endb(text)) # Output: True\n\ntext = \"A quick brown fox jumps over the lazy dog c\"\nprint(text_starta_endb(text)) # Output: False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.+b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'a12345b'\nprint(text_starta_endb(text)) # True\n\ntext = 'abcde'\nprint(text_starta_endb(text)) # False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dictionary.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dictionary:\n        total_sum += dictionary[key]\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    return sum(range(l, r+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function finds the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Please provide a positive integer.\"\n    else:\n        return sum(range(1, n+1, 2))\n\nprint(sum_odd(10)) # Output: 25\nprint(sum_odd(5)) # Output: 9\nprint(sum_odd(0)) # Output: 0\nprint(sum_odd(-5)) # Output: Invalid input. Please provide a positive integer."
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range [1, n]\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return n + sum_odd(n-2)\n\nprint(sum_odd(10)) # Output: 25 (odd numbers in the range 1 to 10 are 1, 3, 5, 7, and 9)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes in two arguments l and r and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n\n    # loop through all odd numbers within the range\n    for i in range(l, r+1, 2):\n        # add each odd number to the sum\n        sum += i\n\n    # return the sum of all odd numbers within the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize variables\n    total = 0\n    current = 1\n    \n    # Loop through the range of numbers\n    while current <= n:\n        # Check if the current number is odd\n        if current % 2!= 0:\n            # Add the current number to the total\n            total += current\n        \n        # Increment the current number\n        current += 1\n    \n    # Return the total sum of all odd numbers within the range\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    return (n * (n+1)) // 2\n"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the array.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of its elements.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of its elements.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all its elements.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Returns the sum of all elements in the given array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Returns the sum of the elements in the input array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as an argument and returns its sum.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates the leftmost d bits of a number n to the right, shifting the leftmost d bits to the left.\n    For example, if we have the number 10011011 (represented in binary) and we rotate it by 2 bits to the left, we get:\n        10011011 -> 11001101 -> 11100110\n    \"\"\"\n    mask = (1 << d) - 1  # Get a mask of d bits with a 1 in the leftmost position\n    n = ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))  # Rotate left by d bits, then combine with original rightmost bits\n    return n & 0xFFFFFFFF  # Return only the leftmost 32 bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = (1 << d) - 1  # mask to extract the d leftmost bits\n    shifted_n = (n >> (32 - d)) & mask  # shift the d leftmost bits to the right and extract them with the mask\n    return shifted_n << d  # shift the extracted bits to the left and return the result"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits of a number n by d bits. Assumes n is a 32-bit number.\n    '''\n    # Convert n to binary and pad with zeros to 32 bits\n    n_binary = bin(n)[2:].zfill(32)\n    # Convert d to binary and pad with zeros to 5 bits\n    d_binary = bin(d)[2:].zfill(5)\n    # Reverse n_binary\n    n_binary_rev = n_binary[::-1]\n    # Pad d_binary with zeros to make its length equal to the length of n_binary_rev\n    d_binary = d_binary.zfill(len(n_binary_rev))\n    # Combine d_binary and n_binary_rev\n    combined = d_binary + n_binary_rev\n    # Reverse combined to get the final result\n    result_binary = combined[::-1]\n    # Convert result_binary back to an integer\n    result = int(result_binary, 2)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    d = d % 32\n    left_mask = mask << d\n    right_mask = mask >> (32 - d)\n    n = (n & right_mask) << d | (n & left_mask) >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes a number n and rotates left bits by d bits.\n    \"\"\"\n    # Convert n to binary\n    binary = bin(n)[2:].zfill(32)\n\n    # Rotate left d bits\n    rotated = binary[d:] + binary[:d]\n\n    # Convert rotated to decimal\n    rotated_decimal = int(rotated, 2)\n\n    return rotated_decimal"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF >> (32-d)  # Create a mask with d number of 1s and rest all 0s\n    return (n << d) & mask | (n >> (32-d))  # Rotate left by d bits and apply the mask to the bits shifted out"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes two arguments: n and d.\n    n: the number to be rotated\n    d: the number of bits to be rotated\n    \"\"\"\n    # convert the number to binary and remove the prefix \"0b\"\n    binary_n = bin(n)[2:]\n    # pad the binary string with zeros on the left to make its length equal to 32\n    padded_binary_n = binary_n.zfill(32)\n    # split the padded binary string into two parts, the first part is the left part, and the second part is the right part\n    left_part = padded_binary_n[:d]\n    right_part = padded_binary_n[d:]\n    # reverse the right part of the string\n    reversed_right_part = right_part[::-1]\n    # concatenate the left part and reversed right part\n    rotated_binary_n = left_part + reversed_right_part\n    # convert the rotated binary string to decimal and return it\n    return int(rotated_binary_n, 2)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**d - 1) << (32 - d)\n    return ((n << d) & mask) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits of a given number by d bits.\n    '''\n    # Convert the number to binary and remove the '0b' prefix\n    binary_string = bin(n)[2:]\n\n    # Pad the binary string with zeros at the beginning if necessary\n    if len(binary_string) < 32:\n        binary_string = '0' * (32 - len(binary_string)) + binary_string\n\n    # Extract the first d bits of the binary string\n    rotated_bits = binary_string[:d]\n\n    # Extract the remaining bits of the binary string\n    remaining_bits = binary_string[d:]\n\n    # Reverse the remaining bits and concatenate the rotated bits\n    result = remaining_bits[::-1] + rotated_bits\n\n    # Convert the result back to an integer\n    result = int(result, 2)\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    This function takes two arguments - a number `n` and a number of bits to rotate `d`.\n    It returns the left rotated bits of the number `n` by `d` bits.\n    We assume that the number is 32 bit.\n    '''\n    # convert the number to binary and remove the prefix '0b'\n    binary_num = bin(n)[2:]\n    # pad the binary number with leading zeros if it's less than 32 bits long\n    binary_num = binary_num.zfill(32)\n    # reverse the binary number\n    reversed_binary = binary_num[::-1]\n    # get the first `d` bits from the reversed binary number\n    rotated_bits = reversed_binary[:d]\n    # get the remaining bits from the reversed binary number\n    remaining_bits = reversed_binary[d:]\n    # reverse the rotated bits and join them with the remaining bits to get the final result\n    final_result = remaining_bits + rotated_bits[::-1]\n    # convert the final result from binary to decimal and return it\n    return int(final_result, 2)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext = \"Hello, world! This is a sample text.\"\nprint(remove_all_spaces(text))"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal integers.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or z == x:\n        count += 1\n    elif x == z:\n        count += 1\n\n    return count\n\nprint(test_three_equal(1, 2, 3)) # Output: 2\nprint(test_three_equal(1, 2, 2)) # Output: 3\nprint(test_three_equal(1, 1, 1)) # Output: 3\nprint(test_three_equal(1, 2, 4)) # Output: 1"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    else:\n        count = 0\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    # find the minimum element in the array\n    minimum = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < minimum:\n            minimum = arr[i]\n\n    # find the pivot point\n    pivot = 0\n    for i in range(1, len(arr)):\n        if arr[i] > minimum:\n            pivot = i\n            break\n\n    # rotate the array\n    temp = arr[pivot:] + arr[:pivot]\n\n    # count the number of rotations\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    low = 0\n    high = n-1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        # Check if mid element is the pivot element\n        if (mid < high and arr[mid] > arr[mid+1]) or (mid > low and arr[mid] < arr[mid-1]):\n            return mid\n        \n        # If left half is sorted, then mid must be on right half\n        if arr[low] <= arr[mid]:\n            low = mid + 1\n            \n        # Else the mid element itself is the pivot element\n        else:\n            high = mid - 1\n            \n    return low"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    # Initialize left and right pointers\n    left, right = 0, len(arr) - 1\n    \n    # Initialize variables to keep track of count and pivot\n    count = 0\n    pivot = arr[right]\n    \n    # Loop until the left pointer is less than the right pointer\n    while left <= right:\n        \n        # If the left pointer is at the pivot, increment count and move pivot to the right\n        if arr[left] == pivot:\n            count += 1\n            pivot = arr[right]\n            right -= 1\n        \n        # If the right pointer is at the pivot, increment count and move pivot to the left\n        elif arr[right] == pivot:\n            count += 1\n            pivot = arr[left]\n            left += 1\n        \n        # If the left pointer is less than the right pointer, increment count and move both pointers\n        elif arr[left] < pivot and arr[right] < pivot:\n            count += 1\n            left += 1\n            right -= 1\n        \n        # If the left pointer is greater than the right pointer, increment count and move the left pointer only\n        elif arr[left] > pivot and arr[right] > pivot:\n            count += 1\n            left += 1\n            \n        # If the left pointer is less than the right pointer and pivot is equal to the right pointer, increment count and move the left pointer only\n        elif arr[left] < pivot and arr[right] == pivot:\n            count += 1\n            left += 1\n            \n        # If the left pointer is greater than the right pointer and pivot is equal to the left pointer, increment count and move the right pointer only\n        elif arr[left] == pivot and arr[right] > pivot:\n            count += 1\n            right -= 1\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, then no rotation is required.\n    if arr == sorted(arr):\n        return 0\n    # Find the minimum element in the array.\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    # Count the number of times the minimum element appears.\n    count = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            count += 1\n    # If the minimum element appears only once, then no rotation is required.\n    if count == 1:\n        return 0\n    # If the minimum element appears more than once, then it is rotated once.\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n\n    n = len(arr)\n    low = 0\n    high = n-1\n    count = 0\n\n    while low < high:\n        if arr[low] < arr[high]:\n            return count\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n        count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n  n = len(arr)  \n  count = 0  \n  for i in range(n):  \n    j = 0  \n    while j < n:  \n      if arr[j] <= arr[i]:  \n        j += 1  \n      else:  \n        break  \n    count += j  \n  return count  "
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Checking if the array is sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            break\n    else:\n        return 0\n    # Finding the pivot point\n    pivot = 0\n    for i in range(n):\n        if arr[i] > arr[pivot]:\n            pivot = i\n    # Applying binary search\n    left, right = 0, n-1\n    count = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[pivot]:\n            if mid < pivot:\n                left = mid + 1\n            elif mid > pivot:\n                right = mid - 1\n            else:\n                count += 1\n                break\n        elif arr[mid] >= arr[pivot]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    left, right = 0, len(arr) - 1\n    count = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == arr[right]:\n            return count\n        \n        # Check if mid is minimum element\n        if arr[mid] <= arr[right]:\n            right = mid - 1\n            \n        # Check if mid is maximum element\n        else:\n            left = mid + 1\n            \n        count += 1\n        \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid] <= arr[mid + 1]):\n            return mid\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize left and right pointers\n    left = 0\n    right = n - 1\n\n    # Traverse the array from left to right\n    while left < right:\n        mid = (left + right) // 2\n\n        # If mid element is greater than arr[right],\n        # then right pointer can only move to the left\n        if arr[mid] > arr[right]:\n            left = mid + 1\n\n        # If mid element is less than arr[right],\n        # then left pointer can only move to the right\n        elif arr[mid] < arr[right]:\n            right = mid\n\n        # If mid element is equal to arr[right],\n        # then we have found the rotation point\n        else:\n            right = right - 1\n\n    # Return the rotation count\n    return n - left"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # We will use binary search to check if the given number is a perfect square or not.\n    # We will start with the minimum value of the range (1) and the maximum value of the range (n).\n    low = 1\n    high = n\n    \n    # We will keep doing binary search until we find the perfect square or until the low and high range values are the same.\n    while low <= high:\n        mid = (low + high) // 2\n        \n        # Check if the square of the middle value is equal to the given number.\n        if mid * mid == n:\n            return True\n        \n        # If the square of the middle value is less than the given number, then the perfect square can only be in the right half of the range.\n        elif mid * mid < n:\n            low = mid + 1\n        \n        # If the square of the middle value is greater than the given number, then the perfect square can only be in the left half of the range.\n        else:\n            high = mid - 1\n    \n    # If we have not found the perfect square, then return False.\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a number is a perfect square.\n\n    Args:\n    - n: an integer to check\n\n    Returns:\n    - True if n is a perfect square, False otherwise\n    \"\"\"\n    if n == 0 or n == 1:\n        return True\n    x = n // 2\n    y = x\n    while y < n:\n        y = (x + n // x) // 2\n    return y * y == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return int(math.sqrt(n))**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Check if a given number is a perfect square.\n    '''\n    # check if n is negative\n    if n < 0:\n        return False\n\n    # check if n is 0 or 1\n    if n in [0, 1]:\n        return True\n\n    # check if n is even\n    if n % 2 == 0:\n        return False\n\n    # start with the first odd number\n    i = 3\n\n    # check if i squared is equal to n\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 2\n\n    # n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return int(math.sqrt(n))**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Check whether the given number is a perfect square or not.\n    '''\n    root = int(math.sqrt(n))\n    return root * root == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Using binary search to check if n is a perfect square or not\n    # Initialize low and high as 1 and n respectively\n    low = 1\n    high = n\n\n    # Loop until low is less than or equal to high\n    while low <= high:\n        mid = (low + high) // 2\n        mid_square = mid * mid\n\n        # If mid_square is equal to n, n is a perfect square\n        if mid_square == n:\n            return True\n\n        # If mid_square is less than n, n is not a perfect square\n        # So, we need to check for a square greater than mid_square\n        elif mid_square < n:\n            low = mid + 1\n\n        # If mid_square is greater than n, n is not a perfect square\n        # So, we need to check for a square smaller than mid_square\n        else:\n            high = mid - 1\n\n    # If the loop completes without finding a perfect square, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    A function to check whether a number is a perfect square or not.\n    '''\n    i = 1\n    while i*i < n:\n        i += 1\n    return i*i == n"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes in a list of integers and returns True if the product of all the integers in the list is even, False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = [lst]\n        elif sum(lst) == max_sum:\n            result.append(lst)\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        if sum(lists[i]) > max_sum:\n            max_sum = sum(lists[i])\n            max_list = [lists[i]]\n        elif sum(lists[i]) == max_sum:\n            max_list.append(lists[i])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = [lst]\n        elif lst_sum == max_sum:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_sum_lists = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_sum_lists = [lst]\n        elif sum(lst) == max_sum:\n            max_sum_lists.append(lst)\n    return max_sum_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    for l in lists:\n        if sum(l) > max_sum:\n            max_list = l\n            max_sum = sum(l)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = sum(max(lst) for lst in lists)\n    return [lst for lst in lists if sum(lst) == max_sum]"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = -float('inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = -float('inf')\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return [max_list]"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    previous_char = \"\"\n\n    # Loop through the string\n    for char in test_str:\n        # Check if the current character is uppercase and not the same as the previous character\n        if char.isupper() and char!= previous_char:\n            # Increment the current run if the current character is uppercase\n            current_run += 1\n        else:\n            # Update the maximum run if the current run is greater than the maximum run\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run to 1 if the current character is not uppercase\n            current_run = 1 if char.isupper() else 0\n        \n        # Update the previous character\n        previous_char = char\n    \n    # Update the maximum run if the current run is greater than the maximum run\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    count = 1\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            count += 1\n        else:\n            count = 1\n        \n        if count > max_run:\n            max_run = count\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the maximum run of uppercase characters in the string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    current_char = \"\"\n\n    for char in test_str:\n        if char.isupper():\n            if char == current_char:\n                current_run += 1\n            else:\n                current_run = 1\n                current_char = char\n        else:\n            current_run = 0\n\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # iterate over each character in the string\n    for char in test_str:\n        if char.isupper():\n            # if current character is uppercase, increment current run\n            current_run += 1\n            # if current run is greater than maximum run, update maximum run\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            # if current character is not uppercase, reset current run to 0\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function returns the first odd number in a given list of numbers.\n    If there is no odd number in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function finds the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function finds the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None  # If no odd number is found in the list\n"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple of tuples and a value K and returns True if the tuple contains the value K and False otherwise.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the k or not.\n    :param test_tup: A tuple of tuples containing integers\n    :param K: An integer\n    :return: True if the given tuples contain the K, False otherwise\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of tuples and a value K as arguments and returns True if the given tuples contain the K or not, else False.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and checks if each element of the second tuple is smaller than its corresponding element in the first tuple.\n    If it finds any element in the second tuple which is greater than its corresponding element in the first tuple, it returns False.\n    If it checks all elements of both tuples and doesn't find any such element, it returns True.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input, and returns True if each element of the second tuple is smaller than its corresponding element in the first tuple. Otherwise, it returns False.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns True if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as arguments and returns True if each element of the second tuple is smaller than its corresponding element in the first tuple. Otherwise, it returns False.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and checks if each element of the second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                print(False)\n                return\n        print(True)"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result"
    }
]