[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the common elements in the tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in common_elements:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the shared elements\n    from the two tuples.\n    '''\n    shared_elements = ()\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements = shared_elements + (element,)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input, and returns a list of common elements between them.\n    '''\n\n    # Convert the tuples into sets to perform set operations\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the set of common elements back into a list and return it\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function finds the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Check if the element is present in the second tuple\n        if element in test_tup2:\n            shared_elements.append(element)\n    \n    # Return the list of shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and finds the common elements in both tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and finds the common elements between them.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to sets to easily find shared elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find shared elements and return them as a tuple\n    shared_elements = tuple(set1 & set2)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(2)) # Output: False\nprint(is_not_prime(7)) # Output: True\nprint(is_not_prime(10)) # Output: False\nprint(is_not_prime(21)) # Output: False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number, else False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, else False.\n    '''\n    # Checking if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Checking if the number is divisible by any integer from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If the number is not divisible by any integer from 2 to the square root of the number, it is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is not prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number n as input and returns True if n is not a prime number, else False.\n    '''\n    if n < 2: # 0 and 1 are not prime numbers\n        return False\n    \n    # Check if n is divisible by any number from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n        \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not prime, otherwise False.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number and False otherwise.\n    '''\n    if n <= 1: # 1 is not a prime number\n        return False\n    elif n <= 3: # 2 and 3 are prime numbers\n        return True\n    elif n % 2 == 0 or n % 3 == 0: # if n is divisible by 2 or 3, it is not a prime number\n        return False\n    i = 5 # start checking from 5, since all numbers less than 5 are prime\n    while i * i <= n: # only check up to the square root of n, since any factor greater than the square root must also have a corresponding factor less than the square root\n        if n % i == 0 or n % (i + 2) == 0: # if n is divisible by i or i+2, it is not a prime number\n            return False\n        i += 6 # increment i by 6, since all numbers greater than 3 and less than n must be checked for divisibility by 6\n    return True # if n is not divisible by any number up to the square root of n, it is a prime number"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = nums[:n]\n    hq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, nums[i])\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num) # negate the numbers so that they are sorted in descending order\n        if len(heap) > n:\n            hq.heappop(heap) # remove the smallest number if the heap size exceeds n\n    return [-num for num in heap] # return the largest n numbers, negated"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # create a max heap from the given list of numbers\n    hq.heapify(nums)\n\n    # create a list to store the n largest integers\n    largest = []\n\n    # iterate over the heap and append the n largest integers to the list\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n\n    # return the list of n largest integers in descending order\n    return largest[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)  # Convert list to heap\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))  # Extract n largest elements\n    return largest[::-1]  # Return largest elements in descending order"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap from the list\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    # pop the n largest elements from the heap and return them in descending order\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(heap))\n    return result[::-1]"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function checks whether the given number is a power of 2 or not. \n    If the number is a power of 2, it returns True, otherwise it returns False.\n    '''\n    if x <= 0:\n        return False\n    else:\n        return ((x & (x - 1)) == 0) and (x!= 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x!= 0) and (x & (x - 1)) == 0)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n\n    Args:\n    x (int): An integer to be checked for power of two property.\n\n    Returns:\n    bool: True if x is a power of two, False otherwise.\n    \"\"\"\n\n    # check if x is a power of 2\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x = x // 2\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the given number is a power of two or not.\n    If it is a power of two, then the function returns True, else False.\n    '''\n\n    if x == 0:\n        return False\n\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    while x!= 1:\n        if x & 1 == 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n\n    Args:\n        x (int): The number to check.\n\n    Returns:\n        bool: True if the number is a power of 2, False otherwise.\n    \"\"\"\n\n    # Check if x is a power of 2\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    if x <= 0:\n        return False\n    else:\n        return ((x & (x-1)) == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x % 2 == 0:\n            x = x // 2\n        return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert x to binary and remove the '0b' prefix\n    binary_str = bin(x)[2:]\n\n    # Check if the length of the binary string is greater than 1\n    if len(binary_str) > 1:\n        return False\n\n    # Convert the binary string to an integer\n    binary_int = int(binary_str)\n\n    # Check if the binary integer is a power of 2\n    if binary_int & (binary_int - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    # Check if x is a positive integer\n    if not isinstance(x, int) or x <= 0:\n        return False\n\n    # Find the rightmost set bit in x\n    rightmost_set_bit = 0\n    while x > 0:\n        rightmost_set_bit += 1\n        x >>= 1\n\n    # Check if x is a power of two by comparing x and rightmost set bit\n    return (x == rightmost_set_bit) or (x == 0 and rightmost_set_bit % 2 == 1)"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    # Split the text into a list of words using regular expression\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text) # find all words that are at least 4 characters long\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    # split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # return the list of words that are at least 4 characters long\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    return pattern.findall(text)"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # convert the string to a list of characters\n    s = list(str)\n    \n    # initialize variables for the minimum rotation count and the current rotation count\n    min_rotations = len(str)\n    curr_rotations = 0\n    \n    # loop through the string and count the number of rotations required\n    for i in range(len(s)):\n        # if the current character is at the beginning of the string\n        if s[i] == s[0]:\n            # increment the rotation count\n            curr_rotations += 1\n        else:\n            # if the current character is not at the beginning of the string,\n            # update the minimum rotation count if necessary\n            if curr_rotations + len(str) - i < min_rotations:\n                min_rotations = curr_rotations + len(str) - i\n                \n            # reset the rotation count to 0\n            curr_rotations = 0\n    \n    # return the minimum rotation count\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # Convert the string to lowercase\n    str = str.lower()\n    \n    # Reverse the string\n    reversed_str = str[::-1]\n    \n    # Check if the reversed string is equal to the original string\n    if reversed_str == str:\n        return 0\n    \n    # Initialize the minimum rotation count\n    min_rotations = len(str)\n    \n    # Check if the reversed string is a substring of the original string\n    if reversed_str in str:\n        # If yes, then we need to count the number of rotations required to get the same string\n        for i in range(len(str)):\n            if str.startswith(reversed_str, i):\n                # If we find a substring starting at position i, then we update the minimum rotation count\n                min_rotations = min(min_rotations, len(str) - i)\n    \n    # If the reversed string is not a substring of the original string, then we need to count the number of rotations required to get the same string\n    else:\n        for i in range(len(str)):\n            if reversed_str.startswith(str[i:], len(reversed_str) - i):\n                # If we find a substring starting at position i, then we update the minimum rotation count\n                min_rotations = min(min_rotations, i + len(reversed_str))\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(s):\n    # To find the minimum number of rotations\n    # we can simply check if the string is a palindrome\n    # or not. If it is not a palindrome, we know that\n    # we can make a rotation to get the same string.\n    # In that case, we can simply return the length of the\n    # string. If it is a palindrome, we need to make at\n    # least one rotation, which means the minimum number\n    # of rotations required is 2.\n    if s == s[::-1]:\n        return 2\n    else:\n        return len(s)"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n // 2):\n        if str[i]!= str[n - i - 1]:\n            break\n    else:\n        return 0\n    return min(i + 1, n // 2 - i)"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    \n    # Find the smallest substring that is greater than the input string\n    # by concatenating the input string with itself.\n    smallest_substr = str + str\n    \n    for i in range(n):\n        # Check if the current character is equal to the last character of the string.\n        if str[i] == str[n-1]:\n            # Check if the current substring is equal to the smallest substring.\n            if smallest_substr[i:i+n] == str:\n                count += 1\n                return count\n        # If the current character is not equal to the last character of the string,\n        # rotate the substring by shifting it to the right.\n        else:\n            # Concatenate the input string with itself and find the substring that\n            # is equal to the current substring, shifted to the right by 1.\n            rotated_substr = str[i:i+n] + str[i+1:]\n            # Check if the rotated substring is equal to the smallest substring.\n            if smallest_substr == rotated_substr:\n                count += 1\n    # If no rotation is required, return 0.\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    if str_len == 0:\n        return 0\n    if str_len == 1:\n        return 1\n    if str_len == 2:\n        if str[0] == str[1]:\n            return 2\n        else:\n            return 1\n    if str[0] == str[-1]:\n        return find_Rotations(str[1:-1])\n    else:\n        return min(find_Rotations(str[1:]), find_Rotations(str[:-1])) + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n == 1:\n        return 1\n    if s == s[::-1]:\n        return 0\n    for i in range(n):\n        if s[i:i+n] == s:\n            return n - i\n    return n + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Find the length of the string\n    n = len(str)\n    # Initialize the minimum rotation count to be n+1\n    min_rotations = n+1\n    # Initialize the suffix array\n    suffix_array = sorted([str[i:] for i in range(n)])\n    # Iterate through the suffix array\n    for i in range(n):\n        # If the current string matches the ith suffix of the original string,\n        # update the minimum rotation count to be i+1\n        if suffix_array[i] == str:\n            min_rotations = i+1\n            break\n    # If the original string is already a rotation of itself, return 0\n    if min_rotations == n+1:\n        return 0\n    # Otherwise, return the minimum rotation count\n    else:\n        return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        if str == str[i:]+str[:i]:\n            return i"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    # Check if the string is already a palindrome\n    if s == s[::-1]:\n        return 0\n    # Check if the string has only one character\n    if n == 1:\n        return 1\n    \n    # Initialize variables\n    i, j = 0, n - 1\n    count = 0\n    \n    # Check if the first and last characters are the same\n    while i < j and s[i] == s[j]:\n        count += 1\n        i += 1\n        j -= 1\n    \n    # If the first and last characters are the same, then we don't need to rotate\n    if i >= j:\n        return count\n    \n    # Check if there is any pair of characters that needs to be swapped to get the same string\n    while i < j and s[i] == s[j]:\n        i += 1\n        j -= 1\n        \n    # If no pair is found, then we need to swap the entire string\n    if i >= j:\n        return count + 1\n    \n    # Swap the pair of characters and increment the count\n    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n    count += 2\n    \n    return count"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes in two arguments:\n    s: string to remove the character from\n    ch: character to be removed\n    \n    It removes the first and last occurrence of ch from the string s.\n    \n    Returns: The modified string s with the character ch removed.\n    '''\n    if ch not in s:  # check if ch is not in s\n        return s\n    else:\n        if s.count(ch) == 1:  # check if ch occurs only once in s\n            return s.replace(ch, '')\n        else:\n            start = s.find(ch)  # find the index of the first occurrence of ch\n            end = s.rfind(ch)  # find the index of the last occurrence of ch\n            return s[:start] + s[end+1:]  # remove the character ch by slicing the string"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'')\n        s = s.replace(ch,'')\n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    \"\"\"\n    This function removes first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        return s[:s.index(ch)] + s[s.index(ch)+1:][:-1]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes in a string and a character as inputs and removes the first and last occurrence of the character from the string.\n    '''\n    if ch in s:\n        if s.count(ch) == 1:\n            return s.replace(ch, \"\")\n        else:\n            first = s.find(ch)\n            last = s.rfind(ch)\n            if first == 0 and last == len(s)-1:\n                return s.replace(ch, \"\", 1)\n            else:\n                return s.replace(ch, \"\", 1) + s.replace(ch, \"\", len(s)-1)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of the given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.rfind(ch) + 1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) < 2:\n        return s\n    else:\n        first_occurrence = s.find(ch)\n        last_occurrence = s.rfind(ch)\n        s = s[:first_occurrence] + s[last_occurrence+1:]\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    This function takes two parameters, first is the string and second is the character to be removed.\n    It removes the first and last occurrence of the given character from the string and returns the modified string.\n    \"\"\"\n    if s.count(ch) >= 2:\n        s = s.replace(ch, '', s.count(ch)-1)\n        s = s.replace(ch, '')\n        return s\n    else:\n        print(\"The character '{}' is not present more than once in the string.\".format(ch))\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of the given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    \n    # Removing first occurrence\n    first_occ = s.find(ch)\n    if first_occ == -1:\n        return s\n    s = s[:first_occ] + s[first_occ+1:]\n    \n    # Removing last occurrence\n    last_occ = s.rfind(ch)\n    if last_occ == -1:\n        return s\n    s = s[:last_occ] + s[last_occ+1:]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    # If the character is not found in the string, return the original string\n    if ch not in s:\n        return s\n    \n    # Find the first occurrence of the character\n    i = s.find(ch)\n    \n    # If the first occurrence is at the beginning of the string, remove it\n    if i == 0:\n        s = s[1:]\n    else:\n        s = s[:i]\n    \n    # Find the last occurrence of the character\n    j = s.rfind(ch)\n    \n    # If the last occurrence is at the end of the string, remove it\n    if j == len(s) - 1:\n        s = s[:-1]\n    else:\n        s = s[:j]\n    \n    return s"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples where each tuple contains the sum of the rows and the matrix itself.\n    sums = [(sum(row), row) for row in M]\n    \n    # Sort the list in ascending order based on the sum of the rows.\n    sums.sort()\n    \n    # Extract the sorted matrix from the list of tuples.\n    sorted_matrix = [tup[1] for tup in sums]\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    M_sorted = sorted(M, key=lambda row: sum(row))\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Sort the matrix based on the sum of its rows\n    sorted_M = sorted(M, key=lambda x: sum(x))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples, where each tuple contains the sum of each row and the original matrix\n    sums = [(sum(row), row) for row in M]\n    # Sort the list in ascending order based on the sum of each row\n    sums.sort()\n    # Create a new matrix with the sorted rows\n    sorted_M = [row for _, row in sums]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort the matrix according to the sum of its rows\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows, cols = len(M), len(M[0])\n    \n    # Sort the matrix in ascending order according to the sum of its rows\n    for i in range(rows):\n        for j in range(i+1, rows):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes in the length, breadth and height of a triangular prism and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as inputs and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism (l, b, h) and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as input parameters\n    and returns the volume of the prism.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the dimensions of a triangular prism (l, b, h) as input and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function finds the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_')\n    return pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_+[a-z]+', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Use a regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r\"[a-z]+_[a-z]+\"\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_?[a-z]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes a side length of a square as input and returns its perimeter.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    for char in chars_to_remove:\n        string = string.replace(char, '')\n    return list(string)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and returns a list of characters that are present in the first string, \n    but not in the second string.\n    \"\"\"\n    # Convert the strings to lists of characters\n    list1 = list(string1)\n    list2 = list(string2)\n\n    # Use a set to store the characters that are present in the second string\n    set2 = set(list2)\n\n    # Use a list comprehension to create a list of characters that are present in the first string, \n    # but not in the second string\n    result = [char for char in list1 if char not in set2]\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    new_string = \"\"\n    for char in string: \n        if char not in string: \n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string, chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string)\n    for char in chars:\n        while char in list_string:\n            list_string.remove(char)\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a boolean array to keep track of characters to be removed\n    char_to_remove = [False for i in range(NO_OF_CHARS)]\n    # Mark the characters to be removed in the boolean array\n    for char in chars_to_remove:\n        char_to_remove[ord(char)] = True\n    \n    # Create a new string to store the result\n    result = \"\"\n    # Iterate through the first string and add each character to the result string if it is not marked to be removed\n    for char in string:\n        if not char_to_remove[ord(char)]:\n            result += char\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a boolean array \"visited\" of size NO_OF_CHARS and initialize all elements to False. \n    visited = [False] * NO_OF_CHARS\n\n    # Traverse through the second string and mark the visited characters in the boolean array\n    for char in string:\n        visited[ord(char)] = True\n\n    # Traverse through the first string and append only the characters that are not present in the second string\n    result = []\n    for char in string:\n        if not visited[ord(char)]:\n            result.append(char)\n\n    # Return the resultant list of characters\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    # creating a boolean array \"is_present\" of size NO_OF_CHARS to store whether a character is present in the second string\n    is_present = [False] * NO_OF_CHARS\n    \n    # marking characters of the second string as present in the boolean array\n    for char in second_string:\n        is_present[ord(char)] = True\n    \n    # creating a new string with characters of the first string which are not present in the second string\n    new_string = \"\"\n    for char in string:\n        if not is_present[ord(char)]:\n            new_string += char\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string, sub_string):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    # Convert the strings to lists of characters\n    string_list = list(string)\n    sub_string_list = list(sub_string)\n\n    # Iterate over the string list and remove characters present in the sub_string list\n    for char in string_list:\n        if char in sub_string_list:\n            string_list.remove(char)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string, char_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in char_list]"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string, characters_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(characters_to_remove) > NO_OF_CHARS:\n        raise ValueError(\"Length of characters_to_remove should be less than or equal to NO_OF_CHARS\")\n    result = []\n    for char in string:\n        if char not in characters_to_remove:\n            result.append(char)\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if the array contains any duplicate element, otherwise False.\n    '''\n    # create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # iterate through the array and count the occurrence of each element using dictionary\n    for num in arraynums:\n        if num not in count_dict:\n            count_dict[num] = 1\n        else:\n            count_dict[num] += 1\n\n    # check if any element has a count greater than 1, indicating that it is a duplicate element\n    for num, count in count_dict.items():\n        if count > 1:\n            return True\n\n    # if no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and checks if there are any duplicate elements in the array.\n    If there are duplicates, it returns True, else it returns False.\n    \"\"\"\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # convert the array to a set to remove duplicates\n    nums_set = set(arraynums)\n    if len(nums_set)!= len(arraynums):\n        # if the length of the set is not equal to the length of the original array, there are duplicates\n        return True\n    else:\n        # if the length of the set is equal to the length of the original array, there are no duplicates\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n    \"\"\"\n    if x % 10 == 0 or (x - 1) % 10 == 0 or (x + 1) % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Check if the given number is a woodball or not.\n    '''\n    return x % 4 == 0 or x % 7 == 0 or x % 9 == 0"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x < 2:\n        return False\n\n    n = 1\n    a = 1\n    for i in range(n):\n        a = 3 * a + 1\n        if a < x:\n            n += 1\n        else:\n            return False\n\n    if n % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 1 or x % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(x**0.5)+1, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Initialize the variables\n    sum = 0\n    digit_count = 0\n    \n    # Calculate the sum of digits of x\n    while x > 0:\n        sum += x % 10\n        digit_count += 1\n        x //= 10\n        \n    # Check if the sum of digits is equal to the digit count\n    if sum == digit_count:\n        print(x, \"is a Woodall number\")\n    else:\n        print(x, \"is not a Woodall number\")"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x >= 1000 and x <= 9999:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if a number is Woodall's number or not.\n    \"\"\"\n    # Woodall's numbers are 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824.\n    \n    # Check if x is a power of 2.\n    if x == 0 or (x & (x - 1))!= 0:\n        return False\n    \n    # Check if x is in Woodall's numbers.\n    for i in range(31):\n        if 2**i == x:\n            return True\n    \n    return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    rev_num = int(str(num)[::-1])\n    if rev_num == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    This function checks if a given number is one less than twice its reverse.\n    '''\n    if str(num) == str(num)[::-1] and num-1 == int(str(num)[::-1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    # Convert the number to string\n    num = str(num)\n    # Reverse the number using slicing\n    rev_num = num[::-1]\n    # Check if the difference between the number and its reverse is 1\n    if int(num) - int(rev_num) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    temp = num\n    while temp!= 0:\n        rev = (rev * 10) + temp % 10\n        temp = temp // 10\n\n    if num == (rev // 2) + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    # Write your code here\n    # Step 1: Reverse the number\n    rev_num = int(str(num)[::-1])\n    # Step 2: Check if num-rev_num=2*rev_num\n    if (num-rev_num)==(2*rev_num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    if reverse == num-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = int(str(num)[::-1]) # reverse the number and convert it to an integer\n    if rev_num == num + 1: # check if the reversed number is equal to the number plus one\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1])*2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num == reverse + 1\n"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if the given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string and reverse it\n    rev_num = int(str(num)[::-1])\n    # Check if the original number is one less than twice the reversed number\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed from the digits.\n    \"\"\"\n    # Initialize max_num to the first digit in the list\n    max_num = arr[0]\n    \n    # Iterate through the list and find the maximum number\n    for i in range(1, len(arr)):\n        # If the current digit is greater than max_num, update max_num\n        if arr[i] > max_num:\n            max_num = arr[i]\n    \n    # Convert max_num back to a string and return it\n    return str(max_num)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the digits.\n    '''\n    n = len(arr)\n    arr.sort(reverse=True)\n    max_num = 0\n    \n    # Generate all possible numbers with digits from the list\n    for i in range(n):\n        for j in range(i+1, n+1):\n            num = int(''.join(str(digit) for digit in arr[i:j]))\n            if num > max_num:\n                max_num = num\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed from those digits.\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i]*10**(i)\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i, len(arr)):\n            temp *= arr[j]\n            if temp > max_num:\n                max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in arr:\n        max_num = max_num*10 + i\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    result = 0\n    for i in range(len(arr)):\n        result = result * 10 + arr[i]\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the maximum number that can be formed using the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp = int(\"\".join(map(str, arr[i:j])))\n            if temp > max_num:\n                max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    arr = sorted(arr)\n    result = 0\n    for i in range(n):\n        result = result*10 + arr[i]\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(map(str, arr[i:j])))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        for j in range(i, n):\n            num = arr[i]*10**(j-i) + arr[i+1]*10**(j-i-1) + arr[j]\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, and False otherwise.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, False otherwise.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    Returns True if they have opposite sign, False otherwise.\n    \"\"\"\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    If the two integers have opposite sign, it returns True, otherwise, it returns False.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    octagonals = []\n    while True:\n        octagonals.append(count*(2*count-1))\n        count += 1\n        if len(octagonals) == n:\n            return octagonals[-1]"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal = 0\n    while i <= n:\n        octagonal = (i * (3 * i - 1)) / 2\n        i += 1\n    return octagonal\n\nprint(is_octagonal(10)) # Output: 1430"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is an octagonal number.\n    \"\"\"\n    octagonals = []\n    i = 1\n    while True:\n        octagonals.append(i * (2 * i - 1))\n        if len(octagonals) == n:\n            return octagonals[-1]\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_number = 0\n    while i <= n:\n        octagonal_number = i * (2 * i - 1)\n        if octagonal_number == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    octagonal_number = 1\n    while count < n:\n        octagonal_number += 8\n        count += 1\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Returns True if the given number is an octagonal number, else False.\n    '''\n    x = (1 + 3*n)**0.5\n    if x.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    octagonals = []\n    num = 1\n    while count < n:\n        octagonals.append(num * (2*num - 1))\n        num += 1\n        count += 1\n    return octagonals[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    while True:\n        octagonal = i * (2*i - 1)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    count = 1\n    while count <= n:\n        octagonal += count\n        count += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    oct_num = n*(3*n-1) // 2\n    return oct_num\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th octagonal number is {is_octagonal(n)}.\")"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = 0\n    n = len(s)\n    # Create a dictionary to store the prefix sums of the digits\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n    for i in range(1, n+1):\n        prefix_sums[int(s[i-1])] += i\n\n    # Iterate over all possible substring lengths\n    for length in range(1, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            # Check if the sum of digits equals the substring length\n            if prefix_sums[int(s[end])] - prefix_sums[int(s[start])] == length:\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    digit_sum = defaultdict(int)\n\n    for i in range(n):\n        digit_sum[s[i]] += 1\n\n    for i in range(n):\n        if digit_sum[s[i]] > 0:\n            curr_sum = digit_sum[s[i]]\n            j = i + 1\n\n            while j < n and curr_sum > 0:\n                curr_sum -= 1\n                j += 1\n\n            if curr_sum == 0:\n                count += 1\n\n            digit_sum[s[i]] -= 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string as an argument and returns the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    freq = defaultdict(int)\n    for i in range(n):\n        freq[s[i]] += 1\n        sum_of_digits = sum(int(digit) for digit in s[i:])\n        if sum_of_digits == n-i:\n            count += 1\n        if freq[s[i]] > 1:\n            freq[s[i]] -= 1\n            if sum_of_digits == n-i-1:\n                count -= 1\n        if sum_of_digits < n-i:\n            freq[s[i-sum_of_digits+n-i]] -= 1\n            if sum(int(digit) for digit in s[i-sum_of_digits+n-i+1:]) == sum_of_digits-1:\n                count -= 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(map(int, substring)) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            temp = sum(int(s[k]) for k in range(i, j))\n            if temp == j-i:\n                count += 1\n    return count\n\nprint(count_Substrings('123456')) # Output: 9 (2+3+4+5+6=15)\nprint(count_Substrings('123456789')) # Output: 18 (2+3+4+5+6+7+8+9=36)"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            digit_sum = sum(int(digit) for digit in s[i:j+1])\n            if digit_sum == len(s[i:j+1]):\n                count[digit_sum] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a defaultdict to store the count of substrings with sum of digits equal to length\n    count = defaultdict(int)\n    \n    # iterate over the string and calculate the sum of digits of each substring\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            count[digit_sum] += 1\n    \n    # return the count of substrings with sum of digits equal to length\n    return count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    freq = defaultdict(int)\n    for i in range(n):\n        freq[s[i]] += 1\n        for j in range(i+1, n+1):\n            if sum(int(s[k]) for k in range(i, j)) == j-i:\n                count += 1\n            freq[s[i]] -= 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if sum(int(digit) for digit in sub) == len(sub):\n                counts[len(sub)] += 1\n    return counts"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Returns the smallest number in a list of numbers.\n    \"\"\"\n    if not xs:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function finds the smallest number in a list of numbers.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            \n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference = 0\n    n = len(test_list)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            temp_difference = abs(test_list[j][1] - test_list[i][1])\n            if temp_difference > difference:\n                difference = temp_difference\n    return difference"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i][1] - test_list[j][1]) > max_diff:\n                max_diff = abs(test_list[i][1] - test_list[j][1])\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i][1] - test_list[j][1]) > max_diff:\n                max_diff = abs(test_list[i][1] - test_list[j][1])\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts it using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function sorts a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes in a list and recursively sums all the elements in it.\n    \"\"\"\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the remaining elements\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list):  # if first element is a list, flatten it\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # if first element is not a list, add it to the sum\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list):  # recursive case: list contains sublists\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # recursive case: list contains non-list elements\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes a list as input, flattens it, and returns the sum of all its elements.\n\n    :param data_list: A list of integers or floats.\n    :return: The sum of all elements in the flattened list.\n    \"\"\"\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # If the first element is a list, recursively call the function on it and add the result to the sum\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n\n    # If the first element is not a list, add it to the sum and recursively call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        total = 0\n        for element in data_list:\n            total += recursive_list_sum(element)\n        return total\n    else:\n        return data_list"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Args:\n        lst (list): The list to be analyzed.\n\n    Returns:\n        int: The number of positive numbers.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_nums = [1]\n    for i in range(1, n+1):\n        bell_nums.append(sum(bell_nums))\n    return bell_nums[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_nums = [0] * (n+1)\n        bell_nums[0] = 1\n        for i in range(1, n+1):\n            bell_nums[i] = sum(bell_nums[0:i])\n        return bell_nums[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_numbers = [1]\n        for i in range(1, n+1):\n            bell_numbers.append(sum(bell_numbers[-i:]))\n        return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function takes an integer n and returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n\n    for i in range(1, n + 1):\n        bell_numbers.append(sum(bell_numbers))\n\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    bell_nums = [1]\n    for i in range(1, n+1):\n        bell_nums.append(sum(bell_nums))\n    return bell_nums[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    b = [0] * (n+1)\n    b[0] = 1\n    b[1] = 1\n    for i in range(2, n+1):\n        b[i] = b[i-1] + b[i-2]\n    return b[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the nth Bell number.\n\n    The Bell numbers are a sequence of numbers that grow exponentially as more terms are added.\n\n    The nth Bell number is the number of ways to partition a set of n elements.\n\n    :param n: the number of elements to partition\n    :return: the nth Bell number\n    \"\"\"\n    bell = [0] * (n + 1)\n    for i in range(n + 1):\n        bell[i] = 1\n        for j in range(1, i + 1):\n            bell[i] = bell[i] * (i - j + 1) // j\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_numbers = [0, 1]\n        for i in range(2, n+1):\n            bell_numbers.append(sum(bell_numbers[j] for j in range(i)))\n        return bell_numbers[-1]\n\nn = 5\nprint(f\"The number of ways to partition the set of {n} Bell numbers is {bell_number(n)}.\")"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) for i in range(n))"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[1] > A[0]:\n        for i in range(2, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(2, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 2:  # if array has less than or equal to 2 elements, it's always monotonic\n        return True\n\n    inc = True  # assume first direction is increasing\n    dec = True  # assume first direction is decreasing\n\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            inc = False\n            dec = True\n        elif A[i] < A[i-1]:\n            inc = True\n            dec = False\n        else:  # A[i] == A[i-1]\n            continue\n\n    return inc or dec"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n == 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n            \n    if increasing or decreasing:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n == 1:\n        return True\n    elif A[0] > A[1]:\n        for i in range(2, n):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    elif A[0] < A[1]:\n        for i in range(2, n):\n            if A[i] > A[i-1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    \n    i = 1\n    while i < n:\n        if A[i] < A[i-1]:\n            return False\n        i += 1\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n\n    # check if the array is monotonic in ascending order\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    \n    # check if the array is monotonic in descending order\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n    \n    # if none of the above conditions are true, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic,\n    i.e., it is either strictly increasing or strictly decreasing. Otherwise, it returns False.\n    '''\n    n = len(A)\n    \n    # Check if the array is strictly increasing\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    \n    # Check if the array is strictly decreasing\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n    \n    # If both conditions are not met, return True\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n\n    Args:\n    l (list): A list of integers\n    s (list): A list of integers\n\n    Returns:\n    bool: True if s is a sublist of l, False otherwise\n    \"\"\"\n    for i in range(len(l) - len(s) + 1):\n        if s == l[i:i+len(s)]:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    :param l: the list to search in\n    :param s: the sublist to search for\n    :return: True if s is a sublist of l, False otherwise\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    # iterate over all possible starting positions for the sublist in l\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes a list and a sublist as inputs and returns True if the sublist is found in the list.\n    \"\"\"\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if l[:len(s)] == s:\n        return True\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    if s == l[:len(s)]:\n        return True\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have the same length and False otherwise.\n    '''\n    # Get the length of the first tuple in the list\n    length = len(Input[0])\n    \n    # Check if all the tuples in the list have the same length as the first tuple\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    \n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(tup) for tup in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_list = []\n    for i in Input:\n        length_list.append(len(i))\n    if length_list.count(length_list[0]) == len(length_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Get the length of the first tuple in the input list\n    len_tuple = len(Input[0])\n    # Check whether all the tuples have the same length or not\n    for i in Input:\n        if len(i)!= len_tuple:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set(len(t) for t in Input)\n    return len(lengths) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = []\n    for tup in Input:\n        lengths.append(len(tup))\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set(len(t) for t in Input)\n    return len(lengths) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all the tuples have the same length\n    if all(len(t) == len(Input[0]) for t in Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function checks whether all the tuples in a list have the same length or not.\n    \"\"\"\n    # initialize a list to store the lengths of tuples in Input\n    tuple_lengths = []\n\n    # loop through the tuples in Input\n    for tup in Input:\n        # append the length of the current tuple to tuple_lengths\n        tuple_lengths.append(len(tup))\n\n    # check whether all the lengths in tuple_lengths are the same\n    if len(set(tuple_lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n            \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            shrink = 1.1\n        sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            shrink = 1\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    while gap!= 1 or shrink > 1:\n        gap = max(1, int(gap / shrink))\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = max(1, int(gap/shrink))\n        sorted = True\n        \n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    # Finding all possible pairs of squares\n    for i in range(1, int(n**0.5)+1):\n        j = n - i*i\n        if j == 0:\n            return True\n    \n    # If no pair of squares can form the given number, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # check if the number is positive\n    if n < 0:\n        return False\n    # check if the number is an integer\n    if n!= int(n):\n        return False\n    # check if the square root of n is an integer\n    sqrt_n = int(n**0.5)\n    if sqrt_n**2!= n:\n        return False\n    # check if the difference between the square of the square root of n and the square root of n is equal to n\n    return (sqrt_n**2 - sqrt_n) == n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    if math.sqrt(n).is_integer():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_diff_square(n):\n    '''\n    This function takes a number as input and returns True if it can be represented as the difference of two squares.\n    '''\n    # Check if the number is negative\n    if n < 0:\n        return False\n    \n    # Check if the number can be represented as the sum of two squares\n    for i in range(int(n**0.5), 0, -1):\n        if n == i*i + (n-i*i)**0.5:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n    \n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n    \n    # Check if n is a perfect square\n    root = math.sqrt(n)\n    if root!= int(root):\n        return False\n    \n    # Check if n can be represented as the difference of two squares\n    for i in range(1, int(math.sqrt(n))+1):\n        if n == i**2 + (i+1)**2:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square root of the number\n    sqrt_n = int(math.sqrt(n))\n    # Check if the square root is an integer or not\n    if sqrt_n*sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    \n    # Calculate the square root of n\n    sqrt_n = math.sqrt(n)\n    \n    # Check if the square root is an integer\n    if sqrt_n.is_integer():\n        # If sqrt_n is an integer, check if n is equal to (sqrt_n)^2 or (sqrt_n-1)^2 or (sqrt_n+1)^2\n        if n == sqrt_n**2 or n == (sqrt_n-1)**2 or n == (sqrt_n+1)**2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i <= n:\n        if n%i == 0:\n            if i*i!= n:\n                j = n//i\n                if j*j == n:\n                    return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff_Square(n):\n    # Check if the number is odd\n    if n % 2!= 0:\n        return False\n    \n    # Find all the odd factors of the number\n    factors = []\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    \n    # Check if the number is equal to the sum of squares of the odd factors\n    for f in factors:\n        if f*f + (n//f)*f!= n:\n            return False\n        \n    return True"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    root = int(n ** 0.5)\n    return root * root == n\n\ndef dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if is_square(n):\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if is_square(n-i*i):\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == \"B\" and colors[i]!= \"B\":\n            return False\n        elif patterns[i] == \"G\" and colors[i]!= \"G\":\n            return False\n        elif patterns[i] == \"R\" and colors[i]!= \"R\":\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the lengths of the colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Loop through the colors array and compare each color with the corresponding pattern\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    # If all the colors match the patterns, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == 'R':\n            if colors[i]!= 'Red':\n                return False\n        elif patterns[i] == 'G':\n            if colors[i]!= 'Green':\n                return False\n        elif patterns[i] == 'B':\n            if colors[i]!= 'Blue':\n                return False\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if patterns[j] == \"*\" or patterns[j] == colors[i]:\n                    break\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i == 0:\n            continue\n        if colors[i]!= patterns[i-1][-1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'R' and not colors[i][0] == 'R':\n            return False\n        elif patterns[i] == 'G' and not colors[i][1] == 'G':\n            return False\n        elif patterns[i] == 'B' and not colors[i][2] == 'B':\n            return False\n        elif patterns[i] == 'Y' and not (colors[i][0] == 'Y' and colors[i][1] == 'Y'):\n            return False\n        elif patterns[i] == 'P' and not (colors[i][0] == 'P' and colors[i][2] == 'P'):\n            return False\n        elif patterns[i] == 'C' and not (colors[i][1] == 'C' and colors[i][2] == 'C'):\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(i % K == 0 for i in tpl):\n            result.append(tpl)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(num % K == 0 for num in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Find tuples from the given list of tuples that have all elements divisible by K.\n    '''\n    result = []\n    for t in test_list:\n        if all(elem % K == 0 for elem in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if the number is divisible by 11, and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is divisible by 11.\n    Otherwise, it returns False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer as input and returns True if the number is divisible by 11, else False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_divisible_by_11(n):\n    '''\n    Check if a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as an argument and returns True if the length of the word is odd, and False otherwise.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 1:\n        print(f\"{s} has odd length\")\n    else:\n        print(f\"{s} has even length\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        print(\"The length of the word is odd\")\n    else:\n        print(\"The length of the word is even\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as an argument and checks whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} has an even length.\")\n    else:\n        print(f\"{s} has an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd, and False otherwise.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n * (n + 1)) / 2)"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    num = 0\n    for i in range(1, n+1):\n        num += (i*(i+1)*(i+2)*(i+3))//4\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = n * (n + 1) * (n + 2) // 6\n    return t\n\nn = int(input(\"Enter a number: \"))\nprint(\"The nth tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function returns the nth tetrahedral number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n - 1) + (n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + (n-1)*tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * n ** 3 / 3 + tetrahedral_number(n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n    \"\"\"\n    # Initialize variables\n    t = 0\n    k = 1\n    # Iterate until the nth tetrahedral number is found\n    while t < n:\n        t += k\n        k += 1\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + n\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    tetrahedral_num = 0\n    for i in range(n):\n        tetrahedral_num += i + 1\n    return tetrahedral_num"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes in a radius of a sphere and returns its volume.\n    \"\"\"\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculate the volume of a sphere given its radius.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n\nprint(volume_sphere(5)) # Output: 523.639"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere with radius r.\n\n    :param r: radius of the sphere\n    :return: volume of the sphere\n    \"\"\"\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculate the volume of a sphere.\n\n    Parameters:\n    r (float): the radius of the sphere\n\n    Returns:\n    float: the volume of the sphere\n    '''\n    # Calculate the volume of a sphere using the formula V = (4/3) * pi * r^3\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values\n    sum_ascii = 0\n    \n    # Iterate over each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum_ascii += ord(char)\n        \n    # Calculate the character made by adding the ASCII values modulo 26\n    char_ascii = sum_ascii % 26\n    \n    # Convert the ASCII value to a character\n    char_ascii = chr(char_ascii + 65)\n    \n    return char_ascii"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # Initialize the ASCII value of 'a' to 97\n    ASCII_val = 97\n    # Initialize the result variable to 0\n    result = 0\n    # Iterate through each character of the string\n    for char in strr:\n        # Add the ASCII value of the character to the result variable\n        result += ord(char)\n    # Take the result modulo 26 to get the character made by adding the ASCII values modulo 26\n    result = result % 26\n    # Convert the result to a character using the ASCII value\n    character = chr(result + ASCII_val)\n    # Return the character\n    return character"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    # Initializing sum of ASCII values to 0\n    sum = 0\n    # Looping through each character in the string\n    for i in strr:\n        # Adding ASCII value of each character to the sum\n        sum += ord(i)\n    # Finding the character made by adding sum modulo 26\n    char = chr(sum % 26)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # initializing a variable to store the sum of ASCII values\n    sum = 0\n    # iterating through each character of the string and adding its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    # returning the character made by adding the sum modulo 26\n    return chr(sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Convert the string to lowercase\n    strr = strr.lower()\n    # Initialize the sum to zero\n    sum = 0\n    # Iterate through the string and add the ASCII value of each character to the sum\n    for i in strr:\n        sum += ord(i) - 96\n    # Return the character made by adding the sum modulo 26\n    return chr((sum % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values\n    sum_ascii = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum_ascii += ord(char)\n    \n    # Return the character made by adding the ASCII values modulo 26\n    return chr(sum_ascii % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # Initialize the variable to store the sum of ASCII values\n    ascii_sum = 0\n    \n    # Iterate over each character in the string and add its ASCII value to the sum\n    for char in strr:\n        ascii_sum += ord(char)\n    \n    # Return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(ascii_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Initializing the sum of ASCII values\n    sum_ascii = 0\n    \n    # Looping through the string and adding the ASCII value of each character to the sum_ascii\n    for i in strr:\n        sum_ascii += ord(i)\n        \n    # Finding the character made by adding the sum_ascii modulo 26\n    char = chr((sum_ascii % 26) + 97)\n    \n    # Returning the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = sum(ord(i) - ord('a') + 1 for i in strr) % 26\n    return chr(ord('a') + result - 1)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return \"Enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1\"\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return sequence_list[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_conway(num):\n    \"\"\"\n    This function returns the nth number in the Newman Conway Sequence\n    \"\"\"\n    if num == 0:\n        return \"Invalid input\"\n    elif num == 1:\n        return \"0\"\n    elif num == 2:\n        return \"0 1\"\n\n    sequence = [0, 1, 1]\n\n    for i in range(3, num+1):\n        sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n\n    return''.join(str(num) for num in sequence[1:])"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    This function finds the nth number in the Newman Conway Sequence.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please provide a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    This function takes an integer n as input and returns the nth number in the Newman Conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            current_num = sequence_list[i-1] + sequence_list[i-2]\n            sequence_list.append(current_num)\n        return sequence_list[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    This function finds the nth number in the Newman Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculates the surface area of a sphere with radius r.\n    '''\n    # Calculate the surface area of a sphere using the formula A = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Function to find the surface area of a sphere\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonals = [i * (2 * i - 1) for i in range(1, n+1)]\n    return hexagonals[-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n*(2*n-1))//2)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n * (2 * n - 1)\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = 0\n    count = 0\n    \n    while count < n:\n        hexagonal_number += count + 1\n        count += 1\n    \n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    count = 0\n    num = 0\n    \n    while count < n:\n        num += 6 * count\n        count += 1\n        \n    return num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = n * (2*n - 1)\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    hex_num = 1\n    while i <= n:\n        hex_num += i\n        i += 1\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    count = 1\n    hexagonal_number = 1\n    while count <= n:\n        hexagonal_number += 6*count\n        count += 1\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n * (2 * n - 1)\n    return hexagonal_number + n - 1"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    total = 0\n    while True:\n        hexagonal_number = i*(2*i - 1)\n        if hexagonal_number >= n:\n            total += hexagonal_number\n            if total >= n:\n                return hexagonal_number - (total - n)\n            else:\n                i += 1\n        else:\n            i += 1"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for d in [dict1, dict2, dict3]:\n        result.update(d)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    for d in [dict1, dict2, dict3]:\n        merged_dict.update(d)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for dictionary in [dict1, dict2, dict3]:\n        merged_dict.update(dictionary)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for dictionary in [dict1, dict2, dict3]:\n        for key in dictionary:\n            merged_dict[key] = dictionary[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict()\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    This function takes three dictionaries as arguments and returns a single dictionary merged from the three input dictionaries.\n    '''\n    merged_dict = {}\n    for i in [dict1, dict2, dict3]:\n        merged_dict.update(i)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary of the frequency of each element in the list.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with the frequency of each element in the list.\n\n    Args:\n    lst (list): A list of elements.\n\n    Returns:\n    dict: A dictionary with the frequency of each element in the list.\n    \"\"\"\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with the frequency of all elements in the list.\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(n):\n    \"\"\"\n    This function finds the closest smaller number than n.\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    smaller_nums = [x for x in range(n) if x < n]\n    if not smaller_nums:\n        return None\n    return min(smaller_nums, key=lambda x: abs(x - n))"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(N-1, -1, -1):\n        if i < N:\n            closest = i\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    i = 1\n    closest = None\n    while i < N:\n        if i < N - (N % i):\n            closest = i\n        i += 1\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    for i in range(N-1, 0, -1):\n        if N % i == 0:\n            return i\n    return None  # if no smaller number is found"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # find the closest smaller number than n\n    closest = None\n    for i in range(N-1, 0, -1):\n        if N % i == 0:\n            closest = i\n            break\n    if closest is None:\n        closest = 1\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N-1 and abs(N-i) < abs(N-N-1):\n            return N-i\n    return N-1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer as input and returns the closest smaller integer.\n    '''\n    for i in range(n-1, 0, -1):\n        if i == n:\n            break\n        else:\n            return i"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    else:\n        return N - 1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i\n    return None"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            \n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list of strings as input and returns the length of the longest word in the list.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function finds the length of the longest word in a given list.\n    \"\"\"\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes in two string arguments, str1 and sub_str, and checks if sub_str is present as a substring in str1.\n    '''\n    # Split str1 into a list of words\n    str1_list = str1.split()\n\n    # Loop through the list of words and check if sub_str is present in each word\n    for word in str1_list:\n        if sub_str in word:\n            return True\n    \n    # If sub_str is not present in any word, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    for s in str1:\n        if sub_str in s:\n            result = True\n            break\n    return result"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    return n > 0 and all(n % i!= 0 for i in range(2, int(n ** 0.5) + 1))\n"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer as input and returns True if the number is undulating, False otherwise.\n    A number is said to be undulating if the absolute difference between any two adjacent digits is 1.\n    '''\n    digits = str(n)\n    for i in range(len(digits)-1):\n        if abs(int(digits[i+1]) - int(digits[i]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is a prime number\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    # Check if the number is divisible by 2 or 5\n    if n % 2 == 0 or n % 5 == 0:\n        return False\n    # Check if the number can be expressed as a sum of two abundant numbers\n    abundant_nums = []\n    for i in range(1, n):\n        if is_abundant(i):\n            abundant_nums.append(i)\n    for i in range(len(abundant_nums)):\n        for j in range(i, len(abundant_nums)):\n            if abundant_nums[i] + abundant_nums[j] == n:\n                return True\n    return False\n\ndef is_abundant(n):\n    \"\"\"\n    Check whether the given number is abundant or not.\n    \"\"\"\n    # Check if the number is a prime number\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    # Check if the number can be expressed as a sum of two other abundant numbers\n    abundant_nums = []\n    for i in range(1, n):\n        if is_abundant(i):\n            abundant_nums.append(i)\n    for i in range(len(abundant_nums)):\n        for j in range(i, len(abundant_nums)):\n            if abundant_nums[i] + abundant_nums[j] == n:\n                return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    \"\"\"\n    This function takes an integer n as an argument and returns True if n is an undulating number, else False.\n    An undulating number is a positive integer that satisfies the following condition:\n    if n is divisible by a prime number p, then n/p is also a prime number.\n    \"\"\"\n    # Define a function to check whether a given number is prime or not\n    def is_prime(num):\n        if num <= 1:\n            return False\n        elif num == 2:\n            return True\n        else:\n            for i in range(2, int(num**(0.5))+1):\n                if num % i == 0:\n                    return False\n            return True\n    \n    # Iterate through all the prime factors of n and check if n/p is also prime\n    for p in set(factorint(n).keys()):\n        if is_prime(n/p) == False:\n            return False\n    \n    # If all prime factors of n satisfy the condition, then n is an undulating number\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes a number n as input and returns True if it is undulating, False otherwise.\n\n    A number is said to be undulating if the absolute difference between the largest and smallest digits in it is less than or equal to 1.\n\n    For example, 123456 and 654321 are both undulating numbers, but 123456789 and 987654321 are not.\n    \"\"\"\n    n = str(n)\n    max_digit = max(n)\n    min_digit = min(n)\n    return abs(int(max_digit) - int(min_digit)) <= 1"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is undulating, else False.\n    A number is said to be undulating if the absolute difference between any two consecutive odd and even digits\n    is greater than 1.\n    \"\"\"\n    n = str(n)\n    odd_digits = [int(digit) for digit in n if int(digit) % 2!= 0]\n    even_digits = [int(digit) for digit in n if int(digit) % 2 == 0]\n    if len(odd_digits) < 2 or len(even_digits) < 2:\n        return False\n    for i in range(len(odd_digits)-1):\n        if abs(odd_digits[i] - odd_digits[i+1]) > 1 or abs(even_digits[i] - even_digits[i+1]) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is undulating and False otherwise.\n    A number is said to be undulating if the absolute difference between the consecutive odd numbers is greater than 1.\n    \"\"\"\n\n    # check if the input is even\n    if n % 2 == 0:\n        return False\n\n    # initialize the variables\n    prev_odd = 1\n    curr_odd = 3\n\n    # iterate through the odd numbers until the input number is reached\n    while curr_odd <= n:\n\n        # calculate the absolute difference between the consecutive odd numbers\n        diff = abs(curr_odd - prev_odd)\n\n        # check if the absolute difference is greater than 1\n        if diff > 1:\n            return False\n\n        # update the variables\n        prev_odd = curr_odd\n        curr_odd += 2\n\n    # if the loop completes without returning False, the input number is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Check if the given number is undulating or not.\n    '''\n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Check if the number has only one digit\n    if n < 10:\n        return True\n\n    # Check if the number has an even number of digits\n    if n % 2 == 0:\n        return False\n\n    # Check if the first and last digits are the same\n    if n % 10 == 0:\n        return False\n\n    # Check if the number is divisible by 9\n    if n % 9 == 0:\n        return False\n\n    # Check if the number is divisible by 81\n    if n % 81 == 0:\n        return False\n\n    # Check if the number is divisible by 729\n    if n % 729 == 0:\n        return False\n\n    # Check if the number is divisible by 6561\n    if n % 6561 == 0:\n        return False\n\n    # Check if the number is divisible by 59049\n    if n % 59049 == 0:\n        return False\n\n    # If none of the above conditions are satisfied, the number is not undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is undulating, False otherwise.\n\n    A number is said to be undulating if the difference between the consecutive digits of the number is constant for at least 2 digits.\n\n    For example, 123456 is undulating, while 1234567 is not undulating.\n    \"\"\"\n    # Convert n to a string to access its digits\n    digits = str(n)\n    # Initialize variables for the digit difference and the count of consecutive digits\n    digit_diff = 0\n    count = 1\n    # Iterate over the digits in the string\n    for i in range(len(digits)-1):\n        # Calculate the difference between the current and next digit\n        diff = int(digits[i+1]) - int(digits[i])\n        # If the difference is 0, increment the count\n        if diff == 0:\n            count += 1\n        # If the difference is not 0, update the digit difference and count\n        else:\n            digit_diff = diff\n            count = 2\n        # If the count reaches 2, and the difference between the consecutive digits is not equal to the digit difference, return False\n        if count == 2 and digit_diff!= diff:\n            return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # initialize variables\n    prev_digit = n % 10\n    count = 1\n    undulating = True\n    \n    # iterate through the remaining digits\n    for digit in str(n)[1:]:\n        if int(digit) > prev_digit:\n            count += 1\n            if count > 2:\n                undulating = False\n                break\n        else:\n            count = 1\n        prev_digit = int(digit)\n    \n    return undulating"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments 'a' and 'b' and returns the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = a ** b\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list based on the second value of the tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_length(lst):\n    \"\"\"\n    This function takes in a list of lists and returns the length of the smallest list.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function finds the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    This function takes a list of lists as input and returns a dictionary with key as each element and value as the frequency of that element in the flattened list.\n    '''\n    # Flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate over each element of the flattened list and increment its frequency count in the dictionary\n    for element in flat_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    This function takes a flattened list of lists as input and returns a dictionary of frequency count of each element.\n    \"\"\"\n    # Initialize an empty dictionary to store frequency count of each element\n    frequency_dict = {}\n\n    # Loop through each element in the flattened list\n    for elem in list1:\n        # Check if the element exists in the dictionary\n        if elem in frequency_dict:\n            # If the element exists, increment its count by 1\n            frequency_dict[elem] += 1\n        else:\n            # If the element doesn't exist, add it to the dictionary with count 1\n            frequency_dict[elem] = 1\n\n    # Return the dictionary of frequency counts\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns a dictionary with frequency of each element in a flattened list.\n    \"\"\"\n    freq_dict = {}\n    flattened_list = [item for sublist in list1 for item in sublist] # flatten the list of lists\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten(l):\n    \"\"\"\n    A function to flatten a list of lists.\n    \"\"\"\n    return [item for sublist in l for item in sublist]\n\ndef frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = flatten(list1)\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten(lst):\n    '''\n    Flattens a list of lists into a single list.\n    '''\n    flat_lst = []\n    for sublist in lst:\n        for item in sublist:\n            flat_lst.append(item)\n    return flat_lst\n\ndef frequency_lists(lst):\n    '''\n    Finds the frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_lst = flatten(lst)\n    freq_dict = {}\n    for item in flat_lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for element in list1:\n        if isinstance(element, list):\n            for sub_element in element:\n                if sub_element in freq_dict:\n                    freq_dict[sub_element] += 1\n                else:\n                    freq_dict[sub_element] = 1\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if j in freq:\n                    freq[j] += 1\n                else:\n                    freq[j] = 1\n        else:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all numbers in the list divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input, multiplies all the numbers in the list, and then divides the result by the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        binary = ''\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n //= 2\n        return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:] # convert to binary using built-in bin() function, then remove the '0b' prefix\n    return binary.lstrip('0') # remove leading zeros"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0:\n        binary_str += str(n % 2)\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Converts the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return None\n    \n    # convert the number to a string and check if it is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        num_str = str(num + 1)\n    \n    # check if the number is a palindrome after removing the middle digit\n    mid = len(num_str) // 2\n    left = mid - 1\n    right = mid + 1\n    while left >= 0 and right < len(num_str):\n        if num_str[left]!= num_str[right]:\n            break\n        left -= 1\n        right += 1\n    if left < 0 and right >= len(num_str):\n        num_str = str(int(num_str) + 1)\n        left = mid - 1\n        right = mid + 1\n        while left >= 0 and right < len(num_str):\n            if num_str[left]!= num_str[right]:\n                break\n            left -= 1\n            right += 1\n    \n    # find the next smallest palindrome\n    palindrome = int(num_str[left+1:right][::-1] + num_str)\n    return palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # First, we check if the given number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n\n    # Next, we check if the given number has an even number of digits\n    if len(str(num)) % 2 == 0:\n        # If the number has an even number of digits, we need to check for the smallest palindrome with an even number of digits\n        palindrome = int(str(num)[::-1][:len(str(num))//2][::-1] + str(num))\n    else:\n        # If the number has an odd number of digits, we need to check for the smallest palindrome with an odd number of digits\n        palindrome = int(str(num)[::-1][:len(str(num))//2+1][::-1] + str(num))\n\n    # Finally, we return the smallest palindrome found\n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    \n    # Check if the reversed number is already a palindrome\n    if reversed_num == reversed_num[::-1]:\n        # If it is, add 1 to the original number and return the new palindrome\n        return int(str(num + 1) + str(num)[::-1])\n    else:\n        # If it's not, add 1 to the reversed number and return it as a palindrome\n        return int(reversed_num + str(num + 1))"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the input number to a string\n    num_str = str(num)\n    \n    # Find the center of the palindrome\n    center = len(num_str) // 2\n    \n    # Handle the case where the input number is a palindrome itself\n    if len(num_str) % 2 == 0:\n        center -= 1\n    \n    # Create two palindromes with different center characters\n    palindrome1 = num_str[:center] + num_str[center+1:]\n    palindrome2 = num_str[:center] + num_str[center-1::-1]\n    \n    # Return the smaller palindrome\n    return min(int(palindrome1), int(palindrome2))"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the input number to a string to make it easier to manipulate\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, add 1 to the number and return it as an integer\n        return int(str(num + 1))\n\n    # Convert the number to a list of digits so that we can manipulate them\n    digits = [int(digit) for digit in num_str]\n\n    # Find the rightmost digit that can be incremented\n    i = len(digits) - 1\n    while i >= 0 and digits[i] == 9:\n        i -= 1\n    if i < 0:\n        # If all digits are 9, we need to start from the beginning of the number\n        digits = [1] + [0] * len(digits)\n    else:\n        # Otherwise, we can increment the rightmost digit and return the result as an integer\n        digits[i] += 1\n        return int(''.join(str(digit) for digit in digits))\n\n    # If we get here, it means we've overflowed the maximum value for an integer\n    sys.exit(\"Error: number out of range\")"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    else:\n        return int(str(num)[:-1] + str(num)[::-1])"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    A helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function finds the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    palindrome = num + 1\n    while not is_palindrome(palindrome):\n        palindrome += 1\n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Check if the input integer is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the integer is already a palindrome, find the next smallest palindrome by appending two copies of the largest digit to the input integer\n        max_digit = str(max(int(digit) for digit in num_str))\n        return int(num_str + max_digit * 2)\n    else:\n        # If the integer is not a palindrome, find the next smallest palindrome by adding 1 to the integer and then performing the above check\n        return next_smallest_palindrome(num + 1)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string and check if it's already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        # If it's already a palindrome, find the next largest number and convert it to a palindrome\n        largest_palindrome = str(int(num_str) - 1)\n        while len(largest_palindrome) < len(num_str):\n            largest_palindrome = str(int(largest_palindrome) - 1)\n        return int(largest_palindrome)\n    else:\n        # If it's not a palindrome, find the next smallest palindrome by adding one to the right-most digit\n        num_str = list(num_str)\n        i = len(num_str) - 1\n        while i >= 0:\n            if num_str[i]!= '9':\n                num_str[i] = chr(ord(num_str[i]) + 1)\n                break\n            else:\n                num_str[i] = '0'\n                i -= 1\n        return int(''.join(num_str))\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        num = int(sys.argv[1])\n        print(next_smallest_palindrome(num))\n    else:\n        print('Usage: python next_smallest_palindrome.py <integer>')"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"k is greater than the length of the array\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return sorted(arr)[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    This function converts a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n\n    # Join the words back into a string with the first word capitalized\n    return ''.join(words)"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and returns a camel case string.\n    '''\n    # Splitting the snake case string into words using split() function.\n    words = word.split('_')\n    # Initializing an empty string to store camel case string.\n    camel_case = ''\n    # Looping over each word in the words list.\n    for i in range(len(words)):\n        # Checking if the current word is the first word of the list.\n        if i == 0:\n            camel_case += words[i]\n        else:\n            # Capitalizing the first letter of the word.\n            camel_case += words[i].capitalize()\n    # Returning the camel case string.\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string as input and returns a camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word.capitalize() if i!= 0 else word[0] for i, letter in enumerate(word)])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0]\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_word += words[i].lower()\n        else:\n            camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    return (n - 1) * (m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n**m)*(m-1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0: \n        return 1\n    \n    eulerian_num = (n + m) % 2\n    if eulerian_num == 1: \n        return 0\n    else: \n        return 1"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m) for a given n and m.\n    \"\"\"\n    # Initialize the variables\n    a = 0\n    i = 1\n    j = 1\n    \n    # Calculate the Eulerian number a(n, m)\n    while i <= n and j <= m:\n        a += i + j\n        i += 1\n        j += 1\n        \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 2\n    else:\n        return n * m"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return n\n    else:\n        return n * eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    eulerian_num = 0\n    visited = set()\n\n    # DFS to find all possible paths\n    def dfs(curr_node, visited, graph):\n        visited.add(curr_node)\n        if curr_node in graph:\n            for neighbor in graph[curr_node]:\n                if neighbor not in visited:\n                    dfs(neighbor, visited, graph)\n\n    # Generate all possible paths\n    for i in range(n):\n        dfs(i, visited, m)\n        eulerian_num += len(visited)\n        visited.clear()\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n is greater than m\n    if n > m:\n        # Swap n and m\n        n, m = m, n\n\n    # Initialize result to 1\n    result = 1\n\n    # Loop until n is equal to 1\n    while n!= 1:\n        # Check if n is even or odd\n        if n % 2 == 0:\n            # Calculate the value of a(n/2, m)\n            a = eulerian_num(n // 2, m)\n            # Multiply the result by a(n/2, m)\n            result *= a ** 2\n        else:\n            # Calculate the value of a(n-1, m+1)\n            a = eulerian_num(n - 1, m + 1)\n            # Multiply the result by a(n-1, m+1)\n            result *= a\n\n        # Divide n by 2\n        n //= 2\n\n    # Return the final result\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = (n * m) // 2\n    return num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 2\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        return 0"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n\ninput_list = [[\"banana\", \"orange\", \"apple\"], [\"pear\", \"grape\", \"pineapple\"], [\"mango\", \"watermelon\", \"strawberry\"]]\nsort_sublists(input_list)\nprint(input_list)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n\ninput_list = [['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird'], ['zebra', 'lion', 'elephant']]\nprint(sort_sublists(input_list))"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    This function sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of True booleans in the list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in the list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes two arguments - a list and a tuple.\n    It appends the list to the tuple and returns the modified tuple.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuple.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuple.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heappush(merged_list, num1[0])\n    heapq.heappush(merged_list, num2[0])\n    heapq.heappush(merged_list, num3[0])\n\n    # merge the remaining elements from the three lists\n    for i in range(1, len(num1)):\n        heapq.heappush(merged_list, num1[i])\n    for i in range(1, len(num2)):\n        heapq.heappush(merged_list, num2[i])\n    for i in range(1, len(num3)):\n        heapq.heappush(merged_list, num3[i])\n\n    # extract and return the merged list\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] < num3[0]):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and merges them into a single sorted list.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n    merged_list = []\n    for i in range(len(num1) + len(num2) + len(num3)):\n        merged_list.append(heapq.heappop(heap))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function merges three sorted lists into a single sorted list.\n\n    :param num1: list of integers, first sorted list\n    :param num2: list of integers, second sorted list\n    :param num3: list of integers, third sorted list\n    :return: list of integers, merged sorted list\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a min heap to store the merged list\n    heap = []\n\n    # Add the first element of each list to the heap\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    # Create a list to store the merged list\n    merged = []\n\n    # Merge the three lists into the merged list\n    while heap:\n        # Pop the smallest element from the heap and add it to the merged list\n        smallest = heapq.heappop(heap)\n        merged.append(smallest)\n\n        # If there are still elements in the merged list that are smaller than the smallest element in the heap,\n        # add them to the heap\n        if len(merged) < len(num1) and num1[len(merged)] < smallest:\n            heapq.heappush(heap, num1[len(merged)])\n        if len(merged) < len(num2) and num2[len(merged)] < smallest:\n            heapq.heappush(heap, num2[len(merged)])\n        if len(merged) < len(num3) and num3[len(merged)] < smallest:\n            heapq.heappush(heap, num3[len(merged)])\n\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (num2 and num1[0] > num2[0]) or num3 and (num1 and num1[0] > num3[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (num3 and num2[0] > num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    # Create a new list to hold the merged and sorted lists\n    merged_list = []\n\n    # Add all the elements from the three lists to the heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    # Merge the three lists into a single sorted list using a while loop\n    while num1 or num2 or num3:\n        if num1 and num2 and num3:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        elif num1:\n            merged_list.append(num1[0])\n            heapq.heappop(num1)\n        elif num2:\n            merged_list.append(num2[0])\n            heapq.heappop(num2)\n        else:\n            merged_list.append(num3[0])\n            heapq.heappop(num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n\n    # Add elements from each list to the heap\n    for lst in [num1, num2, num3]:\n        for num in lst:\n            heapq.heappush(heap, num)\n\n    # Extract elements from the heap and append to the final list\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    merged_list += num1 + num2 + num3\n    \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # initialize variables\n    count = 0\n    s = s * n\n    # loop through the string and check if each digit is odd\n    for i in range(len(s)):\n        if s[i] == '1' and s[i-n:i] == s[i:i+n][::-1]:\n            count += 1\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes in a binary string s and a number n as inputs.\n    It returns the number of numbers with an odd value when rotating the binary string n times.\n    '''\n    # Convert the binary string to a list of integers\n    s_list = [int(i) for i in s]\n    # Initialize the count variable\n    count = 0\n    # Rotate the binary string n times\n    for i in range(n):\n        s_list = s_list[1:] + s_list[:1]\n        # Check if the number obtained from the rotated string is odd\n        if sum(s_list) % 2!= 0:\n            count += 1\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the string to a list of integers\n    s = [int(c) for c in s]\n    \n    # Rotate the list n times\n    s = s[n:] + s[:n]\n    \n    # Count the number of odd numbers in the rotated list\n    return sum(1 for x in s if x % 2 == 1)"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a Python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    \n    # Convert binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        binary_list = binary_list[1:] + [binary_list[0]]\n        \n    # Count the number of odd values in the rotated binary string\n    for i in binary_list:\n        if i % 2!= 0:\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    s = s*2\n    for i in range(len(s)):\n        if i >= len(s) - n and s[i] == '1':\n            count += 1\n        elif i < len(s) - n and s[i] == '0' and s[i+n] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes two arguments:\n    - s: a binary string\n    - n: an integer denoting the number of times the string should be rotated\n\n    It returns the number of odd-valued numbers in the rotated string.\n    \"\"\"\n    s = s * n  # repeat the string n times\n    rotated = s[n:] + s[:n]  # rotate the string\n\n    # count the number of odd-valued numbers in the rotated string\n    count = 0\n    for digit in rotated:\n        if int(digit) % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    This function takes a binary string's' and a number 'n', and returns the number of numbers with an odd value after rotating the binary string 'n' times.\n    '''\n    # Convert the binary string to a list of integers\n    s = list(map(int, s))\n    # Pad the list with zeros to make its length equal to a power of 2\n    s += [0] * (2**(n-1)-len(s))\n    # Rotate the list n times\n    s = s[n:] + s[:n]\n    # Count the number of odd numbers\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the string into a list of integers\n    s = [int(i) for i in s]\n    \n    # Rotate the string n times\n    s = s[-n:] + s[:-n]\n    \n    # Count the number of odd numbers in the rotated string\n    count = 0\n    for i in s:\n        if i % 2 == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes a binary string s and an integer n as inputs, and returns the number of numbers with an odd value when rotating the binary string n times.\n    \"\"\"\n    # Convert the string to a list of integers\n    s_list = [int(x) for x in s]\n    \n    # Rotate the list n times\n    rotated_list = s_list[-n:] + s_list[:-n]\n    \n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for i in rotated_list:\n        if i % 2!= 0:\n            count += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    s = s.zfill(n) # pad the binary string with leading zeros to ensure it's of length n\n    \n    for i in range(n):\n        num = int(s[i:i+n], 2) # convert the current substring of length n to an integer\n        \n        if num % 2 == 1: # check if the integer is odd\n            count += 1\n        \n    return count"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lst in nestedlist:\n        for num in lst:\n            if num not in common and all(num in sublist for sublist in nestedlist):\n                common.append(num)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements and nestedlist[i].count(nestedlist[i][j]) == len(nestedlist):\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if i.count(j) == len(nestedlist) and nestedlist.count(j) == len(i):\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a list of nested lists as an argument and returns a list of common elements in the nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common_elements.append(set(nestedlist[i]) & set(nestedlist[j]))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                if set(nestedlist[i]).intersection(nestedlist[j]):\n                    common_elements.append(list(set(nestedlist[i]).intersection(nestedlist[j])))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                common_elements.extend(set(nestedlist[i]) & set(nestedlist[j]))\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dict(list1):\n    '''\n    This function takes a list as an input and checks whether all dictionaries in the list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dict_list(dict_list):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in dict_list:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    This function checks whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dict_list(list1):\n    '''\n    This function takes a list of dictionaries as input and returns True if all the dictionaries are empty,\n    False otherwise.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns a single integer.\n    '''\n    num_str = ''.join(str(num) for num in nums)\n    return int(num_str)"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.','',1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sub_list in test_list:\n        new_sub_list = []\n        for elem in sub_list:\n            try:\n                new_elem = float(elem)\n                new_sub_list.append(new_elem)\n            except ValueError:\n                pass\n        result.append(new_sub_list)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        else:\n            try:\n                result.append(float(item))\n            except:\n                result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            result_list.append(list_to_float(test_list[i]))\n        elif isinstance(test_list[i], str) and test_list[i].isnumeric():\n            result_list.append(float(test_list[i]))\n        else:\n            result_list.append(test_list[i])\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_sublist.append(float(element))\n            except ValueError:\n                pass\n        new_list.append(new_sublist)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for sub_list in test_list:\n        sub_float_list = []\n        for element in sub_list:\n            try:\n                float_element = float(element)\n                sub_float_list.append(float_element)\n            except ValueError:\n                pass\n        result_list.append(sub_float_list)\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string on space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as input and returns a list of strings split on the space character.\n    '''\n    return string.split(' ')"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) % 2 == 1:\n        return arr[len(arr)//2]\n    else:\n        return (arr[len(arr)//2] + arr[len(arr)//2 - 1])/2"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    # Initialize variables to keep track of the indices of the two elements that appear only once\n    i1 = i2 = None\n    \n    # Iterate through the array and keep track of the indices of the first and second elements\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            continue\n        elif i1 is None:\n            i1 = i\n        else:\n            i2 = i\n            break\n    \n    # If there are two elements that appear only once, return them as a tuple\n    if i2 is not None:\n        return (arr[i1], arr[i2])\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    # if length of array is less than 2, return None\n    if n < 2:\n        return None\n\n    # if length of array is odd, check the middle element\n    if n % 2 == 1:\n        # if the middle element is the only one, return it\n        if arr[n // 2] == arr[n // 2 + 1]:\n            return arr[n // 2]\n        # if the middle element appears more than once, return None\n        else:\n            return None\n\n    # if length of array is even, check the middle two elements\n    else:\n        left = arr[n // 2 - 1]\n        right = arr[n // 2]\n        if left == right:\n            # check if the left half contains the only repeated element\n            for i in range(n // 2 - 1, -1, -1):\n                if arr[i] == left:\n                    return left\n                elif arr[i] < left:\n                    break\n            # check if the right half contains the only repeated element\n            for i in range(n // 2, n):\n                if arr[i] == left:\n                    return left\n                elif arr[i] < left:\n                    break\n        else:\n            # if the middle two elements are different, return None\n            return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to keep track of the count of each element in the array\n    count = {}\n    \n    # loop through the array and update the count dictionary\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # loop through the dictionary to find the element that appears only once\n    for num, freq in count.items():\n        if freq == 1:\n            return num\n    \n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    else:\n        mid = n // 2\n        left = search(arr[:mid])\n        right = search(arr[mid:])\n        if left is None and right is None:\n            return None\n        elif left is None:\n            return right\n        elif right is None:\n            return left\n        else:\n            return left if left == right else left if arr[mid-1] < left else right"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0 or n == 1:\n        return None\n    \n    # If all elements are distinct, return None\n    if arr[0]!= arr[1]:\n        return None\n    \n    # If all elements are the same, return the element\n    if n == 2:\n        return arr[0]\n    \n    # If there are more than 2 distinct elements,\n    # check the next pair of elements for a match\n    for i in range(2, n):\n        if arr[i] == arr[i-1]:\n            continue\n        elif arr[i]!= arr[i-2]:\n            return arr[i-1]\n    \n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    # Initialize variables\n    left = 0\n    right = n-1\n    # Traverse through the array\n    while left < right:\n        mid = (left+right) // 2\n        if arr[mid] == arr[left]:\n            left = mid + 1\n        elif arr[mid] == arr[right]:\n            right = mid - 1\n        else:\n            return arr[mid]\n    if left == n-1:\n        return arr[left]\n    else:\n        return arr[right]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arr:\n        if num not in count_dict:\n            count_dict[num] = 1\n        else:\n            count_dict[num] += 1\n    \n    # Loop through the dictionary to find the element that appears only once\n    for num, count in count_dict.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize variables\n    i = 0\n    j = n - 1\n    # Loop until two pointers meet\n    while i < j:\n        # If the difference between the two elements is greater than 1, the element must be in the left subarray\n        if arr[j] - arr[i] > 1:\n            j -= 1\n        # If the difference is less than or equal to 1, the element must be in the right subarray\n        else:\n            i += 1\n    # If the loop terminates without finding the element, it must be at index i\n    return arr[i]"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]) * abs(list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples.\n    \"\"\"\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_product = max(max_product, abs(lst[i][0]*lst[i][1] * lst[j][0]*lst[j][1]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisors(n):\n    \"\"\"\n    Return a set of all divisors of n (excluding n itself).\n    \"\"\"\n    divs = set()\n    for i in range(1, n):\n        if n % i == 0:\n            divs.add(i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Return the sum of all amicable numbers from 1 to a specified limit.\n    \"\"\"\n    total = 0\n    for n in range(1, limit):\n        div_sum = sum(divisors(n))\n        if div_sum < n and n == sum(divisors(div_sum)):\n            total += n\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        if i == sum(div for div in range(2, i//2+1) if i % div == 0):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    # Create a list of all numbers from 1 to `limit`\n    numbers = list(range(1, limit + 1))\n\n    # Create a dictionary to store the sums of each number's divisors\n    sums = {}\n\n    # Iterate over the numbers and calculate their divisors\n    for num in numbers:\n        divisors = set()\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors.add(i)\n                if num // i!= i:\n                    divisors.add(num // i)\n        sums[num] = sum(divisors)\n\n    # Calculate the sums of all amicable pairs and sum them\n    amicable_pairs = [(x, y) for x in numbers for y in numbers if x!= y and sums[x] == y and sums[y] == x]\n    amicable_sum = sum(x + y for x, y in amicable_pairs)\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for num in range(1, limit+1):\n        sum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n        if sum_of_divisors!= num and num == sum(i for i in range(1, sum_of_divisors+1) if sum_of_divisors % i == 0):\n            sum_of_amicable_numbers += num\n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisors(n):\n    '''\n    Returns a list of divisors of n.\n    '''\n    divs = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if num in divisors(num):\n            continue\n        else:\n            sum_divs = sum(divisors(num))\n            if sum_divs in divisors(sum_divs) and sum_divs!= num:\n                amicable_sum += num + sum_divs\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisors(n):\n    div = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div.append(i)\n            if n/i!= i:\n                div.append(n//i)\n    return div\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit+1):\n        div_sum = sum(divisors(i))\n        if i == div_sum and i!= sum(divisors(div_sum)):\n            amicable_sum += i + sum(divisors(i))\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_amicable_numbers(limit):\n    \"\"\"\n    This function calculates the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        j = sum(set(range(1, i // 2 + 1)) & set(divmod(i, 2)[0] + divmod(i, 2)[1]))\n        if i == j and i!= 1:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\nlimit = int(input(\"Enter the limit: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", sum_of_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Returns True if the given number is amicable, False otherwise.\n    \"\"\"\n    divisor_sum = sum(divisor for divisor in range(1, num // 2 + 1) if num % divisor == 0)\n    return divisor_sum == num and num!= 1\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the given limit.\n    \"\"\"\n    amicable_numbers = set()\n    for num in range(2, limit):\n        if is_amicable(num):\n            amicable_numbers.add(num)\n    return sum(amicable_numbers)\n\nlimit = 10000\nresult = amicable_numbers_sum(limit)\nprint(result)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        sum_of_divisors = sum(i for i in range(1, num) if num % i == 0)\n        if sum_of_divisors > num and num == sum(i for i in range(1, sum_of_divisors+1) if sum_of_divisors % i == 0):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    # Create a list to store all the factors of a number\n    def factors(n):\n        return set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    \n    # Iterate through all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable\n        if i == sum(factors(i)) and i!= sum(factors(sum(factors(i)))):\n            amicable_sum += i\n    \n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as input and returns their angle in degrees.\n    '''\n    # Calculate the angle in radians using the phase() function\n    angle_radians = cmath.phase(complex(a,b))\n\n    # Convert the angle from radians to degrees\n    angle_degrees = round(angle_radians*180/cmath.pi,2)\n\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert the complex number to a polar form\n    r, theta = cmath.polar(complex(a, b))\n    \n    # Return the angle in degrees\n    return cmath.degrees(theta)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_len = 0\n    curr_len = 0\n    for i in range(n):\n        if string[i] == '0':\n            curr_len += 1\n        else:\n            curr_len -= 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            count_0 = substring.count('0')\n            count_1 = substring.count('1')\n            if abs(count_0 - count_1) > max_length:\n                max_length = abs(count_0 - count_1)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of the length of the longest sub-string with 0s and 1s of different lengths\n    max_length = 0\n    # Iterate over all possible sub-strings of the string\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            # Check if the sub-string contains only 0s or only 1s\n            if string[i:j].count('0') == len(string[i:j]) or string[i:j].count('1') == len(string[i:j]):\n                # Calculate the length of the sub-string and update the maximum if necessary\n                length = j - i\n                if length > max_length:\n                    max_length = length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            if sub_string.count('0') == sub_string.count('1'):\n                length = abs(sub_string.count('0') - sub_string.count('1'))\n                if length > max_length:\n                    max_length = length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    This function takes in a binary string and returns the length of the maximum substring with\n    equal number of 0s and 1s.\n    \"\"\"\n    max_len = 0\n    curr_len = 0\n    prev_bit = None\n    \n    for bit in string:\n        if bit == prev_bit:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n            \n        prev_bit = bit\n        \n    max_len = max(max_len, curr_len)\n    \n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_length:\n                max_length = diff\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    n = len(string)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = string[i:j]\n            zeros = sub.count('0')\n            ones = sub.count('1')\n            ans = max(ans, zeros - ones)\n    return ans"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Finding the maximum difference between the number of 0s and number of 1s in any sub-string\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n        length = abs(count_0 - count_1)\n        if length > max_length:\n            max_length = length\n            \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    # Find the common divisors of a and b\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    \n    # Return the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the set of common divisors\n    divisors = set(range(1, min(a, b) + 1)) & set(range(1, max(a, b) + 1))\n\n    # Compute the sum of the divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the divisors of a\n    divisors_a = []\n    for i in range(1, a+1):\n        if a%i == 0:\n            divisors_a.append(i)\n    \n    # Find the divisors of b\n    divisors_b = []\n    for i in range(1, b+1):\n        if b%i == 0:\n            divisors_b.append(i)\n    \n    # Find the common divisors of a and b\n    common_divisors = list(set(divisors_a) & set(divisors_b))\n    \n    # Find the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n    \n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_divisors(a,b):\n    \"\"\"\n    This function takes two numbers as input and finds their common divisors.\n    It then returns the sum of those divisors.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nprint(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_divisors(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Compute the greatest common divisor of a and b.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        \"\"\"\n        Compute the lowest common multiple of a and b.\n        \"\"\"\n        return a * b // gcd(a, b)\n\n    def sum_divisors(n):\n        \"\"\"\n        Compute the sum of all divisors of n (excluding n itself).\n        \"\"\"\n        result = 0\n        for i in range(1, n):\n            if n % i == 0:\n                result += i\n        return result\n\n    d = gcd(a, b)\n    l = lcm(a, b)\n    result = sum_divisors(d) + sum_divisors(l) - sum_divisors(d * l // gcd(d, l))\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the set of common divisors using the intersection method\n    common_divisors = set(range(1, min(num1, num2) + 1)) & set(range(1, max(num1, num2) + 1))\n    \n    # Sum the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    a_divisors = set()\n    b_divisors = set()\n    \n    # Finding the divisors of a\n    for i in range(1, a+1):\n        if a % i == 0:\n            a_divisors.add(i)\n    \n    # Finding the divisors of b\n    for i in range(1, b+1):\n        if b % i == 0:\n            b_divisors.add(i)\n    \n    # Finding the common divisors of a and b\n    common_divisors = a_divisors.intersection(b_divisors)\n    \n    # Finding the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    \n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the maximum value between a and b\n    max_num = max(a, b)\n\n    # Find the minimum value between a and b\n    min_num = min(a, b)\n\n    # Initialize the sum of common divisors to 0\n    sum_of_common_divisors = 0\n\n    # Loop through all the values from min_num to 1\n    for i in range(min_num, 0, -1):\n\n        # Check if max_num is divisible by i\n        if max_num % i == 0 and min_num % i == 0:\n\n            # If yes, add i to the sum of common divisors\n            sum_of_common_divisors += i\n\n    # Return the sum of common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # find the maximum number among the two input numbers\n    max_num = max(a, b)\n    # initialize the sum of common divisors to zero\n    sum_common = 0\n    # iterate from 1 to the maximum number\n    for i in range(1, max_num + 1):\n        # check if both numbers are divisible by i\n        if a % i == 0 and b % i == 0:\n            # add i to the sum of common divisors\n            sum_common += i\n    # return the sum of common divisors\n    return sum_common"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    This function multiplies two integers and returns the result.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    This function multiplies two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    This function multiplies two integers and returns the result.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function finds words in the list that are longer than n characters.\n\n    Parameters:\n    n (int): The maximum number of characters for a word to be considered long.\n    words (list): A list of words to search for long words.\n\n    Returns:\n    A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = [word for word in words if len(word) > n]\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Find words that are longer than n characters.\n\n    :param n: maximum length of words to find\n    :param words: list of words to search in\n    :return: a list of words longer than n characters\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_of_rows = [sum(row) for row in my_matrix]\n    sum_of_cols = [sum(col) for col in zip(*my_matrix)]\n    sum_of_diagonals = [my_matrix[i][i] + my_matrix[i][n-i-1] for i in range(n)]\n    magic_sum = n * (n*n + 1) // 2\n    return sum_of_rows == sum_of_cols == sum_of_diagonals == [magic_sum] * n"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # check if the matrix is square\n    if n!= len(my_matrix[0]):\n        print(\"The matrix is not square\")\n        return False\n\n    # calculate the sum of each row, column, and diagonal\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    diag_sum_right = sum(my_matrix[i][i] for i in range(n))\n    diag_sum_left = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    # check if the sum of each row, column, and diagonal is equal\n    if not all(sum == n*(n**2+1)//2 for sum in [row_sums, col_sums, diag_sum_right, diag_sum_left]):\n        print(\"The matrix is not a magic square\")\n        return False\n\n    print(\"The matrix is a magic square\")\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    n = len(my_matrix)\n    if n == 0 or not all(len(row) == n for row in my_matrix):\n        print(\"Error: Matrix is not square.\")\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n\n    # Check if the sum of each row and column is equal to the magic number\n    magic_number = n * (n**2 + 1) // 2\n    if not all(row_sum == magic_number for row_sum in row_sums) or \\\n       not all(col_sum == magic_number for col_sum in col_sums):\n        print(\"Error: Matrix is not a magic square.\")\n        return False\n\n    # Check if the diagonals are equal\n    diag_1 = sum(my_matrix[i][i] for i in range(n))\n    diag_2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag_1!= magic_number or diag_2!= magic_number:\n        print(\"Error: Matrix is not a magic square.\")\n        return False\n\n    # If all checks pass, then the matrix is a magic square\n    print(\"Matrix is a magic square.\")\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    \n    # calculate the sum of the diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n    \n    # calculate the sum of the antidiagonal elements\n    antidiagonal_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    # calculate the sum of the rows\n    row_sum = sum(my_matrix[i][j] for i in range(n) for j in range(n))\n    \n    # calculate the sum of the columns\n    col_sum = sum(my_matrix[j][i] for i in range(n) for j in range(n))\n    \n    # check if the sum of the diagonal, antidiagonal, rows and columns are equal\n    if diagonal_sum == antidiagonal_sum == row_sum == col_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and returns True if it is a magic square,\n    otherwise it returns False.\n    '''\n    # Check if matrix is square\n    rows, cols = len(my_matrix), len(my_matrix[0])\n    if rows!= cols:\n        print(\"Matrix is not square. Cannot check if it is a magic square.\")\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(rows)]\n    col_sums = [sum(my_matrix[i][j] for i in range(rows)) for j in range(cols)]\n\n    # Calculate the sum of the diagonals\n    diagonal1_sum = sum(my_matrix[i][i] for i in range(rows))\n    diagonal2_sum = sum(my_matrix[i][rows-i-1] for i in range(rows))\n\n    # Check if all row and column sums are equal to magic number 15\n    if not all(sum(row_sums) == sum(col_sums)):\n        print(\"Matrix does not have all row and column sums equal to 15. Cannot be a magic square.\")\n        return False\n\n    # Check if all diagonal sums are equal to magic number 15\n    if not all(diagonal1_sum == diagonal2_sum):\n        print(\"Matrix does not have all diagonal sums equal to 15. Cannot be a magic square.\")\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[i][i] for i in range(n))\n    for i in range(n):\n        row_sum = sum(my_matrix[i][j] for j in range(n))\n        if row_sum!= magic_sum:\n            return False\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if col_sum!= magic_sum:\n            return False\n    magic_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if magic_sum!= n*n:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix))]\n    \n    # Check if all rows and columns have the same sum\n    if row_sums!= col_sums:\n        return False\n    \n    # Calculate the sum of the diagonal and anti-diagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    anti_diagonal_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    \n    # Check if both diagonals have the same sum\n    if diagonal_sum!= anti_diagonal_sum:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of each row, column, and diagonals\n    row_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    col_sums = [sum([my_matrix[j][i] for j in range(len(my_matrix))]) for i in range(len(my_matrix))]\n    diag_sum1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum2 = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    \n    # Check if all row sums are equal, all column sums are equal, and both diagonals have the same sum\n    if sum(row_sums) == sum(col_sums) == diag_sum1 == diag_sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and returns True if it is a magic square, otherwise False.\n    '''\n\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # check if the row and column sums are equal to each other\n    if row_sums!= col_sums:\n        return False\n    \n    # calculate the diagonal sums\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # check if the diagonal sums are equal to each other\n    if diag_sum1!= diag_sum2:\n        return False\n    \n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = (n * (n**2 + 1)) // 2\n    sum_of_rows = sum(my_matrix[i][j] for i in range(n) for j in range(n))\n    sum_of_cols = sum(my_matrix[i][j] for i in range(n) for j in range(n))\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if sum_of_rows == magic_sum and sum_of_cols == magic_sum and diag_sum1 == magic_sum and diag_sum2 == magic_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n        \n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create an empty dictionary\n    freq = defaultdict(int)\n\n    # Loop through the list and count the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = max(freq.values())\n    max_items = [k for k, v in freq.items() if v == max_freq]\n    return max_items[0]"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_item = max(freq.items(), key=lambda x: x[1])\n\n    return max_item[0]"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    \n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = [k for k, v in freq.items() if v == max_freq][0]\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        freq_dict[item] += 1\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n    max_freq = 0\n    max_item = None\n    \n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n            \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels and i%2!=0]\n    for i in vowel_indices:\n        str1 = str1[:i] + str1[i].swapcase() + str1[i+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    reversed_vowels = vowels_list[::-1]\n    new_str = \"\"\n    for i, char in enumerate(str1):\n        if char in vowels:\n            new_str += reversed_vowels[vowels.index(char)]\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    str1_list = list(str1)\n    start_index = 0\n    end_index = len(str1_list) - 1\n    \n    while start_index < end_index:\n        if str1_list[start_index] in vowels_list and str1_list[end_index] in vowels_list:\n            if str1_list[start_index].islower():\n                str1_list[start_index], str1_list[end_index] = str1_list[end_index], str1_list[start_index]\n            else:\n                str1_list[start_index], str1_list[end_index] = str1_list[end_index].upper(), str1_list[start_index].upper()\n            start_index += 1\n            end_index -= 1\n        elif str1_list[start_index] in vowels_list:\n            end_index -= 1\n        elif str1_list[end_index] in vowels_list:\n            start_index += 1\n    \n    return \"\".join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    vowels_list.remove('y')\n    vowels = ''.join(vowels_list)\n    str_list = list(str1)\n    i = 0\n    j = len(str_list) - 1\n    while i < j:\n        if str_list[i] in vowels:\n            if str_list[j] in vowels:\n                str_list[i], str_list[j] = str_list[j], str_list[i]\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n        else:\n            i += 1\n    return ''.join(str_list)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, c in enumerate(str1) if c in vowels]\n    vowel_indices.reverse()\n    result = ''\n    for i in vowel_indices:\n        result += str1[i]\n    for i in range(len(str1)):\n        if i not in vowel_indices:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_indices.reverse()\n    new_str = ''\n    for i in vowel_indices:\n        new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    vowel_indices.reverse()\n    new_str = \"\"\n    for i in vowel_indices:\n        new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    new_str = ''\n    for i in range(len(vowel_indices)):\n        if str1[vowel_indices[i]] == 'u':\n            new_str += 'u'\n        elif str1[vowel_indices[i]] == 'U':\n            new_str += 'U'\n        else:\n            new_str += 'a'\n    for i in range(len(vowel_indices)):\n        if str1[vowel_indices[i]] == 'u':\n            new_str += 'u'\n        elif str1[vowel_indices[i]] == 'U':\n            new_str += 'U'\n        else:\n            new_str += 'a'\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    string = list(string)\n    left, right = 0, len(string) - 1\n    \n    while left < right:\n        if string[left] not in vowels:\n            left += 1\n        elif string[right] not in vowels:\n            right -= 1\n        else:\n            string[left], string[right] = string[right], string[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(string)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_found = [i for i, c in enumerate(str1) if c in vowels]\n    if len(vowels_found) == 0:\n        return str1\n    start = vowels_found[0]\n    end = vowels_found[-1]\n    vowel_str = \"\".join([c for i, c in enumerate(str1) if i >= start and i <= end])\n    reversed_vowels = vowel_str[::-1]\n    new_str = \"\".join([c if i < start or i > end else reversed_vowels[i - start] for i, c in enumerate(str1)])\n    return new_str"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1))"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return ''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string.\n    \"\"\"\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \" \"\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function converts a tuple to a string.\n\n    Args:\n    tup1 (tuple): The input tuple.\n\n    Returns:\n    str: The string representation of the tuple.\n    \"\"\"\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string\n    representing the tuple.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculates the sum of the negative numbers of a given list of numbers.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The sum of the negative numbers.\n    \"\"\"\n\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function calculates the sum of the negative numbers in the given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function finds the nth hexagonal number.\n\n    Args:\n    n (int): The number for which we want to find the hexagonal number.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n\n    # Initializing the variables\n    hex_num = 0\n    count = 1\n\n    # Looping until we find the nth hexagonal number\n    while count <= n:\n        hex_num += count\n        count += 1\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    count = 1\n    hex_num = 1\n    while count <= n:\n        hex_num += 6*count\n        count += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    h = n * (2*n - 1)\n    return h\n\nprint(hexagonal_num(1))  # Output: 1\nprint(hexagonal_num(2))  # Output: 6\nprint(hexagonal_num(3))  # Output: 15\nprint(hexagonal_num(10)) # Output: 66"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i*(2*i - 1)\n        count += 1\n        if count == n:\n            return hex_num\n        i += 1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_count = 0\n    current_num = 1\n    while hex_count < n:\n        hex_count += 1\n        current_num += 6 * hex_count\n    return current_num"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n            \n    if count_zeroes == 0:\n        return \"All numbers are non-zero.\"\n    elif count_non_zeroes == 0:\n        return \"All numbers are zero.\"\n    else:\n        return count_zeroes/count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return None\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    if count_non_zeroes == 0:\n        return \"Error: the array contains only zeroes\"\n    else:\n        return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count_zero = 0\n    count_nonzero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    if count_zero == 0:\n        return \"All numbers are non-zero\"\n    else:\n        ratio = count_zero/count_nonzero\n        return f\"Ratio of zeroes to non-zeroes is {ratio:.2f}\""
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes\n\nnums = array('i', [1, 0, 3, 0, 5, 0])\nratio = zero_count(nums)\nprint(ratio)  # Output: 0.5"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_nonzeros = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_nonzeros += 1\n    \n    if count_nonzeros == 0:\n        return 0\n    \n    return count_zeros / count_nonzeros"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n\n    # Iterate from 0 to n and check if each number is a power of 2 or not\n    for i in range(n+1):\n        # Check if i is a power of 2 or not\n        if (i & (i-1)) == 0:\n            # If i is a power of 2, add it to the sum of powers of 2\n            sum_of_powers += i\n\n    # Check if the sum of powers of 2 is equal to n or not\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    i = 0\n    while (2 ** i) <= n: \n        if n - (2 ** i) == 0: \n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # if the number is negative or zero, it can't be represented as sum of powers of 2\n    if n <= 0:\n        return False\n    \n    # use a set to store the powers of 2 seen so far\n    seen_powers = set()\n    \n    # use a variable to keep track of the remaining number to be represented as sum of powers of 2\n    remaining = n\n    \n    # iterate over all powers of 2 up to the square root of n\n    for power in range(1, int(n**0.5)+1):\n        # check if the current power of 2 divides the remaining number\n        if remaining % power == 0:\n            # if it does, divide the remaining number by the power of 2 and add it to the set of seen powers\n            seen_powers.add(power)\n            remaining //= power\n            \n            # if we can't divide it further, we've found all the powers of 2 and can return True\n            if remaining == 1:\n                return True\n    \n    # if we've gone through all powers of 2 without finding a factor, the remaining number must be a prime\n    if remaining > 2:\n        return False\n    \n    # if we've seen at least one power of 2, the number can be represented as sum of powers of 2\n    if seen_powers:\n        return True\n    \n    # if the number is less than or equal to 2, it can be represented as sum of powers of 2 if it's prime\n    if remaining == 2 or remaining == 3:\n        return True\n    \n    # if we haven't found any factors and the remaining number is greater than 3, it's not a sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 0\n    while n!= 0:\n        if n % 2 == 1:\n            return False\n        else:\n            n = n // 2\n            power_of_two += 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initialize a boolean variable to True\n    result = True\n    \n    # Loop through all the numbers from 0 to n-1\n    for i in range(n):\n        # Check if the sum of any two numbers i and j is equal to n\n        for j in range(i+1, n):\n            if (i+j) == n:\n                # If the sum is equal to n, then check if i and j are powers of 2 or not\n                if ((i & (i-1)) == 0) and ((j & (j-1)) == 0):\n                    # If i and j are powers of 2, then return False\n                    result = False\n                    break\n                \n    # Return the result\n    return result"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n\n    sum_of_powers_of_two = 0\n    power_of_two = 1\n\n    while sum_of_powers_of_two <= n:\n        sum_of_powers_of_two += power_of_two\n        power_of_two *= 2\n\n    return sum_of_powers_of_two == n"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: # Base case\n        return False\n    \n    # Check for power of 2\n    if n & (n - 1) == 0:\n        return True\n    \n    # Check for sum of non-zero powers of 2\n    for i in range(1, n):\n        if i & (i - 1) == 0:\n            if n - i == 1:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the number to binary string and remove the '0b' prefix\n    binary_string = bin(n)[2:]\n    # Initialize a variable to keep track of the powers of 2\n    power_of_two = 0\n    # Iterate over the binary string from right to left\n    for bit in binary_string[::-1]:\n        # If the current bit is a 1, add the corresponding power of 2 to the running total\n        if bit == '1':\n            power_of_two += 2**power_of_two\n        # If the current bit is a 0, reset the running total to zero\n        else:\n            power_of_two = 0\n        # If the running total exceeds n, it means n cannot be represented as sum of non-zero powers of 2\n        if power_of_two > n:\n            return False\n    # If the loop completes without returning False, it means n can be represented as sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a list of powers of 2\n    powers_of_two = [1]\n    power = 1\n    \n    # Keep multiplying powers of 2 by 2 until n is less than the current power of 2\n    while n >= power * 2:\n        powers_of_two.append(power * 2)\n        power *= 2\n    \n    # Check if n can be represented as the sum of powers of 2\n    for i in range(len(powers_of_two)):\n        if n - powers_of_two[i] in powers_of_two:\n            return True\n    \n    # If n cannot be represented as the sum of powers of 2, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert n to binary representation\n    binary_repr = bin(n)[2:]\n\n    # Iterate over each digit in binary representation\n    for digit in binary_repr:\n        # If digit is not a zero, check if it can be represented as a power of 2\n        if digit!= '0':\n            # Check if digit can be represented as a power of 2\n            power_of_2 = int(digit)\n            if 2**power_of_2!= n:\n                return False\n\n    # If all digits can be represented as powers of 2, return True\n    return True"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Returns the circumference of a circle with radius r.\n    \"\"\"\n    return 2 * 3.14159 * r"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            for j in i:\n                flat_list.append(j)\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            result.extend(sublist)\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            for num in sublist:\n                flattened_list.append(num)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        flat_list += sublist\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for number in sublist:\n            flat_list.append(number)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flattened_list.extend(sublist)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists as an input and returns a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            flattened_list.extend(sublist)\n        else:\n            flattened_list.append(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    singly_nested_list = []\n    for item in test_list:\n        if type(item) == list:\n            for subitem in item:\n                singly_nested_list.append(subitem)\n        else:\n            singly_nested_list.append(item)\n    return singly_nested_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    return result"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Move the maximum element to the end of the list\n    for i in range(n):\n        max_idx = nums.index(max(nums[:n-i]))\n        if max_idx!= n-1-i:\n            nums[:max_idx+1], nums[max_idx+1:] = nums[max_idx+1:], nums[:max_idx+1]\n    # Move the maximum element to the beginning of the list\n    for i in range(n-1, 0, -1):\n        max_idx = nums.index(max(nums[:i+1]))\n        if max_idx!= i:\n            nums[:max_idx+1], nums[max_idx+1:] = nums[max_idx+1:], nums[:max_idx+1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Start from the end and find the index of the maximum element\n    for i in range(n-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Flip the maximum element to the beginning of the list\n        if max_index!= i:\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n    return nums\n\ndef flip(nums, k):\n    '''\n    Helper function to flip the first k elements of a list.\n    '''\n    start = 0\n    end = k\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Get the length of the input list\n    n = len(nums)\n\n    # Start from the first element and move the maximum element to the end of the list\n    for i in range(n):\n        # Find the index of the maximum element in the remaining unsorted list\n        max_idx = nums.index(max(nums[:n-i]))\n\n        # Move the maximum element to the end of the list\n        nums[max_idx], nums[n-i-1] = nums[n-i-1], nums[max_idx]\n\n        # Reverse the first i elements of the list\n        nums[:i+1] = nums[:i+1][::-1]\n\n    # The list is now sorted\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n    n = len(nums)\n    # Start from the largest value and move it to the beginning\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_idx = nums.index(max(nums[:i+1]))\n        # If the maximum element is not at the beginning, move it to the beginning\n        if max_idx!= 0:\n            # Reverse the maximum element to the beginning of the list\n            nums[:max_idx+1] = nums[:max_idx+1][::-1]\n            # Reverse the entire list to put the maximum element at the beginning\n            nums = nums[::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    \n    # Move largest element to the end\n    for i in range(n-1, 0, -1):\n        max_index = i\n        \n        # Find the index of the maximum element\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Move the maximum element to the end of the list\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n            reverse(nums, 0, i)\n    \n    return nums\n    \ndef reverse(nums, start, end):\n    \"\"\"\n    Reverse the elements in the list between start and end indices.\n    \"\"\"\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of numbers using the pancake sort algorithm.\n    \"\"\"\n    # Start from the largest number and move it to the beginning of the list\n    for i in range(len(nums)-1, 0, -1):\n        # Find the index of the maximum element in the remaining part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        # If the maximum element is not at the beginning of the list, flip it to the beginning\n        if max_index!= 0:\n            # Flip the maximum element to the beginning of the list\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            # Flip the list from the beginning to the index of the maximum element\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    curr_size = n\n    \n    while curr_size > 1:\n        # Find index of the maximum element in the current sublist\n        max_index = curr_size - 1\n        for i in range(curr_size):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        \n        # If the maximum element is not at the end of the list, reverse it\n        if max_index!= curr_size - 1:\n            nums = reverse(nums, max_index, curr_size - 1)\n            \n            # Reverse the entire list to put the maximum element at the end\n            nums = reverse(nums, 0, curr_size - 1)\n        \n        # Move to the next sublist\n        curr_size -= 1\n        \n    return nums\n    \ndef reverse(nums, start, end):\n    '''\n    Helper function to reverse a sublist of a list.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n        \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Pancake Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    # Reverse the entire list to put the maximum element at the end\n    for i in range(n//2):\n        nums = reverse(nums, i)\n        \n    # Sort the list using a pancake sort\n    for i in range(n-1, 0, -1):\n        nums = pancake_sort_helper(nums, i)\n        \n    return nums\n\ndef pancake_sort_helper(nums, k):\n    \"\"\"\n    Helper function for the pancake sort algorithm.\n    \"\"\"\n    if k == 1:\n        return nums\n    \n    # Find the index of the maximum element in the remaining list\n    max_index = nums.index(max(nums[:k]))\n    \n    # If the maximum element is not at the end, swap it with the last element\n    if max_index!= k-1:\n        nums = swap(nums, max_index, k-1)\n        # Reverse the list up to the maximum element\n        nums = reverse(nums, max_index+1)\n        \n    # Reverse the entire list to put the maximum element at the end\n    nums = reverse(nums, k-1)\n    \n    return nums\n    \ndef reverse(nums, start):\n    \"\"\"\n    Reverses a slice of a list.\n    \"\"\"\n    return nums[:start][::-1] + nums[start:]\n\ndef swap(nums, i, j):\n    \"\"\"\n    Swaps two elements in a list.\n    \"\"\"\n    nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Reverse the entire list to put the largest element at the end\n    nums = nums[::-1]\n    for i in range(n):\n        # Find the index of the largest element\n        max_idx = nums.index(max(nums[:i+1]))\n        # Flip the sublist from 0 to max_idx\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        # Flip the entire list to put the largest element at the end\n        nums = nums[::-1]\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    curr_size = n\n    while curr_size > 1:\n        # Find the index of the maximum element in the current slice\n        max_idx = nums.index(max(nums[:curr_size]))\n        # Move the maximum element to the beginning of the slice\n        nums[:curr_size], nums[max_idx] = nums[max_idx], nums[:curr_size]\n        # Reverse the entire slice\n        nums[:curr_size] = nums[:curr_size][::-1]\n        # Decrease the size of the current slice\n        curr_size -= 1\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items that are identical in the same position\n    '''\n    count = 0\n    \n    # Loop through the three lists simultaneously\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    This function finds number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes in an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function finds the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_sorted = sorted(arr)\n    max_diff = 0\n    for i in range(len(arr_sorted) - 1):\n        diff = abs(arr_sorted[i] - arr_sorted[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the maximum difference to be negative infinity\n    max_diff = float('-inf')\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Loop through each element in the remaining portion of the array\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            # If the absolute difference is greater than the current maximum, update the maximum\n            if diff > max_diff:\n                max_diff = diff\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if x * a + y * b == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (a*x) % b == 0:\n            return (x, n//(a*x))\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a!= 0 and b!= 0:\n        if n % a == 0 and n % b == 0:\n            x = n // a\n            y = n // b\n            return (x, y)\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (a*x) % n == 0 and (b*x) % n == 0:\n            y = (n*(a*x)) // x\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n.\n    Returns a tuple (x, y) if a solution exists, or None otherwise.\n    \"\"\"\n    # check if a and b are both integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        return None\n    \n    # check if n is divisible by a\n    if n % a!= 0:\n        return None\n    \n    # check if n is divisible by b\n    if n % b!= 0:\n        return None\n    \n    # calculate x and y\n    x = n // a\n    y = n // b\n    \n    # check if x and y are integers\n    if not isinstance(x, int) or not isinstance(y, int):\n        return None\n    \n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    else:\n        x = n // a\n        y = n - x * a\n        if y % b == 0:\n            return (x, y // b)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if x*a + y*b == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Finds the solution to ax + by = n as a tuple.\n    \"\"\"\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation has a solution\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    else:\n        # Calculate the discriminant\n        d = b**2 - 4*a*n\n        if d < 0:\n            return None\n        else:\n            x1 = (-b + d**0.5) / (2*a)\n            x2 = (-b - d**0.5) / (2*a)\n            y1 = n - a*x1\n            y2 = n - a*x2\n            return (x1, y1) if y1 == int(y1) else (x2, y2)"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing only the elements that are not present in the second list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and returns a new list that contains all elements of the first list except the elements present in the second list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all elements from list1 that are present in list2.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are present in list2.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all elements from list1 that are present in list2.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function removes all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    if n % 2 == 0:\n        return sum([n - 2*i for i in range(n//2 + 1)])\n    else:\n        return sum([n - 2*i for i in range(n//2 + 1)]) + (n - 2*(n//2))"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    sum = 0\n    for i in range(n//2+1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of the series of (n - 2*i) from i=0 to n // 2.\n\n    Parameters:\n    n (int): The upper limit of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate over the range from 0 to n//2 and add (n - 2*i) to the sum\n    for i in range(n//2 + 1):\n        total_sum += n - 2*i\n        \n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, \n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return (n*(n-1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return sum(range(n // 2)) * 2 + n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = n\n    i = 1\n    while i < n // 2:\n        sum -= 2 * i\n        i += 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of series (n - 2*i) from i=0 to n // 2, \n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return (n // 2) * (n + 1) // 2\n    else:\n        return (n // 2) * (n + 1) // 2 + (n // 2 + 1)\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.5 * s * l) / tan(pi / s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon.\n\n    Parameters:\n    s (int): number of sides of the polygon\n    l (float): length of each side of the polygon\n\n    Returns:\n    float: the area of the polygon\n    '''\n    area = 0.5 * l * s * tan(pi / s)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l * tan(pi/s))"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s / 2) * tan(pi / s)\n    return a * l"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l / tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s * tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l / 2 * tan(pi / s)\n    return a * s"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l / tan(pi / s)"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if (i+n//i) == n:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    This function takes in an integer n and checks if the sum of its divisors is equal to n.\n    \"\"\"\n    divisors = []\n    # loop through all possible divisors up to n/2\n    for i in range(1, n//2+1):\n        # if n is divisible by i, add it to the list of divisors\n        if n % i == 0:\n            divisors.append(i)\n    # if the sum of the divisors is equal to n, return True, else False\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    div_sum = sum(divisors)\n    if div_sum == n:\n        print(f\"{n} is a perfect square and all its divisors add up to {div_sum}\")\n    elif div_sum % 2 == 0:\n        print(f\"{n} is a composite number and all its divisors add up to {div_sum}\")\n    else:\n        print(f\"{n} is a prime number and all its divisors add up to {div_sum}\")"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    This function takes an integer as input and returns True if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_sum = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_sum += i \n            if i!= n//i: \n                div_sum += n//i \n    return div_sum == n and n!= 1"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            div_sum += i \n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i!= n//i:\n                return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    # Get all divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    if n > 1:\n        divisors.append(n)\n    # Check if the sum of the divisors of n is the same as its reverse\n    return sum(divisors) == sum(int(i) for i in str(n)[::-1])"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n            div_list.append(i)\n    if div_sum == n:\n        return True\n    elif div_sum == n - 1:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter a number: \"))\nif div_sum(n):\n    print(\"The sum of the divisors of\", n, \"is equal to\", n)\nelse:\n    print(\"The sum of the divisors of\", n, \"is not equal to\", n)"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of the integer is the same, False otherwise.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    div_sum = sum(divisors)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n/i == i:\n                return True\n            elif n/i!= i and n/i <= n:\n                return True\n    return False"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = [0] * 26\n    # convert string to lowercase\n    str1 = str1.lower()\n    # count the number of characters at each position\n    for i in range(len(str1)):\n        if 'a' <= str1[i] <= 'z':\n            count[ord(str1[i]) - ord('a')] += 1\n    # return the count of characters at each position\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the character count\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # convert the character to lowercase\n        char = char.lower()\n        # check if the character is a letter\n        if char.isalpha():\n            # if the character is a letter, check if it is in the alphabet\n            if char.islower():\n                # if the character is a lowercase letter, subtract 96 from its ASCII code to get its position in the alphabet\n                char_pos = ord(char) - 96\n            else:\n                # if the character is an uppercase letter, add 32 to its ASCII code to get its position in the alphabet\n                char_pos = ord(char) + 32\n            # if the position is already in the dictionary, increment its count\n            if char_pos in char_count:\n                char_count[char_pos] += 1\n            # if the position is not in the dictionary, add it with a count of 1\n            else:\n                char_count[char_pos] = 1\n\n    # return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the counts of characters at each position\n    counts = {}\n    # Loop through each character in the string and count the occurrences of each character at each position\n    for i in range(len(str1)):\n        if str1[i] in counts:\n            counts[str1[i]] += 1\n        else:\n            counts[str1[i]] = 1\n    # Initialize a variable to store the count of characters at the same position as the English alphabet\n    count_same_position = 0\n    # Loop through each character in the English alphabet and check if it occurs at the same position in the string\n    for i in range(26):\n        if chr(i+97) in counts:\n            count_same_position += counts[chr(i+97)]\n    # Return the count of characters at the same position as the English alphabet\n    return count_same_position"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase to make case-insensitive\n    str1 = str1.lower()\n    \n    # create a list of English letters\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    \n    # create a dictionary to store the count for each character at each position\n    count_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            if i not in count_dict:\n                count_dict[i] = {}\n            if str1[i] not in count_dict[i]:\n                count_dict[i][str1[i]] = 1\n            else:\n                count_dict[i][str1[i]] += 1\n    \n    # calculate the total count for each character at each position\n    total_count_dict = {}\n    for i in range(len(str1)):\n        if i not in total_count_dict:\n            total_count_dict[i] = 0\n        for char in count_dict[i]:\n            total_count_dict[i] += count_dict[i][char]\n    \n    # return the total count for each character at each position\n    return total_count_dict"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Define the English alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize a dictionary to store the count of characters at each position\n    count_dict = {}\n    \n    # Iterate over each character in the string and increment the count for the corresponding position in the dictionary\n    for i in range(len(str1)):\n        char = str1[i]\n        if char in alphabet:\n            if i+1 in count_dict:\n                count_dict[i+1] += 1\n            else:\n                count_dict[i+1] = 1\n    \n    # Count the number of characters that occur at the same position as the English alphabet\n    count = 0\n    for i in range(len(alphabet)):\n        if i+1 in count_dict:\n            count += count_dict[i+1]\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize an empty list to store the counts of each character\n    char_counts = [0] * 26  # 26 is the number of letters in the English alphabet\n    \n    # convert the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    \n    # loop over the characters in the string\n    for char in str1:\n        # check if the character is a letter in the alphabet\n        if 'a' <= char <= 'z':\n            # get the position of the character in the alphabet (0-based index)\n            pos = ord(char) - ord('a')\n            # increment the count of the character at the same position in the list\n            char_counts[pos] += 1\n    \n    # count the number of characters that occur at the same position as a letter in the alphabet\n    count = sum(1 for count in char_counts if count > 0)\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    counts = [0] * 26  # one count per letter of the alphabet\n    for i, c in enumerate(str1.lower()):\n        if 'a' <= c <= 'z':\n            counts[ord(c) - ord('a')] += 1\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Create a dictionary to store the counts of characters in the string for each position in the alphabet\n    char_counts = {}\n    for i in range(ord('a'), ord('z')+1):\n        char_counts[chr(i)] = 0\n\n    # Count the number of characters in the string that occur at the same position in the alphabet\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n\n    # Count the total number of characters in the string and the number of unique characters\n    total_chars = len(str1)\n    unique_chars = len(char_counts)\n\n    # Return a tuple with the counts of characters in the string for each position in the alphabet and the total and unique character counts\n    return (char_counts, total_chars, unique_chars)"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a list of the English alphabet\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    \n    # Initialize a counter for each position in the alphabet\n    count = [0] * len(alphabet)\n    \n    # Loop through the string and update the counter for each position\n    for char in str1.lower():\n        if char in alphabet:\n            index = alphabet.index(char)\n            count[index] += 1\n            \n    # Return the counter as a list of tuples (character, count)\n    return list(zip(alphabet, count))"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Initialize an empty dictionary to store the counts\n    char_counts = {}\n    \n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n        # If the character is a letter in the alphabet, add it to the dictionary with a count of 1\n        if char.isalpha():\n            char = char.lower()\n            if char not in char_counts:\n                char_counts[char] = {}\n            if i not in char_counts[char]:\n                char_counts[char][i] = 1\n            else:\n                char_counts[char][i] += 1\n    \n    # Loop through the dictionary and count the number of characters at each position\n    position_counts = {}\n    for char, positions in char_counts.items():\n        for position, count in positions.items():\n            if position not in position_counts:\n                position_counts[position] = count\n            else:\n                position_counts[position] += count\n    \n    # Return the total count of characters at each position in the string\n    return position_counts"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n & (n - 1) == 0:  # n is a power of 2\n        return n\n    else:\n        return 1 << len(bin(n)) - 2  # n is not a power of 2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Return the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** int(n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 1 << (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n - 1).bit_length() + 1"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments, a (list) and x (number).\n    It returns the number of occurrences of x in the list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in two parameters: a list and a number.\n    It returns the number of times the number appears in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    # loop through the list and add the numbers in the range to the sum\n    for i in range(m, n+1):\n        sum += list1[i]\n    # return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(lst, m, n):\n    '''\n    Returns the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(lst[m-1:n])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Make sure m and n are valid indices for the list\n    if m < 0 or n >= len(list1):\n        return None\n    \n    # Compute the sum of the specified range\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Invalid range\"\n    else:\n        total = 0\n        for i in range(m, n+1):\n            total += list1[i]\n        return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes a single parameter, a, which is the length of one of the sides of a regular pentagon.\n    It returns the perimeter of the pentagon.\n    '''\n    # Calculate the length of the other three sides\n    b = a * math.sqrt(5) / 2\n    c = a * math.sqrt(5) / 2\n    d = a * math.sqrt(5) / 2\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    This function takes the length of one side of a regular pentagon and returns its perimeter.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    \n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Count the number of occurrences of the string'std' in a given string.\n    \"\"\"\n    count = s.lower().count('std')\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type or False otherwise.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in the tuple have the same data type or not.\n\n    Args:\n        test_tuple (tuple): A tuple of elements.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Check if all the elements in tuple have the same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    first_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes a tuple as input and returns True if all the elements in tuple have same data type, False otherwise.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[0] or x > arr[n-1]: # check if x is outside the range of arr\n        return False\n    # count the number of occurrences of x in arr\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    # check if the number of occurrences is greater than n/2\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    # find the index of the first occurrence of x in arr\n    i = arr.index(x) if x in arr else -1\n    \n    # count the number of occurrences of x in arr, starting from i\n    count = 0\n    j = i\n    while j < n and arr[j] == x:\n        count += 1\n        j += 1\n    \n    # if count is greater than n/2, x is a majority element\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Find the mid index of the array\n    mid = n // 2\n\n    # If the mid element is the same as the given element, return True\n    if arr[mid] == x:\n        return True\n\n    # If the mid element is greater than the given element, search in the left half of the array\n    elif arr[mid] > x:\n        return is_majority(arr, mid, x)\n\n    # If the mid element is less than the given element, search in the right half of the array\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Traverse through the sorted array\n    for i in range(n):\n        # If element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n\n    # If count is greater than n/2, return True, else return False\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    This function takes an integer as input and returns the number of set bits in it.\n    A set bit is a binary digit with value 1.\n    \"\"\"\n    count = 0\n    \n    # Loop through each bit of the number and check if it is set to 1\n    for i in range(32):\n        if n & (1 << i):\n            count += 1\n    \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    # Iterate through all bits of the number\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    This function takes an integer as input and returns the number of set bits (binary digits with value 1) in the given number.\n    \"\"\"\n    count = 0\n    \n    # Iterate through each bit of the number\n    while(n):\n        # If the rightmost bit is 1, increment the count\n        if n & 1:\n            count += 1\n        \n        # Right shift the number by one to move to the next bit\n        n >>= 1\n    \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer n as input and returns the number of set bits in the binary representation of n.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            continue\n        new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and removes all characters with odd index values.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    This function removes the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n    \n    # loop through the characters of the input string\n    for i in range(len(str)):\n        # if the current index is even, add the character to the result string\n        if i % 2 == 0:\n            result += str[i]\n    \n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function finds the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Returns the minimum of three numbers a, b, and c.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    This function checks whether all the bits are set in the given range or not.\n\n    Args:\n    n (int): An integer number\n    l (int): Starting index of the range\n    r (int): Ending index of the range\n\n    Returns:\n    bool: True if all the bits are set in the given range, else False.\n    \"\"\"\n    # Check if the range is valid\n    if l >= 0 and r <= 31 and r >= l:\n        # Check if all the bits in the given range are set or not\n        if (n & ((2**r) - (2**l) + 1)) == ((2**r) - (2**l) + 1):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three arguments:\n    n - the number to be checked\n    l - the left index of the range\n    r - the right index of the range\n\n    It returns True if all the bits in the range are set to 1, otherwise it returns False.\n    '''\n    mask = (1 << r) - (1 << l)  # mask to select the bits in the range\n\n    # check if all the bits in the range are set to 1\n    if (n & mask) == mask:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Check whether all the bits are set in the given range or not.\n\n    Args:\n    n (int): An integer representing the number whose bits are to be checked.\n    l (int): An integer representing the leftmost bit position to check.\n    r (int): An integer representing the rightmost bit position to check.\n\n    Returns:\n    bool: True if all bits are set, False otherwise.\n    '''\n\n    # Convert the given range to binary representation and remove the prefix \"0b\"\n    binary_string = bin(n)[2:]\n\n    # Check if the length of the binary representation is less than or equal to r-l+1\n    if len(binary_string) <= r-l+1:\n        return False\n\n    # Extract the bits in the given range and check if they are all set\n    bits_in_range = binary_string[l-1:r]\n    return bits_in_range.count('1') == bits_in_range.count('0')"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # check if n is within the range of l and r\n    if not (l <= n <= r):\n        return False\n    \n    # check if all the bits in the range are set\n    mask = (1 << r) - (1 << l)\n    return (n & mask) == mask"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << r) - (1 << l)\n    return ((n & mask) == mask)"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    # check if n is within range of 0 to 31\n    if n < 0 or n > 31:\n        return \"Invalid input\"\n\n    # create a binary string of n with the required number of bits\n    bin_n = bin(n)[2:].zfill(5)\n\n    # extract the required bits from the binary string for the given range\n    bits_in_range = bin_n[l:r+1]\n\n    # check if all the bits are set in the given range\n    if bits_in_range.count('0') == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    # creating a mask to set the bits in the given range\n    mask = (2**r) - (2**(l-1))\n    # checking if all the bits in the range are set or not\n    if (n & mask) == mask:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((1 << (r+1))-1) & ((1 << l)-1) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function checks whether all the bits are unset in the given range or not.\n\n    Args:\n    n (int): An integer whose bits are to be checked\n    l (int): Left index of the range (inclusive)\n    r (int): Right index of the range (inclusive)\n\n    Returns:\n    bool: True if all bits are set in the given range, False otherwise\n    '''\n    # Convert the given integer to a binary string\n    bin_string = bin(n)[2:]\n\n    # Initialize a boolean variable to store the result\n    result = True\n\n    # Check if all the bits are set in the given range\n    for i in range(l, r+1):\n        if bin_string[i] == '0':\n            result = False\n            break\n\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three arguments: n, l and r.\n    n: An integer representing the number to be checked.\n    l: An integer representing the left limit of the range.\n    r: An integer representing the right limit of the range.\n\n    It returns True if all the bits are unset in the given range or False otherwise.\n    '''\n    # Converting the integer into binary form.\n    binary_n = bin(n)[2:]\n\n    # Removing any leading zeros from the binary form.\n    binary_n = binary_n.lstrip('0')\n\n    # Checking if all the bits are set in the given range.\n    if all(binary_n[i] == '1' for i in range(l, r+1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_count = 0\n    positive_count = 0\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n    \n    for i in range(n):\n        if negative_count > 0:\n            arr[i] = -arr[i]\n            negative_count -= 1\n        elif positive_count > 0:\n            positive_count -= 1\n            \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    for i in arr:\n        if i < 0:\n            negatives.append(i)\n        elif i > 0:\n            positives.append(i)\n    negatives.sort()\n    positives.sort()\n    result = negatives + positives\n    return result[:n]"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists to store the negative and positive elements\n    negative = []\n    positive = []\n    \n    # Loop through the first n elements of the array and append negative and positive elements to separate lists\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # Sort the negative list in ascending order\n    negative.sort()\n    \n    # Loop through the remaining elements of the array and append them to the end of the array\n    for i in range(n, len(arr)):\n        arr[i] = positive[0]\n        positive.pop(0)\n        \n    # Loop through the negative list and append them to the beginning of the array\n    for i in range(len(negative)):\n        arr[i] = negative[i]\n        \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes an array and an integer n as input, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n    Parameters:\n    arr (list): List of integers\n    n (int): Number of elements to be re-arranged\n\n    Returns:\n    Re-arranged list of integers\n    \"\"\"\n\n    # Separate the positive and negative elements into two lists\n    neg_arr = []\n    pos_arr = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    # Sort the positive and negative elements separately\n    neg_arr.sort()\n    pos_arr.sort()\n\n    # Combine the sorted elements into a single list\n    new_arr = neg_arr + pos_arr\n\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two empty lists for negative and positive elements\n    neg_elems = []\n    pos_elems = []\n    \n    # Iterate through the array and separate negative and positive elements\n    for elem in arr:\n        if elem < 0:\n            neg_elems.append(elem)\n        else:\n            pos_elems.append(elem)\n    \n    # Sort the negative and positive elements separately\n    neg_elems.sort()\n    pos_elems.sort()\n    \n    # Re-arrange the first n elements of the array with negative elements first\n    for i in range(n):\n        if i < len(neg_elems):\n            arr[i] = neg_elems[i]\n        else:\n            arr[i] = pos_elems[i-len(neg_elems)]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Step 1: Separate positive and negative elements in the array\n    pos_arr = []\n    neg_arr = []\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n    \n    # Step 2: Sort the negative and positive elements separately\n    neg_arr.sort(reverse=True)\n    pos_arr.sort()\n    \n    # Step 3: Combine the two sorted arrays to get the final array\n    res_arr = neg_arr + pos_arr\n    \n    return res_arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearrange the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Partition the array into negative and positive halves\n    neg_arr = [x for x in arr[:n] if x < 0]\n    pos_arr = [x for x in arr[:n] if x >= 0]\n\n    # Sort the negative and positive halves separately\n    neg_arr.sort(reverse=True)\n    pos_arr.sort()\n\n    # Reassemble the sorted array\n    sorted_arr = neg_arr + pos_arr\n\n    # Replace the original elements with the sorted ones\n    for i in range(n):\n        arr[i] = sorted_arr[i]\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # separate positive and negative elements into two separate lists\n    pos = []\n    neg = []\n    for i in range(n):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n    # sort the negative list in descending order\n    neg = sorted(neg, reverse=True)\n    # concatenate the two lists and return the result\n    return pos + neg"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Divide the array into positive and negative sub-arrays\n    pos_arr = [x for x in arr[:n] if x >= 0]\n    neg_arr = [x for x in arr[:n] if x < 0]\n\n    # Re-arrange the sub-arrays in descending order of absolute value\n    pos_arr.sort(reverse=True, key=abs)\n    neg_arr.sort(reverse=True, key=abs)\n\n    # Combine the sub-arrays in the order: negative, positive, negative, positive,...\n    result = neg_arr + pos_arr + neg_arr + pos_arr[::-1]\n\n    return result[:n]"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negatives = []\n    positives = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    negatives.sort(reverse=True)\n    positives.sort()\n\n    for i in range(n):\n        if i < len(negatives):\n            arr[i] = negatives[i]\n        else:\n            arr[i] = positives[i - len(negatives)]\n\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a specified character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with the given character.\n\n    :param str1: The string to modify\n    :param char: The character to use for replacement\n    :return: The modified string\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the given character.\n    :param str1: string to be modified\n    :param char: character to replace blank spaces with\n    :return: modified string\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in a string with a specified character.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function replaces all the blank spaces in the given string with the given character.\n    '''\n    return str1.replace(\" \",\"{}\".format(char))"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a specified character.\n\n    :param str1: The string to be modified.\n    :param char: The character to replace blank spaces with.\n    :return: The modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a given string with a given character.\n\n    Parameters:\n        str1 (str): The input string.\n        char (str): The character to replace the blank spaces.\n\n    Returns:\n        str: The modified string.\n\n    \"\"\"\n\n    # split the string into a list of words\n    str1_list = str1.split()\n\n    # replace blank spaces with the given character\n    for i in range(len(str1_list)):\n        str1_list[i] = str1_list[i].replace(\" \", char)\n\n    # join the list of words into a string\n    modified_str = \" \".join(str1_list)\n\n    return modified_str"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in list1[n:]:\n        if i > heap[0]:\n            heapq.heappushpop(heap, i)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(reversed(heap))"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for num in lst[n:]:\n        if num > heap[0]:\n            heapq.heappushpop(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    \"\"\"\n    This function returns the n largest numbers from the given list.\n    \"\"\"\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heapreplace(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef largest_n_numbers(nums, n):\n    '''\n    Returns a list containing the n largest numbers from the input list.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius of a cylinder and its height as input and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h + 2*math.pi*r**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder.\n\n    Parameters:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The lateral surface area of the cylinder.\n    '''\n    area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    This function takes in a side length of a cube and returns the volume of the cube.\n    '''\n    volume = l**3   # calculate the volume using the formula for a cube\n    return volume  # return the volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    volume = l ** 3   # cube volume formula\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    volume = l ** 3  # calculate the volume\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number.\n    '''\n    # Convert the number to binary and split it into individual bits\n    bits = list(map(int, bin(n)[2:]))\n    \n    # Loop through the bits and set even bits to 1\n    for i in range(0, len(bits)):\n        if i % 2 == 0:\n            bits[i] = 1\n            \n    # Convert the list of bits back to an integer and return it\n    return int(''.join(map(str, bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function sets all even bits of a given number.\n    \"\"\"\n    # Iterate through all even bits and set them to 1\n    for i in range(0, 32, 2):\n        n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    Parameters:\n    n (int): The number whose even bits need to be set.\n\n    Returns:\n    int: The number with all even bits set.\n    \"\"\"\n    # Get the binary representation of the number.\n    bin_n = bin(n)[2:]\n\n    # Iterate through the binary string and set all even bits to 1.\n    even_bit_set_n = \"\"\n    for bit in bin_n:\n        if int(bit) % 2 == 0:\n            even_bit_set_n += \"1\"\n        else:\n            even_bit_set_n += \"0\"\n\n    # Convert the binary string back to an integer and return it.\n    return int(even_bit_set_n, 2)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes a number as input and sets all even bits of the number.\n    '''\n    even_bits = (n & 0xAAAAAAAA) >> 1\n    return even_bits | n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all even bits of the number to 1.\n    '''\n    # Create a binary representation of the input number\n    binary = bin(n)[2:]\n    binary = '0'*(len(binary)-1) + binary  # Pad with leading zeros\n\n    # Iterate over the bits of the binary representation\n    even_bits = ''\n    for bit in binary:\n        if int(bit) % 2 == 0:  # Check if the bit is even\n            even_bits += '1'  # Set it to 1\n        else:\n            even_bits += '0'  # Leave it as is\n\n    # Convert the binary representation back to an integer and return it\n    return int(even_bits, 2)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all the even bits of the number to 1.\n    '''\n    # Loop through all even bits of the number\n    for i in range(0, 32, 2):\n        # Check if the bit is set or not\n        if (n & (1 << i))!= 0:\n            # If the bit is set, set it to 1\n            n = n | (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # binary representation of n with even bits set to 1\n    even_n = (n | (n >> 1)) & ((1 << n.bit_length()) - 1)\n    return even_n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number to 1.\n    \"\"\"\n    # Get the binary representation of the given number\n    binary = bin(n)[2:]  # remove the '0b' prefix\n    \n    # Convert the binary representation to a list of digits\n    digits = [int(d) for d in binary]\n    \n    # Set all even bits to 1\n    for i in range(0, len(digits), 2):\n        digits[i] = 1\n        \n    # Convert the list of digits back to a string\n    binary = ''.join([str(d) for d in digits])\n    \n    # Convert the string back to an integer\n    result = int(binary, 2)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number with all even bits set.\n    \"\"\"\n    # Using bitwise AND operator to set all even bits\n    even_bits_set = n & 0x55555555\n    # Using bitwise OR operator to set all odd bits\n    odd_bits_set = n & 0xAAAAAAAA\n    # Using bitwise XOR operator to set all even bits in odd bits\n    even_bits_in_odd_bits = even_bits_set ^ odd_bits_set\n    # Returning the final number with even bits set\n    return even_bits_in_odd_bits"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number.\n    '''\n    mask = 0b11111110  # binary representation of 00111111\n    \n    # apply the mask to the given number to set all even bits\n    return n | mask"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object with the test_list\n    counter = Counter(test_list)\n\n    # Return the dictionary of unique tuples and their counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = Counter(test_list)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object from the input list\n    counter = Counter(test_list)\n    \n    # return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings of the given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            sub_str = str[i:j]\n            if len(sub_str) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j])!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    if n == 1:\n        return m // 2 + 1\n    \n    count = 0\n    prev_num = 2\n    \n    for i in range(n-1):\n        count += prev_num // 2\n        prev_num = (prev_num * 2) % m\n        \n    count += prev_num // 2 + 1\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m - 1\n    \n    total_count = 0\n    for i in range(1, m):\n        if i >= 2:\n            prev_num = i // 2\n            if prev_num >= 2:\n                total_count += (m - i) // prev_num * get_total_number_of_sequences(prev_num, n - 1)\n    \n    return total_count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    \n    prev_count = get_total_number_of_sequences(m, n-1)\n    curr_count = 0\n    \n    for i in range(1, m-n+2):\n        curr_count += prev_count * (m-i)\n    \n    return curr_count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2 or n < 1:\n        return 0\n    \n    if n == 1:\n        return m\n    \n    prev_seq = [1] * (n-1)\n    num_seq = 0\n    \n    for i in range(1, m):\n        new_seq = [i] + prev_seq\n        if all(new_seq[j] > 2*new_seq[j-1] for j in range(1, n)):\n            num_seq += 1\n        prev_seq = new_seq\n        \n    return num_seq"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element \n    but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(m//2, m+1):\n            total += get_total_number_of_sequences(i, n-1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize the first two elements of the sequence\n    sequence = [1, 2]\n\n    # Initialize the total number of sequences\n    total_sequences = 0\n\n    # Loop over the remaining elements of the sequence\n    for i in range(2, n):\n        # Initialize the current element of the sequence\n        current_element = sequence[-1] + sequence[-2]\n\n        # Check if the current element is within the range of m\n        if current_element <= m:\n            # Add the current element to the sequence\n            sequence.append(current_element)\n\n            # Update the total number of sequences\n            total_sequences += 1\n        else:\n            # If the current element is not within the range of m, break out of the loop\n            break\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    elif n > 1:\n        # Compute the total number of sequences for length n-1\n        total_sequences = get_total_number_of_sequences(m, n-1)\n        # Compute the number of sequences of length n that end with a number greater than m\n        sequences_with_greater_than_m = (m - 1) // 2 + 1\n        # Compute the number of sequences of length n that end with a number less than or equal to m\n        sequences_with_less_than_or_equal_to_m = m // 2\n        # Compute the total number of sequences of length n\n        total_sequences_of_length_n = total_sequences * sequences_with_less_than_or_equal_to_m * sequences_with_greater_than_m\n        return total_sequences_of_length_n"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize count to 0\n    count = 0\n    \n    # initialize a list to store the previous element for each position\n    prev_elems = [0]*n\n    \n    # loop through all possible values of the first element\n    for first in range(2, m+1):\n        # update the previous element for the first position\n        prev_elems[0] = first\n        \n        # check if the first element satisfies the conditions\n        if prev_elems[0] <= m:\n            # increment the count\n            count += 1\n        \n        # loop through all possible values of the remaining positions\n        for i in range(1, n):\n            # check if the current element is within the range\n            if prev_elems[i-1]*2 <= prev_elems[i] <= m:\n                # update the previous element and increment the count\n                prev_elems[i] = prev_elems[i-1]*2\n                count += 1\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    \"\"\"\n    This function takes in two positive integers m and n and finds the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        return (n - 1) * get_total_number_of_sequences(m, n - 1) + (m // (2**(n-1)))"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(m//(2*n)+1):\n            count += get_total_number_of_sequences(m-2*n*i, n-1)\n        return count"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of list1 with the elements of list2.\n    \"\"\"\n    if len(list1) < len(list2):\n        raise ValueError(\"Length of list1 must be greater or equal to length of list2.\")\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # calculate the square root of N to get the floor of the square root\n    root = int(math.sqrt(N))\n    # add 1 to the square root to get the next perfect square\n    result = root + 1\n    # calculate the square of the result to get the perfect square\n    next_square = result * result\n    # return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.ceil(math.sqrt(N))\n    return root*root\n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.ceil(math.sqrt(N))\n    return root**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return N\n    else:\n        return int(math.ceil(root))**2\n    \nprint(next_Perfect_Square(14)) # Output: 16\nprint(next_Perfect_Square(16)) # Output: 25"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return int(N**(0.5))+1\n    else:\n        return int(N**(0.5))+1"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N and returns the next perfect square greater than N.\n    '''\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Add 1 to the square root to get the next perfect square\n    next_square = int(math.ceil(sqrt_N) ** 2)\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    '''\n    if int(math.sqrt(N))**2 == N:\n        return int(math.sqrt(N))**2 + 1\n    else:\n        return int(math.sqrt(N))**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    root = math.sqrt(N)\n    # round it up to the nearest integer\n    root = math.ceil(root)\n    # add 1 to get the next perfect square\n    next_square = root ** 2\n    # return the result\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    next_square = int(math.ceil(root) ** 2)\n    return next_square"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Initialize variables to keep track of maximum sum and indices of subsequence\n    max_sum = float('-inf')\n    i = 0\n    j = n - 1\n    \n    while i < j:\n        # Check if subsequence from i to j is increasing and then decreasing\n        if arr[i] < arr[j]:\n            # Update maximum sum and indices if subsequence sum is greater\n            curr_sum = (j - i + 1) * arr[i]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                start = i\n                end = j\n            i += 1\n        else:\n            # Update maximum sum and indices if subsequence sum is greater\n            curr_sum = (j - i + 1) * arr[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                start = i\n                end = j\n            j -= 1\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    \n    # Calculate the maximum subsequence ending at each index i\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n        dp[i] += arr[i]\n        \n    # Find the maximum subsequence\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i):\n            if dp[j] < dp[i]:\n                max_sum = max(max_sum, dp[i] - dp[j])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize the variables to keep track of the maximum sum and the ending index of the bitonic subsequence\n    max_sum = 0\n    end_index = 0\n    # Initialize two variables to keep track of the current sum and the previous element\n    current_sum = 0\n    prev_elem = arr[0]\n    # Iterate through the array from left to right\n    for i in range(n):\n        # If the current element is greater than or equal to the previous element, add it to the current sum\n        if arr[i] >= prev_elem:\n            current_sum += arr[i]\n        # If the current element is less than the previous element, update the maximum sum and the ending index if the current sum is greater than the maximum sum\n        else:\n            if current_sum > max_sum:\n                max_sum = current_sum\n                end_index = i - 1\n            current_sum = arr[i]\n        # Update the previous element\n        prev_elem = arr[i]\n    # Check if the last bitonic subsequence is the longest one and update the maximum sum if necessary\n    if current_sum > max_sum:\n        max_sum = current_sum\n        end_index = n - 1\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # find the maximum element in the array\n    max_element = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    # find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        # calculate the sum of increasing subsequence on the left side\n        left_sum = 0\n        for j in range(i):\n            if arr[j] < arr[i]:\n                left_sum += arr[j]\n            else:\n                break\n        # calculate the sum of decreasing subsequence on the right side\n        right_sum = 0\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                right_sum += arr[j]\n            else:\n                break\n        # calculate the sum of the subsequence\n        subseq_sum = left_sum + right_sum\n        # update the maximum sum\n        if subseq_sum > max_sum:\n            max_sum = subseq_sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]+arr[i])\n    return dp[n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0] = arr[0]\n    if n == 1:\n        return arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Step 1: Find the maximum element in the array\n    max_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n\n    # Step 2: Find the bitonic subsequence ending at the maximum element\n    bitonic_subsequence = []\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == max_element:\n            bitonic_subsequence.append(arr[i])\n        else:\n            break\n\n    # Step 3: Calculate the sum of the bitonic subsequence\n    bitonic_sum = sum(bitonic_subsequence)\n\n    # Step 4: Calculate the maximum sum of a bitonic subsequence for the array\n    max_bitonic_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[i]:\n                current_bitonic_sum = sum(arr[i:j+1])\n                if current_bitonic_sum > max_bitonic_sum:\n                    max_bitonic_sum = current_bitonic_sum\n\n    return bitonic_sum + max_bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # create a dp table to store the maximum sum till the ith index\n    dp = [0] * n\n    # initialize the first two elements of dp table\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    # iterate over the remaining elements of the array and update the dp table\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n\n    # the maximum sum of a bitonic subsequence will be the last element of dp table\n    return dp[n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Initialize the maximum sum and the list of increasing and decreasing subsequences\n    max_sum = -float('inf')\n    increasing_seq = []\n    decreasing_seq = []\n\n    # Loop through all possible subsequences\n    for i in range(1, n+1):\n        for j in range(i):\n            # Check if the subsequence is increasing\n            is_increasing = True\n            for k in range(j, i):\n                if arr[k] >= arr[k+1]:\n                    is_increasing = False\n                    break\n            if is_increasing:\n                # Add the subsequence to the list of increasing subsequences\n                increasing_seq.append(arr[j:i])\n                # Calculate the sum of the subsequence and update the maximum sum if necessary\n                subseq_sum = sum(arr[j:i])\n                if subseq_sum > max_sum:\n                    max_sum = subseq_sum\n\n    # Loop through all possible subsequences\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Check if the subsequence is decreasing\n            is_decreasing = True\n            for k in range(i, j):\n                if arr[k] <= arr[k+1]:\n                    is_decreasing = False\n                    break\n            if is_decreasing:\n                # Add the subsequence to the list of decreasing subsequences\n                decreasing_seq.append(arr[i:j+1])\n                # Calculate the sum of the subsequence and update the maximum sum if necessary\n                subseq_sum = sum(arr[i:j+1])\n                if subseq_sum > max_sum:\n                    max_sum = subseq_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    A bitonic sequence is defined as a sequence that is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Create an array dp of size n to store the maximum sum of a subsequence ending at each index\n    dp = [0] * n\n    # Initialize the maximum sum of a subsequence ending at the first index to the first element of the array\n    dp[0] = arr[0]\n    # Iterate over the array from the second index to the last index\n    for i in range(1, n):\n        # If the current element is greater than the previous element, then add it to the maximum sum of a subsequence ending at the previous index\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        # If the current element is less than or equal to the previous element, then find the maximum sum of a subsequence ending at the previous index\n        else:\n            max_sum = arr[i]\n            for j in range(i-1, -1, -1):\n                if arr[j] < arr[i]:\n                    max_sum = max(max_sum, dp[j])\n            dp[i] = max_sum + arr[i]\n    # Return the maximum sum of a bitonic subsequence\n    return max(dp)"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number\n    while abs(guess*guess - number) > 0.0000001:\n        guess = (guess + number/guess) / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    # Set an initial guess of the square root\n    guess = number / 2\n    \n    # Loop until the guess is accurate enough\n    while abs(guess * guess - number) > 0.00001:\n        # Update the guess using the Babylonian method\n        guess = (guess + number / guess) / 2\n    \n    # Return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    precision = 0.0001\n    while abs(x**2 - number) > precision:\n        x = (x + number/x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while True:\n        y = (x + number/x) / 2\n        if abs(y - x) < 0.0001:\n            break\n        x = y\n    return round(y, 2)"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0000001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    # Set an initial guess for the square root\n    guess = number / 2\n    \n    # Loop until the guess is accurate enough\n    while abs(guess**2 - number) > 0.0001:\n        # Update the guess using the Babylonian method\n        guess = (guess + number / guess) / 2\n    \n    # Return the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute square root of a number using the Babylonian method.\n    '''\n    epsilon = 0.00001 # Define tolerance\n    guess = number / 2.0 # Start with a guess of half the number\n    while abs(guess*guess - number) > epsilon: # Keep iterating until the difference is within the tolerance\n        guess = (guess + number/guess) / 2.0 # Update the guess using the Babylonian method\n    return guess # Return the square root of the number"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        guess = number / 2\n        while abs(guess**2 - number) >= 0.0001:\n            guess = (guess + number / guess) / 2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2 # initial guess\n    while abs(guess*guess - number) > 0.0001: # loop until the difference is less than 0.0001\n        guess = (guess + number / guess) / 2 # update guess using babylonian method\n    return guess # return the final guess"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n\n            # If the substring from i to j is a palindrome\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n\n            # If the substring from i to j is a palindrome\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n\n            # If the substring from i to j is not a palindrome\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n    \n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n        \n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    \n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n        \n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    L = [[0 for x in range(n)] for y in range(n)]\n\n    for i in range(n):\n        L[i][i] = 1\n\n    maxLength = 1\n\n    for k in range(2, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                L[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n                maxLength = max(maxLength, L[i][j])\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n\n    return maxLength"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[False for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = (j-i < 2 or dp[i+1][j-1])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for L in range(2, n + 1):\n        for i in range(n - L + 1):\n            j = i + L - 1\n            if str[i] == str[j] and L == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Create a list of fractions from 1 to n-1\n    fractions = [1/i for i in range(1, n)]\n    \n    # Calculate the sum of the fractions\n    harmonic_sum = sum(fractions)\n    \n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n\n    Args:\n    n (int): A positive integer.\n\n    Returns:\n    float: The harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # Calculate the harmonic value of each number and add it to the sum\n        sum += 1 / i\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/i for i in range(1, n)])"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n\n    # Find the intersection of two arrays using set intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection_set = set1.intersection(set2)\n\n    # Convert set to list\n    intersection = list(intersection_set)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays and returns the common elements.\n    \"\"\"\n    # Convert the arrays to sets to find the intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    intersection = list(set1.intersection(set2))\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from the first array\n    set_nums1 = set(array_nums1)\n\n    # create an empty list to store the intersection\n    intersection_list = []\n\n    # loop through the second array and check if each element is in the set from the first array\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_list.append(num)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays.\n    '''\n    result = []\n    \n    # iterate through the first array\n    for i in range(len(array_nums1)):\n        # iterate through the second array\n        for j in range(len(array_nums2)):\n            # check if the elements are equal\n            if array_nums1[i] == array_nums2[j]:\n                # append the element to the result array\n                result.append(array_nums1[i])\n    \n    return result"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays and returns the common elements in a new array.\n    '''\n    # Creating an empty list to store the common elements.\n    common_elements = []\n    \n    # Looping through the first array.\n    for num in array_nums1:\n        # If the element is also present in the second array, then append it to the common_elements list.\n        if num in array_nums2:\n            common_elements.append(num)\n    \n    # Returning the common_elements list.\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the number of occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [elem, *lst, elem]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    '''\n    Insert an element before each element in a list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(elem)\n        new_lst.append(i)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes a list and an element as input and returns a new list with the element inserted before each element in the original list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in a list.\n    \"\"\"\n    return [elem] + lst + [elem]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    '''\n    Inserts an element before each element in a list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    '''\n    Inserts the given element before each element of the list and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + [x for x in lst]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        print(f\"Polar coordinates of {num} are: {cmath.polar(num)}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append([polar[0], polar[1]])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append(polar)\n    return result\n\nnumbers = [2+3j, 4-5j, 6+7j]\npolar_coordinates = convert(numbers)\nprint(polar_coordinates)"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(\"Polar form of\", num, \"is\", cmath.polar(num))"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for z in numbers:\n        r = abs(z)\n        theta = cmath.phase(z)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns the polar coordinates of each number.\n    \"\"\"\n    polar_coordinates = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.polar(num)[0]\n        theta = cmath.polar(num)[1]\n        \n        # Append the polar coordinates to the list\n        polar_coordinates.append((r, theta))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_nums = []\n    for num in numbers:\n        polar_num = cmath.polar(num)\n        polar_nums.append(polar_num)\n    return polar_nums"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        polar.append(cmath.polar(num))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of tuples, where each tuple contains the\n    polar coordinates (magnitude and angle) of the corresponding complex number.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        polar_coords.append((magnitude, angle))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coords.append(polar)\n    return polar_coords"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    \n    for element in list1:\n        if type(element) == int:\n            count += 1\n            \n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements present in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return [tuple(c) for c in comb]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    comb_list = [tuple(comb) for comb in comb]\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    # Loop from 2 to n-1\n    for i in range(2, n):\n        # Assume i is prime\n        is_prime = True\n        # Check if i is divisible by any number less than i\n        for j in range(2, i):\n            if i % j == 0:\n                # i is not prime\n                is_prime = False\n                break\n        if is_prime:\n            # Increment count if i is prime\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    \n    for i in range(2, n):\n        is_prime = True\n        \n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p**2 <= n:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p]:\n            # Update all multiples of p\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n    # Return the count of prime numbers\n    count = 0\n    for p in range(2, n):\n        if prime[p]:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Main function to count the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Main function to count the number of prime numbers less than a given non-negative number\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    \n    # checking if 1 is a prime number\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                break\n        else:\n            count += 1\n    \n    # checking for prime numbers other than 1\n    for i in range(2, n):\n        if n % i == 0:\n            flag = False\n            for j in range(2, int(n ** 0.5) + 1):\n                if i % j == 0:\n                    flag = True\n                    break\n            if not flag:\n                count += 1\n    \n    return count"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for tup in [test_tup1, test_tup2]:\n        if max_tup == () or sum(tup) > sum(max_tup):\n            max_tup = tup\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # convert tuples to lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    # initialize maximum values\n    max1 = lst1[0]\n    max2 = lst2[0]\n    # iterate through the lists and find maximum values\n    for i in range(len(lst1)):\n        if lst1[i] > max1:\n            max1 = lst1[i]\n    for i in range(len(lst2)):\n        if lst2[i] > max2:\n            max2 = lst2[i]\n    # return a tuple with the maximum values\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupples must have the same length\")\n    max_tup = ()\n    max_sum = 0\n    for i in range(len(test_tup1)):\n        new_tup = (test_tup1[i], test_tup2[i])\n        new_sum = sum(new_tup)\n        if new_sum > max_sum:\n            max_tup = new_tup\n            max_sum = new_sum\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize a list to store the maximum values of the two tuples\n    max_values = []\n    \n    # Loop through the two tuples and find the maximum value in each tuple\n    for tup in [test_tup1, test_tup2]:\n        max_value = max(tup)\n        max_values.append(max_value)\n    \n    # Find the maximum value of the two maximum values\n    max_max_value = max(max_values)\n    \n    return max_max_value"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if test_tup1 > test_tup2:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple with the maximum value from each of the input tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            new_tup += (test_tup1[i],)\n        else:\n            new_tup += (test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Find the maximum element in the first tuple\n    max_element = max(test_tup1)\n\n    # Find the index of the maximum element in the first tuple\n    max_index = test_tup1.index(max_element)\n\n    # Find the maximum element in the second tuple\n    second_max_element = max(test_tup2)\n\n    # If the second maximum element is greater than the maximum element in the first tuple,\n    # then find the index of the maximum element in the second tuple\n    if second_max_element > max_element:\n        second_max_index = test_tup2.index(second_max_element)\n\n    # Otherwise, set the second maximum index to be the same as the maximum index\n    else:\n        second_max_index = max_index\n\n    # Return the maximum element and its index\n    return max_element, max_index, second_max_element, second_max_index"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        for i in range(3, n + 1):\n            c = 2*b - a + b**2\n            a, b = b, c\n        return b\n"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        # Initialize variables\n        a, b, c = 2, 3, 3\n        count = 2\n        # Loop through until we find the nth prime\n        while count < n:\n            # Update values\n            d = 4*a*a + b*b\n            e = 3*a*a + 2*b*b\n            a, b, c = b, c, d\n            # Check if c is prime\n            is_prime = True\n            for i in range(2, int(c**0.5) + 1):\n                if c % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n        return c"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n\n    Parameters:\n    n (int): The index of the prime number.\n\n    Returns:\n    int: The nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 79\n    if n == 23:\n        return 83\n    if n == 24:\n        return 89\n    if n == 25:\n        return 97\n    if n == 26:\n        return 101\n    if n == 27:\n        return 103\n    if n == 28:\n        return 107\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 127\n    if n == 32:\n        return 131\n    if n == 33:\n        return 137\n    if n == 34:\n        return 139\n    if n == 35:\n        return 149\n    if n == 36:\n        return 151\n    if n == 37:\n        return 157\n    if n == 38:\n        return 163\n    if n == 39:\n        return 167\n    if n == 40:\n        return 173\n    if n == 41:\n        return 179\n    if n == 42:\n        return 181\n    if n == 43:\n        return 191\n    if n == 44:\n        return 193\n    if n == 45:\n        return 197\n    if n == 46:\n        return 199\n    if n == 47:\n        return 211\n    if n == 48:\n        return 223\n    if n == 49:\n        return 227\n    if n == 50:\n        return 229\n    if n == 51:\n        return 233\n    if n == 52:\n        return 239\n    if n == 53:\n        return 241\n    if n == 54:\n        return 251\n    if n == 55:\n        return 257\n    if n == 56:\n        return 263\n    if n == 57:\n        return 269\n    if n == 58:\n        return 271\n    if n == 59:\n        return 277\n    if n == 60:\n        return 281\n    if n == 61:\n        return 283\n    if n == 62:\n        return 293\n    if n == 63:\n        return 307\n    if n == 64:\n        return 311\n    if n == 65:\n        return 313\n    if n == 66:\n        return 317\n    if n == 67:\n        return 331\n    if n == 68:\n        return 337\n    if n == 69:\n        return 347\n    if n == 70:\n        return 349\n    if"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        if count == n:\n            return num\n        num += 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    else:\n        prev_prev = 11\n        prev = 13\n        curr = 17\n        count = 5\n        while count < n:\n            next = prev + 2 * prev_prev + 2 * curr - curr ** 2\n            prev_prev = prev\n            prev = curr\n            curr = next\n            count += 1\n        return curr"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef newman_prime(n):\n    count = 1\n    i = 2\n    while count < n:\n        if is_prime(i) and is_prime((2 * i * (i - 1)) + 1):\n            count += 1\n        i += 1\n    return (2 * i * (i - 1)) + 1\n\n\nprint(newman_prime(10))"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        m, a, d = 3, 5, 7\n        for i in range(3, n):\n            m, a, d = 2*a - d, a**2 - 2*d, a**2 + d**2\n        return m"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        # Initialize variables for the current and previous primes\n        p = 3\n        prev_p = 2\n        # Loop over remaining primes\n        for i in range(3, n+1):\n            # Compute next prime using quadratic sieve formula\n            p = (prev_p**2 - 2*prev_p + 3) + prev_p\n            # Check if next prime is a Williams-Shanks prime\n            while not is_williams_prime(p):\n                # If not, increment until it is\n                p += 1\n            # Update previous prime and continue loop\n            prev_p = p\n        return p\n    \ndef is_williams_prime(n):\n    \"\"\"\n    Returns True if n is a Williams-Shanks prime, False otherwise.\n    \"\"\"\n    # Check if n is prime\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    # Check if n is a Williams-Shanks prime\n    for a in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]:\n        if (a**2 - 2*a + 3) + a <= n:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    This function returns the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        '''\n        This function checks whether a given number is prime or not.\n        '''\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def nth_prime(num):\n        '''\n        This function returns the nth prime number.\n        '''\n        count = 0\n        i = 2\n        while count < num:\n            if is_prime(i):\n                count += 1\n            i += 1\n        return i - 1\n    \n    def is_witness(num):\n        '''\n        This function checks whether a given number is a witness to primality or not.\n        '''\n        def modular_exp(base, exponent, modulus):\n            '''\n            This function computes the modular exponentiation using binary exponentiation.\n            '''\n            result = 1\n            while exponent > 0:\n                if exponent % 2 == 1:\n                    result = (result * base) % modulus\n                base = (base * base) % modulus\n                exponent //= 2\n            return result\n        \n        a = 2\n        b = modular_exp(a, num, num - 1)\n        if b == 1:\n            return False\n        for i in range(num - 1):\n            a = (a * a) % num\n            b = (b * a) % num\n            if b == 1:\n                return False\n        return True\n    \n    def newman_shanks_williams_prime(n):\n        '''\n        This function returns the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        i = 2\n        while True:\n            if is_prime(i) and is_witness(i):\n                n -= 1\n                if n == 0:\n                    return i\n            i += 1\n    \n    return newman_shanks_williams_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 1\n    i = 0\n    j = 0\n    \n    while p!= 0:\n        p = (2*j*j + 1) + (j*j*j) - (j*j)\n        if p > n:\n            break\n        i += 1\n        \n    return (2*j*j + 1) + (j*j*j) - (j*j)"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i], )\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    result_tup = ()\n\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    result_tup = ()\n\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function splits a list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    if L > len(list1):\n        return \"Error: L cannot be greater than the length of the list\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        print(\"Error: L is greater than the length of the list.\")\n        return None\n    \n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"Error: L should be less than or equal to the length of the given list.\")\n        return None\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"Error: Length of the list is less than L\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"L cannot be greater than the length of the list\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_part1 = list1[:L]\n    list1_part2 = list1[L:]\n    return (list1_part1, list1_part2)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    This function takes the human age as input and returns the dog age in dog's years.\n    '''\n    dog_age_in_dog_years = h_age * 7\n    return dog_age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the age in human years and multiply by 7\n    d_age = h_age * 7\n    \n    # Return the dog's age in dog's years\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = round(h_age * 7)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = h_age * 7\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    start = 0\n    for i in range(step, len(S)+1, step):\n        result.append(S[start:i])\n        start = i\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Split a list into sublists for every nth element.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError(\"Step must be positive\")\n    if step > len(S):\n        raise ValueError(\"Step must be less than or equal to the length of the list\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a side length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    lateral_surface = 6 * l**2\n    return lateral_surface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes in the length of a cube and returns its lateral surface area.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * (l**2)\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize the sum\n    sum = 0\n    \n    # iterate over the first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # add the square of i to the sum\n        sum += i**2\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n * 2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current number to the sum variable\n        sum += i**2\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, 2*n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # add square of i to sum\n        sum += i**2\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    This function takes an integer 'n' as input and returns then'th star number.\n    '''\n    # Initialize variables\n    num = 1\n    count = 1\n    \n    # Loop untiln'th star number is found\n    while count < n:\n        # Multiply num by 2 to get the next star number\n        num *= 2\n        count += 1\n    \n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Returns then'th star number, where the first star number is 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    count = 0\n    num = 1\n    \n    # Loop through numbers until we reach then'th star number\n    while count < n:\n        # Check if the current number is a star number\n        if num == 1:\n            count += 1\n        # If not, multiply the current number by 2 and add 1 to get the next number\n        else:\n            num *= 2\n            num += 1\n            \n    # Return then'th star number\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    count = 0\n    num = 1\n    \n    # loop until n stars have been counted\n    while count < n:\n        # print current star number\n        print(num, end=' ')\n        \n        # increment count and num\n        count += 1\n        num += 1\n        \n        # check if num is divisible by 5, 7, or 11\n        if num % 5 == 0 or num % 7 == 0 or num % 11 == 0:\n            # increment num by the next multiple of 11\n            num += 11 - (num % 11)\n    print() # print a newline after the loop ends\n    "
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    prev = 1\n    curr = 1\n    \n    for i in range(2, n+1):\n        next = prev + curr\n        prev = curr\n        curr = next\n    \n    return curr"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 1\n        count += len(str(num))\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        print(num, end=' ')\n        num += 1\n        for i in range(count):\n            print('*', end=' ')\n        count += 1\n        print('')"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    star_num = 0\n    while count <= n:\n        star_num += 2*(count-1) + 1\n        count += 1\n    return star_num\n\nprint(find_star_num(10))  # Output: 170"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return find_star_num(n-1) + 2*n - 1"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Returns the sum of even numbers at even positions of a list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):  # iterating over even indices\n        if arr[i] % 2 == 0:  # checking if the number at even index is even\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as an input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    # Initialize the sum to zero\n    sum_even_index = 0\n    # Loop over the array\n    for i in range(0, len(arr), 2):\n        # Check if the current element is even\n        if arr[i] % 2 == 0:\n            # Add it to the sum if it's at an even index\n            if i % 2 == 0:\n                sum_even_index += arr[i]\n    # Return the final sum\n    return sum_even_index"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i**5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2 * n, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n            count += 1\n        else:\n            count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Loop through even numbers up to n\n    for i in range(2, n+1, 2):\n        # Raise even number to the fifth power and add to sum\n        sum += i ** 5\n    # Return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #initialize variables\n    sum = 0\n    i = 0\n    j = 2\n    \n    #loop through the first n even natural numbers\n    while i < n:\n        #calculate the power of the even number to the fifth power\n        power = j ** 5\n        #add the power to the sum\n        sum += power\n        #increment the even number and index\n        j += 2\n        i += 1\n        \n    #return the sum of the first n even natural numbers raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n even numbers\n    for i in range(2, 2*n+1, 2):\n        # compute the ith even number raised to the fifth power\n        num = i**5\n        \n        # add the computed number to the sum\n        sum += num\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[-1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize sum to 0\n    even_sum = 0\n    \n    # Loop through even indices from 1 to n\n    for i in range(2, n+1, 2):\n        # Calculate the binomial coefficient\n        binomial_coeff = math.comb(n, i)\n        # If the binomial coefficient is even, add it to the sum\n        if binomial_coeff % 2 == 0:\n            even_sum += binomial_coeff\n    \n    # Return the sum of even binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    # Initialize the sum to 0\n    even_sum = 0\n    \n    # Iterate over even indices from 0 to n/2\n    for k in range(0, n//2+1):\n        # Calculate the binomial coefficient\n        coeff = math.comb(n, k)\n        \n        # Check if the index is even and add the coefficient to the sum if it is\n        if k % 2 == 0:\n            even_sum += coeff\n            \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        even_sum += binomial_coeff\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # initialize sum to 0\n    even_sum = 0\n    \n    # iterate over all even indices from 1 to n\n    for i in range(2, n+1, 2):\n        # calculate binomial coefficient\n        coeff = math.factorial(n)//(math.factorial(i)*math.factorial(n-i))\n        \n        # add even binomial coefficient to sum\n        even_sum += coeff\n    \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to zero\n    even_sum = 0\n    \n    # Loop through each even index from 0 to n\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient (n, i)\n        binomial_coeff = math.comb(n, i)\n        # If the index is even, add the binomial coefficient to the sum\n        if i % 2 == 0:\n            even_sum += binomial_coeff\n    \n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of even index binomial coefficients for\", n, \"is\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    \n    for i in range(2, n+1, 2):\n        binomial = math.comb(n, i)\n        even_sum += binomial\n        \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (3.14159 * r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Calculate the volume of a cylinder given its radius and height.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    dict (dict): The dictionary to be filtered.\n    n (int): The minimum value that a dictionary entry must have in order to be included in the filtered dictionary.\n\n    Returns:\n    filtered_dict (dict): The filtered dictionary.\n    \"\"\"\n\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[test_tup.index(i)+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i[1] == test_tup[0][1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[test_tup.index(i)-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[test_tup.index(i)-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == tuple_element:\n            return count\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num == int(num ** 0.1) ** 10:\n            count += 1\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Returns True if n is a decagonal number, False otherwise.\n    A decagonal number is a number that is equal to the sum of the nth powers of the first n natural numbers.\n    For example, 15 is a decagonal number because 1^4 + 5^4 = 15^4 = 225.\n    \"\"\"\n    num = 0\n    for i in range(1, n+1):\n        num += i ** 4\n    return num == n\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 10*n*(n-1)//2  # calculate the nth decagonal number\n    return d"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # initialize variables\n    count = 1\n    decagonal_num = 0\n\n    # loop until the nth decagonal number is found\n    while count <= n:\n        decagonal_num += count\n        count += 1\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    count = 0\n    while count < n:\n        decagonal_num += 10*count\n        count += 1\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        decagonal = num * (3 * num - 1) // 2\n        if decagonal == n:\n            return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        decagonal = i*(10**4) + (i*i)*(10**2) + i*i*i\n        if decagonal % 10 == 0 and decagonal!= 0:\n            count += 1\n        i += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    num = 1\n    count = 1\n    \n    while count <= n:\n        decagonal += num\n        num += 1\n        count += 1\n    \n    return decagonal\n\nprint(is_num_decagonal(1)) # should print 1\nprint(is_num_decagonal(10)) # should print 101520\nprint(is_num_decagonal(20)) # should print 229161"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += 10**(i-1)\n        if decagonal == n:\n            return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    dec_num = n * (3 * n - 1) // 2\n    return dec_num"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    is_found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            is_found = True\n            index = i\n            break\n    return (is_found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # iterate through the list\n    for element in test_list:\n        # if the element is already in the set, return False\n        if element in unique_set:\n            return False\n        # if the element is not in the set, add it to the set\n        else:\n            unique_set.add(element)\n\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should be of equal size\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n    return sub"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise and returns the result as a new list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise and returns a new list.\n    '''\n    # If the length of the two lists are not equal, return None\n    if len(nums1)!= len(nums2):\n        return None\n    # Create a new list to store the result\n    result = []\n    # Iterate over the two lists and subtract corresponding elements\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"The lists must be of equal length.\"\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = [0] * 10\n    while n:\n        digit = n % 10\n        digit_freq[digit] += 1\n        n //= 10\n\n    for freq in digit_freq:\n        if freq > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    freqs = [digits.count(d) for d in range(10)]\n    return all(f <= d for d, f in zip(digits, freqs))"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    while n > 0:\n        digit = n % 10\n        if digit == 0:\n            return False\n        if n // digit > digit:\n            return False\n        n = n // 10\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_count = [0] * 10  # create a list of 10 zeros to store the frequency of each digit\n\n    while n > 0:\n        digit = n % 10  # get the rightmost digit\n        digit_count[digit] += 1  # increment the frequency count of the digit\n        n //= 10  # remove the rightmost digit from the number\n\n    for i in range(10):\n        if digit_count[i] > i:  # check if the frequency of each digit is less than or equal to the digit itself\n            return False  # if there's a digit whose frequency is greater than the digit itself, return False\n\n    return True  # if all digits have a frequency less than or equal to the digit itself, return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer into a string\n    n_str = str(n)\n    \n    # Iterate over the digits in the string and check their frequency\n    for digit in n_str:\n        if n_str.count(digit) > int(digit):\n            return False\n    \n    # If all digits have a frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    freq = [digits.count(i) for i in range(1, max_digit+1)]\n    return all(f <= i for f, i in zip(freq, digits))"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    while n > 0:\n        digit = n % 10\n        if digit > 1 and n.count(digit) > digit:\n            return False\n        n //= 10\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == elem for x in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    # initialize a variable to keep track of whether all elements in the list are equal to the given element\n    all_elements_equal = True\n    \n    # iterate through the list and check whether each element is equal to the given element\n    for item in list:\n        if item!= element:\n            all_elements_equal = False\n            break\n    \n    # return whether all elements in the list are equal to the given element\n    return all_elements_equal"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(elem == item for item in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check whether all items in a list are equal to a given element.\n    \"\"\"\n    return all(item == elem for item in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n    \"\"\"\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\bb{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    result = re.search(pattern, text)\n    return bool(result)"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\bb{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a.*b{2,3}$\"\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\bb{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(k):\n        sum = 0\n        for j in range(n):\n            sum += a[j]\n        max_sum = max(max_sum, sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        current_sum = sum(a)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create an empty array of size k, to store the sum of the array at each index\n    sums = [0] * k\n    \n    # Calculate the sum of the first array\n    for i in range(n):\n        sums[0] += a[i]\n        \n    # Calculate the sum of the remaining arrays by adding the sum of the first array with the sum of the previous array\n    for i in range(1, k):\n        sums[i] = sums[i-1] + sums[0]\n        \n    # Find the maximum sum in the sums array\n    max_sum = max(sums)\n    \n    # Create a new array of size n*k, where each element is the sum of the original array repeated k times\n    repeated_sum = [0] * (n * k)\n    for i in range(n):\n        for j in range(k):\n            repeated_sum[i+j*n] = a[i]\n            \n    # Calculate the sum of the repeated array\n    repeated_sum_sum = sum(repeated_sum)\n    \n    # Calculate the maximum sum of a contiguous subarray in the repeated array\n    max_repeated_sum = max_sum * n * k\n    \n    # Calculate the difference between the maximum repeated sum and the sum of the repeated array\n    max_sub_array_sum = max_repeated_sum - repeated_sum_sum\n    \n    return max_sub_array_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # calculate the total sum of the original array\n    total = sum(a)\n    # calculate the total sum of the repeated array\n    repeated = total * k\n    # if the repeated sum is less than or equal to the total sum, we don't need to repeat the array\n    if repeated <= total:\n        return max_sub_array_sum(a, n)\n    # otherwise, we need to repeat the array k times and find the maximum subarray sum\n    else:\n        # calculate the maximum subarray sum of the repeated array\n        max_sum = max_sub_array_sum(a * k, n * k)\n        # find the maximum subarray sum of the original array within the repeated array\n        for i in range(n):\n            for j in range(i, n):\n                subarray = a[i:j+1] * k\n                subarray_sum = sum(subarray)\n                if subarray_sum > max_sum:\n                    max_sum = subarray_sum\n        return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(k):\n        curr_sum = sum(a)\n\n    max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf')\n    \n    # repeat the array k times\n    for i in range(k):\n        sum = 0\n        \n        # calculate the sum of the current contiguous array\n        for j in range(n):\n            sum += a[j]\n        \n        # update max_sum if the sum is greater than max_sum\n        if sum > max_sum:\n            max_sum = sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the maximum sum to be the first element of the array\n    max_sum = a[0]\n    \n    # Iterate over the array from the second element to the last element\n    for i in range(1, n):\n        # Calculate the sum of the current subarray\n        current_sum = a[i]\n        \n        # Iterate over the previous subarrays and add the current element to each subarray\n        for j in range(1, k):\n            current_sum += a[i-j]\n            \n        # Check if the current subarray sum is greater than the previous maximum sum\n        max_sum = max(max_sum, current_sum)\n        \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_k = sum(a)\n    if k > n:\n        return -1\n    elif k == n:\n        return sum_k\n    else:\n        for i in range(n):\n            if i < k-1:\n                sum_k += a[i]\n            else:\n                sum_k += sum_k - a[i-k+1]\n        return sum_k\n"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = -1*float('inf')\n    for i in range(k):\n        for j in range(n):\n            temp_sum = 0\n            for p in range(j, n, k):\n                temp_sum += a[p]\n                if temp_sum > max_sum:\n                    max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= 2*n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # loop from 2 to 2n, incrementing by 2\n    for i in range(2, 2*n+1, 2):\n        # add square of i to sum\n        sum += i**2\n    \n    # return sum of squares\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n**2 + square_Sum(n-2)\n\nprint(square_Sum(10)) # Output: 165"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        # initialize the sum to zero\n        total_sum = 0\n        # iterate through the even numbers from 2 to 2n\n        for i in range(2, 2*n+1, 2):\n            # square each even number and add it to the total sum\n            total_sum += i**2\n        # return the total sum\n        return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    while count < n:\n        sum += count**2\n        count += 2\n    \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(2, n*2, 2):\n        # add square of i to sum\n        sum += i**2\n    # return sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = lst\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    result = []\n\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n            result = i\n\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    \n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    result = []\n    \n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            result = [sublist]\n        elif len(sublist) == max_length:\n            result.append(sublist)\n    \n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(max(list1, key=len))\n    return [lst for lst in list1 if len(lst) == max_len]"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    result = []\n\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            result = sublist\n    \n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = lst\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        count = 0\n        for i in range(k):\n            count += count_no_of_ways(n-1, k)\n        return count"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        count = 0\n        for i in range(1, k+1):\n            count += count_no_of_ways(n-1, k)\n        return count"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n\n    # Initialize dp array\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Fill the dp array\n    for i in range(n+1):\n        dp[i][0] = 1 # First row\n\n    for j in range(1, k+1):\n        dp[1][j] = 1 # First column\n\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1] # Fill the remaining cells\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    if n == 0: \n        return 0\n    if n == 1: \n        return k\n    if k == 1: \n        return 1\n    if k == 2: \n        return 2\n    if n == 2: \n        return k\n    dp = [[0 for i in range(k+1)] for j in range(n+1)] \n    dp[1][1] = 1 \n    dp[1][2] = 2\n    dp[2][1] = 1\n    dp[2][2] = 3\n    for i in range(3, n+1): \n        for j in range(1, k+1): \n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1]\n    return dp[n][k] "
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Create an array to store the number of ways of painting each post\n    ways = [0] * (n+1)\n    \n    # Base case: the first and last posts have one way to be painted\n    ways[0] = 1\n    ways[n] = 1\n    \n    # For each post, count the number of ways to paint it with the first and last posts\n    for i in range(1, n):\n        ways[i] = ways[i-1] * k + ways[i+1] * k\n        \n    # Return the total number of ways\n    return ways[n] // k**2"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    if n == 1: \n        return k \n    else: \n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k) + (1 if k > 1 else 0) "
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    \"\"\"\n    This function takes two arguments n and k and returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    \n    # Initialize an empty dictionary to store the number of ways for each color\n    count = {i:0 for i in range(k)}\n    \n    # Base cases\n    count[0] = 1\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return k\n    \n    # Fill the dictionary using recursion\n    for i in range(1, n-1):\n        for j in range(k):\n            count[j] += count[j-1]\n    \n    # Return the final answer\n    return count[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    elif n == 1:\n        return k\n    else:\n        count = 0\n        for i in range(k):\n            count += count_no_of_ways(n-1, k)\n        return count"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list of size n x k with 0\n    dp = [[0 for i in range(k)] for j in range(n)]\n\n    # Base case for first row\n    for i in range(k):\n        dp[0][i] = 1\n\n    # Fill the DP table using the given recurrence relation\n    for i in range(1, n):\n        for j in range(k):\n            for l in range(k):\n                if l!= j:\n                    dp[i][j] += dp[i-1][l]\n\n    # Return the total number of ways\n    return dp[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        dp = [[0 for i in range(k+1)] for j in range(n+1)]\n        for i in range(n+1):\n            dp[i][0] = 1\n            dp[i][1] = 1\n        for i in range(2, n+1):\n            for j in range(2, k+1):\n                dp[i][j] = dp[i-1][j] + dp[i-2][j-1] + dp[i-2][j]\n        return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n\n    :param n: An integer representing the dividend.\n    :param m: An integer representing the divisor.\n    :return: An integer representing the quotient of the two numbers.\n    \"\"\"\n    if m == 0:\n        raise ValueError(\"Error: Division by zero is not allowed.\")\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 'Error: Division by zero not allowed'\n    else:\n        quotient = n // m\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n,m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        return \"Error: Division by zero.\"\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m  # integer division to find quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns the quotient of n/m rounded down to the nearest integer.\n    '''\n    return n//m"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function calculates the length of the third side of a right-angled triangle given the length of the first two sides.\n    \"\"\"\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(math.pow(w, 2) + math.pow(h, 2))\n    return c"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a list.\n    \n    Args:\n    lst: A list of heterogeneous values.\n    \n    Returns:\n    The maximum value in the list.\n    \n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list is empty.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    if len(lst) == 0:\n        raise ValueError(\"List is empty\")\n    return max(lst)"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function finds the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes in a number and returns the sum of all its divisors.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all its divisors.\n    \"\"\"\n    sum_divisor = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    This function takes an integer as input and returns the sum of all the divisors of that integer.\n    '''\n    sum_divisor = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as input and returns the sum of all its divisors.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes in a number as input and returns the sum of all its divisors.\n    \"\"\"\n    # Initialize a variable to store the sum of divisors\n    divisor_sum = 0\n    \n    # Loop through all numbers from 1 to the given number (excluding the number itself)\n    for i in range(1, number):\n        \n        # Check if the number is a divisor of the given number\n        if number % i == 0:\n            \n            # If it is, add it to the divisor_sum variable\n            divisor_sum += i\n    \n    # Return the sum of all divisors\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function returns the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as input and returns the sum of all its divisors.\n    '''\n    sum = 0\n    \n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    \n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    \n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n        else:\n            temp[k] = arr[j]\n            j += 1\n            inv_count += (mid - i + 1)\n        k += 1\n    \n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n    \n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n    \n    for i in range(left, right+1):\n        arr[i] = temp[i]\n        \n    return inv_count\n\ndef merge_sort(arr, left, right):\n    inv_count = 0\n    \n    if left < right:\n        mid = (left + right) // 2\n        \n        inv_count += merge_sort(arr, left, mid)\n        inv_count += merge_sort(arr, mid+1, right)\n        \n        inv_count += merge(arr, left, mid, right)\n    \n    return inv_count\n\ndef get_Inv_Count(arr):\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, 0, n-1)"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\n\n\ndef get_Inv_Count(arr):\n    arr = merge_sort(arr)\n    inv_count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n    else:\n        mid = n // 2\n        left_inv = get_Inv_Count(arr[:mid])\n        right_inv = get_Inv_Count(arr[mid:])\n        inv_count = left_inv + right_inv\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n        i = j = 0\n        while i < mid and j < n - mid:\n            if left_arr[i] <= right_arr[j]:\n                i += 1\n            else:\n                j += 1\n                inv_count += mid - i\n        return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n                count += (mid - i) # count inversions\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_inv_count(arr):\n    merge_sort(arr)\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    inv_count = 0\n\n    # Merge Sort Algorithm\n    def merge_sort(arr): \n        if len(arr) > 1: \n            mid = len(arr) // 2 \n            left_arr = arr[:mid] \n            right_arr = arr[mid:] \n\n            merge_sort(left_arr) \n            merge_sort(right_arr) \n\n            i = j = k = 0\n\n            while i < len(left_arr) and j < len(right_arr): \n                if left_arr[i] < right_arr[j]: \n                    arr[k] = left_arr[i] \n                    i += 1\n                else: \n                    arr[k] = right_arr[j] \n                    j += 1\n                    inv_count += (mid - i) # count inversions\n\n                k += 1\n\n            while i < len(left_arr): \n                arr[k] = left_arr[i] \n                i += 1\n                k += 1\n\n            while j < len(right_arr): \n                arr[k] = right_arr[j] \n                j += 1\n                k += 1\n\n    merge_sort(arr)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    count = 0\n    temp = [0]*n \n\n    # Merge Sort Algorithm to count inversions in array \n    def merge(arr, temp, left, mid, right): \n        i = left \n        j = mid \n        k = left \n\n        while i <= mid - 1 and j <= right: \n            if arr[i] <= arr[j]: \n                temp[k] = arr[i] \n                i += 1\n            else: \n                temp[k] = arr[j] \n                count += (mid - i) # count the number of inversions \n                j += 1\n            k += 1\n\n        while i <= mid - 1: \n            temp[k] = arr[i] \n            i += 1\n            k += 1\n\n        while j <= right: \n            temp[k] = arr[j] \n            j += 1\n            k += 1\n\n        for i in range(left, right + 1): \n            arr[i] = temp[i] \n\n    def mergeSort(arr, temp, left, right): \n        if left < right: \n            mid = (left + right) // 2 \n            mergeSort(arr, temp, left, mid) \n            mergeSort(arr, temp, mid + 1, right) \n            merge(arr, temp, left, mid + 1, right) \n\n    mergeSort(arr, temp, 0, n - 1) \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    # sort the array\n    arr.sort()\n\n    # initialize variables to count inversions\n    inv_count = 0\n    j = 0\n    n = len(arr)\n\n    # iterate through the array and count inversions\n    for i in range(n):\n        while j < n and arr[i] > arr[j]:\n            j += 1\n        inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function returns the number of inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    \n    # Divide the array in two halves\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    # Recursively count inversions in each half\n    inv_count_left = get_Inv_Count(left_half)\n    inv_count_right = get_Inv_Count(right_half)\n    \n    # Merge the two halves and count inversions\n    merged_arr = []\n    i = j = 0\n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] <= right_half[j]:\n            merged_arr.append(left_half[i])\n            i += 1\n        else:\n            merged_arr.append(right_half[j])\n            j += 1\n            inv_count_left += len(left_half[i:])\n    \n    # Add the remaining elements to the merged array\n    merged_arr += left_half[i:]\n    merged_arr += right_half[j:]\n    \n    # Update the original array with the merged array\n    arr[:] = merged_arr\n    \n    # Return the total inversion count\n    return inv_count_left + inv_count_right"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and flattens it into a single list.\n    \"\"\"\n    flat_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flat_list.extend(flatten_list(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened_list.extend(flatten_list(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    \n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n            \n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if type(element) == list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Parameters:\n    nested_list (list): A nested list structure to be flattened.\n\n    Returns:\n    list: A flattened list.\n\n    Example:\n    >>> flatten_list([1, [2, 3], [4, [5, 6]]])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    flattened_list = []\n    for element in nested_list:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for s, t, v in stdata:\n        d[s].append((t, v))\n    max_aggregate = 0\n    for _, times_and_values in d.items():\n        times = [t for t, _ in times_and_values]\n        values = [v for _, v in times_and_values]\n        min_time = min(times)\n        max_value = max(values)\n        max_aggregate += max_value - (min_time - 1)\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each item in the list of tuples\n    freq_dict = defaultdict(int)\n    for item in stdata:\n        freq_dict[item[0]] += item[1]\n\n    # Find the maximum aggregate by iterating through each item in the list of tuples\n    max_agg = 0\n    for item in stdata:\n        # Calculate the aggregate value of the current item\n        agg_value = freq_dict[item[0]] * item[1]\n        # Update the maximum aggregate value if the current aggregate value is greater than the previous maximum aggregate value\n        if agg_value > max_agg:\n            max_agg = agg_value\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    d = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n):\n            d[i+j] += stdata[i][1] * stdata[j][1]\n    \n    return max(d.values())"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the frequency of each student\n    student_freq = defaultdict(int)\n\n    # iterate through the list of tuples and update the frequency of each student\n    for student, score in stdata:\n        student_freq[student] += score\n\n    # calculate the maximum aggregate\n    max_agg = 0\n    for student, score in stdata:\n        max_agg += score * student_freq[student]\n\n    return max_agg / len(student_freq)"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to keep track of the sum of each sublist\n    sums = defaultdict(int)\n    \n    # Loop through the list of tuples and sum the sublists\n    for sublist in stdata:\n        sums[tuple(sorted(sublist))] += sum(sublist)\n    \n    # Loop through the dictionary to find the maximum aggregate\n    max_agg = -float('inf')\n    for sublist in sums:\n        if sums[sublist] > max_agg:\n            max_agg = sums[sublist]\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each transaction\n    count = defaultdict(int)\n\n    # Iterate through each transaction and update the count dictionary\n    for transaction in stdata:\n        for item in transaction:\n            count[item] += transaction[item]\n\n    # Create a new dictionary to store the aggregate of each transaction\n    agg = defaultdict(int)\n\n    # Iterate through each transaction and update the aggregate dictionary\n    for transaction in stdata:\n        total_value = 0\n        for item in transaction:\n            total_value += transaction[item] * count[item] / sum(transaction.values())\n            agg[total_value] += 1\n\n    # Find the maximum aggregate and return it\n    max_agg = max(agg)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequencies of each element in the list\n    freq = defaultdict(int)\n    for elem in stdata:\n        freq[elem[0]] += elem[1]\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for key, value in freq.items():\n        if key + value > max_agg:\n            max_agg = key + value\n\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for a, b in stdata:\n        freq[a] += b\n        freq[b] += b\n        \n    # Calculate the maximum aggregate by finding the product of the two most frequent elements\n    max_agg = 1\n    for i, j in zip(freq.keys(), freq.keys()):\n        if i!= j:\n            max_agg = max(max_agg, i*j)\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    max_agg = 0\n    \n    for s,t,v in stdata:\n        d[s] += v\n        d[t] -= v\n        \n    for i in d:\n        max_agg = max(max_agg, d[i])\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples, representing a\n    sequence of stock prices.\n\n    Parameters:\n    stdata (list): a list of tuples, where each tuple contains the price of a\n                   stock on a given day\n\n    Returns:\n    int: the maximum aggregate of all possible subsets of stdata\n    \"\"\"\n\n    # Create a dictionary to store the maximum possible aggregate for each\n    # possible length of a subset\n    max_agg = defaultdict(int)\n\n    # Calculate the maximum possible aggregate for a subset of length 1\n    for price in [x[0] for x in stdata]:\n        max_agg[1] = max(max_agg[1], price)\n\n    # Calculate the maximum possible aggregate for a subset of length 2\n    for i in range(len(stdata)-1):\n        max_agg[2] = max(max_agg[2], stdata[i][0] + stdata[i+1][0])\n\n    # Calculate the maximum possible aggregate for a subset of length 3 and\n    # higher\n    for i in range(len(stdata)-2):\n        max_agg[3] = max(max_agg[3], stdata[i][0] + stdata[i+1][0] + stdata[i+2][0])\n        for j in range(i+1, len(stdata)-1):\n            max_agg[3] = max(max_agg[3], max_agg[2] - stdata[i][0] + stdata[j][0] + stdata[j+1][0])\n\n    # Return the maximum possible aggregate for a subset of any length\n    return max(max_agg.values())"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        bin_num = bin(i)[2:].zfill(n)\n        if bin_num == bin_num[::-1]:\n            sum_first_n = sum(int(bin_num[j]) for j in range(n))\n            sum_last_n = sum(int(bin_num[-1-j]) for j in range(n))\n            if sum_first_n == sum_last_n:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(int(b) for b in bits[:n]) == sum(int(b) for b in bits[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        bin_i = bin(i)[2:].zfill(n)\n        if sum(int(bin_i[:n])) == sum(int(bin_i[n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    # iterate over all possible values of first n bits\n    for i in range(2**n):\n        # convert the integer to binary string\n        s = bin(i)[2:].zfill(n)\n        # compute the sum of first n bits\n        first_sum = sum(int(x) for x in s)\n        # convert the integer to binary string and reverse it\n        r = bin(i)[2:].zfill(n)[::-1]\n        # compute the sum of last n bits\n        last_sum = sum(int(x) for x in r)\n        # check if the two sums are equal\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    # initialize count and initialize two lists, one for all possible binary sequences of length 2n, and another for the first n bits of each sequence\n    count = 0\n    binary_seq = []\n    prefix_bits = []\n    # loop through all possible binary sequences of length 2n and count the ones where the first n bits are the same as the last n bits\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n) # convert the integer i to binary and pad with leading zeros to ensure length n\n        binary_seq.append(binary)\n        prefix_bits.append(binary[:n])\n        if prefix_bits[-1] == binary[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Generate all binary numbers of length 2n\n    for i in range(2**n):\n        bin_num = bin(i)[2:].zfill(2*n)\n        \n        # Check if the sum of first n bits is same as sum of last n bits\n        if bin_num[:n] == bin_num[-n:]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(int(b) for b in bits[:n]) == sum(int(b) for b in bits[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    # loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # convert the binary sequence to its decimal equivalent\n        binary_str = bin(i)[2:].zfill(n)\n        # check if the sum of first n bits is same as the sum of last n bits\n        if sum(int(binary_str[:n])) == sum(int(binary_str[n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # convert integer i to binary string b and pad with leading zeros to length n\n        b = bin(i)[2:].zfill(n)\n        # check if the sum of first n bits is same as the sum of last n bits\n        if sum(int(b[:n])) == sum(int(b[n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        # Convert integer to binary string and split it into two parts\n        binary_str = bin(i)[2:]\n        left_part = binary_str[:n]\n        right_part = binary_str[n:]\n        # Convert the left and right parts to integer and calculate the sum\n        left_sum = 0\n        for digit in left_part:\n            left_sum += int(digit)\n        right_sum = 0\n        for digit in right_part:\n            right_sum += int(digit)\n        # Check if the sum of left and right parts is equal\n        if left_sum == right_sum:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function will find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    \n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict) or len(d) == 0:\n        return 1\n\n    max_depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict) or len(d) == 0:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Finds the element at the given index after rotating the array based on the ranges and rotations parameters.\n\n    :param arr: a list of integers\n    :param ranges: a list of tuples containing the start and end indices of each range\n    :param rotations: an integer indicating the number of rotations to perform\n    :param index: an integer indicating the index of the element to find\n    :return: the element at the given index after rotating the array based on the ranges and rotations parameters\n    \"\"\"\n    # Initialize the array with the elements in the ranges\n    rotated_arr = []\n    for r in ranges:\n        rotated_arr.extend(arr[r[0]:r[1]+1])\n\n    # Rotate the array the required number of times\n    rotated_arr = rotated_arr[-rotations:] + rotated_arr[:-rotations]\n\n    # Find the element at the given index\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Find the element at the given index after rotating the array by rotations number of times.\n    '''\n    rotated_arr = arr[rotations:] + arr[:rotations]  # Rotating the array by rotations number of times.\n    for i in range(ranges):\n        if index >= len(rotated_arr):\n            index -= len(rotated_arr)\n        else:\n            break\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, ranges, rotations, and index as inputs. \n    It returns the element at the given index after number of rotations.\n    \"\"\"\n    # Convert ranges to list\n    ranges = list(map(int, ranges.split()))\n    # Check if index is within range\n    if index < ranges[0] or index > ranges[1]:\n        return \"Index is out of range\"\n    # Rotate the array based on rotations\n    arr = arr[rotations:] + arr[:rotations]\n    # Find the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, ranges and rotations and returns the element at the given index after number of rotations.\n    '''\n    # If the given index is out of bounds, return -1\n    if index < 0 or index >= len(arr):\n        return -1\n    \n    # Calculate the number of rotations\n    rotations = rotations % len(arr)\n    \n    # If there are no rotations, return the element at the given index\n    if rotations == 0:\n        return arr[index]\n    \n    # Find the range of indices to be searched\n    low_range = index - ranges\n    high_range = index + ranges + 1\n    \n    # If the range is out of bounds, shift it to fit within the array\n    if low_range < 0:\n        high_range -= low_range\n        low_range = 0\n    \n    if high_range > len(arr):\n        low_range -= (high_range - len(arr))\n        high_range = len(arr)\n    \n    # Find the element at the given index after number of rotations\n    rotated_index = (index - low_range) + (rotations * (high_range - low_range)) + low_range\n    \n    # Return the element at the rotated index\n    return arr[rotated_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, ranges, rotations, and an index, and returns the element at the specified index after the specified number of rotations.\n    '''\n    # Calculate the length of the array\n    length = len(arr)\n    \n    # Calculate the new index after the specified number of rotations\n    new_index = (index + rotations) % length\n    \n    # Find the element at the new index\n    element = arr[new_index]\n    \n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    new_index = index - rotations\n    new_index = new_index % ranges\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) : \n    n = len(arr)\n    # convert ranges to list of tuples\n    ranges_list = []\n    for i in range(ranges):\n        a, b = map(int, input().split())\n        ranges_list.append((a, b))\n    \n    # rotate the list 'rotations' times\n    arr = arr[rotations:] + arr[:rotations]\n\n    # check if index is present in any range\n    for i in ranges_list:\n        if index >= i[0] and index <= i[1]:\n            return arr[index]\n\n    # if not present in any range, return -1\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    This function takes in an array of numbers and the number of rotations to be performed on the array, as well as the index of the element to be found after the rotations have been performed. It returns the element at the given index after the rotations have been performed.\n    '''\n\n    # Initialize a variable to store the initial index of the array after rotations\n    rotated_index = index\n\n    # If the number of rotations is greater than the length of the array, set the number of rotations to the length of the array\n    if rotations > len(arr):\n        rotations = len(arr)\n\n    # Rotate the array by the specified number of rotations\n    rotated_arr = arr[rotations:] + arr[:rotations]\n\n    # If the index is greater than the length of the rotated array, set the index to the index within the rotated array\n    if rotated_index >= len(rotated_arr):\n        rotated_index = rotated_index % len(rotated_arr)\n\n    # Return the element at the given index after rotations have been performed\n    return rotated_arr[rotated_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Calculate the length of the array\n    n = len(arr)\n\n    # Calculate the actual index after the rotations\n    actual_index = (index + rotations) % n\n\n    # Calculate the range of indices based on the given ranges and rotations\n    lower_range = actual_index - ranges\n    upper_range = actual_index + ranges\n\n    # Check if the range is valid\n    if upper_range > n:\n        upper_range = n\n\n    # Initialize the result variable\n    result = None\n\n    # Loop through the array and find the element at the given index\n    for i in range(lower_range, upper_range):\n        if arr[i] == arr[actual_index]:\n            result = arr[i]\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    start = 0\n    end = ranges - 1\n    mid = 0\n    element = arr[index]\n    for i in range(rotations):\n        mid = (start + end) // 2\n        if element >= arr[mid]:\n            start = mid + 1\n        else:\n            end = mid\n    return arr[start]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if re.match(\"^p\", word)]\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p' found.\"\n    else:\n        return \"Words starting with 'p': \" + ', '.join(p_words[:2])"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*\\s\\w*')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'p\\w\\w')\n    filtered = [w for w in words if pattern.match(w)]\n    return filtered[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    p_words = [word for word in words if re.match(pattern, word)]\n    if len(p_words) < 2:\n        return None\n    else:\n        return (p_words[0], p_words[1])"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+\\s+\\w+')\n    matches = []\n    for word in words:\n        if pattern.match(word):\n            matches.append(word)\n    if len(matches) == 2:\n        return matches\n    else:\n        return \"Not enough words starting with 'p' were found.\""
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p\\w')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    words = [word for word in words if re.match(r\"^p\", word)]\n    if len(words) < 2:\n        return None\n    else:\n        return words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    results = []\n    for word in words:\n        if pattern.match(word):\n            results.append(word)\n            if len(results) == 2:\n                break\n    return results"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*\\b')\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            return (words[i], words[i+1])\n    return None"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize a list to store the maximum sum of increasing subsequence at each index\n    max_sum = [0] * n\n\n    # Initialize the maximum sum to the first element of the array\n    max_sum[0] = a[0]\n\n    # Traverse from second element to last element of the array\n    for i in range(1, n):\n\n        # Initialize the maximum sum to the element before the current index\n        max_sum[i] = max_sum[i-1]\n\n        # Check if the current element is greater than the previous maximum sum\n        if a[i] > max_sum[i]:\n\n            # If it is, update the maximum sum at the current index\n            max_sum[i] = a[i]\n\n        # Check if the current index is greater than the given index and kth element is greater than the previous maximum sum\n        if index > i and a[i] > a[k] and a[i] > max_sum[i]:\n\n            # If it is, update the maximum sum at the current index\n            max_sum[i] = a[i]\n\n    # Return the maximum sum of increasing subsequence at the given index\n    return max_sum[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp[j] + a[i] > dp[i]:\n                dp[i] = dp[j] + a[i]\n        if k > i:\n            dp[i] = dp[index] + a[k]\n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize dp array with zeros\n    dp = [0] * n\n    \n    # Iterate over the array to find the maximum sum of increasing subsequence\n    for i in range(n):\n        # If the current element is greater than the kth element\n        if a[i] > a[k]:\n            # Add the current element to the dp array\n            dp[i] = a[i] + dp[k]\n        else:\n            dp[i] = dp[k]\n            \n    # Find the maximum sum of increasing subsequence\n    max_sum = max(dp)\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize a list to store the maximum sum and its corresponding index.\n    max_sum = [0]\n    max_index = [0]\n    \n    # Traverse the prefix from 0 to i-1 and store the maximum sum and its corresponding index for each prefix.\n    for i in range(index):\n        if a[i] < a[index]:\n            if max_sum[-1] + a[index] > max_sum[-1]:\n                max_sum.append(max_sum[-1] + a[index])\n                max_index.append(i)\n        else:\n            if max_sum[-1] + a[index] > max_sum[-1]:\n                max_sum.append(max_sum[-1])\n                max_index.append(i)\n    \n    # Traverse the prefix from i+1 to n-1 and store the maximum sum and its corresponding index for each prefix.\n    for i in range(index+1, n):\n        if a[i] < a[k]:\n            if max_sum[-1] + a[i] > max_sum[-1]:\n                max_sum.append(max_sum[-1] + a[i])\n                max_index.append(i)\n        else:\n            if max_sum[-1] + a[i] > max_sum[-1]:\n                max_sum.append(max_sum[-1])\n                max_index.append(i)\n    \n    # Traverse the maximum sum list and return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    for i in range(len(max_sum)-1, -1, -1):\n        if a[max_index[i]] < a[k]:\n            return max_sum[i]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = 0\n    max_index = -1\n    prefix_sum = [0] * n\n\n    # Compute prefix sum\n    for i in range(n):\n        prefix_sum[i] = prefix_sum[i-1] + a[i]\n\n    # Compute max sum of increasing subsequence\n    for i in range(k, index+1):\n        if prefix_sum[i] > max_sum:\n            max_sum = prefix_sum[i]\n            max_index = i\n\n    # Return the maximum sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    for i in range(n):\n        if i == index or a[i] <= a[index]:\n            dp[i] = max(dp[j] for j in range(i) if a[j] < a[i]) + a[i]\n        else:\n            dp[i] = max(dp[j] for j in range(i))\n        if k > i and dp[i] < dp[k] + a[k]:\n            dp[i] = dp[k] + a[k]\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0]\n    else:\n        max_sum = 0\n        for i in range(index):\n            if a[i] < a[index]:\n                max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n        if k > index:\n            max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n        return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Create a list to store the increasing subsequence\n    inc_seq = [a[0]]\n    \n    # Create a list to store the sum of increasing subsequence from prefix until index\n    sum_seq = [a[0]]\n    \n    # Loop through the list from index+1 to n-1\n    for i in range(1, n):\n        # If the current element is greater than the last element of the increasing subsequence, append it to the increasing subsequence list\n        if a[i] > inc_seq[-1]:\n            inc_seq.append(a[i])\n            sum_seq.append(sum_seq[-1] + a[i])\n        # If the current element is smaller than the last element of the increasing subsequence, update the last element of the increasing subsequence list\n        elif a[i] < inc_seq[-1]:\n            # Find the index of the last element in the increasing subsequence list that is smaller than the current element\n            j = max(j for j in range(len(inc_seq)) if inc_seq[j] < a[i])\n            # Update the increasing subsequence list and the corresponding sum of increasing subsequence from prefix until index\n            inc_seq[j] = a[i]\n            sum_seq[j] = sum_seq[j] + a[i] - sum_seq[-1]\n    \n    # If the kth element is present in the increasing subsequence, find the sum of increasing subsequence from prefix until kth element and add it to the sum of increasing subsequence from prefix until index\n    if k < n and k in inc_seq:\n        return sum_seq[inc_seq.index(k)] + a[k]\n    # If kth element is not present in the increasing subsequence, return the maximum sum of increasing subsequence from prefix until index\n    else:\n        return sum_seq[-1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the list to store the maximum sum for each prefix\n    max_sum = [0] * (n + 1)\n    \n    # Initialize the maximum sum for the prefix that ends with the first element\n    max_sum[1] = a[0]\n    \n    # Compute the maximum sum for each prefix using a dynamic programming approach\n    for i in range(2, n + 1):\n        # Initialize the maximum sum for the prefix that ends with the ith element as negative infinity\n        max_sum[i] = -float('inf')\n        for j in range(i):\n            # If the ith element is greater than the jth element and the sum of the prefix that ends with the jth element plus the ith element is greater than the maximum sum for the prefix that ends with the jth element, then update the maximum sum for the prefix that ends with the ith element\n            if a[i - 1] > a[j] and max_sum[j] + a[i - 1] > max_sum[i]:\n                max_sum[i] = max_sum[j] + a[i - 1]\n    \n    # Initialize the maximum sum for the prefix that ends with the kth element as negative infinity\n    max_sum_k = -float('inf')\n    \n    # Compute the maximum sum for the prefix that ends with the kth element by traversing the list backwards and adding the ith element to the sum if it is greater than the ith element and the sum of the prefix that ends with the ith element plus the kth element is greater than the maximum sum for the prefix that ends with the kth element\n    for i in range(n, 0, -1):\n        if a[i - 1] > a[k]:\n            if max_sum[i] + a[k] > max_sum_k:\n                max_sum_k = max_sum[i] + a[k]\n    \n    # Return the maximum sum for the prefix that ends with the ith element and the maximum sum for the prefix that ends with the kth element\n    return max_sum[index], max_sum_k"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    for i in range(n):\n        if i <= index:\n            dp[i] = max(dp[j] + a[i] for j in range(i) if j < index or j!= k-1)\n        else:\n            dp[i] = max(dp[j] + a[i] for j in range(i))\n    return dp[n-1]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple for the colon\n    colon_tuplex = deepcopy(tuplex)\n\n    # Slice the colon_tuplex to get the desired colon\n    colon_tuplex = colon_tuplex[m-1:n]\n\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a deep copy of the tuple\n    tupl_copy = deepcopy(tuplex)\n    # initialize a new tuple with the colon values\n    colon_tupl = ()\n    # loop through the indices of the tuple\n    for i in range(m-1, n):\n        # add the i-th element of the tuple to the colon tuple\n        colon_tupl += (tupl_copy[i],)\n    return colon_tupl"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a deep copy of tuplex\n    new_tuplex = deepcopy(tuplex)\n    \n    # get the starting index of the colon\n    start_index = m - 1\n    \n    # get the ending index of the colon\n    end_index = n - 1\n    \n    # slice the tuple using the colon notation\n    new_tuplex = new_tuplex[start_index:end_index]\n    \n    # return the colon of the tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a copy of the tuple\n    tuplx = deepcopy(tuplex)\n    \n    # Slice the tuple and return the result\n    return tuplx[m:n+1]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex):\n        return None\n    colon = deepcopy(tuplex[m-1:n])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a copy of the tuple to avoid modifying the original one\n    new_tuplex = deepcopy(tuplex)\n    # check if the colon is valid or not\n    if m <= n and m >= 0 and n < len(new_tuplex):\n        # return a new tuple containing the colon elements\n        return new_tuplex[m:n+1]\n    else:\n        return \"Invalid colon\""
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function returns a colon of a tuple.\n    \"\"\"\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Slice the tuple\n    tuplex_copy = tuplex_copy[m-1:n]\n\n    return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a new tuple that contains the values of the tuple starting from the m-th position and ending at the n-th position (exclusive).\n    '''\n    if m > len(tuplex) or n > len(tuplex):\n        return None\n    newtuplex = deepcopy(tuplex)\n    newtuplex = newtuplex[m-1:n]\n    return newtuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n    tuplex (tuple): tuple to get colon from.\n    m (int): start index of colon (inclusive).\n    n (int): end index of colon (exclusive).\n\n    Returns:\n    tuple: colon of tuplex.\n    '''\n    colon = deepcopy(tuplex[m:n])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or n > len(tuplex) or n < 0 or m > len(tuplex):\n        return None\n    newtuplex = deepcopy(tuplex)\n    newtuplex = newtuplex[m:n]\n    return newtuplex"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products\n    products = []\n    \n    # Loop through each element in nums1\n    for num1 in nums1:\n        # Loop through each element in nums2\n        for num2 in nums2:\n            # Calculate the product of num1 and num2\n            product = num1 * num2\n            \n            # Append the product to the products list\n            products.append(product)\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the first N products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    largest_products = sorted(products, reverse=True)[:N]\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the maximum products\n    max_products = []\n    \n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Loop through the first N elements in each list\n    for i in range(N):\n        # Multiply the first i elements in each list and add it to the list of max products\n        max_product = nums1[i] * nums2[i]\n        max_products.append(max_product)\n    \n    # Return the list of max products\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        a = nums1[i]\n        b = nums2[i]\n        if a > 0 and b > 0:\n            # both positive, take the product\n            product = a * b\n        elif a > 0 and b < 0 or a < 0 and b > 0:\n            # one positive and one negative, take the maximum\n            product = max(a, b) * min(a, b)\n        else:\n            # both negative, take the absolute value of their product\n            product = abs(a) * abs(b)\n        result.append(product)\n    return sorted(result, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    products = []\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Returns the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the maximum and minimum values in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n    min1 = min(nums1)\n    min2 = min(nums2)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over all pairs of factors in the two lists\n    for i in range(N):\n        for j in range(N):\n            # Check if the factors are valid\n            if (i == 0 or nums1[i-1] <= nums2[j]) and (j == 0 or nums2[j-1] <= nums1[i]):\n                # Calculate the product and append to the result list\n                product = nums1[i] * nums2[j]\n                result.append(product)\n\n    # Remove duplicates and sort the result list in descending order\n    result = sorted(list(set(result)), reverse=True)\n\n    # Return the first N elements of the result list\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort(reverse=True)\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Create a list to store the products of the selected factors\n    products = []\n    \n    # Iterate over the two lists, selecting one factor from each list\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n        \n    # Sort the list in descending order and return the first N elements\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the length of the lists\n    m = len(nums1)\n    n = len(nums2)\n    \n    # Initialize a list to store the products of pairs of factors\n    products = []\n    \n    # Iterate through the lists and find the products of pairs of factors\n    for i in range(m):\n        for j in range(n):\n            products.append(nums1[i] * nums2[j])\n    \n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n    \n    # Return the first N products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize the result list and maximum value seen so far\n    result = []\n    max_val = float('-inf')\n\n    # Loop through all possible combinations of factors from nums1 and nums2\n    for i in range(N):\n        for j in range(N):\n            # Compute the product of the i-th factor from nums1 and the j-th factor from nums2\n            product = nums1[i] * nums2[j]\n            # If the product is greater than the maximum seen so far, update the result list and the maximum value\n            if product > max_val:\n                result = [[nums1[i], nums2[j]]]\n                max_val = product\n            # If the product is equal to the maximum seen so far, add the pair of factors to the result list\n            elif product == max_val:\n                result.append([nums1[i], nums2[j]])\n\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n\n    Args:\n    str1 (str): A string to be converted to a tuple of characters.\n\n    Returns:\n    tuple: A tuple of characters.\n    \"\"\"\n\n    # Convert the string to a tuple of characters.\n    tup = tuple(str1)\n\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 1 << (n - 1).bit_length()"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as an input and returns an integer with the left most unset bit set to 1.\n    \"\"\"\n    return n | (n ^ (n-1)) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n & ~(n - 1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in a binary number.\n    \n    :param n: An integer representing a binary number.\n    :return: An integer with the left most unset bit set.\n    \"\"\"\n    # Iterate over the bits in the number from right to left\n    for i in range(31, -1, -1):\n        # Check if the bit is set\n        if (n >> i) & 1 == 1:\n            # If the bit is set, clear it and set the next bit to 1\n            n &= ~(1 << i)\n            n |= 1 << (i-1)\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize a variable to store the bit value\n    bit_val = 1\n    \n    # Loop through the bits from left to right and set the left most unset bit\n    while ((n & bit_val)!= 0):\n        bit_val <<= 1\n        \n    # Return the left most unset bit\n    return bit_val"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the integer with the leftmost unset bit set.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return (n & -n) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a number.\n    \"\"\"\n    return n | (n - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the left most unset bit as an integer.\n    \"\"\"\n    # Initializing the value of the left most unset bit as -1\n    left_most_unset_bit = -1\n    \n    # Looping through all the bits of the integer\n    for i in range(32):\n        # Setting the bit at the current index to 1\n        n |= 1 << i\n        \n        # If the bit at the current index is still set, it means that the bit at the current index\n        # is still set after setting it to 1, which means that we have not yet found the left most\n        # unset bit. In this case, we continue the loop to set the next bit to 1 and repeat the process.\n        if n & (1 << i):\n            continue\n        \n        # If the bit at the current index is not set, it means that the bit at the current index\n        # is not set after setting it to 1, which means that we have found the left most unset bit.\n        # In this case, we set the value of the left most unset bit to the value of the current index\n        # and break out of the loop.\n        left_most_unset_bit = i\n        break\n    \n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit in a binary number.\n    \"\"\"\n    # first we check if n is 0, if it is, we return 1\n    if n == 0:\n        return 1\n    \n    # we use the right shift operator to move all bits to the right by 1 position\n    # and then we use the XOR operator to set the left most bit to 1\n    return (n >> 1) ^ n\n    "
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Set the left most unset bit of a given number.\n    '''\n    return n | (n+1)"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments: the radius of the base of the cone and the height of the cone.\n    It returns the volume of the cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V\n\nradius = float(input(\"Enter the radius of the base of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\nprint(\"The volume of the cone is:\", volume_cone(radius, height))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone given its radius and height.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nprint(f\"The volume of the cone is {volume_cone(r, h):.2f}.\")"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1.0 / 3.0) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two arguments, r and h, and returns the volume of a cone.\n    '''\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone as inputs and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    power_of_2 //= 2\n    return power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power_of_2 = 2\n    while power_of_2 <= n:\n        n = n - power_of_2\n        power_of_2 *= 2\n    return power_of_2 // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power = power * 2\n    return power // 2\n"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        if n == power:\n            return power\n        power = power * 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n = n - power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        n = n - power\n        power *= 2\n    power = power // 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (power*2) <= n: \n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes a number 'n' as input and returns the highest power of 2 that is less than or equal to 'n'.\n    '''\n    power = 0\n    while (2**power) <= n:\n        power += 1\n    return 2**(power-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the highest power of 2 that is less than or equal to `n`.\n    \"\"\"\n    # Initialize the highest power of 2 variable to 1\n    highest_power_of_2 = 1\n\n    # Loop through all possible powers of 2 from 1 to n/2 (inclusive)\n    for i in range(1, n//2 + 1):\n        # Check if i is a power of 2\n        if 2**i <= n:\n            # If i is a power of 2, update the highest power of 2 variable\n            highest_power_of_2 = 2**i\n\n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer 'n' as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2\n    max_power_of_2 = 0\n\n    # Loop through all the powers of 2 from 2^0 to 2^(floor(log2(n)))\n    for power in range(31, -1, -1):\n\n        # Check if 2^power is less than or equal to n\n        if 2**power <= n:\n            max_power_of_2 = 2**power\n\n    # Return the highest power of 2\n    return max_power_of_2"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            current = prev + prev_prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(f\"The {n}'th Lucas number is: {find_lucas(n)}\")"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth Lucas number\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            current = prev + prev_prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    This function takes an integer n as an input and returns then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    This function takes an integer n and returns then'th Lucas number.\n    The first two Lucas numbers are 2 and 1.\n    '''\n    if n == 1 or n == 2:\n        return 2\n    else:\n        a, b = 2, 1\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev_num = 2\n        prev_num = 1\n        for i in range(2, n+1):\n            current_num = prev_prev_num + prev_num\n            prev_prev_num = prev_num\n            prev_num = current_num\n        return current_num"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = [string.format(x) for x in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(lst, fmt):\n    \"\"\"\n    Adds a format string to all elements of a list.\n\n    Parameters:\n    lst (list): List of elements to be formatted.\n    fmt (str): Format string to apply to each element.\n\n    Returns:\n    list: The list of formatted elements.\n    \"\"\"\n    return [fmt.format(x) for x in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert more than one list to a nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, item in enumerate(l1):\n        if item in result:\n            result[item][l2[i]] = l3[i]\n        else:\n            result[item] = {l2[i]: l3[i]}\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes in three lists as input and returns a nested dictionary.\n    Each element of the input lists corresponds to a key in the nested dictionary.\n    The key is the index of the element in the corresponding input list.\n    The value of the key is the element in the corresponding input list.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[i] = {}\n        result_dict[i]['list1'] = l1[i]\n        result_dict[i]['list2'] = l2[i]\n        result_dict[i]['list3'] = l3[i]\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]]['name'] = l2[i]\n        result[l1[i]]['age'] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a nested dictionary.\n    \"\"\"\n    # create an empty dictionary\n    result = {}\n    \n    # iterate through the lists and add the values as key-value pairs in the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {'id': l2[i], 'name': l3[i]}\n        \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i, l in enumerate([l1, l2, l3]):\n        result_dict[f\"list{i+1}\"] = {}\n        for j, val in enumerate(l):\n            result_dict[f\"list{i+1}\"][f\"val{j+1}\"] = val\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        result_dict[l1[i]][l2[i]] = l3[i]\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        inner_dict['col1'] = l1[i]\n        inner_dict['col2'] = l2[i]\n        inner_dict['col3'] = l3[i]\n        result_dict[i] = inner_dict\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    if n == 1:\n        return 1\n    \n    # Finding the maximum sum by using the given equation\n    max_sum = max(n, (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)))\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        a = get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)\n        b = n\n        return max(a, b)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n < 5:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        max_sum = n\n        for i in range(1, n):\n            if n % i == 0:\n                sum_i = n // i\n                if sum_i % 2 == 0 and sum_i % 3 == 0 and sum_i % 4 == 0 and sum_i % 5 == 0:\n                    sum_i = get_max_sum(sum_i)\n                elif sum_i % 2 == 0 and sum_i % 3 == 0 and sum_i % 4 == 0:\n                    sum_i += get_max_sum(sum_i // 2)\n                elif sum_i % 2 == 0 and sum_i % 3 == 0:\n                    sum_i += get_max_sum(sum_i // 3)\n                elif sum_i % 2 == 0:\n                    sum_i += get_max_sum(sum_i // 4)\n                else:\n                    sum_i += get_max_sum(sum_i // 5)\n                if sum_i > max_sum:\n                    max_sum = sum_i\n        return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as an input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for list_item in input_list:\n        if len(list_item) > max_length:\n            max_length = len(list_item)\n            max_list = list_item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            result = [i]\n        elif len(i) == max_length:\n            result.append(i)\n    \n    return result"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n\n    for list_item in input_list:\n        if len(list_item) > max_length:\n            max_length = len(list_item)\n            max_length_list = [list_item]\n        elif len(list_item) == max_length:\n            max_length_list.append(list_item)\n\n    return max_length_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for list_ in input_list:\n        if len(list_) > max_length:\n            max_length = len(list_)\n            max_list = list_\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to check for uniqueness\n    unique_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the character and its frequency count\n    char_freq = {}\n    \n    # loop through the string and count the frequency of each character\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n            \n    # loop through the string again to find the first non-repeated character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n            \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to count the occurrences of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop over the characters in the string again and return the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeating character found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # convert the string to lowercase\n    str1 = str1.lower()\n    \n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # iterate over each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # iterate over each character in the string again\n    for char in str1:\n        # if the character has a count of 1, return it as the first non-repeated character\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for c in str1:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    for c in str1:\n        if freq[c] == 1:\n            return c\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # create a dictionary to keep track of character frequencies\n    freq = {}\n\n    # iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # iterate through the string again and return the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # if no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Convert the string to a list of characters\n    str1_list = list(str1)\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the list and update the count in the dictionary\n    for char in str1_list:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the list and return the first non-repeated character\n    for char in str1_list:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    \n    return \"All characters are repeating\""
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n\n    return None # If all characters repeat at least once"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If all characters are repeating, it returns None.\n    \"\"\"\n    # Create an empty dictionary to store character frequencies\n    char_freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n    \n    # Loop through each character in the string again\n    for char in str1:\n        # If the character's frequency is 1, return it as the first non-repeating character\n        if char_freq[char] == 1:\n            return char\n    \n    # If all characters are repeating, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    # regex pattern to check if the given string starts and ends with the same character\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    \n    # check if the given string matches the pattern\n    match = re.match(pattern, string)\n    \n    # if the match is None, the string does not start and end with the same character\n    if not match:\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    if string[0]!= string[-1]:\n        return False\n    return True"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re  \n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 1:\n        return True\n    elif re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if len(string) < 2:\n        return True\n\n    # Check if string starts and ends with the same character\n    pattern = \"^[a-z]$|^([a-z]).*\\1$\"\n    result = re.match(pattern, string)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function finds the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    :param a: The first number\n    :param b: The second number\n    :param c: The third number\n    :return: The median of the three numbers\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        # Even number of elements, take the average of the middle two\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # Odd number of elements, take the middle one\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    median = (a + b + c) / 3\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    middle_index = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        return sorted_numbers[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2 - 1] + sorted_list[len(sorted_list)//2])/2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Returns the median of three numbers.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    if len(numbers) % 2 == 0:\n        # If there are an even number of numbers, take the average of the two middle numbers\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        # If there is an odd number of numbers, take the middle number\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median value.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        while num > 0:\n            sum += num % 10\n            num //= 10\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of digits of each number.\n    \"\"\"\n    total = 0\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        while num > 0:\n            total += num % 10\n            num //= 10\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert tuples to binary strings\n    bin_str1 = ''.join(format(i, '08b') for i in test_tup1)\n    bin_str2 = ''.join(format(i, '08b') for i in test_tup2)\n\n    # Perform bitwise xor operation on binary strings\n    result = [int(bin_str1[i]!= bin_str2[i]) for i in range(len(bin_str1))]\n\n    # Convert binary result back to tuple\n    result_tup = tuple(result)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over both tuples using a for loop\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation on the corresponding elements of both tuples\n        result.append(test_tup1[i] ^ test_tup2[i])\n        \n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    This function performs the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    \n    # check if the two tuples are of equal length\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n    else:\n        print(\"Error: Tuples are not of equal length\")\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have different lengths.\"\n    \n    # Perform the bitwise xor operation across the tuples\n    result_tup = tuple(i ^ j for i, j in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(t) for t in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    \n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for tup in test_list:\n        freq.add(tup)\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                key = tuple(sorted([test_list[i], test_list[j]]))\n                freq_dict[key] = freq_dict.get(key, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tuple in test_list:\n        if tuple not in freq_dict:\n            freq_dict[tuple] = 1\n        else:\n            freq_dict[tuple] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = set()\n    for elem in test_list:\n        freq.add(tuple(sorted(elem)))\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for i in test_list:\n        freq.add(tuple(i))\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (tuple(test_tup1[i][j] + test_tup2[i][j] for j in range(len(test_tup1[i]))),)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup = temp_tup + (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup = result_tup + (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index-wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[0])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp_tup = ()\n        for i in range(len(tup1)):\n            temp_tup += (tup1[i] + tup2[i],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup = ()\n        for j in range(len(test_tup1[i])):\n            sub_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (sub_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    This function performs index-wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        inner_tup = ()\n        for j in range(len(test_tup1[i])):\n            inner_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (inner_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i][0] + test_tup2[i][0],),)\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function finds the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum value.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function finds the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1: \n        if i == tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two parameters:\n    1. tuplex (a tuple): The tuple to search in.\n    2. tuple1 (a tuple): The tuple to search for.\n    \n    This function returns True if all elements in tuple1 are present in tuplex,\n    otherwise it returns False.\n    '''\n    for element in tuple1:\n        if element not in tuplex:\n            return False\n    return True"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes in two tuples as arguments.\n    The first tuple is the tuple to be searched and the second tuple is the tuple to be checked.\n    It returns True if the element exists within the first tuple and False otherwise.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two tuples as input and checks whether an element exists within the first tuple.\n    If the element exists, it returns the index of that element in the first tuple.\n    If the element does not exist, it returns -1.\n    '''\n    if type(tuplex)!= tuple or type(tuple1)!= tuple:\n        raise TypeError(\"Both inputs must be tuples.\")\n    if len(tuplex) < len(tuple1):\n        raise ValueError(\"The first tuple must be longer than the second tuple.\")\n\n    for i in range(len(tuple1)):\n        if tuple1[i] in tuplex:\n            return tuplex.index(tuple1[i])\n    return -1"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns True if the number is odd, otherwise False.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the number is odd and False if it is even.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(f\"{x} is even.\")\n    else: \n        print(f\"{x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even Parity\")\n    else:\n        print(\"Odd Parity\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    This function takes in a number as input and returns True if the parity of the number is odd, False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_list = list(str(n))\n    i = len(num_list) - 1\n    while i > 0 and num_list[i] <= num_list[i-1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(num_list) - 1\n    while j >= i and num_list[j] <= num_list[i-1]:\n        j -= 1\n    num_list[i-1], num_list[j] = num_list[j], num_list[i-1]\n    num_list[i:] = sorted(num_list[i:])\n    return int(''.join(num_list))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string to be able to manipulate its digits\n    n = str(n)\n    # initialize the variables to hold the indices of the digits that need to be swapped\n    i, j = 0, len(n) - 1\n    # initialize the flag variable to keep track of whether a swap has been made or not\n    swapped = False\n    # iterate through the digits of the number until a swap is made\n    while i < j:\n        # if the current digit is smaller than the next one, swap them and set the flag variable\n        if int(n[i]) < int(n[j]):\n            n = n[:i] + n[j] + n[i+1:j] + n[i] + n[j+1:]\n            swapped = True\n            break\n        # move to the next digit\n        i += 1\n        j -= 1\n    # if no swap was made, return -1 to indicate that the number is already the largest possible\n    if not swapped:\n        return -1\n    # convert the string back to an integer and return it as the next bigger number\n    return int(n)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert n to a string\n    n_str = str(n)\n    \n    # Initialize variables for the result and the index of the digit to swap\n    result = ''\n    swap_idx = -1\n    \n    # Iterate over each digit in the string\n    for i in range(len(n_str)):\n        # If the digit is greater than the previous digit, update the swap index\n        if i > 0 and int(n_str[i]) > int(n_str[i-1]):\n            swap_idx = i\n    \n    # If no swapping is needed, return None\n    if swap_idx == -1:\n        return None\n    \n    # Swap the digits at the swap index and the previous index\n    result = n_str[:swap_idx-1] + n_str[swap_idx-1:swap_idx+1][::-1] + n_str[swap_idx+1:]\n    \n    # Convert the result back to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i - 1] >= digits[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[len(digits) - 1:i - 1:-1]\n    return int(\"\".join([str(digit) for digit in digits]))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    if digits[-1] == 9:\n        digits[-1] = 0\n        digits.append(1)\n    else:\n        digits[-1] += 1\n    digits.sort()\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    digits = list(str(n))\n    \n    # Find the index of the rightmost non-9 digit\n    i = len(digits) - 1\n    while i >= 0 and digits[i] == '9':\n        i -= 1\n    \n    # If all digits are 9, return None\n    if i < 0:\n        return None\n    \n    # Increment the rightmost non-9 digit\n    digits[i] = str(int(digits[i]) + 1)\n    \n    # Remove the rightmost digit if it is now 10\n    while i < len(digits) - 1 and digits[-1] == '0':\n        digits.pop()\n        i += 1\n    \n    # Return the rearranged number as an integer\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the index of the largest digit to -1\n    largest_digit_index = -1\n    # Initialize the index of the second largest digit to -1\n    second_largest_digit_index = -1\n    # Initialize the result as a list of digits\n    result = []\n    # Loop through the digits in reverse order\n    for i in range(len(digits)-1, -1, -1):\n        # If the current digit is larger than the largest digit seen so far,\n        # update the largest digit and the index of the largest digit\n        if digits[i] > digits[largest_digit_index]:\n            largest_digit_index = i\n            result.append(digits[i])\n        # If the current digit is larger than the second largest digit seen so far,\n        # update the second largest digit and the index of the second largest digit\n        elif digits[i] > digits[second_largest_digit_index] and i!= largest_digit_index:\n            second_largest_digit_index = i\n    # If there is no second largest digit, return None\n    if second_largest_digit_index == -1:\n        return None\n    # Otherwise, swap the largest and second largest digits in the result\n    result[largest_digit_index], result[second_largest_digit_index] = \\\n        result[second_largest_digit_index], result[largest_digit_index]\n    # Convert the result back to a number and return it\n    return int(''.join(str(digit) for digit in result))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    n_str = str(n)\n    n_sorted = sorted(n_str, reverse=True)\n    n_int = int(''.join(n_sorted))\n    if n_int >= 2**31-1:\n        return None\n    return n_int"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Initialize variables to keep track of the largest digit and its index\n    largest_digit = digits[0]\n    largest_index = 0\n\n    # Find the largest digit and its index\n    for i in range(len(digits)):\n        if digits[i] > largest_digit:\n            largest_digit = digits[i]\n            largest_index = i\n\n    # Swap the largest digit with the last digit\n    digits[largest_index], digits[-1] = digits[-1], digits[largest_index]\n\n    # Sort the remaining digits in descending order\n    digits = sorted(digits[:-1], reverse=True)\n\n    # Combine the sorted digits with the swapped largest digit and return the result as an integer\n    return int(''.join([str(d) for d in digits + [largest_digit]]))\n"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    i = len(digits) - 1\n    \n    # Find the rightmost digit that is smaller than the digit next to it\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    \n    # If no such digit is found, the number is a maximum possible number\n    if i == 0:\n        return -1\n    \n    # Find the largest digit on the right side of the pivot digit\n    max_digit = digits[i-1]\n    j = i\n    while j < len(digits):\n        if digits[j] > max_digit:\n            max_digit = digits[j]\n        j += 1\n    \n    # Swap the pivot digit with the largest digit on the right side\n    digits[i-1], digits[j-1] = digits[j-1], digits[i-1]\n    \n    # Reverse the digits to get the next bigger number\n    digits = digits[:i] + digits[i:][::-1]\n    \n    return int(''.join(digits))"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1 + num2, num1, num2))\n    heapq.heapify(pairs)\n    result = []\n    for i in range(k):\n        if len(pairs) == 0:\n            break\n        result.append(heapq.heappop(pairs))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    result = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    \n    while heap:\n        result.append(heapq.heappop(heap)[1:])\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            if len(pairs) < k:\n                heapq.heappush(pairs, pair)\n            else:\n                smallest = pairs[0]\n                if pair[0] + pair[1] < smallest[0] + smallest[1]:\n                    heapq.heappushpop(pairs, pair)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heap = []\n\n    # Add all possible pairs to the heap\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n\n    # Extract k number of smallest pairs\n    for i in range(k):\n        if len(heap) == 0:\n            break\n        pair = heapq.heappop(heap)\n        result.append((pair[1], pair[2]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap to store the pairs with smallest sum of elements\n    min_heap = []\n\n    # iterate over the first array\n    for num in nums1:\n\n        # iterate over the second array\n        for num2 in nums2:\n\n            # calculate the sum of elements and add the pair to the heap\n            heapq.heappush(min_heap, (num + num2, num, num2))\n\n            # if the heap size is greater than k, remove the minimum element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # return the k smallest pairs\n    return [pair for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        for other_num in nums2:\n            heapq.heappush(pairs, (num + other_num, num, other_num))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return sorted(pairs)"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n    pairs = []\n    for i in range(k):\n        pairs.append(heapq.heappop(heap))\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(lst):\n    min_prod = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            prod = lst[i][0] * lst[j][1] * lst[i][1] * lst[j][0]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Returns the minimum product of two tuples in a given list of tuples.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for t in list1:\n        if isinstance(t, tuple) and len(t) == 2:\n            product = t[0] * t[1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for tup in list1:\n        for tup2 in list1:\n            if tup!= tup2:\n                product = tup[0] * tup2[0]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function returns the minimum value of the given list.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        min_val = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] < min_val:\n                min_val = lst[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the minimum value of the list.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    \n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:  # if the list is empty\n        return None  # return None\n    else:\n        min_val = listval[0]  # assume the first element is the minimum\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:  # if the current element is smaller than the minimum\n                min_val = listval[i]  # update the minimum value\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list as an input and returns the minimum value in the list.\n    \"\"\"\n    # initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # iterate over the list starting from the second element\n    for i in range(1, len(listval)):\n        # if the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    If the input list is empty, it returns None.\n    '''\n    if len(lst) == 0:\n        return None\n    \n    min_val = lst[0]\n    for val in lst:\n        if val < min_val:\n            min_val = val\n            \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(lst):\n    '''\n    Find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element of the list\n    min_val = lst[0]\n    \n    # Loop through the list and compare each element to the minimum value\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    words = word.split(\"_\")\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i]\n        else:\n            camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Convert snake case string to camel case string\n    return ''.join(word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and returns a camel case string.\n    '''\n    return ''.join(x.title() for x in re.split('[_ ]', word))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return re.sub(r'(_\\w)', lambda match: match.group(1)[1].upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    words = re.findall(r'[a-z]+', word)\n    return words[0].capitalize() + ''.join([word.title() for word in words[1:]])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    This function converts a snake case string to camel case string.\n    \"\"\"\n    return word.title().replace(\"_\", \"\")"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.split('_')).title().replace(' ', '')"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all the odd numbers from the list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as an input and returns a new list with all odd numbers removed.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Parameters:\n    l (list): The input list.\n\n    Returns:\n    list: The output list with odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Returns the nth element of a list of tuples\n    \"\"\"\n    return [tup[n-1] for tup in lst]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n\n    :param list1: A list of tuples.\n    :param n: An integer specifying the index of the element to be extracted.\n    :return: The nth element from the list of tuples.\n    '''\n\n    # Create a new list of tuples containing only the nth element from each tuple in the original list.\n    new_list = [(tup[n] if len(tup) > n else None) for tup in list1]\n\n    # Return the new list.\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extract the nth element from a list of tuples.\n\n    :param lst: a list of tuples\n    :param n: the index of the element to extract (starting at 1)\n    :return: the nth element of the list of tuples\n    \"\"\"\n    return lst[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][n]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element of each tuple in the list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n    '''\n    return [x[n-1] for x in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n])\n    return result"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return not set1.isdisjoint(set2)"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two lists as input and checks whether any value in list1 exists in list2 or not.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in the first list exists in the second list or not.\n    If there exists a value in the first list that exists in the second list, the function returns True. Otherwise, it returns False.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in the first sequence exists in the second sequence.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if any value in the first sequence exists in the second sequence, otherwise it returns False.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and checks whether any value in the first sequence exists in the second sequence or not.\n\n    Args:\n    list1: First sequence of values.\n    list2: Second sequence of values.\n\n    Returns:\n    True if any value in the first sequence exists in the second sequence, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    :param list1: the first sequence\n    :param list2: the second sequence\n    :return: True if there is an overlapping value, False otherwise\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (arr[0], arr[1]) # initialize max pair with the first two elements of the array\n    max_product = arr[0] * arr[1] # initialize max product with product of first two elements\n    \n    # iterate over the array and update the max pair and max product if a larger pair is found\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_pair = (arr[i], arr[j])\n                max_product = arr[i] * arr[j]\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in non-descending order\n    arr.sort()\n\n    # Find the highest possible product of two numbers\n    max_product = arr[0] * arr[1]\n\n    # Find the highest product of two numbers\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function finds a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    second_max = float('-inf')\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            curr_product = arr[i] * arr[j]\n            if curr_product > max_product:\n                second_max = max_product\n                max_product = curr_product\n            elif curr_product > second_max:\n                second_max = curr_product\n    \n    return (max_product, second_max)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (arr[0], arr[1])\n    if arr[0] * arr[1] > arr[1] * arr[2]:\n        max_pair = (arr[0], arr[1])\n    elif arr[0] * arr[1] > arr[2] * arr[1]:\n        max_pair = (arr[0], arr[2])\n    else:\n        max_pair = (arr[1], arr[2])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    # Initialize the maximum product to the smallest possible integer\n    max_product = float('-inf')\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        # Iterate over the array again\n        for j in range(i+1, len(arr)):\n            # Check if the product of the two integers is greater than the current maximum product\n            if arr[i] * arr[j] > max_product:\n                # If it is, update the maximum product\n                max_product = arr[i] * arr[j]\n                \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_pair = arr[0], arr[1]\n    min_pair = arr[0], arr[1]\n    for i in range(2, n):\n        if arr[i] > max_pair[0] * max_pair[1]:\n            max_pair = (arr[i], max_pair[1])\n        elif arr[i] > max_pair[1] * max_pair[0]:\n            max_pair = (max_pair[0], arr[i])\n        if arr[i] < min_pair[0] * min_pair[1]:\n            min_pair = (arr[i], min_pair[1])\n        elif arr[i] < min_pair[1] * min_pair[0]:\n            min_pair = (min_pair[0], arr[i])\n    return max(max_pair[0] * max_pair[1], min_pair[0] * min_pair[1])\n"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[1]\n    if max1 < max2:\n        max1, max2 = max2, max1\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as an input and returns a new list of tuples,\n    where each tuple contains the common first element in the original list of tuples.\n    '''\n    result = []\n    for i in range(len(Input)):\n        if i == 0:\n            result.append(Input[i])\n        elif Input[i][0] == Input[i-1][0]:\n            continue\n        else:\n            result.append(Input[i])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_element = Input[i][0]\n                break\n        if common_element:\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = set()\n    for tup in Input:\n        common_first_element.add(tup[0])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for tup in Input:\n        if tup[0] not in result:\n            result.append(tup[0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = Input[0][0]\n    for i in Input:\n        if i[0]!= common_element:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Get the first element of each tuple in the list\n    first_elements = [t[0] for t in Input]\n    \n    # Find the common first element in the list of first elements\n    common_element = max(set(first_elements), key=first_elements.count)\n    \n    # Create a new list of tuples containing only tuples with the common first element\n    result = [t for t in Input if t[0] == common_element]\n    \n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    This function finds the common first element in a given list of tuples.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element == None:\n            common_element = tup[0]\n        elif tup[0]!= common_element:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary containing \n    tuples with common first element in the list.\n    '''\n    result = {}\n    for i in Input:\n        key = i[0]\n        if key in result:\n            result[key].append(i)\n        else:\n            result[key] = [i]\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for i in Input:\n        if i[0] not in result:\n            result[i[0]] = []\n        result[i[0]].append(i[1])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        else:\n            if tup[0]!= common_element:\n                return None\n    return common_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an input and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_max(lst):\n    '''\n    This function will return the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len)) \n    return [i for i in lst if len(i) == max_len]\n"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(list(map(lambda x: round(x, 1), list1)))\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded = round(num)\n        total_sum += rounded\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(list1)\n    length = len(list1)\n    rounded_list = [round(num, 2) for num in list1]\n    print(sum(rounded_list) * length)"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, 2*n+2, 2):\n        # add cube of i to sum\n        sum += i**3\n    \n    # return the sum of cubes\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, 2*n, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #initialize sum to zero\n    sum = 0\n    \n    #iterate through even natural numbers\n    for i in range(2, 2*n+1, 2):\n        #cube each number and add to sum\n        sum += i**3\n    \n    #return sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, 2*n+1, 2): \n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n*2, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes in the value of n (an integer) and returns the cube sum of first n even natural numbers.\n    '''\n    even_nums = [i for i in range(2, n+1, 2)] # Generates a list of first n even natural numbers\n    cube_sum = sum([i**3 for i in even_nums]) # Computes the cube sum of the even_nums list\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\",\"):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    This function concatenates each element of tuple by the delimiter.\n\n    Parameters:\n        test_tup (tuple): A tuple containing elements to concatenate.\n        delimiter (str): The delimiter to use when concatenating the elements.\n\n    Returns:\n        result (str): The concatenated string.\n    \"\"\"\n\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n\n    Args:\n        test_tup (tuple): A tuple of strings.\n        delimiter (str): A delimiter string.\n\n    Returns:\n        str: A string with concatenated elements.\n    \"\"\"\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=''):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-len(delimiter)] if len(delimiter) > 0 else result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple as input and concatenates each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1] # remove the last delimiter"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize sum of cubes to zero\n    sum_cubes = 0\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # add cube of the number to sum of cubes\n        sum_cubes += i**3\n    # calculate and return average of cubes\n    return sum_cubes / n\n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i ** 3\n    \n    return total_sum / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n*n)"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg\n\nprint(find_Average_Of_Cube(5)) # Output: 12.5"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = -1  # set default rear index as -1\n    rear_tuple = ()  # create empty tuple to store the rear index elements\n    \n    for string in test_tuple:\n        rear_index = len(string) - 1  # get the last index of the string\n        rear_tuple += (string[rear_index],)  # add the rear index element to the tuple\n        \n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for word in test_tuple:\n        rear_tuple += (word[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for string in test_tuple:\n        rear_char = string[-1]\n        result_tuple += (rear_char,)\n    return result_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes a list and an element as inputs and returns the number of sublists \n    containing the given element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            for j in range(len(list1[i])):\n                if list1[i][j] == x:\n                    count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_nums.append(num)\n    return filtered_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes in a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = date_pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format. Please provide a date in yyyy-mm-dd format\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'\\d{4}-\\d{2}-\\d{2}$', dt):\n        return dt[8:]+'-'+dt[5:7]+'-'+dt[:4]\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date string to a datetime object\n    dt_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n    # Convert the datetime object to a new date string in dd-mm-yyyy format\n    new_dt = dt_obj.strftime('%d-%m-%Y')\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.match(pattern, dt)\n    if result:\n        return '{}-{}-{}'.format(result.group(3), result.group(2), result.group(1))\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n        match = pattern.match(dt)\n        if match:\n            year = match.group(1)\n            month = match.group(2)\n            day = match.group(3)\n            new_date = f\"{day}-{month}-{year}\"\n            return new_date\n        else:\n            return \"Invalid date format\"\n    except:\n        return \"Invalid input\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date = re.search(pattern, dt).groups()\n    return '{}-{}-{}'.format(date[2], date[1], date[0])"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        date_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n        return date_obj.strftime('%d-%m-%Y')\n    except ValueError:\n        print('Incorrect date format, should be yyyy-mm-dd')\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Check if the date is in the correct format\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        # Split the date into year, month, and day components\n        year, month, day = map(int, dt.split('-'))\n        # Create a new date string in dd-mm-yyyy format\n        new_date = '{:02d}-{:02d}-{}'.format(day, month, year)\n        return new_date\n    else:\n        return 'Invalid date format. Use yyyy-mm-dd.'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.search(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sort the given array using shell sort algorithm.\n\n    :param my_list: A list of integers to be sorted.\n    :return: A sorted list of integers.\n    \"\"\"\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Get the length of the array\n    n = len(my_list)\n\n    # Calculate the gap value\n    gap = n // 2\n\n    # Perform the Shell Sort\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sort the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Finding the number of increments\n    n = len(my_list)\n    # Finding the value of h (initial value is 1)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    \n    # Sorting the array by using Shell Sort\n    while h >= 1:\n        for i in range(h, n):\n            # Finding the element to be inserted\n            temp = my_list[i]\n            # Inserting the element at its correct position\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        # Decreasing the value of h until it becomes 1\n        h = (h-1)//3\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(i & j for i, j in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(tuple(map(lambda x,y: x&y, test_tup1[i], test_tup2[i])))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]), )\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    \n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola given its coefficients.\n    \"\"\"\n    if b**2 - 4*a*c < 0:\n        # The parabola has complex conjugate roots\n        raise ValueError(\"The parabola has complex conjugate roots\")\n    elif b**2 - 4*a*c == 0:\n        # The parabola has a repeated root at x=0\n        return 0\n    else:\n        # The parabola has distinct real roots\n        x1 = (-b - sqrt(b**2 - 4*a*c)) / (2*a)\n        x2 = (-b + sqrt(b**2 - 4*a*c)) / (2*a)\n        return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta > 0:\n        x1 = (-b + math.sqrt(delta)) / (2 * a)\n        x2 = (-b - math.sqrt(delta)) / (2 * a)\n        print(f\"The directrix of the parabola is x = {x1} or x = {x2}\")\n    elif delta == 0:\n        x = -b / (2 * a)\n        print(f\"The directrix of the parabola is x = {x}\")\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a!= 0:\n        x = -b/a\n        return x\n    elif b!= 0:\n        x = -c/b\n        return x\n    else:\n        return \"No directrix exists for a vertical parabola.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola given its coefficients.\n\n    Args:\n    a (float): The coefficient of the quadratic term.\n    b (float): The coefficient of the linear term.\n    c (float): The constant term.\n\n    Returns:\n    float: The x-coordinate of the directrix.\n    \"\"\"\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The directrix lies between {x1:.2f} and {x2:.2f}.\"\n\n    # If the discriminant is zero, the directrix must be a single point\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return f\"The directrix is at {x:.2f}.\"\n\n    # If the discriminant is less than zero, the parabola has no directrix\n    else:\n        return \"The parabola has no directrix.\"\n"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # calculate discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if there is a real solution\n    if discriminant > 0:\n        # calculate the two solutions\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        # return the two solutions as a tuple\n        return (x1, x2)\n    elif discriminant == 0:\n        # calculate the one solution\n        x = -b / (2*a)\n        # return the one solution as a tuple\n        return (x,)\n    else:\n        # return None if there is no real solution\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is greater than zero\n    if discriminant > 0:\n        # calculate the x-coordinate of the directrix\n        x_directrix = (-b + discriminant**0.5)/(2*a)\n        \n        # return the x-coordinate of the directrix\n        return x_directrix\n    \n    else:\n        # if the discriminant is less than or equal to zero, then the parabola has no directrix\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    return x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola.\n\n    :param a: float, coefficient of the quadratic term.\n    :param b: float, coefficient of the linear term.\n    :param c: float, constant term.\n\n    :return: float, the x-coordinate of the directrix.\n    \"\"\"\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        # Calculate the two roots of the equation\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n\n        # Return the average of the roots as the directrix\n        return (root1 + root2)/2\n\n    # If the discriminant is zero, the directrix is a single point\n    elif discriminant == 0:\n        return -b/(2*a)\n\n    # If the discriminant is less than zero, there are no real roots\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    d = b**2 - 4*a*c  # discriminant\n    if d == 0:\n        x = -b / (2*a)\n        return x\n    elif d > 0:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        return x1, x2\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a (float): coefficient of the quadratic term\n    b (float): coefficient of the linear term\n    c (float): constant term\n    \n    Returns:\n    float: the value of the directrix\n    \"\"\"\n\n    # Calculate the discriminant\n    delta = b ** 2 - 4 * a * c\n\n    # Check if the discriminant is greater than zero\n    if delta > 0:\n        # Calculate the roots of the quadratic equation\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n\n        # Check which root is positive\n        if x1 >= 0:\n            return x1\n        else:\n            return x2\n\n    # If the discriminant is zero, there is only one root\n    elif delta == 0:\n        return -b / (2 * a)\n\n    # If the discriminant is less than zero, there are no real roots\n    else:\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Returns True if there is at least one common element between two lists.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    return len(set(list1) & set(list2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Returns True if the two lists have at least one common element, False otherwise.\n    \"\"\"\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    if set(list1).intersection(set(list2)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the median\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the median length\n    median_length = 2 * area / (base1 + base2)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes in three parameters:\n    base1: the length of one of the trapezium's bases\n    base2: the length of the other trapezium's base\n    height: the height of the trapezium\n    \n    It returns the median length of the trapezium.\n    '''\n    # Find the half-length of the two bases\n    half_base = (base1 + base2) / 2\n    \n    # Calculate the median length of the trapezium\n    median = half_base * height\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2) / 2) * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = ((base1 + base2) / 2) * height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height\n\nprint(median_trapezium(3, 4, 5)) # Output: 11.0"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Find the median length of a trapezium with bases base1 and base2 and height height.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments: base1, base2, and height of the trapezium.\n    It returns the median length of the trapezium.\n    '''\n    median_length = (base1 + base2) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes in the base1, base2, and height of a trapezium and returns its median length.\n    \"\"\"\n    median_length = (base1 + base2) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2) / 2 + height / 2\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            print(f\"{number} is greater than {i}.\")\n            return True\n    print(f\"{number} is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and returns True if the number is greater than all the elements of the array, otherwise, it returns False.\n    '''\n    for i in arr:\n        if i > number:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[b]+$\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\sb+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+' # matches one or more b's after an a\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'aababb'\nprint(text_match_one(text)) # True\n\ntext = 'aab'\nprint(text_match_one(text)) # False"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    # To find the last digit of a number, we need to divide the number by 10 and keep track of the remainder\n    # until the quotient becomes 0.\n    while n > 0:\n        n = n // 10\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as an input and returns the last digit of the number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes in a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    if n < 0:\n        n = -n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_digit(n):\n    '''\n    Returns the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Find the remainder when n is divided by 10\n    remainder = n % 10\n    return remainder"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of n.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function returns a list of negative numbers from a given list of integers.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a new list containing only the negative numbers from the original list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns a new list with all the negative numbers.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list with only the negative numbers from the original list.\n    \"\"\"\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and removes all the odd characters from it.\n    '''\n    result = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes odd characters from a string.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as an argument and returns a new string with all odd characters removed.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \n    Args:\n    str1 (str): The input string.\n    \n    Returns:\n    str: The output string with odd characters removed.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and removes all the odd characters from it.\n    '''\n    # initialize an empty string to store the modified string\n    new_str = ''\n    \n    # iterate over each character in the input string\n    for char in str1:\n        # if the character is even, append it to the new string\n        if char % 2 == 0:\n            new_str += char\n    \n    # return the modified string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes the odd characters from a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes all the odd characters from the given string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and test_list[j] < test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] > test_list[j][1] and test_list[i][1] < test_list[j][0]) \\\n            or (test_list[i][0] < test_list[j][1] and test_list[i][1] > test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j] and (test_list[i], test_list[j]) in zip(test_list[:i], test_list[i+1:j]):\n                count += 1\n            elif test_list[i] < test_list[j] and (test_list[j], test_list[i]) in zip(test_list[i+1:j], test_list[j+1:]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] > test_list[j] and (test_list[j], test_list[i]) in test_list[i+1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] > test_list[j][1] and test_list[i][1] < test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert all elements to strings\n    L = [str(i) for i in L]\n    # Join the list of strings into a single string\n    result = int(''.join(L))\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Joins a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    if not adverbs:\n        return \"No adverb found!\"\n\n    # Find the position of the first adverb in the text\n    first_adverb = adverbs[0]\n    index = text.index(first_adverb)\n    return f\"The first adverb '{first_adverb}' starts at index {index} in the text.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns the position and text of the first adverb in the sentence.\n    '''\n    adverb_pattern = r'\\b(very|extremely|quite|quite a|rather|fairly|almost|nearly|really|strongly|highly|generally|so|very much)\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        return f\"Adverb: {match.group()}, Position: {match.start()}\"\n    else:\n        return \"Adverb not found in the sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b[a-zA-Z]+ly\\b')\n    adverb_match = adverb_pattern.search(text)\n    \n    if adverb_match:\n        adverb_start = adverb_match.start()\n        adverb_end = adverb_match.end()\n        adverb = adverb_match.group()\n        print(f\"Adverb found: {adverb}\")\n        print(f\"Adverb position: ({adverb_start}, {adverb_end})\")\n    else:\n        print(\"No adverb found.\")"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.start(), match.end()"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|really|quite|extremely|insanely|amazingly|fantastically|incredibly|utterly|completely|totally|honestly|finally|positively|absolutely|undoubtedly|unquestionably|certainly|perfectly|amazingly|awfully|terribly|incredibly|quite|particularly|surprisingly|seriously|seriously)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|really|quite|rather|extremely|really|incredibly|literally|actually)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r\"\\b(very|extremely|quite|really|rather|practically|really|generally|fairly|closely|exactly|almost|relatively)\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression for adverb\n    adverb = re.compile(r'\\b(very|really|extremely|really|quite|rather|fairly|approximately|generally|completely|essentially|totally|fully|partially|really|quite|surprisingly|terribly|practically|mostly|almost|fairly|relatively|approximately|probably|completely|constantly|only|seriously|deliberately|rarely|slightly|mainly|truly|virtually|ultimately|positively|naturally|obviously|surprisingly|perfectly|quite|really|usually|frequently|occasionally|usually|generally|relatively|currently|increasingly|probably|recently|daily|weekly|monthly|annually|currently|originally|initially|mostly|ultimately|always|never|sometimes|almost|rarely|always|usually|never|ever|sometimes|often|sometimes|seldom|sometimes|frequently|often|frequently|occasionally|sometimes|seldom|seldomly|extremely|quite|rather|fairly|approximately|generally|completely|essentially|totally|fully|partially|really|quite|surprisingly|terribly|practically|mostly|almost|fairly|relatively|approximately|probably|completely|constantly|only|seriously|deliberately|rarely|slightly|mainly|truly|virtually|ultimately|positively|naturally|obviously|surprisingly|perfectly|quite|really|usually|frequently|occasionally|usually|generally|relatively|currently|increasingly|probably|recently|daily|weekly|monthly|annually|currently|originally|initially|mostly|ultimately|always|never|sometimes|almost|rarely|always|usually|never|ever|sometimes|often|sometimes|seldom|sometimes|frequently|often|frequently|occasionally|sometimes|seldom|seldomly)\\b')\n    \n    # Find all adverbs in the text\n    adverbs = adverb.findall(text)\n    \n    # If there are no adverbs, return None\n    if not adverbs:\n        return None\n    \n    # Find the first adverb and its position in the text\n    first_adverb = adverbs[0]\n    first_adverb_position = text.find(first_adverb)\n    \n    # Return a tuple of the first adverb and its position\n    return (first_adverb, first_adverb_position)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return f\"Adverb: {match.group()}\\nPosition: {match.start()}\"\n    else:\n        return \"Adverb not found.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb found: '{match.group()}' at position {match.start()}\")"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of the cube as input and returns the surface area of the cube.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a size of a cube and returns its surface area.\n    '''\n    area = 6 * (l**2)\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a single parameter 'l' which represents the length of the side of the cube.\n    It returns the surface area of the cube.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes in the length of a cube and returns its surface area.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_pos = 0\n    for num in nums:\n        if num > 0:\n            count_pos += 1\n    return count_pos / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / total"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i', [0] * len(nums))\n    count = 0\n    for num in nums:\n        if num > 0:\n            positive_nums[count] = num\n            count += 1\n    positive_ratio = count / len(nums)\n    return positive_ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    return count_positive / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for num in list1:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    If there is no negative number in the list, it returns None.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function finds the largest negative number from a given list.\n    \"\"\"\n    max_neg = 0\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    if max_neg == 0:\n        return \"There are no negative numbers in the list\"\n    else:\n        return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < largest and num < 0:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = None\n    \n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    \n    if max_neg is None:\n        print(\"No negative numbers found in the list.\")\n    else:\n        print(\"The largest negative number in the list is:\", max_neg)"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tpl in test_list:\n        result_tpl = tuple(tpl[K:])\n        result_list.append(result_tpl)\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[k:] for k in range(K))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0], x[1], x[2][:K], x[3][:K]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a[0], a[1], a[2][:K], a[3][:K]) for a in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0]+K, x[1]-K) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[K+1:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[K+1:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[i] for i in range(K)))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[K:])\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple where the elements at the same index in the input tuples have been multiplied.\n    '''\n\n    result_tup = ()\n\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in a tuple and a list as input, and returns a dictionary containing the count of each element in the list that appears in the tuple.\n    '''\n    count_dict = Counter(lst)\n    return {k: count_dict[k] for k in count_dict if k in tup}"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for element in tup:\n        if element in count_dict:\n            result.append(count_dict[element])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for elem in tup:\n        if elem in count:\n            result[elem] = count[elem]\n        else:\n            result[elem] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    return tuple((counter[x], x) for x in tup)"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    result = []\n    for i in tup: \n        if i in counter: \n            result.append(counter[i])\n        else: \n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    for item in tup:\n        if item in cnt:\n            print(f\"{item} occurs {cnt[item]} times in the tuple and list.\")\n        else:\n            print(f\"{item} does not occur in the list.\")"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    for i in tup:\n        if i in c:\n            print(f\"{i}: {c[i]}\")\n        else:\n            print(f\"{i}: 0\")"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for i in tup:\n        if i in count:\n            result[i] = count[i]\n        else:\n            result[i] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list and returns a dictionary with the counts of occurrence of all the elements in the list in the tuple.\n    '''\n    count = {}\n    for item in lst:\n        count[item] = tup.count(item)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result = []\n    for element in lst:\n        if element in count_dict:\n            result.append((element, count_dict[element]))\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list containing the cubes of individual elements in the input list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list with the cubes of individual elements in the input list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize sum\n    p_sum = 0\n    \n    # loop to calculate sum\n    for i in range(1, n+1):\n        p_sum += i**i\n    \n    return p_sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return (2**(n-1) + 1)\n\nprint(cal_sum(1))\nprint(cal_sum(2))\nprint(cal_sum(5))"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of perrin numbers.\n    '''\n    p = [2, 3] # initialize the perrin numbers\n    for i in range(4, n+1): \n        p.append(p[i-1] + p[i-4]) # calculate the next perrin number\n    return sum(p) # return the sum of all perrin numbers"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initializing variables\n    sum = 0\n    p = 1\n    \n    # Loop to calculate sum of perrin numbers\n    for i in range(n):\n        sum += p\n        p = p * 2 - 1\n        \n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    This function calculates the sum of Perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\nprint(cal_sum(10)) # prints 55"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i * i * i - i) // 3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(1/i)\n    return sum(perrin_numbers)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of perrin numbers up to\", n, \"is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    This function takes a positive integer n as input and returns the sum of Perrin numbers.\n    Perrin number is a positive integer such that the sum of its digits is equal to its number itself.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        temp = i\n        while temp > 0:\n            digit = temp % 10\n            perrin_sum += digit\n            temp //= 10\n        if perrin_sum == i:\n            return perrin_sum\n        perrin_sum = 0\n    return \"No Perrin numbers found in the given range.\"\n\nprint(cal_sum(100))  # Output: 572"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin(i)\n    return sum\n\ndef perrin(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return perrin(n-1) + 2*perrin(n-2)"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    :param lst: A list of string values.\n    :param size: An integer representing the size of the strings to extract.\n    :return: A list of strings of length `size`.\n    \"\"\"\n    result = []\n    for i in range(len(lst) // size):\n        result.append(lst[i * size : (i + 1) * size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of substrings of the given size.\n    If the size is greater than the length of any string in the list, the function returns an empty list.\n    '''\n    result_list = []\n    for s in str_list:\n        if size <= len(s):\n            result_list.append(s[:size])\n    return result_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(l[i:i+str])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    This function takes a list of strings and a specified size and returns a new list of strings containing\n    specified size of strings from the given list.\n    \"\"\"\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Iterate through each string in the given list\n    for s in l:\n        # Check if the length of the current string is equal to the specified size\n        if len(s) == str:\n            # If it is, append it to the extracted_strings list\n            extracted_strings.append(s)\n\n    # Return the extracted_strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n\n    Parameters:\n        str_list (list): A list of string values.\n        size (int): The size of the strings to be extracted.\n\n    Returns:\n        A list of strings containing the specified size of characters.\n    \"\"\"\n    extracted_strings = []\n    for s in str_list:\n        if len(s) == size:\n            extracted_strings.append(s)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(0, len(l), str):\n        output.append(l[i:i+str])\n    return output"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(lst, n):\n    '''\n    This function takes a list of strings and an integer n as input.\n    It returns a list of n strings extracted from the input list.\n    '''\n    result = []\n    if len(lst) < n:\n        return lst\n    for i in range(n):\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, n):\n    \"\"\"\n    This function extracts n-sized strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == n:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Removing all whitespaces from the string using regex\n    text2 = re.sub(r\"\\s+\", \"\", text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r\"\\s+\", \"\", text)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regex\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    This function calculates the loss amount on a sale.\n    If the given sale amount is greater than the actual cost, \n    then the function calculates the loss amount as follows:\n    Loss amount = sale amount - actual cost\n    \n    If the sale amount is less than or equal to the actual cost, \n    then the function returns 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes actual cost and sale amount as input and returns loss amount if there is a loss else returns 0.\n    '''\n    loss = actual_cost - sale_amount\n    \n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two parameters, actual_cost and sale_amount and returns the loss amount if the sale has a loss, otherwise it returns 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    This function calculates the loss amount on a sale if the given sale amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of all even factors of the number.\n    '''\n    sum_of_factors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n            if n//i!= i:\n                if (n//i) % 2 == 0:\n                    sum_of_factors += n//i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number n as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n%i == 0 and i%2 == 0 : \n            sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    even_factors = [x for x in factors if x % 2 == 0]\n    sum_of_factors = sum(even_factors)\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            if i%2 == 0 : \n                sum += i \n            if n//i!= i : \n                if (n//i)%2 == 0 : \n                    sum += n//i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number as input and returns the sum of even factors of that number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes in a number as input and returns the sum of even factors of that number.\n    \"\"\"\n    # Initialize a variable to store the sum of factors\n    sum_of_factors = 0\n    \n    # Find the factors of the number using the range function\n    factors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    \n    # Iterate through the factors and add the even ones to the sum of factors\n    for factor in factors:\n        if factor % 2 == 0:\n            sum_of_factors += factor\n            \n    # Return the sum of factors\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of even factors of n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' using regular expressions.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    # Use regular expressions to match words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes in a string as an argument and returns True if a word in the string contains the letter 'z', else returns False.\n    '''\n    # Use regular expression to match words containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n\n    # Check if a match is found\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\bz\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Checks if the given month number has 31 days.\n\n    :param monthnum: The month number to check (1-12)\n    :return: True if the month has 31 days, False otherwise.\n    \"\"\"\n    return monthnum in [4, 6, 9, 11] or (monthnum == 2 and (2021 - 2020) % 4 == 0)"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in (4, 6, 9, 11) or (monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))):\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 == 2:\n        return True\n    else:\n        return \"Invalid month number\"\n\nprint(check_monthnumb_number(1)) # True\nprint(check_monthnumb_number(2)) # True\nprint(check_monthnumb_number(3)) # True\nprint(check_monthnumb_number(4)) # False\nprint(check_monthnumb_number(5)) # True\nprint(check_monthnumb_number(6)) # False\nprint(check_monthnumb_number(7)) # True\nprint(check_monthnumb_number(8)) # True\nprint(check_monthnumb_number(9)) # False\nprint(check_monthnumb_number(10)) # True\nprint(check_monthnumb_number(11)) # False\nprint(check_monthnumb_number(12)) # True\nprint(check_monthnumb_number(13)) # \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month contains 31 days and False if it does not.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether a given month number contains 31 days or not.\n    :param monthnum: The month number to check.\n    :return: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return \"The month has 30 days.\"\n    elif monthnum == 2:\n        return \"The month has 28 or 29 days, depending on the year.\"\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return \"The month has 31 days.\"\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print(f\"{monthnum2} contains 31 days\")\n    else:\n        print(f\"{monthnum2} does not contain 31 days\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11] or (monthnum == 2 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0)):\n        print(\"30 days\")\n    else:\n        print(\"31 days\")"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    This function takes a list of string values and returns a new list with each string in the original list reversed.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_lst = sublist\n            min_len = len(sublist)\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    This function finds the sublist with minimum length from the given list.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n            \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min(lst):\n    '''\n    Returns the sublist having minimum length in a given list.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    for sub_lst in lst:\n        if len(sub_lst) == min_len:\n            return sub_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_length = len(lst[0])  # initialize min_length with length of first sublist\n    min_lst = lst[0]  # initialize min_lst with first sublist\n    \n    # iterate over all sublists in lst\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:  # if length of current sublist is less than min_length\n            min_length = len(lst[i])  # update min_length\n            min_lst = lst[i]  # update min_lst\n    \n    return min_lst  # return the sublist with minimum length"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min(lst):\n    '''\n    Find the sublist with the minimum length in the given list.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min(lst):\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_lst = lst\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    Calculates the area of a rectangle.\n    :param length: The length of the rectangle.\n    :param width: The width of the rectangle.\n    :return: The area of the rectangle.\n    \"\"\"\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as arguments and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and width of a rectangle as inputs,\n    and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes two arguments length and breadth and returns the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as arguments and returns its area.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and width of a rectangle as arguments and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # find all uppercase substrings using regex\n    uppercase_subs = re.findall(r'[A-Z][^A-Z]*', str1)\n\n    # replace uppercase substrings with empty string\n    for uppercase_sub in uppercase_subs:\n        str1 = str1.replace(uppercase_sub, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Find all uppercase substrings using a regular expression\n    matches = re.findall(r'[A-Z]+', str1)\n\n    # Remove all occurrences of uppercase substrings from the original string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    # Return the updated string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]')\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Loop through the list of uppercase substrings and replace them with spaces\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring,'')\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regex to match all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    # Create a set to remove duplicates\n    uppercase_set = set(uppercase_substrings)\n    # Remove all uppercase substrings from the original string\n    for substring in uppercase_set:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from the given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # use regular expression to find all uppercase substrings\n    uppercase_regex = re.compile('[A-Z]+')\n    uppercase_substrings = uppercase_regex.findall(str1)\n    \n    # remove the uppercase substrings from the original string\n    for substr in uppercase_substrings:\n        str1 = str1.replace(substr, '')\n    \n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract(lst):\n    '''\n    This function takes a list as input and returns a new list with only the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the input list.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    \n    # Loop through each character in the string\n    for char in str:\n        # If the character is upper case, increment the count\n        if char.isupper():\n            count += 1\n            \n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(s):\n    \"\"\"\n    Count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    for i in range(len(list1)+1):\n        for j in itertools.combinations(list1, i):\n            comb.append(j)\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result += [list(elem) for elem in itertools.combinations(list1, i)]\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    results = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            results.append((list1[i], list1[j]))\n    return results"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    combos = []\n    for i in range(1, len(lst) + 1):\n        for combo in itertools.combinations(lst, i):\n            combos.append(combo)\n    return combos"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            comb_list.append([list1[i], list1[j]])\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    '''\n    Returns a list of all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(lst) + 1):\n        for combo in itertools.combinations(lst, i):\n            result.append(combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in combinations(list1, i):\n            result.append(j)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    combs = []\n    for i in range(len(list1)+1):\n        combs += list(combinations(list1, i))\n    return combs"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    max_product_left = arr[0]\n    max_product_right = arr[n-1]\n    for i in range(1, n):\n        max_product_left = max(max_product_left * arr[i], arr[i])\n        max_product_right = max(max_product_right * arr[n-i-1], arr[n-i-1])\n        max_product = max(max_product, max_product_left, max_product_right)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    # Initialize variables\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Update the current product\n        current_product = max(arr[i], current_product * arr[i])\n        # Update the maximum product\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        curr_product *= num\n        if curr_product > max_product:\n            max_product = curr_product\n        if curr_product < 0:\n            curr_product = 1\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_product_ending_here = 1\n    for num in arr:\n        max_product_ending_here *= num\n        max_product = max(max_product, max_product_ending_here)\n        max_product_ending_here = max(1, max_product_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            temp = curr_product\n            curr_product = max(curr_product * arr[i], arr[i])\n            max_product = max(max_product, curr_product)\n        else:\n            curr_product *= arr[i]\n            max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Update max_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        \n        # Update min_ending_here\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        \n        # Update max_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    curr_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            curr_product = max(arr[i], curr_product * arr[i])\n        else:\n            curr_product *= arr[i]\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function checks if all the values of a dictionary are the same.\n    '''\n    value_list = list(dictionary.values())\n    if len(set(value_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    return all(value == values[0] for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(d, n):\n    '''\n    This function takes a dictionary as input and a number n as a threshold value.\n    It checks if all the values in the dictionary are the same or not.\n    If all the values are the same, then it returns True else False.\n    '''\n    for i in d.values():\n        if i!= d.values()[0]:\n            return False\n    if len(d.values()) >= n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for i in range(n):\n        if i == 0:\n            value = dict[i]\n        elif dict[i]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \"\"\"\n    # Get the first value from the dictionary\n    first_value = next(iter(d.values()))\n    # Check if all values in the dictionary are the same\n    return all(value == first_value for value in d.values())"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \n    Args:\n    - d: A dictionary\n    - n: The value to compare to\n    \n    Returns:\n    - True if all values are the same, False otherwise\n    \"\"\"\n    values = list(d.values())\n    return all(values[0] == val for val in values)"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if dict.values()[i]!= dict.values()[j]:\n                return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(d):\n    \"\"\"\n    Drop empty items from a dictionary.\n    \"\"\"\n    return {k: v for k, v in d.items() if v is not None and v!= []}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1], arr[0]*arr[1])\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        min_ending_here = arr[0]\n        min_so_far = arr[0]\n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n            min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n            min_so_far = min(min_so_far, min_ending_here)\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize variables\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # Iterate through the array\n    for i in range(1, n):\n        # Calculate the maximum and minimum products ending at i\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n\n        # Update max_product and min_product\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product of increasing subsequence of an array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None\n\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # Initialize the maximum and minimum values\n        max_val = arr[0]\n        min_val = arr[0]\n        # Initialize the maximum product\n        max_product = arr[0]\n        # Traverse the array and update the maximum and minimum values and maximum product\n        for i in range(1, n):\n            if arr[i] > max_val:\n                max_val = arr[i]\n                max_product = max(max_product, arr[i])\n            elif arr[i] < min_val:\n                min_val = arr[i]\n                max_product = max(max_product, arr[i] * (max_val))\n            else:\n                max_product = max(max_product, arr[i] * (max_val))\n        return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0]*arr[1], arr[0], arr[1])\n    else:\n        max_so_far = arr[0]\n        min_so_far = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        \n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here*arr[i])\n            min_ending_here = min(arr[i], min_ending_here*arr[i])\n            \n            max_so_far = max(max_so_far, max_ending_here)\n            min_so_far = min(min_so_far, min_ending_here)\n            \n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        min_ending_here = arr[0]\n        min_so_far = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_ending_here * arr[i]:\n                max_ending_here = arr[i]\n            else:\n                max_ending_here = max_ending_here * arr[i]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            if arr[i] < min_ending_here * arr[i]:\n                min_ending_here = arr[i]\n            else:\n                min_ending_here = min_ending_here * arr[i]\n            if min_ending_here < min_so_far:\n                min_so_far = min_ending_here\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return None\n    if arr[0] < arr[1]:\n        max_ending_here = arr[0]\n        min_ending_here = arr[1]\n    else:\n        max_ending_here = arr[1]\n        min_ending_here = arr[0]\n    for i in range(2, n):\n        if arr[i] < max_ending_here * arr[i]:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(min_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n    return max_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    res = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            res = max_product\n        elif arr[i] < min_product:\n            min_product = arr[i]\n            res = arr[i]\n        else:\n            res = arr[i]\n    return res"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_product = float('-inf')\n    curr_product = 1\n    \n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        max_product = max(max_product, curr_product)\n        curr_product = max(curr_product, 1)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)-1):\n        sum_tup += (test_tup[i] + test_tup[i+1],)\n    return sum_tup"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Returns a tuple with the pairwise sums of the given tuple.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] + test_tup[i+1],)\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize an empty list to store the results\n    result = []\n    # iterate through the tuple and add the neighboring elements pairwise\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr: \n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the array and multiply each element by the product\n    for num in arr:\n        product *= num\n    \n    # Return the product modulo n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    This function takes an array and a number as input and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array `arr` and an integer `n` as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    \n    # Loop through the array and multiply each element by the product\n    for i in range(len(arr)):\n        product *= arr[i]\n        \n        # If the product is greater than n, divide it by n and subtract n\n        while product >= n:\n            product = (product % n) + n\n    \n    # Return the final product modulo n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    This function takes in an array and an integer n as arguments and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i] + 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    \"\"\"\n    n = len(l)\n    for i in range(n - 1):\n        if abs(l[i] - l[i+1]) == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_consecutive(lst):\n    \"\"\"\n    This function takes a list as input and checks whether the list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and checks whether the list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists as input and returns the tuple intersection of their elements.\n    '''\n\n    # Convert the input lists into sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list of tuples\n    result = [(elem, elem) for elem in intersection]\n\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n    intersection = set1.intersection(set2)\n    return list(map(list, intersection))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the list of tuples to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the set back to a list of tuples\n    intersection_list = list(intersection)\n    \n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples from the first list\n    set1 = set(test_list1)\n    # Create a set of tuples from the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    # Convert the set of tuples back to a list\n    intersection_list = list(intersection)\n    # Sort the intersection list based on the first element of each tuple\n    intersection_list.sort(key=lambda x: x[0])\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return sorted(tuple(x) for x in intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(set(test_list2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple(sorted(tuple1)) == tuple(sorted(tuple2)):\n                intersection_list.append(tuple1)\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(tuple(i) for i in test_list1)\n    set2 = set(tuple(i) for i in test_list2)\n    intersection = set1.intersection(set2)\n    return [list(i) for i in intersection]"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets to get the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection\n    intersection = set1.intersection(set2)\n    # Convert the set back to a list of tuples\n    return [(x, y) for x, y in intersection]"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of the character ch in the given string str1 with the character newch.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a given character in a string with a new character.\n    :param str1: The string to be modified.\n    :param ch: The character to be replaced.\n    :param newch: The new character to replace the old character with.\n    :return: The modified string with the new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces the character 'ch' with the character 'newch' in the string'str1'.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes three arguments:\n    1. str1: A string to replace characters in.\n    2. ch: The character to be replaced.\n    3. newch: The new character to replace the old character with.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace characters in a string.\n    :param str1: string to be modified\n    :param ch: character to be replaced\n    :param newch: new character to replace the old character\n    :return: modified string with replaced characters\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an argument and returns a sorted dictionary based on the values of the dictionary.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter_obj = Counter(dict1)\n    \n    # sort the Counter object by value\n    sorted_counter = sorted(counter_obj.items(), key=lambda x: x[1], reverse=True)\n    \n    # convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()  # Sort the array in ascending order\n    return nums[0] + nums[-1]  # Return the sum of the first and last element"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Returns the sum of the largest and smallest value in a given array.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    # find the smallest value in the array\n    smallest = min(nums)\n    \n    # find the largest value in the array\n    largest = max(nums)\n    \n    # return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sorted_nums = sorted(nums)\n    return sorted_nums[-1] + sorted_nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum((max(nums), min(nums)))"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    nums_sorted = sorted(nums)\n    return nums_sorted[0] + nums_sorted[-1]"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Converts the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case, False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]{3,}\\b', '', str1, flags=re.IGNORECASE)\n"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Use regex to match all lowercase substrings in the string\n    regex = r'\\b[a-z]+\\b'\n    matches = re.findall(regex, str1)\n\n    # Remove all lowercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    This function removes lowercase substrings from a given string.\n    \"\"\"\n    pattern = r\"[a-z]+\"\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b\\w*[a-z]\\w*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and returns the same string with lowercase substrings removed.\n    '''\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    result = re.sub(pattern, '', str1, flags=re.IGNORECASE)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and returns a string with all lowercase substrings removed.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function finds the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        n *= -1  # convert negative number to positive\n\n    while n >= 10:\n        n //= 10  # divide by 10 to remove the last digit\n\n    return n"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as an input and returns the first digit of the number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    num = abs(n)  # convert negative numbers to positive\n    first_digit = num // 10**int(math.log10(num))  # get the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:\n        n *= -1  # if the number is negative, we can treat it as positive by multiplying it with -1\n    return int(str(n)[0])  # we convert the number to a string and return the first digit as an integer"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    if n < 0:\n        n = -n\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_digit(n):\n    \"\"\"\n    Returns the first digit of a given number.\n    \"\"\"\n    return n // 10 ** (len(str(n)) - 1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)\n"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_odd_numbers(numbers_list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in numbers_list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_odd(list):\n    \"\"\"\n    This function takes a list of integers and returns a list with only the odd numbers.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns the odd numbers from the list.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n    \"\"\"\n    odds = []\n    for num in lst:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2!= 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of the first n natural numbers\n    sum_of_n = (n * (n + 1)) / 2\n    \n    # calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = (n * (n + 1) * (2 * n + 1)) / 6\n    \n    # find the difference between the two sums\n    result = sum_of_n - sum_of_cubes\n    \n    # return the result\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes in the value of n and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables to 0\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Add the cube of the current number to the sum of cubes\n        sum_of_cubes += i**3\n        # Add the current number to the sum of numbers\n        sum_of_numbers += i\n        \n    # Calculate and return the difference\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    return sum(i**3 for i in range(1, n+1)) - sum(range(1, n+1))"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    # Sum of first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    # Difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    return sum_numbers - sum_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    This function returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    # initialize the sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_nums = 0\n    \n    # iterate from 1 to n and add the cube and natural number to their respective sums\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_nums += i\n        \n    # return the difference between the sum of cubes and sum of natural numbers\n    return sum_nums - sum_cubes"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if ((A[i] ^ A[j]) % 2!= 0):\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize variables\n    count = 0\n    \n    # Iterate through all possible pairs of integers\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate the xor value of the pair\n            xor_value = A[i] ^ A[j]\n            \n            # Check if the xor value is odd\n            if xor_value & 1:\n                count += 1\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] % 2 == 1 : \n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the absolute difference between the two numbers\n    diff = abs(n1 - n2)\n    \n    # Convert the absolute difference to a string\n    diff_str = str(diff)\n    \n    # Sum the per-digit differences\n    digit_sum = sum(int(d) for d in diff_str)\n    \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function finds the sum of the per-digit difference between two integers.\n    '''\n    # Finding the absolute difference between the two numbers\n    abs_diff = abs(n1 - n2)\n    \n    # Summing the absolute difference of the digits of the absolute difference\n    digit_diff_sum = 0\n    while abs_diff > 0:\n        digit_diff_sum += abs_diff % 10\n        abs_diff //= 10\n        \n    # Returning the sum of per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers into strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Find the length of the strings\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    # Find the sum of the per-digit difference between the two integers\n    total_diff = 0\n    for i in range(max(n1_len, n2_len)):\n        if i < n1_len and i < n2_len:\n            diff = abs(int(n1_str[i]) - int(n2_str[i]))\n            total_diff += diff\n        elif i < n1_len:\n            diff = int(n1_str[i])\n            total_diff += diff\n        else:\n            diff = int(n2_str[i])\n            total_diff += diff\n\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    sum = 0\n    for i in range(len(str(n1))):\n        digit_diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        sum += digit_diff\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Compute the sum of the absolute differences between the digits\n    sum_abs_diff = sum([abs(d1 - d2) for d1, d2 in zip(digits1, digits2)])\n\n    return sum_abs_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    for i in range(10):\n        d1 = int(n1 // 10**i) % 10\n        d2 = int(n2 // 10**i) % 10\n        s += abs(d1 - d2)\n    return s"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and get the length of each string\n    s1 = str(n1)\n    s2 = str(n2)\n    len1 = len(s1)\n    len2 = len(s2)\n    \n    # Initialize the sum to zero\n    sum_diff = 0\n    \n    # Calculate the sum of the absolute difference of the digits in the strings\n    for i in range(len1):\n        digit1 = int(s1[i])\n        digit2 = int(s2[i])\n        diff = abs(digit1 - digit2)\n        sum_diff += diff\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Calculate the length of the longest string\n    max_len = max(len(n1_str), len(n2_str))\n\n    # Initialize the sum of differences to zero\n    diff_sum = 0\n\n    # Loop over the digits and calculate the difference\n    for i in range(max_len):\n        # Get the current digits (or zeros if one of the numbers is shorter)\n        n1_digit = n1_str[-(i+1)] if i < len(n1_str) else '0'\n        n2_digit = n2_str[-(i+1)] if i < len(n2_str) else '0'\n\n        # Convert the digits to integers and calculate the difference\n        diff = abs(int(n1_digit) - int(n2_digit))\n\n        # Add the difference to the sum\n        diff_sum += diff\n\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(len(str(n1))):\n        diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both integers to strings to easily access individual digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize a variable to store the sum of per-digit differences\n    digit_diff_sum = 0\n    \n    # Loop through each digit in the two strings and add the absolute difference to digit_diff_sum\n    for i in range(len(n1_str)):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n        \n    # Return the final sum of per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes an array and its size as input and returns the sum of the largest contiguous sublist.\n    \"\"\"\n    # Initialize the maximum sum and current sum variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Traverse through the given array\n    for i in range(size):\n        # Add the current element to the current sum\n        curr_sum += a[i]\n        \n        # Update the maximum sum if the current sum is greater than it\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        # If the current sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples and convert them to a set to remove duplicates\n    combined_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a tuple and sort it\n    sorted_tup = tuple(sorted(combined_set))\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their union in sorted order.\n    \"\"\"\n    # Finding the union of the two tuples\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n\n    # Sorting the union tuple and returning it\n    return sorted(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    This function finds the union of the elements of two given tuples and outputs them in sorted order.\n    '''\n    # Converting tuples to sets to find union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Finding the union of the sets\n    union_set = set1.union(set2)\n\n    # Converting the set back to tuple and sorting it\n    sorted_union = tuple(sorted(union_set))\n\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n\n    # Sort the elements of the union tuple and return it\n    return sorted(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the sets and convert back to tuple\n    union_tup = tuple(sorted(set1.union(set2)))\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to sets and find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    # Convert the union set back to a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert tuples to sets and find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n\n    # convert the set back to a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n\n    # print the result\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples into sets and find their union\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # convert the set back into a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n    \n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the union of their elements in sorted order.\n    \"\"\"\n    # Creating a set to store unique elements of both tuples.\n    unique_elements = set(test_tup1 + test_tup2)\n    # Converting the set back to a sorted tuple.\n    result = tuple(sorted(unique_elements))\n    return result"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to sets to find the union of the elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    # Convert set back to tuple and sort it\n    result_tup = tuple(sorted(union_set))\n    return result_tup"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i > max_length and all(lst[k] == lst[i] for k in range(i,j)):\n                max_length = j-i\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_max_length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            if len(sub_lst) > max_length:\n                max_length = len(sub_lst)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function finds the length of the longest sublists in the given list.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_len:\n                max_len = len(lst[i:j])\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        length = 0\n        for j in range(i, len(lst)):\n            if lst[j] is not None:\n                length += 1\n            else:\n                break\n        max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max_length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in lst:\n        if i == 1:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        length = 1\n        for j in range(i+1, len(lst)):\n            if lst[j] == lst[j-1]:\n                length += 1\n            else:\n                break\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function will find the length of the longest sublists in a list.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n\n    :param text: The string to extract values from.\n    :type text: str\n    :return: A list of values extracted from the string.\n    :rtype: list\n    '''\n\n    pattern = re.compile(r'\\\"(.+?)\\\"')\n    values = re.findall(pattern, text)\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'  # pattern to match any characters between double quotes\n    matches = re.findall(pattern, text)  # find all matches of pattern in text\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string using regular expressions.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    # Find all occurrences of quoted strings in the text\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    # Return a list of the matching values (i.e. the contents between quotes)\n    return [match.strip() for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'  # pattern to match strings between double quotes\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n\n    :param word: the string to split\n    :return: a list of characters\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function splits a string into its individual characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    \n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    \n    return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of its digits.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input! Please enter a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of the digits of the number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input must be a non-negative integer\"\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Checks whether a list is sorted or not.\n\n    :param lst: a list of numbers\n    :return: True if the list is sorted, False otherwise\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an argument and returns True if the list is sorted, otherwise False.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as an input and returns True if the list is sorted in ascending order, else False.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function takes in a list of lists, sorts each sublist of strings, and returns the sorted list of lists.\n    \"\"\"\n    # Iterate over each sublist of the list1\n    for sublist in list1:\n        # Sort the sublist of strings\n        sublist.sort()\n    # Return the sorted list of lists\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as an input and removes the duplicate numbers from each list.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if len(num) > len(set(num)):\n            unique_nums.append(list(set(num)))\n        else:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num in nums:\n        unique_nums.update(num)\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as an argument, and returns a new list containing two unique numbers\n    from each list. If there are not exactly two unique numbers in a list, then the function will return an empty\n    list for that list.\n    \"\"\"\n    # Create an empty list to hold the unique numbers from each list\n    unique_nums = []\n    \n    # Loop through each list in the input list\n    for lst in nums:\n        # Create a set to hold the unique numbers in the list\n        unique_set = set(lst)\n        \n        # If there are not exactly two unique numbers in the list, return an empty list\n        if len(unique_set)!= 2:\n            unique_nums.append([])\n            continue\n        \n        # Create two empty lists to hold the two unique numbers in the list\n        first_unique = []\n        second_unique = []\n        \n        # Loop through the set of unique numbers and add them to the appropriate list\n        for num in unique_set:\n            if lst.count(num) == 1:\n                first_unique.append(num)\n            else:\n                second_unique.append(num)\n        \n        # Append the two unique numbers to the output list\n        unique_nums.append([first_unique[0], second_unique[0]])\n    \n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen_nums = set()\n    unique_nums = set()\n    for lst in nums:\n        for num in lst:\n            if num not in seen_nums:\n                seen_nums.add(num)\n                unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    if len(unique_nums) < 2:\n        print(\"There are not enough unique numbers in the lists to find two unique numbers.\")\n        return None\n    \n    return unique_nums[0], unique_nums[1]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as an argument and removes duplicate numbers from the given list of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        if len(unique_nums) == 2:\n            break\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for lst in nums:\n        for num in lst:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = set(list_data)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius (r) and height (h) of a cylinder and returns its surface area.\n    '''\n    area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder.\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    Returns:\n    float: The surface area of the cylinder.\n    '''\n    return 2 * 3.141592 * r * h + 2 * 3.141592 * r ** 2"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder with radius r and height h.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r ** 2"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Returns the surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the surface area of the cylinder\n    \"\"\"\n\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius of the cylinder (r) and the height of the cylinder (h) as inputs and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B == []:\n        return True\n    elif A == []:\n        return False\n    else:\n        if A[0] == B[0]:\n            return is_Sub_Array(A[1:], B[1:])\n        else:\n            return is_Sub_Array(A[1:], B)"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether the list A is a sublist of list B or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    \n    # Step 1: Traverse the list A and check each element in A is present in B or not.\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    \n    # Step 2: If all the elements in A are present in B, then A is a sublist of B.\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(A).issubset(set(B)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            if i == len(A):\n                return True\n        if i > 0 and j >= len(B):\n            return False\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if A is a sublist of B, otherwise False.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check whether A is a sublist of B or not.\n    \"\"\"\n    return A == B[:len(A)]"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sub_list(A, B):\n    \"\"\"\n    Check whether A is a sublist of B or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if A is a sublist of B, otherwise False.\n    \"\"\"\n\n    # Find the length of list B\n    n = len(B)\n\n    # Initialize a boolean variable to keep track of whether list A is sublist of B or not\n    is_sublist = True\n\n    # Traverse through the list B\n    for i in range(n):\n\n        # Check if the current element of list B matches the first element of list A\n        if B[i] == A[0]:\n\n            # If the first element of list A is found in list B, then check if all the elements of list A are present in list B starting from that position\n            match_found = True\n            for j in range(len(A)):\n                if i + j >= n or B[i + j]!= A[j]:\n                    match_found = False\n                    break\n\n            # If all the elements of list A are present in list B starting from that position, then list A is a sublist of B\n            if match_found:\n                return True\n\n    # If list A is not a sublist of B, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if the first list is a sublist of the second list, otherwise it returns False.\n    \"\"\"\n    if A == []:\n        return True\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Returns True if B is a sublist of A, and False otherwise.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n\n    # Check for each prefix of A if it's a sublist of B\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function will take a positive integer as input and returns the last digit of the factorial of that number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return int(str(factorial)[-1])"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * last_Digit_Factorial(n-1)\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The last digit in factorial of\", num, \"is\", last_Digit_Factorial(num))"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Returns the last digit of the factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the last digit of the factorial of 'n'.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n    \n"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    fact = 1\n    for i in range(1, n+1): \n        fact *= i \n    return fact % 10"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return \"Lists must have the same length.\"\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check that all lists are of the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must be of the same length.\")\n\n    # Create a new list to store the interleaved values\n    interleaved_list = []\n\n    # Loop through the lists, alternating between values from each list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all the lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"All lists should have the same length.\")\n        return\n    \n    # Create a new list to store the interleaved values\n    interleaved_list = []\n    \n    # Iterate through the three lists using three pointers\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[j])\n        interleaved_list.append(list3[k])\n        \n        i += 1\n        j += 1\n        k += 1\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for pair in zip(list1, list2, list3) for x in pair]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = [x for sublist in zip(list1, list2, list3) for x in sublist]\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of elements that are present in only one tuple.\n    \"\"\"\n    dissimilar_list = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_list.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_list.append(element)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function will take two tuples as input and return a list of dissimilar elements.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples and finds the dissimilar elements between them.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n            \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through each element in the first tuple\n    for elem in test_tup1:\n        # Check if the element is not in the second tuple\n        if elem not in test_tup2:\n            # Append the element to the dissimilar list\n            dissimilar_list.append(elem)\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n            \n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if type(element) == int or type(element) == float:\n            if even_fnc(element):\n                new_tuple.append(element)\n        else:\n            new_tuple.append(even_ele(element, even_fnc))\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == tuple:\n            even_ele(test_tuple[i], even_fnc)\n        else:\n            if even_fnc(test_tuple[i]):\n                continue\n            else:\n                test_tuple[i] = None\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested mixed tuple and a function as arguments. The function should remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            sub_tuple = even_ele(item, even_fnc)\n            if len(sub_tuple) > 0:\n                result_tuple.append(sub_tuple)\n        elif even_fnc(item):\n            result_tuple.append(item)\n    return tuple(result_tuple)\n\ndef is_even(num):\n    '''\n    Helper function to determine if a number is even.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        if even_fnc(sub_tuple):\n            new_tuple.append(sub_tuple)\n    return new_tuple\n\ndef is_even(num):\n    '''\n    A function to check if a number is even.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple using a provided even_fnc.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, int) and even_fnc(i):\n            result.append(i)\n        elif isinstance(i, tuple):\n            temp = even_ele(i, even_fnc)\n            if temp!= []:\n                result.append(temp)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], (list, tuple)):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        elif not even_fnc(test_tuple[i]):\n            test_tuple = test_tuple[:i] + test_tuple[i+1:]\n            test_tuple = even_ele(test_tuple, even_fnc)\n    return test_tuple"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b, h):\n    '''\n    This function takes in the base edge and height of a square pyramid and returns the surface area of the pyramid.\n    '''\n\n    # Calculate the area of the base\n    area_base = b**2\n    \n    # Calculate the area of the slant\n    area_slant = b*h\n    \n    # Calculate the total surface area\n    total_area = 2*area_base + 2*area_slant\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area_base = b ** 2\n    \n    # Calculate the area of the slant\n    area_slant = 2 * b * s\n    \n    # Calculate the area of the triangular face\n    area_triangle = (b * s) / 2\n    \n    # Calculate the total area\n    area_total = area_base + area_slant + area_triangle\n    \n    # Return the total area\n    return area_total"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 4 * b * s + 2 * (b ** 2) # Formula for the surface area of a square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes the base edge and height of a square pyramid as inputs, and returns the surface area of the pyramid.\n    '''\n    # Calculate the area of the base of the pyramid\n    base_area = 4 * b * s\n    \n    # Calculate the area of the pyramid top\n    top_area = 2 * b * b + 2 * s * s\n    \n    # Calculate the area of the slant of the pyramid\n    slant_area = 2 * b * s\n    \n    # Calculate the total surface area\n    total_area = base_area + top_area + slant_area\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes two arguments:\n    b: the base edge of the square pyramid.\n    s: the height of the square pyramid.\n    '''\n    # Calculate the area of the base\n    area_base = 4 * b**2\n    \n    # Calculate the area of the face\n    area_face = 2 * (b**2 + s**2)\n    \n    # Calculate the area of the slant\n    area_slant = b * s\n    \n    # Calculate the total surface area\n    total_area = area_base + area_face + area_slant\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes base edge and height of the pyramid as arguments\n    and returns the surface area of the square pyramid.\n    '''\n    area = (4*b*s) + (2*b*b)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4 * b * s + 2 * (b**2 + s**2)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4 * b * s + 2 * b * s + 2 * b ** 2"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 6 * b * s + 2 * b * b + 2 * b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two arguments: base_edge and height. \n    It returns the surface area of the square pyramid with the given base edge and height.\n    '''\n    \n    # Calculate the surface area of the base\n    base_area = 4 * base_edge**2\n    \n    # Calculate the surface area of the square face\n    square_area = base_edge**2\n    \n    # Calculate the surface area of the triangular faces\n    triangular_area = (base_edge * height) / 2\n    \n    # Calculate the surface area of the pyramid\n    total_area = base_area + 4 * square_area + 4 * triangular_area\n    \n    return total_area"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = 1\n        for i in range(2*n):\n            c = (c*(2*n-i))//(i+1)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n\n    Parameters:\n    n (int): The number whose catalan number is to be calculated.\n\n    Returns:\n    int: The nth catalan number.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    else:\n        c = 1\n        for i in range(2, n+1):\n            c = c * (2*i-1) / i\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = [1, 1]\n        for i in range(2, num+1):\n            catalan.append(catalan[i-1] * (2*i - 1) // i)\n        return catalan[-1]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - 1 - i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = [0] * (num + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num + 1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Catalan number is not defined for negative values of n.\")\n    elif n == 0:\n        return 1\n    else:\n        c = 1\n        for i in range(2, n+1):\n            c = (2*i-1) * c // i\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result = result + catalan_number(i) * catalan_number(num - i - 1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    # Base cases\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n\n    # Recursive cases\n    else:\n        return catalan_number(num-1) * (2*num - 1) / num"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    This function calculates the nth catalan number.\n    '''\n    catalan = [0] * (n+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = (2 * i - 1) * catalan[i - 1] // i\n    return catalan[n]"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.finditer(adverb_pattern, text)\n    for match in matches:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end()\n        print(f\"Adverb: {adverb}, Start position: {start_pos}, End position: {end_pos}\")\n        return adverb, start_pos, end_pos"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all adverbs ending with \"ly\" using a regular expression\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    \n    # If no adverbs ending with \"ly\" were found, return None\n    if not adverbs:\n        return None\n    \n    # Find the first adverb ending with \"ly\" and its positions in the string\n    first_adverb = adverbs[0]\n    start_pos = text.index(first_adverb)\n    end_pos = start_pos + len(first_adverb) - 1\n    \n    # Return the adverb and its positions as a tuple\n    return (first_adverb, start_pos, end_pos)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r\"\\b(\\w+ly)\\b\"\n    \n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If no matches found, return None\n    if not matches:\n        return None\n    \n    # If matches found, return the first match and its start and end positions\n    match = matches[0]\n    start = text.index(match)\n    end = start + len(match) - 1\n    \n    return (match, start, end)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"\\b\\w*ly\\b\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(\"Adverb ending with 'ly':\", match.group())\n            print(\"Start position:\", match.start())\n            print(\"End position:\", match.end())\n            return\n    print(\"No adverb found in the text.\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n\ntext = \"The dog is running, slowly.\"\nprint(find_adverbs(text))  # Output: \"slowly\""
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.start(), match.end()\n        adverb = text[start:end]\n        position = start + 1\n        print(f\"Adverb found: {adverb} (position {position})\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all the adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n\n    # Find their positions\n    positions = []\n    for adverb in adverbs:\n        match = re.search(r'\\b' + adverb + r'\\b', text)\n        positions.append(match.start())\n\n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Find all adverbs ending with \"ly\" using regex\n    adverbs = re.findall(r'\\w+ly\\b', text)\n    # If no adverbs ending with \"ly\" are found, return None\n    if not adverbs:\n        return None\n    # Find the position of the first adverb ending with \"ly\"\n    first_ly_adverb = text.find(adverbs[0])\n    # Return the adverb and its position\n    return (adverbs[0], first_ly_adverb)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [items[i][0] for i in heapq.nlargest(n, range(len(items)), key=lambda x:items[x][1])]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n    \n    result = []\n    while heap and len(result) < n:\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of tuples where the first element of the tuple is the price and the second element is the item name\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n    \n    # Extract the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(items, key=lambda x: x[1], reverse=True)[:n]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, (item[1], item[0]))\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [items[i][0] for i in range(len(items)) if items[i][1] in heap]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item['name']))\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item[1], item[0])) # push (price, name) tuple into heap\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1]) # pop (price, name) tuple with highest price and append the name\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list and a value of n as input and splits the list at the nth element and adds the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    This function splits a list at the nth element and adds the first part to the end of the list.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    l.clear()\n    l += second_part\n    l += first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    This function splits a list at the nth element and adds the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_arr(l, n):\n    \"\"\"\n    Split a list at the nth element and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function splits a list at the nth element and adds the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    second_part = l[n:]\n    l.extend(first_part)\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function converts a list to a tuple.\n    \"\"\"\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as an input and returns a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list and returns a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n\n    Args:\n    lst (list): A list to be converted to a tuple.\n\n    Returns:\n    tuple: The input list converted to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Converts a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    if len(nums) < 2:\n        return \"The list should have at least two elements.\"\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Finding the maximum value in the list\n    max_val = max(nums)\n    # Finding the minimum value in the list\n    min_val = min(nums)\n    # Calculating the difference between max and min values\n    diff = max_val - min_val\n    # Returning the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    '''\n    # Find the minimum and maximum values in the list\n    min_num = min(nums)\n    max_num = max(nums)\n    # Calculate the difference between the two numbers\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    '''\n    if len(nums) < 2:\n        return 0\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        sqrt_num = int(num**0.5)\n        if sqrt_num**2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Find the perfect squares between two given numbers (inclusive).\n    '''\n    # check if a is negative\n    if a < 0:\n        a = 0\n    # check if b is negative\n    if b < 0:\n        b = 0\n    # find the minimum and maximum values of the range\n    min_value = min(a, b)\n    max_value = max(a, b)\n    # initialize an empty list to store the perfect squares\n    squares = []\n    # loop through the range from the minimum to the maximum value\n    for num in range(min_value, max_value+1):\n        # check if the number is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            squares.append(num)\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through all numbers between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num > 0 and num**0.5 == int(num**0.5):\n            # If the number is a perfect square, add it to the list\n            perfect_squares.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for n in range(a, b+1):\n        root = n ** 0.5\n        if int(root + 0.5) ** 2 == n:\n            result.append(n)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        root = int(num**0.5)\n        if root**2 == num:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds the perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        return None\n    \n    result = []\n    for num in range(a, b+1):\n        square = int(num**0.5)**2\n        if square == num:\n            result.append(num)\n    \n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i > 1:\n            is_perfect_square = True\n            for j in range(2, int(i/2)+1):\n                if i%j == 0:\n                    is_perfect_square = False\n                    break\n            if is_perfect_square:\n                result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        square_root = int(num ** 0.5)\n        if square_root ** 2 == num:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers a and b as input and returns a list of all perfect squares between a and b (inclusive).\n    '''\n    if a > b:\n        return []\n\n    perfect_squares = []\n    i = a\n    while i <= b:\n        root = i ** 0.5\n        if int(root) ** 2 == i:\n            perfect_squares.append(i)\n        i += 1\n\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Converts polar coordinates to rectangular coordinates.\n\n    Args:\n        rho (float): The radial distance from the origin.\n        theta (float): The angle from the positive x-axis in radians.\n\n    Returns:\n        tuple: A tuple (x, y) containing the rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    This function takes in two parameters x and y which represent polar coordinates and returns the rectangular coordinates.\n    '''\n    return x*cmath.rect(1,y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x * cmath.cos(y), x * cmath.sin(y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in polar coordinates (r, theta) and returns the corresponding rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(1j*y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    This function takes in polar coordinates (rho, theta) and returns rectangular coordinates (x, y)\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n    rho (float): distance from origin\n    theta (float): angle from positive x-axis in radians\n\n    Returns:\n    tuple: (x, y) coordinates of the point in rectangular coordinates\n    '''\n\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(complex(x,y))\n    theta = cmath.phase(complex(x,y))\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return (x_rect, y_rect)\n"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates (rho, theta) to rectangular coordinates (x, y).\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"The list must have at least two elements.\")\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1: #if the length of the list is 0 or 1, return the original list\n        return newList\n    else:\n        first_elem = newList[0] #assign the first element of the list to a variable\n        last_elem = newList[-1] #assign the last element of the list to a variable\n        newList[-1] = first_elem #replace the last element of the list with the first element\n        newList[0] = last_elem #replace the first element of the list with the last element\n        return newList #return the modified list"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    This function will take a list as input and will swap the first and last elements of the list.\n    '''\n    #creating a copy of the original list\n    original_list = newList.copy()\n    #swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    #printing the original and swapped lists\n    print(\"Original List: \", original_list)\n    print(\"Swapped List: \", newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"The list should have at least two elements\"\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k+1):\n        c = 1\n        for j in range(i):\n            c = c*(n-j)//(j+1)\n        sum += c\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        sum = 1\n        for i in range(k):\n            sum *= (n - i) / (i + 1)\n        return sum\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments: n and k, where n represents the total number of elements\n    and k represents the number of elements to be selected.\n\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n or k < 0 or n < 0:\n        return \"Invalid input\"\n    elif k == 0:\n        return 1\n    else:\n        res = 1\n        for i in range(1, k+1):\n            res *= (n-k+i)/i\n        return res\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    res=1\n    for i in range(k):\n        res=res*(n-i)//(i+1)\n    return res\n\nn=int(input(\"Enter value of n: \"))\nk=int(input(\"Enter value of k: \"))\n\nprint(\"Sum of the product of consecutive binomial co-efficients is:\",binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function takes two parameters n and k and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize sum variable\n    sum = 1\n    # iterate from 1 to k\n    for i in range(1, k+1):\n        # calculate binomial co-efficient\n        C = math.comb(n, i)\n        # multiply with sum variable\n        sum = sum * C\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n\n    :param n: int, the value of n in the binomial coefficient.\n    :param k: int, the value of k in the binomial coefficient.\n    :return: int, the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n-k:\n        k = n-k\n    res = 1\n    for i in range(k):\n        res = res*(n-i)/(i+1)\n    return res"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address by octets\n    octets = ip.split('.')\n    # Loop through each octet and remove leading zeroes\n    for i in range(len(octets)):\n        octet = octets[i]\n        # Check if the first digit of the octet is zero\n        if octet.startswith('0'):\n            # Remove the leading zeroes from the octet\n            octet = octet.lstrip('0')\n            # Check if the octet is empty now, which means it was all zeroes\n            if octet == '':\n                # Replace the empty octet with '0'\n                octet = '0'\n            # Update the original list of octets with the modified octet\n            octets[i] = octet\n    # Join the octets back together into an ip address\n    new_ip = '.'.join(octets)\n    # Check if the original ip address and the new ip address are the same\n    if ip == new_ip:\n        # If they are the same, return None\n        return None\n    else:\n        # Otherwise, return the new ip address\n        return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into octets\n    octets = ip.split('.')\n\n    # Loop through each octet and remove any leading zeroes\n    for i in range(len(octets)):\n        octets[i] = octets[i].lstrip('0') or '0'\n\n    # Rejoin the octets and return the modified ip address\n    return '.'.join(octets)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0+\", \"\", ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    # Replace all occurrences of double zeroes with a single zero\n    ip = re.sub(r'0+(?=\\.)', '', ip)\n    # Replace all occurrences of leading zeroes with a single zero\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_zeroes_ip(ip):\n    # Use regular expression to match IP address format\n    pattern = r'^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'\n    \n    # Check if IP address is valid using regular expression\n    if not re.match(pattern, ip):\n        raise ValueError('Invalid IP address format')\n    \n    # Remove leading zeroes from IP address\n    ip_parts = ip.split('.')\n    for i in range(len(ip_parts)):\n        if ip_parts[i].startswith('0') and len(ip_parts[i]) > 1:\n            ip_parts[i] = ip_parts[i].lstrip('0')\n    return '.'.join(ip_parts)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(?=[1-9])', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes in a list of numbers and returns the difference of the first even and first odd number.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num = list1[i]\n            break\n            \n    for i in range(len(list1)):\n        if list1[i] % 2 == 1:\n            odd_num = list1[i]\n            break\n            \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function finds the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        elif odd_num == 0:\n            odd_num = num\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 == 1 and odd is None:\n            odd = num\n    if even is None or odd is None:\n        return None\n    else:\n        return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0 and odd_num % 2 == 1:\n        return even_num - odd_num\n    elif even_num % 2 == 1 and odd_num % 2 == 0:\n        return odd_num - even_num\n    else:\n        return \"Both numbers are even or both numbers are odd\""
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and finds the difference between the first even and first odd number in the list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list and find the first even and first odd number\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    \n    # Calculate the difference between the two numbers and return it\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                odd_num = num\n                break\n        else:\n            odd_num = num\n    \n    if odd_num is None:\n        return \"No odd number found in the list.\"\n    else:\n        return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    return even - odd if even and odd else None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number in the list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number in the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    return abs(even - odd)"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    '''\n    n = len(str1)\n    \n    # initialize a list to keep track of indices of mismatched characters in both strings\n    mismatch_indices = []\n    \n    # iterate through both strings and find all the indices where characters don't match\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            mismatch_indices.append(i)\n    \n    # initialize a list to keep track of the swaps required to convert str1 to str2\n    swaps = []\n    \n    # iterate through the mismatch_indices and find the minimum number of swaps required to convert str1 to str2\n    for i in mismatch_indices:\n        count = 0\n        for j in range(i, n):\n            if str1[j]!= str2[j-i]:\n                count += 1\n                swaps.append(count)\n                break\n    \n    return len(swaps)"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of characters\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # Initialize a dictionary to store the indices of the characters in str1\n    indices = {}\n    for i in range(len(str1)):\n        indices[str1[i]] = i\n\n    # Initialize variables to keep track of swaps and current position\n    swaps = 0\n    curr = 0\n\n    # Iterate over the characters in str2\n    for char in str2:\n        # If the current character is not in str1, it cannot be swapped\n        if char not in indices:\n            return -1\n        # Otherwise, calculate the distance from the current position to the index of the current character in str1\n        distance = indices[char] - curr\n        # If the distance is positive, we need to swap characters to get to the correct position\n        if distance > 0:\n            # Update the indices of the characters in str1 to reflect the swaps\n            for i in range(curr, curr + distance):\n                indices[str1[i]] -= 1\n            # Update the current position to the end of the swapped segment\n            curr += distance\n            # Increment the number of swaps\n            swaps += distance\n        # If the distance is negative, we need to swap characters to get to the correct position\n        elif distance < 0:\n            # Update the indices of the characters in str1 to reflect the swaps\n            for i in range(curr + distance, curr):\n                indices[str1[i]] += 1\n            # Update the current position to the start of the swapped segment\n            curr -= distance\n            # Increment the number of swaps\n            swaps -= distance\n        # If the distance is zero, we are already in the correct position and don't need to swap\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    # if the lengths of the two binary strings are not equal, return -1\n    if n1!= n2:\n        return -1\n    \n    count = 0\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            # swap the characters at the i-th position\n            if str1[i] == '0' and str2[i] == '1':\n                str1 = str1[:i] + '1' + str1[i+1:]\n                str2 = str2[:i] + '0' + str2[i+1:]\n                count += 1\n            elif str1[i] == '1' and str2[i] == '0':\n                str1 = str1[:i] + '0' + str1[i+1:]\n                str2 = str2[:i] + '1' + str2[i+1:]\n                count += 1\n            else:\n                return -1\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            # Find the position of str2[i] in str1\n            pos = i\n            for j in range(i+1,n):\n                if str2[j] == str1[i]:\n                    pos = j\n                    break\n            # Swap str1[i] and str1[pos]\n            temp = str1[i]\n            str1 = str1[:i] + str1[pos] + str1[i+1:]\n            str1 = str1[:pos] + temp + str1[pos+1:]\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    arr = [int(i) for i in str1]\n    ans = 0\n    for i in range(n):\n        if arr[i]!= int(str2[i]):\n            j = i\n            while j < n and arr[j] == int(str2[j]):\n                j += 1\n            if j == n:\n                return \"Not possible\"\n            else:\n                arr[i], arr[j-1] = arr[j-1], arr[i]\n                ans += 1\n    return ans"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n1, n2 = len(str1), len(str2)\n    if n1!= n2:\n        return \"Both strings should be of equal length\"\n    count = 0\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            for j in range(i, n1):\n                if str1[j] == str2[i]:\n                    str1[i], str1[j] = str1[j], str1[i]\n                    count += 1\n                    break\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    n1=len(str1)\n    n2=len(str2)\n    if n1!=n2:\n        return -1\n\n    count=0\n    for i in range(n1):\n        if str1[i]!=str2[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert the input strings to lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n    \n    # initialize a dictionary to keep track of the positions of each character in list2\n    char_positions = {}\n    for i in range(len(list2)):\n        char_positions[list2[i]] = i\n        \n    # initialize variables to keep track of the number of swaps and the current position in list1\n    swaps = 0\n    curr_pos = 0\n    \n    # iterate over list1\n    for i in range(len(list1)):\n        # if the current character is not in char_positions, it cannot be swapped\n        if list1[i] not in char_positions:\n            return -1\n            \n        # get the position of the current character in list2\n        target_pos = char_positions[list1[i]]\n        \n        # if the current character is at the correct position, move on to the next character in list1\n        if curr_pos == target_pos:\n            curr_pos += 1\n            continue\n            \n        # if the current character is not at the correct position, swap it with the character at the correct position\n        list1[curr_pos], list1[target_pos] = list1[target_pos], list1[curr_pos]\n        char_positions[list1[curr_pos]], char_positions[list1[target_pos]] = char_positions[list1[target_pos]], char_positions[list1[curr_pos]]\n        \n        # increment the number of swaps and move on to the next character in list1\n        swaps += 1\n        curr_pos += 1\n        \n    # return the total number of swaps required to convert list1 to list2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the strings to lists of integers\n    num1 = [int(i) for i in str1]\n    num2 = [int(i) for i in str2]\n\n    # initialize variables to store the number of swaps and the current position\n    swaps = 0\n    pos = 0\n\n    # loop through the lists and count the number of swaps needed to convert num1 to num2\n    while pos < len(num1):\n        if num1[pos]!= num2[pos]:\n            # check if the current position is equal in both lists\n            # if not, swap the current position with the position of the corresponding number in num2\n            if num1[pos] == 0 and num2[num2.index(1)] == 1:\n                num1[pos], num1[num1.index(1)] = 1, 0\n                num2[pos], num2[num2.index(1)] = 1, 0\n            elif num1[pos] == 1 and num2[num2.index(0)] == 0:\n                num1[pos], num1[num1.index(0)] = 0, 1\n                num2[pos], num2[num2.index(0)] = 0, 1\n            else:\n                num1[pos], num1[num2.index(num1[pos])] = num1[num2.index(num1[pos])], num1[pos]\n                num2[pos], num2[num2.index(num2[pos])] = num2[num2.index(num2[pos])], num2[pos]\n            swaps += 1\n        pos += 1\n\n    # return the number of swaps needed to convert num1 to num2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    str1 = str1.lstrip('0')  # Remove leading zeros\n    str2 = str2.lstrip('0')  # Remove leading zeros\n    if str1 == str2:\n        return 0\n\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n            index1 = str1.index(str2[i], i)\n            str1 = str1[:index1] + str1[index1 + 1:]\n            str1 = str1.lstrip('0')  # Remove leading zeros\n\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples and returns the total size in bytes of all the tuples in the list.\n    '''\n    total_size = 0\n    for tpl in tuple_list:\n        total_size += sys.getsizeof(tpl)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple(tuple_list))\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple(tuple_list))\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple(tuple_list))"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the total size of all the tuples in bytes.\n    '''\n    total_size = 0\n    \n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n        \n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # initialize variables\n    i = 0\n    j = 0\n    count = 0\n    \n    # loop until one of the arrays is completely traversed\n    while i < len(arr1) and j < len(arr2):\n        # if the current element of arr1 is smaller, increment i and add it to the count\n        if arr1[i] < arr2[j]:\n            count += len(arr1) - i\n            i += 1\n        # if the current element of arr2 is smaller, increment j and add it to the count\n        else:\n            count += len(arr2) - j\n            j += 1\n            \n    # if the kth element is in arr1, return the kth element\n    if count >= k:\n        return arr1[k-1]\n    # if the kth element is in arr2, return the kth element\n    else:\n        return arr2[k-1-count]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) + len(arr2):\n        return None\n    elif k <= len(arr1):\n        return arr1[k - 1]\n    else:\n        return arr2[k - len(arr1) - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from two sorted arrays.\n    \"\"\"\n    n = len(arr1)\n    m = len(arr2)\n    if n > m:\n        arr1, arr2, n, m = arr2, arr1, m, n\n    if k > n:\n        return None\n    i = min(k, m)\n    while i > 0 and arr2[i-1] > arr1[n-1]:\n        i -= 1\n    return arr2[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Find the kth element from two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        # swap the two arrays to make arr1 shorter or equal to arr2\n        arr1, arr2 = arr2, arr1\n        \n    # create a merged array from arr1 and arr2\n    merged_arr = []\n    i = 0  # index for arr1\n    j = 0  # index for arr2\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n            \n    # append the remaining elements from arr1 and arr2\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n        \n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the kth element from the given two sorted arrays.\n\n    Args:\n    arr1 (list): A sorted list of integers.\n    arr2 (list): A sorted list of integers.\n    k (int): The index of the element to find, 1-based.\n\n    Returns:\n    The kth element from the two sorted arrays.\n\n    Raises:\n    ValueError: If k is not a positive integer.\n    \"\"\"\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError(\"k must be a positive integer\")\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k > n1 + n2:\n        raise ValueError(\"k is out of range\")\n    i, j = 0, 0\n    while i + j < k:\n        if j == n2 or (i < n1 and arr1[i] < arr2[j]):\n            i += 1\n        else:\n            j += 1\n    return arr1[i-1] if i > 0 else arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Find kth element from two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if k > len1 + len2:\n        return None\n    \n    if len1 > len2:\n        arr1, arr2, len1, len2 = arr2, arr1, len2, len1\n        \n    left = 0\n    right = len1\n    while left < right:\n        mid = (left + right) // 2\n        if arr1[mid] + arr2[k-mid-1] >= arr2[k-1]:\n            right = mid\n        else:\n            left = mid + 1\n            \n    return arr1[left] + arr2[k-left-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    # Get the total number of elements in both arrays\n    n1, n2 = len(arr1), len(arr2)\n    \n    # Initialize the indices for both arrays\n    i, j = 0, 0\n    \n    # Loop until we find the kth element or one of the arrays is exhausted\n    while i < n1 and j < n2:\n        # If the current element of the first array is smaller, increment the index of the first array\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the current element of the second array is smaller or equal, decrement the index of the second array\n        else:\n            j += 1\n        \n        # If the difference between the current indices of the two arrays is equal to k-1, we have found the kth element\n        if i + j == k-1:\n            return max(arr1[i], arr2[j])\n    \n    # If we reach this point, k is larger than the total number of elements in both arrays\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 == 0:\n        return arr2[k-1]\n    if n2 == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k == n1 + 1:\n        return max(arr1[-1], arr2[-1])\n    if arr1[0] >= arr2[0]:\n        return find_kth(arr1[1:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[1:], k - n1)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    Args:\n    arr1 (list): A list of integers representing the first sorted array.\n    arr2 (list): A list of integers representing the second sorted array.\n    k (int): The position of the element to find in the combined array.\n\n    Returns:\n    int: The kth element from the combined array.\n    \"\"\"\n\n    # Create a new list by concatenating the two input lists.\n    merged_list = arr1 + arr2\n\n    # Sort the merged list in ascending order.\n    merged_list.sort()\n\n    # Return the kth element of the merged list.\n    return merged_list[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the kth element from the two sorted arrays arr1 and arr2.\n\n    Args:\n    arr1: A sorted array of integers.\n    arr2: A sorted array of integers.\n    k: An integer representing the kth element to find.\n\n    Returns:\n    An integer representing the kth element.\n    \"\"\"\n\n    # Combine the two arrays into one sorted array\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Return the kth element from the combined array\n    return arr[k-1]"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    order = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes an integer as an input and returns True if the input number is an Armstrong number, False otherwise.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    '''\n    # convert the number to a string to iterate over its digits\n    num_str = str(number)\n    # get the length of the number\n    num_len = len(num_str)\n    # calculate the sum of the raised digits\n    sum_of_raised_digits = sum([int(digit) ** num_len for digit in num_str])\n    # return True if the sum of raised digits equals the original number, False otherwise\n    return sum_of_raised_digits == number"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum = 0\n    temp = number\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    \n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    # Convert the number into a string to easily access each digit\n    num_str = str(number)\n    # Calculate the length of the number\n    num_len = len(num_str)\n    # Initialize a variable to store the sum of the powered digits\n    digit_sum = 0\n    # Iterate over each digit in the number and calculate its powered value and add it to the sum\n    for digit in num_str:\n        digit_sum += int(digit) ** num_len\n    # Check if the sum is equal to the original number\n    if digit_sum == number:\n        print(f\"{number} is an Armstrong number\")\n    else:\n        print(f\"{number} is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n    # Calculate the length of the number\n    length = len(number_str)\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through each digit in the number\n    for i in range(length):\n        digit = int(number_str[i])\n        # Raise the digit to the power of the length of the number and add it to the sum\n        sum += digit ** length\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    A function to check if a given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Get the number of digits in the number\n    num_digits = len(number_str)\n\n    # Calculate the sum of the nth power of each digit in the number\n    sum_of_powers = sum([int(digit) ** num_digits for digit in number_str])\n\n    # Check if the sum is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number into a string\n    number_str = str(number)\n\n    # Calculate the length of the number\n    length = len(number_str)\n\n    # Calculate the sum of the cubes of each digit of the number\n    sum = 0\n    for digit in number_str:\n        sum += int(digit) ** length\n\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of the first n natural numbers and the average of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        print(\"Invalid input! Please enter a positive integer.\")\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        average = sum / n\n        return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Find the sum and average of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to sum and average.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n    '''\n\n    # initialize sum and count variables to zero\n    total = 0\n    count = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the current number to the sum\n        total += i\n        # increment the count of numbers\n        count += 1\n\n    # calculate the average of the first n natural numbers\n    average = total / count\n\n    # return the sum and average as a tuple\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n\n    Args:\n    n (int): The number of natural numbers.\n\n    Returns:\n    (tuple): A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1, 1.0\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        average = sum / float(n)\n        return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize sum and count variables\n    total = 0\n    count = 0\n\n    # Loop through the first n natural numbers and add them to the sum\n    for i in range(1, n+1):\n        total += i\n        count += 1\n\n    # Calculate the average\n    average = total / count\n\n    # Return the sum and average as a tuple\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is even, else returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, otherwise False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether a given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_even(n):\n    \"\"\"\n    Check if a number is even or odd.\n\n    :param n: The number to check.\n    :type n: int\n    :return: True if the number is even, False if it's odd.\n    :rtype: bool\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as an input and returns True if it is even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Check whether a given number is even or odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If there are no repeated characters, the function returns None.\n    \"\"\"\n    repeated_chars = []\n    for char in str1:\n        if str1.count(char) > 1 and char not in repeated_chars:\n            repeated_chars.append(char)\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated character found!\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    # convert the string into a set to remove duplicates\n    str1_set = set(str1)\n    # iterate over each character in the set and check if it appears more than once\n    for char in str1_set:\n        if str1.count(char) > 1:\n            return char\n    # if no repeated characters were found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store seen characters\n    seen = {}\n    # iterate over the string and check if each character has been seen before\n    for char in str1:\n        if char in seen:\n            return char\n        else:\n            seen[char] = True\n    # if no repeated characters were found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the character and its index\n    char_dict = {}\n\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is already in the dictionary, return it\n        if str1[i] in char_dict:\n            return str1[i]\n        # Otherwise, add the character and its index to the dictionary\n        else:\n            char_dict[str1[i]] = i\n\n    # If no repeated characters were found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character.\n    If there are no repeated characters, it returns None.\n    \"\"\"\n    # create a dictionary to store the characters and their counts\n    char_counts = {}\n    \n    # iterate over the characters in the string\n    for char in str1:\n        # if the character is not in the dictionary, add it with count 1\n        if char not in char_counts:\n            char_counts[char] = 1\n        # if the character is already in the dictionary, increment its count\n        else:\n            char_counts[char] += 1\n    \n    # iterate over the characters again to find the first repeated character\n    for char in str1:\n        if char_counts[char] > 1:\n            return char\n    \n    # if no repeated character was found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_lucid(n):\n    \"\"\"\n    This function returns all lucid numbers smaller than or equal to a given integer n.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**(0.5))+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(1, n+1):\n        # Check if the number is lucid\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(1, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            result.append(i)\n    return result"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(i)\n        else:\n            is_lucid = True\n            for j in range(2, int(i/2)+1):\n                if i % j == 0:\n                    is_lucid = False\n                    break\n            if is_lucid:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for num in range(2, n+1):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            ludics.append(num)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_lucid(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid.append(i)\n    return lucid\n\nprint(get_lucid(20)) # [2, 3, 5, 7, 11, 13, 17, 19]"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, int(i/2)+1):\n            if i%j == 0:\n                flag = False\n                break\n        if flag:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split()\n    s_list.reverse()\n    return''.join(s_list)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Remove leading and trailing whitespaces\n    s = s.strip()\n\n    # Reverse the string\n    s = s[::-1]\n\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the order of the words in the list\n    words = words[::-1]\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    \n    # reverse each word in the list and join the list into a string\n    reversed_words = \" \".join([word[::-1] for word in words])\n    \n    # return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Splitting the string into words using space as a separator\n    words = s.split()\n    \n    # Reversing each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    \n    # Joining the reversed words to form the final string\n    final_string =''.join(words)\n    \n    return final_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    s_list = s.split()\n    s_list.reverse()\n    return''.join(s_list)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Reverses words in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # If the number is less than 2, it is not a prime number\n    if num < 2:\n        return False\n    \n    # Check if the number is divisible by any number other than 1 and itself\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    # If the number is greater than or equal to 2, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        print(\"False\")\n    else:\n        if is_prime(num):\n            print(\"True\")\n        else:\n            print(\"False\")"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks whether the given number is prime or not.\n    \"\"\"\n\n    # checking if the given number is less than 2\n    if num < 2:\n        return False\n\n    # checking if the given number is divisible by any number from 2 to sqrt(num)\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # if the given number is not divisible by any number from 2 to sqrt(num), then it is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    \"\"\"\n    Function to check if the given integer is a prime number or not.\n    \"\"\"\n    if is_prime(num):\n        print(f\"{num} is a prime number\")\n    else:\n        print(f\"{num} is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n\nprint(radian_degree(180)) # Output: 3.141592653589793"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees and returns the angle in radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees and returns the angle in radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees as input and converts it into radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match) - 1\n        result.append((match, start_index, end_index))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        result.append((match, start, end))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        yield match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. \n    The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        start, end = match.span()\n        result.append((match.group(), start, end))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    bell_list = [1]\n    for i in range(1, n+1):\n        bell_list.append(sum(bell_list))\n    return bell_list[-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth bell number.\n    \"\"\"\n    bell = [1]\n    for i in range(n):\n        bell.append(sum(bell[-i-2:]))\n    return bell[-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_Number(i) for i in range(n)])"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function returns the nth bell number.\n\n    Parameters:\n        n (int): An integer value representing the position of the bell number.\n\n    Returns:\n        int: An integer representing the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum([int(math.comb(i, j)) for i in range(n+1) for j in range(i+1)])"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    bell = [0] * (n+1)\n    for i in range(n+1):\n        if i == 0:\n            bell[i] = 1\n        else:\n            for j in range(i):\n                bell[i] += bell[j]\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth bell number using dynamic programming approach.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        b = [0] * (n+1)\n        b[0] = 0\n        b[1] = 1\n        for i in range(2, n+1):\n            b[i] = b[i-1] + b[i-2]\n        return b[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j]\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth bell number using dynamic programming approach.\n    \"\"\"\n\n    # Initialize an array to store the bell numbers\n    bell_nums = [0] * (n+1)\n\n    # Base cases\n    bell_nums[0] = 1\n    bell_nums[1] = 1\n\n    # Compute the bell numbers using dynamic programming\n    for i in range(2, n+1):\n        bell_nums[i] = bell_nums[i-1] + bell_nums[i-2]\n\n    # Return the nth bell number\n    return bell_nums[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n and returns the nth Bell Number.\n    '''\n    bell = [0] * (n+1)\n    for i in range(n+1):\n        if i == 0:\n            bell[i] = 1\n        elif i == 1:\n            bell[i] = 1\n        else:\n            bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a number k as input and returns a new list with the k'th element removed.\n    '''\n    if k >= len(list1):\n        return \"Error: k is greater than or equal to the length of the list\"\n    else:\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a value k, and returns a new list with all the elements of the original list except for the k-th one.\n    \"\"\"\n    if k < 0 or k >= len(list1):\n        print(\"Invalid k value. k should be between 0 and len(list1)-1.\")\n        return []\n    else:\n        new_list = []\n        for i in range(len(list1)):\n            if i!= k:\n                new_list.append(list1[i])\n        return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Returns a new list with the same elements as the input list,\n    but the k'th element removed.\n    '''\n    if k < 1 or k > len(list1):\n        return None  # invalid k\n    new_list = list1[:k-1] + list1[k:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and a number k as input and returns a list with the same elements, \n    but the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Removes the k'th element from a list and returns the new list.\n    '''\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Removes the k-th element from a list.\n    \"\"\"\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and removes the k'th element.\n    '''\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and the value of k, and returns a new list with the kth element removed.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        if i!= k:\n            new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = []\n    for row in test_list:\n        column.append(row[N-1])\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, this function returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n_max = -float('inf')\n    for row in test_list:\n        n_max = max(n_max, row[N-1])\n    return n_max"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col = [row[N-1] for row in test_list]\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a matrix represented as a list of lists as input and returns the maximum value of the Nth column.\n    '''\n    # initialize max_value to negative infinity\n    max_value = float('-inf')\n    \n    # iterate through each row of the matrix\n    for row in test_list:\n        # check if the current value is greater than the max value\n        if row[N-1] > max_value:\n            # update max value\n            max_value = row[N-1]\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = -float('inf')\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function returns the maximum value of the nth column in the given matrix.\n    '''\n    # Find the length of the matrix\n    row_length = len(test_list)\n    \n    # Find the maximum value of the nth column in the matrix\n    max_value = max(test_list[i][N] for i in range(row_length))\n    \n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    n_list = [lst[N-1] for lst in test_list]\n    return max(n_list)"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first\n    element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    # Initialize empty lists for the first and second elements\n    first = []\n    second = []\n    \n    # Loop through the original list and append the first and second elements to the appropriate lists\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    \n    # Return the two lists\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Initialize the first and second lists\n    first_list = []\n    second_list = []\n\n    # Iterate through the input list\n    for sublist in lst:\n        # Append the first element to the first list\n        first_list.append(sublist[0])\n        # Append the second element to the second list\n        second_list.append(sublist[1])\n\n    # Return a list of the first and second lists\n    return [first_list, second_list]"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i[1]\n    return cummulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list as input and returns the cumulative sum of all the values that are present in the list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        averages.append(total / len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        avg = sum(t)/len(t)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg = sum_tup / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for n in num:\n            total += n\n        avg = total / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        sum_t = sum(t)\n        avg_t = sum_t / len(t)\n        result.append(avg_t)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        result.append(total / count)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup) / len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg_list.append(total/len(tup))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element-wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: tuples must have the same length.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples should be of the same length.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup = result_tup + (test_tup1[i] % test_tup2[i], )\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of the same length\")\n        return\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] % test_tup2[i])\n        return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    result_tup = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should be of equal length!\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup = result_tup + ((test_tup1[i] % test_tup2[i]),)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples are not of the same length.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    if d == 0:\n        return 0\n\n    jumps = 1\n\n    while True:\n        if jumps > steps:\n            return -1\n\n        if d == 0:\n            return jumps\n\n        jumps += 1\n\n        d -= 1\n"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return 1\n    elif d == 0:\n        return steps\n    elif d < 0:\n        return float('inf')\n    else:\n        jumps = 1\n        remaining_steps = steps - 1\n        while remaining_steps > 0:\n            if remaining_steps >= d:\n                jumps += 1\n                remaining_steps -= d\n            else:\n                jumps += 1\n                remaining_steps = 0\n        return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # Initializing variables\n    count = 0\n    max_reach = 0\n    curr_reach = 0\n    \n    # Traverse through all steps\n    for i in range(steps):\n        # Check if it is the last step\n        if i == steps - 1:\n            return -1\n        \n        # Check if the current step is within the given range\n        if i <= d:\n            # Update the current reach\n            curr_reach = max(curr_reach, i + 1)\n            \n            # If the current reach is greater than the max reach\n            if curr_reach >= d:\n                # Increment the count\n                count += 1\n                \n                # Reset the current reach and max reach\n                curr_reach = max_reach = 0\n                \n        # If the current step is outside the given range\n        else:\n            # Update the max reach\n            max_reach = max(max_reach, i - d)\n            \n            # Check if the current reach is greater than the max reach\n            if curr_reach >= d:\n                # Increment the count\n                count += 1\n                \n                # Reset the current reach\n                curr_reach = max_reach = 0\n                \n        # If the current step is the last step and the current reach is greater than the max reach\n        if i == steps - 1 and curr_reach > max_reach:\n            return -1\n    \n    # Return the count of jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    dp = [[float('inf') for j in range(d)] for i in range(steps)]\n    dp[0][0] = 0\n\n    for i in range(steps):\n        for j in range(d):\n            if dp[i][j]!= float('inf'):\n                if j - 1 >= 0:\n                    dp[i+1][j-1] = min(dp[i+1][j-1], dp[i][j] + 1)\n                if j + 1 < d:\n                    dp[i+1][j+1] = min(dp[i+1][j+1], dp[i][j] + 1)\n\n    return dp[steps-1][d-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    # Create a dictionary to store the possible steps from each point\n    steps_dict = {}\n    for i in range(len(steps)):\n        if steps[i] == 0:\n            steps_dict[i] = [0]\n        else:\n            steps_dict[i] = []\n            for j in range(1, steps[i]+1):\n                if j+i not in steps_dict and j+i < len(steps):\n                    steps_dict[i].append(j)\n    \n    # Initialize the queue with the starting point (0, 0) and the number of jumps required to reach it (0)\n    queue = [(0, 0, 0)]\n    \n    # Traverse the graph using BFS and find the number of jumps required to reach the destination point (d, 0)\n    while queue:\n        current_point, current_jumps, visited_points = queue.pop(0)\n        if current_point[0] == d:\n            return current_jumps\n        \n        # Check for all possible steps from the current point\n        for step in steps_dict[current_point[0]]:\n            new_point = (current_point[0]+step, current_point[1])\n            if new_point not in visited_points and new_point[0] >= 0 and new_point[0] <= len(steps)-1 and new_point[1] >= 0:\n                new_jumps = current_jumps + 1\n                queue.append((new_point, new_jumps, visited_points + [new_point]))"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    dp = [float('inf')] * (d+1)\n    dp[0] = 0\n    for i in range(1, steps+1):\n        for j in range(min(i, d), -1, -1):\n            if dp[j]!= float('inf'):\n                dp[j+i] = min(dp[j+i], dp[j]+1)\n    return dp[d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    \n    jumps = 1\n    step = 1\n    \n    while step <= steps: \n        if step + d >= steps: \n            return jumps\n        \n        step += d\n        jumps += 1\n        \n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 0 or d == 0:\n        return steps\n\n    min_jumps = float('inf')\n\n    for i in range(1, d+1):\n        jumps = min_Jumps(steps-1, i)\n\n        if jumps!= float('inf'):\n            min_jumps = min(min_jumps, jumps+1)\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0 for x in range(d+1)] for y in range(steps+1)]\n\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if j == 1:\n                dp[i][j] = 1\n            elif i == 1:\n                dp[i][j] = j\n            elif j > i:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + 1\n\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    jumps = 0\n    current_jump = 0\n    \n    # Traverse through each step\n    for i in range(steps):\n        if current_jump < d:\n            current_jump += 1\n        else:\n            jumps += 1\n            current_jump = current_jump - d\n    \n    # Add the remaining jumps needed\n    jumps += (current_jump - d) // d\n    \n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise.\n\n    :param nums1: The first list to divide.\n    :param nums2: The second list to divide.\n    :return: The element-wise division of the two lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise and returns the result as a new list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should be of same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists of numbers as input, and returns a new list of the results of the division of the corresponding elements of the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list that contains the result of dividing each element of the first list by each corresponding element of the second list. If any of the elements in the second list is zero, it raises a ZeroDivisionError.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i]/nums2[i])\n        except ZeroDivisionError:\n            print(\"Error: Division by zero not allowed.\")\n            break\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element-wise.\n    If the division is not possible (division by zero), return None.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append(None)\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create two empty lists to store words and numbers\n    num_list = []\n    word_list = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is a number\n        if word.isdigit():\n            # If it is, append it to the number list\n            num_list.append(word)\n        else:\n            # If it is not, append it to the word list\n            word_list.append(word)\n    \n    # Join the number list and word list back into a string and return it\n    return \" \".join(word_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    str_list = list(test_str)\n    \n    for i in range(len(str_list)):\n        if str_list[i].isdigit():\n            num_str += str_list[i]\n            str_list[i] = ''\n            \n    return ''.join(str_list) + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function moves all the numbers to the end of the given string.\n    \"\"\"\n    # initializing two empty lists\n    num_list = []\n    non_num_list = []\n\n    # splitting the string into two lists based on the presence of digits\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n\n    # joining the two lists to form the final string\n    final_str = ''.join(non_num_list + num_list)\n\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters and numbers\n    nums = [c for c in test_str if c.isdigit()]\n    chars = [c for c in test_str if not c.isdigit()]\n    \n    # Join the numbers and characters to form the new string\n    new_str = ''.join(chars) + ''.join(nums)\n    \n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n\n    Args:\n        test_str (str): the input string\n\n    Returns:\n        str: the modified string\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n\n    # Create two lists, one for numbers and one for other words\n    nums = []\n    others = []\n    for word in words:\n        if word.isnumeric():\n            nums.append(word)\n        else:\n            others.append(word)\n\n    # Join the numbers list with the other words list and return the result\n    return''.join(others + nums)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = [i for i in test_str if i.isdigit()]\n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            continue\n        else:\n            new_str += char\n    for num in num_list:\n        new_str += num\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # split the string into words\n    words = test_str.split()\n    \n    # create a list of words that do not contain numbers\n    non_nums = []\n    for word in words:\n        if not word.isdigit():\n            non_nums.append(word)\n    \n    # create a list of numbers\n    nums = []\n    for word in words:\n        if word.isdigit():\n            nums.append(word)\n    \n    # combine the non-number words and the numbers\n    result = \" \".join(non_nums) + \" \" + \" \".join(nums)\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    non_num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    return non_num_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    return \"\".join(alpha_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    non_num_str = ''\n    \n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    \n    return non_num_str + num_str"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    \n    return dp[-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [[0]*n for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if (a[i] % a[j] == 0):\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + 1\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i % j == 0:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * (n+1)\n    dp[0] = True\n    dp[1] = True\n    \n    for i in range(2, n+1):\n        for j in range(1, i):\n            if a[j] % a[i-1] == 0 and dp[j]:\n                dp[i] = True\n                break\n    \n    return dp.index(True)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as input and returns the size of the largest subset of the list\n    so that every pair is divisible.\n    \"\"\"\n    a = sorted(a)\n    n = len(a)\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables for maximum size of subset and current size of subset\n    max_size = 0\n    curr_size = 1\n\n    # iterate through the list, starting at the second element\n    for i in range(1, len(a)):\n        # check if the current element is divisible by the previous element\n        if a[i] % a[i-1] == 0:\n            # if it is, increment the current size of subset\n            curr_size += 1\n        else:\n            # if it is not, update the maximum size of subset if necessary and reset the current size to 1\n            max_size = max(max_size, curr_size)\n            curr_size = 1\n\n    # update the maximum size of subset if necessary\n    max_size = max(max_size, curr_size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list in ascending order\n    a = sorted(a)\n    # initialize variables to keep track of the current maximum and the maximum seen so far\n    curr_max = 1\n    max_seen = 1\n    # loop through the list and update the maximum seen so far and the current maximum\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            curr_max += 1\n        else:\n            curr_max = 1\n        max_seen = max(max_seen, curr_max)\n    # return the maximum seen so far\n    return max_seen"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of integers as input and returns the size of the largest subset of the list that is divisible by every pair of integers.\n    \"\"\"\n    # Sort the list in descending order\n    a.sort(reverse=True)\n    # Initialize the variables\n    count = 1\n    prev = a[0]\n    # Traverse the list\n    for num in a[1:]:\n        if num % prev == 0:\n            count += 1\n            prev = num\n        else:\n            prev = num\n            count = 1\n    # Return the count of divisible subset\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    a.sort() # Sort the list in ascending order\n    n = len(a)\n    dp = [1]*n # Initialize dp array with 1's\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]: # If a[i] is divisible by a[j] and the size of the subset including a[i] is greater than the size of the subset excluding a[i], then update dp[i]\n                dp[i] = dp[j] + 1\n\n    return max(dp) # Return the size of the largest subset"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = n-1\n    while(True):\n        if i == j:\n            return (arr1[i]+arr2[i])/2\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j -= 1"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n\ndef get_median(arr1, arr2):\n    arr = arr1 + arr2\n    merge_sort(arr)\n    n = len(arr)\n    if n % 2 == 0:\n        median = (arr[n // 2 - 1] + arr[n // 2]) / 2\n    else:\n        median = arr[n // 2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merged_arr = merge(arr1, arr2)\n    median = None\n    if n % 2 == 0:\n        median = (merged_arr[n//2] + merged_arr[n//2-1]) / 2\n    else:\n        median = merged_arr[n//2]\n    return median\n\n\ndef merge(arr1, arr2):\n    '''\n    Merge two sorted lists into one sorted list.\n    '''\n    merged_arr = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n    return merged_arr"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If n is even, the median is the average of the middle two elements\n        return (arr1[n//2] + arr1[n//2 - 1] + arr2[n//2] + arr2[n//2 - 1]) / 4.0\n    else:\n        # If n is odd, the median is the middle element\n        return (max(arr1[n//2 - 1], arr2[n//2 - 1]) + min(arr1[n//2], arr2[n//2])) / 2.0"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        # if n is even, the median is the average of the middle two elements\n        return (max(arr1[n//2-1], arr2[n//2-1]) + min(arr1[n//2], arr2[n//2]))/2\n    else:\n        # if n is odd, the median is the middle element\n        return max(arr1[n//2], arr2[n//2])"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0 # pointer for first array\n    j = 0 # pointer for second array\n    \n    while True:\n        if i >= n: # if first array is completely traversed\n            return arr2[j + n // 2]\n        elif j >= n: # if second array is completely traversed\n            return arr1[i + n // 2]\n        elif i + j == n // 2: # if the median is found\n            return (max(arr1[i], arr2[j]) + min(arr1[i+1], arr2[j+1])) / 2\n        elif arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If the size of the two lists is even\n        # then the median is the average of the two middle elements\n        mid1 = n // 2\n        mid2 = mid1 - 1\n        return (max(arr1[mid1-1], arr2[mid2-1]) + min(arr1[mid1], arr2[mid2])) / 2\n    else:\n        # If the size of the two lists is odd\n        # then the median is the middle element\n        mid = n // 2\n        return max(arr1[mid-1], arr2[mid-1])"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # Even number of elements\n        median1 = (arr1[n//2] + arr1[n//2-1])/2\n        median2 = (arr2[n//2] + arr2[n//2-1])/2\n        return (median1 + median2)/2\n    else:\n        # Odd number of elements\n        median1 = arr1[n//2]\n        median2 = arr2[n//2]\n        return (median1 + median2)/2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size as input and returns their median.\n    \"\"\"\n    # create a merged list by concatenating the two lists\n    merged_list = arr1 + arr2\n\n    # find the median using the length of the merged list\n    if n % 2 == 0:\n        # if the length of merged list is even, the median is the average of the middle two elements\n        median = (merged_list[n//2] + merged_list[n//2 - 1]) / 2\n    else:\n        # if the length of merged list is odd, the median is the middle element\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists as input and returns their median.\n    '''\n\n    # Find the middle element of the first list\n    mid1 = n//2\n    \n    # Find the middle element of the second list\n    mid2 = n//2\n    \n    # If n is odd, the median will be the average of the middle elements of both lists\n    if n % 2!= 0:\n        return (max(arr1[mid1-1], arr2[mid2-1]) + min(arr1[mid1], arr2[mid2]))/2\n    \n    # If n is even, the median will be the average of the middle two elements of both lists\n    else:\n        return (max(arr1[mid1-1], arr2[mid2-1]) + min(arr1[mid1], arr2[mid2]))/2\n"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers `nums` and an integer `n` as input,\n    and returns the n-th power of each number in the list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes in a list of numbers and returns a new list containing the nth power of each number in the original list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Computes the n-th power of each number in a list.\n\n    Args:\n    nums: list of integers\n    n: integer\n\n    Returns:\n    list of integers: The n-th power of each number in the input list.\n    '''\n\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    This function takes a list of numbers and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and returns it in uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, False otherwise.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if the string is in uppercase, False otherwise.\n    \"\"\"\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and returns a new list with the first and last elements interchanged.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] # swapping the elements\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and swaps the first and last element of the list. \n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.insert(len(newList), newList.pop(0))\n    print(\"After swapping: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last element in the list.\n    '''\n    if len(newList) > 1:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n    else:\n        return \"List should have at least two elements.\""
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and interchanges the first and last element of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] # Using tuple unpacking to swap the elements\n    print(newList)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius of a semicircle and returns the area of the largest triangle\n    that can be inscribed in it.\n    '''\n    # Find the length of the side of the inscribed triangle\n    s = 2 * r * math.sin(math.pi/3)\n\n    # Calculate the area of the inscribed triangle\n    area = (3 * r**2) / 2 * (1 - (s**2) / (3 * r**2))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n        r (float): radius of the semicircle.\n\n    Returns:\n        area (float): area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    # Formula for area of triangle = (1/2)ab, where a and b are the legs of the triangle\n    # a and b can be found using the formula c^2 = a^2 + b^2, where c is the radius of the semicircle\n    # Therefore, a = sqrt(r^2 - (r/2)^2) and b = sqrt(r^2 - (r/2)^2)\n    a = math.sqrt(r**2 - (r/2)**2)\n    b = math.sqrt(r**2 - (r/2)**2)\n    area = 0.5 * a * b\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    :param r: The radius of the semicircle.\n    :return: The area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    # The radius of the inscribed circle is half the given radius.\n    inscribed_circle_radius = r / 2\n    \n    # The length of the two sides of the inscribed triangle is the inscribed circle radius times the sine of 30 degrees (or 1/2 pi radians).\n    side_length = inscribed_circle_radius * math.sin(math.pi / 6)\n    \n    # The area of the inscribed triangle is half the product of the two sides and the inscribed circle radius.\n    inscribed_triangle_area = 0.5 * side_length * inscribed_circle_radius\n    \n    # The area of the largest triangle that can be inscribed in the semicircle is the area of the inscribed triangle times 2.\n    return inscribed_triangle_area * 2"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the length of the triangle's hypotenuse\n    h = math.sqrt(r**2 - (r/2)**2)\n    \n    # calculate the area of the triangle\n    area = (0.5*r**2)*(math.asin(r/h))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    # find the radius of the largest inscribed triangle\n    radius_max = r/math.sqrt(2)\n\n    # calculate the area of the triangle\n    area = math.pi * radius_max**2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in a semicircle with radius r.\n    \"\"\"\n    # Calculate the radius of the inscribed circle\n    R = r / math.sqrt(2)\n    \n    # Calculate the length of the legs of the largest triangle\n    a = math.sqrt(R**2 - r**2/2)\n    \n    # Calculate the area of the largest triangle\n    area = 0.5 * a * r\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the circumference of the circle\n    circumference = 2 * math.pi * r\n    \n    # Calculate the area of a triangle with one leg equal to half the circumference\n    max_triangle_area = 0.5 * circumference**2\n    \n    return max_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Convert the radius to an angle\n    angle = math.asin(1 / r)\n    \n    # Calculate the length of the chord that bisects the semicircle\n    chord_length = 2 * r * math.sin(angle / 2)\n    \n    # Calculate the area of the triangle\n    area = 0.5 * chord_length ** 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    # calculate the radius of the largest circle that can be inscribed in a semicircle with radius r\n    R = r / (2 / math.tan(math.pi / 6))\n    \n    # calculate the area of the largest triangle inscribed in the circle\n    A = math.pi * (R ** 2) / 2\n    \n    return A"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # calculate the length of the largest triangle's hypotenuse\n    h = r / math.tan(math.pi / 3)\n    # calculate the area of the triangle\n    area = (math.sqrt(3) / 4) * h**2\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i] <= 0 or array[i] > end:\n            return \"Invalid Input\"\n    \n    for i in range(start, end+1):\n        j = array[i] - start\n        if j < 0 or j > end-start:\n            return \"Invalid Input\"\n        \n        if array[j]!= i+start+1:\n            temp = array[i]\n            array[i] = array[j]\n            array[j] = temp\n    \n    for i in range(start, end+1):\n        if array[i]!= i+start+1:\n            return i+start+1\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] - array[start] >= 0 and array[i] - array[start] <= end - start:\n            array[array[i] - array[start]] = array[i]\n\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    :param array: sorted list of natural numbers\n    :param start: start index of the array (default is 0)\n    :param end: end index of the array (default is the end of the array)\n    :return: smallest missing number\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Find the first and last missing numbers\n    first_missing = start\n    last_missing = end + 1\n\n    while first_missing <= last_missing:\n        mid = (first_missing + last_missing) // 2\n        if mid == array[mid]:\n            first_missing = mid + 1\n        else:\n            last_missing = mid - 1\n\n    return first_missing\n"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number from the list.\n    \"\"\"\n    # If end is not provided, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the count of missing numbers to 0\n    missing_count = 0\n\n    # Traverse the array from the start index to the end index\n    for i in range(start, end + 1):\n        # If the current element is missing, increment the count of missing numbers\n        if array[i] - i - 1 >= missing_count:\n            missing_count += 1\n\n    # Return the smallest missing number\n    return start + missing_count"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n\n    # If end is not specified, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Set the initial value of missing to the first number in the array\n    missing = array[start]\n\n    # Traverse the array from start to end\n    for i in range(start + 1, end + 1):\n        # If the current number is equal to the missing number, increment missing\n        if array[i] == missing:\n            missing += 1\n\n    # If missing is equal to the length of the array, all numbers are present and the next number is the missing number\n    if missing == end - start + 1:\n        return end + 1\n\n    # Otherwise, return the missing number\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_missing(array, start=0, end=None):\n    \"\"\"\n    Returns the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers.\n    :param start: Starting index of the array.\n    :param end: Ending index of the array.\n    :return: The smallest missing number from the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Find the minimum element in the array.\n    min_element = array[start]\n    for i in range(start + 1, end + 1):\n        if array[i] < min_element:\n            min_element = array[i]\n\n    # Create a hash table of the elements in the array.\n    hash_table = {}\n    for i in range(start, end + 1):\n        hash_table[array[i]] = True\n\n    # Traverse the array and check if the element is present in the hash table.\n    missing_number = min_element - 1\n    for i in range(start, end + 1):\n        if i + 1!= array[i]:\n            if array[i] in hash_table:\n                del hash_table[array[i]]\n            else:\n                missing_number = i + 1\n                break\n\n    # Return the missing number.\n    return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    # Find the pivot element of the array\n    pivot = (start + end) // 2\n\n    # Check if the pivot is the missing number\n    if (pivot == array[pivot]) and (pivot!= end):\n        return find_First_Missing(array, pivot + 1, end)\n    elif (pivot == array[pivot]) and (pivot == end):\n        return find_First_Missing(array, start, end - 1)\n    else:\n        # Check if the missing number is on the left side of the pivot\n        if array[pivot] == pivot + 1:\n            return find_First_Missing(array, pivot + 1, end)\n        else:\n            # The missing number must be on the right side of the pivot\n            return array[pivot] + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number from it.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        return None\n\n    mid = (start + end) // 2\n\n    # Check if the middle element is present in the list.\n    if mid < len(array) and array[mid] == mid + start:\n        return find_First_Missing(array, mid + 1, end)\n\n    # Check if the element on the left of middle is present in the list.\n    if mid - 1 >= start and array[mid - 1] == mid - 1 + start:\n        return find_First_Missing(array, start, mid - 1)\n\n    return mid + start\n"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # iterate through the array and mark the values as missing\n    for i in range(start, end+1):\n        if array[i] > 0:\n            index = abs(array[i]) - 1\n            array[index] = -abs(array[index])\n\n    # find the first missing number\n    for i in range(start, end+1):\n        if array[i] > 0:\n            return i + 1\n\n    # all numbers are missing\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if end < start:\n        return end + 1\n    \n    # Find the middle index of the array\n    mid = (start + end) // 2\n    \n    # Check if the middle element is missing\n    if array[mid]!= mid + start:\n        # If the middle element is not missing, check the left half\n        return find_first_missing(array, start, mid - 1)\n    else:\n        # If the middle element is missing, check the right half\n        return find_first_missing(array, mid + 1, end)\n    "
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(\" \", \"%20\")\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for char in string:\n        if char =='':\n            new_string += '%20'\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_even(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a new list with all the even numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_even(lst):\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with only even numbers from the original list.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of even numbers from the list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers and returns a new list containing only the even numbers from the original list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_list(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j)!= (0, 0):\n                adj.append((ele[0]+i, ele[1]+j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a tuple of coordinates (x,y) and returns a list of tuples,\n    which represent all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)] + sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    # check north\n    if y > 0:\n        adj.append((x, y-1))\n    # check south\n    if y < 6:\n        adj.append((x, y+1))\n    # check west\n    if x > 0:\n        adj.append((x-1, y))\n    # check east\n    if x < 6:\n        adj.append((x+1, y))\n    # remove subtraction elements from adjacent list\n    adj = [a for a in adj if a not in sub]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjs = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            else:\n                adj = (ele[0] + i, ele[1] + j)\n                if adj not in sub:\n                    adjs.append(adj)\n    return adjs"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            for k in range(-1, 2):\n                if i == j == k == 0:\n                    continue\n                adjacent.append((ele[0]+i, ele[1]+j, ele[2]+k))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            adj.append((ele[0]+i, ele[1]+j))\n    return sub + adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0]-1 >= 0:\n        sub.append((ele[0]-1,ele[1]))\n    if ele[0]+1 <= 9:\n        sub.append((ele[0]+1,ele[1]))\n    if ele[1]-1 >= 0:\n        sub.append((ele[0],ele[1]-1))\n    if ele[1]+1 <= 9:\n        sub.append((ele[0],ele[1]+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    This function returns all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the possible adjacent coordinates\n    adj_coords = [(ele[0]-1,ele[1]), (ele[0]+1,ele[1]), (ele[0],ele[1]-1), (ele[0],ele[1]+1)]\n    \n    # Remove the adjacent coordinates that are out of bounds\n    adj_coords = [x for x in adj_coords if (x[0] >= 0 and x[1] >= 0) and (x[0] < 8 and x[1] < 8)]\n    \n    # Return the list of adjacent coordinates\n    return sub + adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    This function takes a tuple of coordinates (x,y) and returns a list of tuples representing the adjacent coordinates.\n    '''\n    if len(ele)!= 2:\n        print(\"The input tuple should be of length 2 (x,y)\")\n        return\n    \n    if not isinstance(ele[0], int) or not isinstance(ele[1], int):\n        print(\"The input tuple should contain integers only\")\n        return\n    \n    adjacent = []\n    \n    # check for adjacent coordinates to the left\n    if ele[0] > 0:\n        adjacent.append((ele[0]-1, ele[1]))\n    \n    # check for adjacent coordinates to the right\n    if ele[0] < 4:\n        adjacent.append((ele[0]+1, ele[1]))\n    \n    # check for adjacent coordinates up\n    if ele[1] > 0:\n        adjacent.append((ele[0], ele[1]-1))\n    \n    # check for adjacent coordinates down\n    if ele[1] < 4:\n        adjacent.append((ele[0], ele[1]+1))\n    \n    # check for adjacent coordinates in the sub list\n    for coord in sub:\n        if coord[0] == ele[0]:\n            if coord[1] == ele[1]-1 or coord[1] == ele[1]+1:\n                adjacent.remove(coord)\n    \n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj_list = []\n    for i in range(len(ele)):\n        for j in range(len(ele[i])):\n            if (i+1, j) not in sub and (i-1, j) not in sub and (i, j+1) not in sub and (i, j-1) not in sub:\n                adj_list.append((i+1, j))\n                adj_list.append((i-1, j))\n                adj_list.append((i, j+1))\n                adj_list.append((i, j-1))\n    return adj_list"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Check if the text is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace spaces with underscores\n    new_text = text.replace(' ', '_')\n\n    # Replace underscores with spaces\n    new_text = new_text.replace('_','')\n\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n\n    Args:\n    num_list (list): A list of integers.\n\n    Returns:\n    list: A new list with zeroes at the end.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create two empty lists\n    zeros = []\n    non_zeros = []\n    \n    # Loop through each element in the list\n    for num in num_list:\n        # If the element is zero, append it to the zeros list\n        if num == 0:\n            zeros.append(num)\n        # If the element is non-zero, append it to the non_zeros list\n        else:\n            non_zeros.append(num)\n    \n    # Concatenate the zeros and non_zeros lists to get the final result\n    result = zeros + non_zeros\n    \n    return result"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as input and moves all zeroes to the end of the list.\n    '''\n    # Get the index of the first non-zero element in the list.\n    first_non_zero_index = 0\n    while first_non_zero_index < len(num_list) and num_list[first_non_zero_index]!= 0:\n        first_non_zero_index += 1\n    \n    # Move all non-zero elements to the beginning of the list.\n    non_zero_elements = num_list[:first_non_zero_index]\n    zero_elements = num_list[first_non_zero_index:]\n    num_list = non_zero_elements + zero_elements\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = [0] * num_list.count(0)  # Create a list of zeroes\n    non_zeroes = [x for x in num_list if x!= 0]  # Create a list of non-zeroes\n    return non_zeroes + zeroes  # Combine the two lists and return it"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all the zeros to the end of the list.\n    '''\n\n    # Create two new lists to store the zeros and non-zeros\n    zeros = []\n    non_zeros = []\n\n    # Iterate through the input list\n    for num in num_list:\n        # If the number is zero, add it to the zeros list\n        if num == 0:\n            zeros.append(num)\n        # If the number is not zero, add it to the non-zeros list\n        else:\n            non_zeros.append(num)\n\n    # Concatenate the non-zero list with the zeros list and return the result\n    return non_zeros + zeros"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as an argument and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = [0 for _ in range(num_list.count(0))]\n    return zeroes + [num for num in num_list if num!= 0]"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as an input and moves all zeroes to the end of the list.\n    \"\"\"\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n    for i in zero_indices:\n        num_list.append(num_list.pop(i))\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            num_list.remove(num)\n    num_list.extend(zeroes)"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes two arguments arr and n, where arr is a list of integers and n is the length of the list.\n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            xor_sum = xor_sum + arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Finds the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through all pairs of numbers in the list\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Find the xor of the two numbers\n            xor = arr[i] ^ arr[j]\n            # Add the xor to the sum variable\n            sum += xor\n\n    # Return the sum of all pairs of numbers\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of integers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the XOR of the pair of elements and add it to the total sum\n            total_sum += arr[i] ^ arr[j]\n            \n    # Return the total sum of XOR values\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of n numbers and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Traverse through all pairs of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            # Find xor of two numbers\n            xor = arr[i] ^ arr[j]\n            \n            # Add xor to sum\n            sum += xor\n    \n    # Return sum of xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    \n    # calculate the xor sum of all pairs\n    for i in range(n) : \n        for j in range(i+1,n) : \n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n            \n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    sorted_list.reverse()\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = iterable\n    heapq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable in ascending order using heap sort algorithm.\n    '''\n    heap = iterable[:]\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using heap sort algorithm.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and sorts it using heap sort algorithm.\n    '''\n    # Convert the iterable to a max-heap\n    hq.heapify(iterable)\n    \n    # Extract elements from the heap one by one\n    for i in range(len(iterable)-1, 0, -1):\n        # Swap the root with the last element of the heap\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        \n        # Reduce the heap size by 1\n        hq.heappop(iterable)\n    \n    # The heap is now sorted in ascending order\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n    '''\n    if sale_amount > actual_cost:\n        print(\"No profit and no loss.\")\n    elif sale_amount < actual_cost:\n        print(\"No profit but loss.\")\n    else:\n        print(\"No profit and no loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given sale amount has no profit and no loss.\n    '''\n    if sale_amount >= actual_cost:\n        print(\"No profit no loss\")\n    else:\n        print(\"Profit or loss exists\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two arguments: actual_cost and sale_amount.\n    actual_cost is the cost of the product before selling it and sale_amount is the amount of the product sold.\n    This function returns True if the sale has no profit and no loss and False otherwise.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return False\n    elif profit == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if sale_amount > actual_cost:\n        print(\"No profit no loss\")\n    elif sale_amount == actual_cost:\n        print(\"No profit, but there is loss\")\n    else:\n        print(\"There is profit, but no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n        actual_cost (float): The actual cost of the item.\n        sale_amount (float): The amount sold.\n\n    Returns:\n        bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    return sale_amount >= actual_cost"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        print(\"No profit and no loss\")\n    else:\n        print(\"There is a loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        print(\"No profit, no loss\")\n    elif sale_amount == actual_cost:\n        print(\"No profit, but loss is possible\")\n    else:\n        profit = sale_amount - actual_cost\n        print(f\"Profit: {profit}\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        print(\"The sale has no profit and no loss.\")\n    else:\n        print(\"The sale has profit or loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    :param actual_cost: The actual cost of the product or service.\n    :type actual_cost: float\n    :param sale_amount: The amount obtained after selling the product or service.\n    :type sale_amount: float\n    :return: A boolean value indicating whether the given amount has no profit and no loss.\n    :rtype: bool\n    \"\"\"\n\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"Profit\")\n    elif sale_amount < actual_cost:\n        print(\"Loss\")\n    else:\n        print(\"No profit and no loss\")"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # convert velocity from km/h to m/s\n    v = v / 3.6\n    \n    # calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate wind chill index\n    wc_index = 35.74 + 0.6215*t_f - 35.75*(v**0.16) + 0.4275*t_f*(v**0.16)\n    \n    # Round wind chill index to the next integer\n    wc_index_rounded = round(wc_index)\n    \n    return wc_index_rounded"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Function to calculate wind chill index\n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: wind chill index rounded to the next integer\n    \"\"\"\n    # convert velocity from km/h to m/s\n    v_ms = v * 0.277778\n\n    # calculate temperature in Kelvin\n    t_k = t + 273.15\n\n    # calculate wind chill index\n    wc = 13.12 + 0.6215 * t_k - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t_k * math.pow(v_ms, 0.16)\n\n    # round the wind chill index to the next integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # Calculate the wind chill index (in \u00b0C)\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the index to the nearest integer and return it\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes the wind velocity in km/h and temperature in celsius and returns the wind chill index rounded to the next integer.\n    '''\n    # convert the temperature from celsius to fahrenheit\n    t = (t * 1.8) + 32\n    \n    # calculate the wind chill index\n    wind_chill_index = 35.74 + (0.6215 * t) - (35.75 * (v ** 0.16)) + (0.4275 * t * (v ** 0.16))\n    \n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    # return the wind chill index\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #convert wind velocity from km/h to m/s\n    v = v / 3.6\n    #calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v,0.16) + 0.3965 * t * math.pow(v,0.16)\n    #round the wind chill index to the next integer\n    wc = round(wc)\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index (in Celsius) rounded to the next integer given the wind velocity in km/h and a temperature in Celsius.\n\n    Formula: T_w = 13.12 + 0.6215 * T - 11.37 * (v ** 0.16) + 0.3965 * T * (v ** 0.16)\n    '''\n    # Convert velocity from km/h to m/s\n    v = v / 3.6\n    \n    # Calculate the wind chill index\n    T_w = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer and convert it back to Celsius\n    T_w = round(T_w)\n    T_w = (T_w - 32) * 5 / 9\n    \n    return T_w"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert velocity from km/h to m/s\n    v = v / 3.6\n\n    # calculate the wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # round the wind chill index to the next integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    Returns the wind chill index rounded to the next integer.\n    \"\"\"\n    # convert temperature to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # calculate the wind chill index\n    wind_chill_index = 35.74 + (0.6215 * t_f) - (35.75 * (v ** 0.16)) + (0.4275 * t_f * (v ** 0.16))\n    \n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the length of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    return sum([len(name) for name in filtered_names])"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    \n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the length of the names after removing the names\n    that start with a lowercase letter.\n    \"\"\"\n    # Define an empty list to store the filtered names\n    filtered_names = []\n    # Iterate over each name in the input list\n    for name in sample_names:\n        # Check if the first character of the name is lowercase\n        if name[0].islower():\n            # If the first character is lowercase, add the name to the filtered names list\n            filtered_names.append(name)\n    # Define a variable to store the sum of the length of the filtered names\n    filtered_names_sum = 0\n    # Iterate over each filtered name in the filtered names list\n    for filtered_name in filtered_names:\n        # Add the length of the filtered name to the filtered names sum\n        filtered_names_sum += len(filtered_name)\n    # Return the filtered names sum\n    return filtered_names_sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    This function will take a list of names as input and return the sum of length of the names in the list after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'(\\([^)]*\\))')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)\n\nprint(remove_parenthesis(\"Hello (world)\")) # Output: \"Hello \""
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string or a list of strings and removes any text between parenthesis and returns the modified string.\n    '''\n    if isinstance(items, str):\n        # Check if the string contains parenthesis\n        if '(' in items and ')' in items:\n            # Remove any text between parenthesis\n            items = re.sub(r'\\([^)]*\\)', '', items)\n    elif isinstance(items, list):\n        new_items = []\n        for item in items:\n            # Check if the string contains parenthesis\n            if '(' in item and ')' in item:\n                # Remove any text between parenthesis\n                new_item = re.sub(r'\\([^)]*\\)', '', item)\n                new_items.append(new_item)\n        items = new_items\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string or a list of strings as input.\n    If the input is a string, it removes any parenthesis and what is inbetween them from the string.\n    If the input is a list of strings, it removes any parenthesis and what is inbetween them from each string in the list.\n    '''\n    if isinstance(items, str):\n        # Remove parenthesis and what is inbetween them from a string\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        return items\n    elif isinstance(items, list):\n        # Remove parenthesis and what is inbetween them from each string in a list\n        for i in range(len(items)):\n            items[i] = re.sub(r'\\([^)]*\\)', '', items[i])\n        return items\n    else:\n        print('Input must be a string or a list of strings.')"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^()]*\\)' # pattern to match parenthesis and what is inbetween them\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]+\\)'\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_items.append(new_item)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)' # define the pattern to match parenthesis and what is inside them\n    return re.sub(pattern, '', items) # remove the pattern from the string"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as an argument and returns the nth nonagonal number.\n    \"\"\"\n    num = 1\n    count = 1\n    while count < n:\n        num += 16\n        count += 1\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    count = 1\n    while count <= n:\n        num += 1\n        count += sum(1 for i in range(1, num) if num - i > 0 and num - (2*i) > 0)\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    # Calculate the first term of the series\n    first_term = n * (3 * n - 1) // 2\n    \n    # Return the first term of the series\n    return first_term"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3*n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 1\n        count += sum(range(1, num+1))\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    return n * (3*n-1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # initialize variables\n    a = 1\n    b = 1\n    count = 1\n    \n    # loop through until n nonagonals are found\n    while count < n:\n        # add a and b\n        c = a + b\n        # update a and b\n        a = b\n        b = c\n        # increment count\n        count += 1\n    \n    # return the nth nonagonal number\n    return a + b - 1"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the variables\n    a = 1\n    b = 1\n    \n    # Loop through the range of n\n    for i in range(n):\n        # Calculate the nth nonagonal number\n        c = a + (6 * (i + 1))\n        \n        # Return the nth nonagonal number\n        if i == n - 1:\n            return c\n        \n        # Update the values of a and b for the next iteration\n        a = b\n        b = c"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = 0\n    count = 1\n    while count <= n:\n        nonagonal += count\n        count += 1\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    count = 0\n    while count < n:\n        if i + j > 2 * n:\n            break\n        print(i + j)\n        i += 1\n        j += 1\n        count += 1"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*\\b)z(?!.*\\b)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\Bz\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz\\b' # regular expression pattern to match 'z' except at start and end of word\n    if re.search(pattern, text): # check if pattern is found in the given text\n        return True # if pattern is found, return True\n    else:\n        return False # if pattern is not found, return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?!^)[^z]*z[^z]*\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\w(?<!^)(?!$)z\\w*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Find all the words in the text\n    words = re.findall(r'\\w+', text)\n\n    # Loop through each word and check if it contains 'z', except at the start and end of the word\n    for word in words:\n        if 'z' in word[1:-1]:\n            return True\n    \n    # If no words contain 'z', except at the start and end of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = re.compile(r'\\b(?![^ ])z(?![^ ])\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[^z]\\bz\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\bz\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverses an array up to a given position.\n\n    :param input: An array of integers.\n    :param k: An integer indicating the position up to which to reverse the array.\n    :return: A reversed array up to position `k`.\n    \"\"\"\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Convert input into a list\n    input_list = list(input)\n    # Reverse the list upto the given position\n    input_list[0:k] = input_list[0:k][::-1]\n    # Convert the list back into a string\n    result = ''.join(input_list)\n    return result"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an input array and a position k and returns the input array \n    in reverse order up to the kth position. \n    '''\n    # convert the input array to a list to be able to reverse it \n    input_list = list(input)\n    \n    # reverse the list up to the kth position \n    input_list[:k] = reversed(input_list[:k])\n    \n    # convert the list back to an array and return it \n    return input_list"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function reverses an array upto a given position k.\n    '''\n    # reverse the array upto position k\n    input = input[:k][::-1]\n    # join the reversed array with the remaining elements\n    input = input + input[k:]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initializing the variables\n    output = []\n    count = 0\n    \n    # Iterating through the input array and adding the elements to the output array\n    for i in range(len(input)):\n        output.append(input[i])\n        count += 1\n        \n        # Reversing the array after the k position\n        if count == k:\n            break\n        \n    # Reversing the output array\n    output.reverse()\n    \n    return output"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an input array and a position k as input and reverses the array upto the kth position.\n    \"\"\"\n    if k > len(input):\n        return \"Invalid k value\"\n    else:\n        return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n:\n        return input\n    else:\n        return input[k:n] + input[0:k]"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function adds a dictionary to the tuple. The output is a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_avg = -1\n    \n    for k in range(1, n):\n        for i in range(n-k):\n            j = i + k\n            dp[i][j] = cost[i][j] + max(dp[i+1][j], dp[i][j-1])\n            avg = dp[i][j] / (k+1)\n            if avg > max_avg:\n                max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = dp[n-1][n-1]/2\n    for i in range(n):\n        for j in range(n):\n            if i+j-1 >= 0 and i+j-1 <= n-1:\n                if dp[i][j] == max(dp[i-1][j], dp[i][j-1]) + cost[i][j]:\n                    if (i+j-1)%2 == 0:\n                        max_avg = max(max_avg, (dp[i-1][j]+cost[i][j])/2)\n                    else:\n                        max_avg = max(max_avg, (dp[i][j-1]+cost[i][j])/2)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                max_avg = max(max_avg, dp[i][j] / (j+1))\n            elif j == 0:\n                max_avg = max(max_avg, dp[i][j] / (i+1))\n            else:\n                max_avg = max(max_avg, dp[i][j] / (i+j+2))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)] # dynamic programming table\n    dp[0][0] = cost[0][0] # base case\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0] # for first row, max cost can be from left cell\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j] # for first column, max cost can be from top cell\n    \n    # fill the rest of the table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # find the maximum average path\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j == 0:\n                continue\n            avg = (dp[i][j] - dp[i-1][j-1] - dp[i][j-1] + dp[i-1][j]) / (i+j+1)\n            if avg > max_avg:\n                max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and \n    ends on bottom right cell. We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # Initialize top and left boundaries\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n\n    # Fill the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average path\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            max_avg = max(max_avg, (dp[i][j] - dp[i-1][j] - dp[i][j-1] + cost[i][j]) / (i+j-1))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    \n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Initialize first row and column\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = cost[0][j]\n    \n    # Fill remaining cells using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    # Find the maximum average of all paths\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            path_sum = cost[i][j]\n            path_count = 1\n            \n            # Check for paths that end at this cell\n            if i > 0 and dp[i-1][j] > dp[i][j]:\n                path_sum += dp[i-1][j]\n                path_count += 1\n            if j > 0 and dp[i][j-1] > dp[i][j]:\n                path_sum += dp[i][j-1]\n                path_count += 1\n            \n            avg = path_sum / path_count\n            if avg > max_avg:\n                max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1] / (2*n - 1)\n"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    \n    # Initialize the maximum average and the corresponding path\n    max_avg = cost[0][0]\n    max_path = [(0, 0)]\n    \n    # Generate all possible paths from (0, 0) to (n-1, n-1)\n    for i in range(1, n):\n        for j in range(i+1):\n            path = [(0, j)]\n            for k in range(1, i+1):\n                path.append((k, j+k))\n            for k in range(i+1, n):\n                path.append((i, k))\n            avg = sum(cost[i][j] for i, j in path) / len(path)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path\n    \n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for i in range(n):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1] / 2\n"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # initialize the maximum average and the path length\n    max_avg = 0\n    max_path_length = 0\n\n    # iterate over all possible path lengths from 1 to N*N\n    for path_length in range(1, len(cost) + 1):\n        # iterate over all possible starting positions of the path\n        for i in range(len(cost) - path_length + 1):\n            j = i + path_length - 1\n            # compute the average cost of the current path\n            current_avg = sum(cost[i:j+1]) / path_length\n            # update the maximum average and path length if necessary\n            if current_avg > max_avg:\n                max_avg = current_avg\n                max_path_length = path_length\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            filtered_students[student] = students[student]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base**power):\n        sum += int(digit)\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base ** power):\n        total += int(digit)\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base and power to strings so we can iterate over the characters\n    base_str = str(base)\n    power_str = str(power)\n\n    # Initialize the sum to zero\n    total = 0\n\n    # Iterate over the characters of the base string\n    for digit in base_str:\n        # Convert the digit back to an integer and add it to the total\n        total += int(digit)\n\n    # Iterate over the digits of the power string\n    for digit in power_str:\n        # Convert the digit back to an integer, calculate its power, and add it to the total\n        total += int(digit) ** power\n\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base)\n        base *= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    base_int = int(base)\n    while power > 0:\n        digit = base_int % 10\n        power_sum += digit ** power\n        base_int //= 10\n        power -= 1\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for digit in base_str:\n        sum += int(digit) ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    temp = base\n    while temp!= 0:\n        base_sum += temp % 10\n        temp //= 10\n    result = base_sum ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for digit in base_str:\n        sum += int(digit) ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power+1):\n        sum += int(base**i)\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # pattern to match quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    \n    # find all matches of pattern in the text\n    matches = pattern.findall(text1)\n    \n    # return the matches as a list of strings\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n    list: A list of values between quotation marks.\n    \"\"\"\n\n    # Find all matches of quotation marks in the text\n    matches = re.findall('\"[^\"]+\"', text)\n\n    # Extract the values between quotation marks and store them in a list\n    values = [match.strip('\"') for match in matches]\n\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = r'\\\"(.*?)\\\"'\n    match_obj = re.findall(quotation_pattern, text1)\n    return match_obj"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all matches of pattern \" \" and \" \"\n    matches = re.findall(r'\"(.*?)\"', text1)\n    # Return a list of extracted values\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(N))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    \n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Check if input is a tuple\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    \n    # Get the length of the tuple\n    N = len(test_tup) - 1\n    \n    # Create an empty tuple with the same length\n    result_tup = (0,) * N\n    \n    # Iterate over the input tuple and multiply elements\n    for i in range(N):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    \n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists as input and returns the sum of their elements as a list.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        return \"Error: Lists should be of same size.\"\n    else:\n        result = []\n        for i in range(len(lst1)):\n            result.append(lst1[i] + lst2[i])\n        return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Takes two lists as input and returns their element-wise sum.\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum.\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Add corresponding elements from two lists and return a new list.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum as output.\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns the list of their element-wise sum.\n\n    Parameters:\n    lst1 (list): The first list of numbers.\n    lst2 (list): The second list of numbers.\n\n    Returns:\n    list: The list of their element-wise sum.\n\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists and returns their element-wise sum.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function removes consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group[-1])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools.groupby to group consecutive duplicates\n    groups = groupby(nums)\n    # Use list comprehension to extract groups with more than one element\n    result = [list(group) for key, group in groups if len(list(group)) > 1]\n    # Flatten the list of lists into a single list\n    return [elem for sublist in result for elem in sublist]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    # Use groupby to group the elements of nums by consecutive duplicates\n    groups = [(k, list(g)) for k, g in groupby(nums)]\n\n    # Filter out the groups with only one element\n    groups = [g for g in groups if len(g[1]) > 1]\n\n    # Flatten the list of groups into a single list\n    result = [g for g in groups for _ in range(len(g[1]) - 1)]\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list of numbers.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result.append(k)\n        else:\n            result.extend(g)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function removes consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        group = list(g)\n        if len(group) > 1:\n            result.append(group[0])\n        else:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        group = list(g)\n        if len(group) > 1:\n            yield group[0]\n        else:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    # group by consecutive duplicates\n    grouped = groupby(nums)\n    \n    # flatten the grouped list and convert to a list\n    result = list(flatten(grouped))\n    \n    return result\n\ndef flatten(grouped):\n    '''\n    Flatten a grouped list of consecutive duplicates.\n    '''\n    for k, g in grouped:\n        if len(list(g)) > 1:\n            yield k\n        else:\n            yield from g"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result.append(k)\n        else:\n            result += list(g)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if key!= group[0]:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    groups = [(k, sum(1 for _ in g)) for k, g in groupby(nums)]\n    return [k for k, count in groups if count == 1]"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the lateral surface area of the cone.\n    '''\n    return math.pi * r * h + math.pi * r**2\n"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes two arguments:\n    r: radius of the cone (float)\n    h: height of the cone (float)\n    '''\n    # Calculate the lateral surface area of the cone\n    lateral_surface = math.pi * r * h\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function returns the lateral surface area of a cone with radius r and height h.\n    '''\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * r + math.pi * r * math.sqrt(r * r + h * h)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes the radius r and height h of a cone as inputs and returns the lateral surface area of the cone.\n    '''\n    return math.pi * r * h + 2 * math.pi * r**2"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateral_area = math.pi * r * h\n    \n    # Return the result\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+math.sqrt(r**2 + h**2))\n"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[.,\\s]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[.,\\s]'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[\\s,\\.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon in the given text.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[., ]\", \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,.]+')\n    return pattern.sub(':', text)\n"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the result to -1\n    result = -1\n    \n    # Loop through the array from the beginning\n    for i in range(len(A)):\n        # If we find the number we are looking for, update the result and break out of the loop\n        if A[i] == x:\n            result = i\n            break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    left = 0\n    right = len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    index = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return index"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        \n        elif A[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the variables\n    left, right = 0, len(A) - 1\n    result = -1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # x not found in A"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    \n    # Initialize a prefix product array to store cumulative product from left to right\n    prefix_prod = [1] * n\n    \n    # Calculate cumulative product of all elements from left to right\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n    \n    # Calculate cumulative product of all elements from right to left\n    suffix_prod = [1] * n\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i+1]\n    \n    # Calculate sum of products of all possible sublists\n    for i in range(n):\n        total_sum += prefix_prod[i] * suffix_prod[i]\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes an input list and returns the sum of products of all possible sublists of the list.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] * arr[i], arr[i])\n    \n    return sum(dp)\n"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = [0] * n\n    res[0] = arr[0]\n    res[1] = arr[0] * arr[1]\n    for i in range(2, n):\n        res[i] = arr[i] * (res[i-1] + res[i-2])\n    return res[n-1]"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix = [1]*n\n    postfix = [1]*n\n    \n    for i in range(1, n):\n        prefix[i] = prefix[i-1] * arr[i-1]\n        \n    for i in range(n-2, -1, -1):\n        postfix[i] = postfix[i+1] * arr[i+1]\n        \n    ans = 0\n    \n    for i in range(n):\n        ans += prefix[i] * postfix[i]\n        \n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of products of all possible sublists of the array.\n\n    :param arr: An array of integers.\n    :return: The sum of products of all possible sublists of the array.\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for i in range(n)]\n\n    # Calculate the product of each element from left to right\n    for i in range(n):\n        dp[i][i] = arr[i]\n        if i < n - 1:\n            dp[i][i+1] = dp[i][i] * arr[i+1]\n\n    # Calculate the product of each subarray from left to right\n    for s in range(2, n+1):\n        for i in range(n-s+1):\n            j = i+s-1\n            dp[i][j] = dp[i+1][j]\n            for k in range(i+1, j):\n                dp[i][j] = max(dp[i][j], dp[i][k]*dp[k+1][j])\n\n    # Calculate the sum of products of all possible sublists\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += dp[i][j]\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    # initialize variables to store the sum of products of sublists\n    sum_prod_sublist = 0\n    # initialize variables to store the cumulative sum of products of sublists\n    cum_sum_prod_sublist = [0] * n\n    # iterate over all possible sublists of length 1 to n\n    for i in range(n):\n        # add the product of sublist from index 0 to i to the sum of products of sublists\n        sum_prod_sublist += arr[i]\n        # add the product of sublist from index 0 to i to the cumulative sum of products of sublists\n        cum_sum_prod_sublist[i] = sum_prod_sublist\n    # initialize variables to store the cumulative sum of products of sublists ending at each index\n    cum_sum_prod_sublist_end = [0] * n\n    # iterate over all possible sublists of length 1 to n\n    for i in range(n):\n        # add the product of sublist from index i to n-1 to the cumulative sum of products of sublists ending at i\n        cum_sum_prod_sublist_end[i] = cum_sum_prod_sublist[n-1] - cum_sum_prod_sublist[i-1]\n    # return the cumulative sum of products of sublists ending at each index\n    return cum_sum_prod_sublist_end"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        res += i * arr[i]\n    for i in range(n):\n        res += (n-i-1) * arr[i]\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    prefix_prod = [1] * n\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n\n    suffix_prod = [1] * n\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i+1]\n\n    ans = 0\n    for i in range(n):\n        ans += prefix_prod[i] * suffix_prod[i]\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    This function toggles bits of the number except the first and the last bit.\n    For example, if n = 10101010, the function will return 01101010.\n    '''\n    mask = 0b11111100  # mask to select all bits except the first and last bit\n    return (n & mask) ^ (mask << 1)  # toggle the bits by XORing with a shifted version of the mask"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the given number\n    bin_n = bin(n)[2:]\n    \n    # Convert the binary representation into a list of bits\n    bin_list = list(bin_n)\n    \n    # Iterate over the list of bits and toggle all bits except the first and last bit\n    for i in range(1, len(bin_list)-1):\n        if bin_list[i] == '1':\n            bin_list[i] = '0'\n        else:\n            bin_list[i] = '1'\n    \n    # Convert the list of toggled bits back into a binary string and convert it to an integer\n    toggled_bin_str = ''.join(bin_list)\n    toggled_n = int(toggled_bin_str, 2)\n    \n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    # To toggle the bits, we will XOR the number with its binary representation shifted by 1 bit to the left and shifted by 1 bit to the right.\n    # For example, let's consider the binary representation of 5 (101):\n    # 101 = 0b101\n    # To toggle the bits, we will XOR it with the binary representation shifted by 1 bit to the left and shifted by 1 bit to the right.\n    # Shifting the binary representation to the left by 1 bit will result in 1010, which is equivalent to 10 (1010).\n    # Shifting the binary representation to the right by 1 bit will result in 0101, which is equivalent to 5 (0101).\n    # So, the XOR of 5 (101) with 1010 (101 shifted by 1 bit to the left) and with 0101 (5 shifted by 1 bit to the right) will be:\n    # 101 XOR 1010 XOR 0101 = 0011 (11), which is equivalent to 3 (0011) in decimal.\n    # We will use the bitwise AND operator to get rid of the first and last bits, as they should always be 0.\n    # First, we will XOR the number with its binary representation shifted by 1 bit to the left and shifted by 1 bit to the right.\n    # Then, we will use the bitwise AND operator to get rid of the first and last bits.\n    return (n ^ (n << 1) ^ (n >> 1)) & ~(1 << n.bit_length() - 1) & ~((1 << n.bit_length() - 1) - 1)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    mask = ((1 << 62) - 1) ^ ((1 << 1) - 1)\n    return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    This function takes a number as input and toggles the bits of the number except for the first and last bit.\n    '''\n    # XOR the number with 0xAAAAAAAA to toggle all bits except the first and last bit\n    toggled_n = n ^ 0xAAAAAAAA\n    \n    # XOR the number with 0x55555555 to toggle the first and last bit\n    toggled_n = toggled_n ^ 0x55555555\n    \n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes an integer n and toggles the bits of the number except the first and the last bit.\n    For example, if n is 10110101, the function will return 11101111.\n    \"\"\"\n    n = n ^ (n << 1)\n    n = n ^ (n >> 1)\n    n = n ^ (n << 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles the bits of a number except the first and last bit.\n    \"\"\"\n    return (n & ~(1 << (len(bin(n))-2))) | (1 << (len(bin(n))-3))"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # toggle all the bits except for the first and the last\n    toggled_bits = ((n >> 1) & 0x7fe) ^ n\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles the middle bits of a number.\n\n    Parameters:\n    n (int): The number to toggle the middle bits of.\n\n    Returns:\n    int: The number with the middle bits toggled.\n    \"\"\"\n    mask = (1 << (len(bin(n)) - 3)) - 1  # Get a mask with all bits set except the first and last.\n    n &= ~mask  # Clear the bits in the middle.\n    n ^= (1 << (len(bin(n)) - 3)) - 1  # Toggle the bits in the middle.\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # convert n to binary string\n    binary_str = bin(n)[2:]\n    \n    # toggle all bits except the first and the last\n    toggled_str = ''\n    for bit in binary_str:\n        if bit == '1':\n            toggled_str += '0'\n        else:\n            toggled_str += '1'\n    \n    # convert toggled binary string back to int\n    toggled_num = int(toggled_str, 2)\n    \n    return toggled_num"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos == 0 or a[pos-1]!= x:\n        return pos\n    else:\n        return pos - 1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a, x)\n    return left"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + (geometric_sum(n-1) * (1/n))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - n ** (1/n)) / (1 - 1/n)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - 1/n) * geometric_sum(n-1) + 1/n"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1)*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculates the geometric sum of n-1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 + (n - 1) * geometric_sum(n - 1)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The geometric sum of\", n, \"is:\", geometric_sum(n))"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    i = 1\n    while count < n: \n        i += 1\n        count = len(str(i * (i + 1) // 2)) \n    return i - 1 \n\nprint(find_Index(3)) # Output: 3\nprint(find_Index(5)) # Output: 5\nprint(find_Index(7)) # Output: 7"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    # Finding the maximum number of digits in the triangular number\n    max_num = 10**(n-1)\n    # Finding the minimum number of digits in the triangular number\n    min_num = 10**(n-2)\n    \n    # Finding the index of the smallest triangular number with n digits\n    index = 1\n    while min_num <= max_num:\n        mid = (min_num + max_num) // 2\n        # Calculating the number of digits in the mid triangular number\n        num_digits = len(str(mid*(mid+1)//2))\n        # If the number of digits in the mid triangular number is less than or equal to n,\n        # then the mid triangular number is greater than or equal to the smallest triangular number with n digits\n        # and the index of the smallest triangular number with n digits is mid\n        if num_digits <= n:\n            index = mid\n            max_num = mid - 1\n        # If the number of digits in the mid triangular number is greater than n,\n        # then the smallest triangular number with n digits must be in the range (mid+1, max_num)\n        else:\n            min_num = mid + 1\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # calculate the maximum number of digits for a triangular number with n digits\n    max_num = 10**(n-1)\n    max_triangular = max_num*(max_num+1)//2\n    \n    # initialize the index and the smallest triangular number found\n    index = 1\n    triangular = 1\n    \n    # loop through all triangular numbers with n digits and update the smallest triangular number and index accordingly\n    while triangular <= max_triangular:\n        if len(str(triangular)) == n:\n            index = triangular\n        triangular += 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the number of digits in triangular number with n digits\n    num_digits = n * (n + 1) // 2\n    # find the smallest triangular number with n digits\n    smallest_triangular_num = int(math.pow(10, num_digits - 1) - 1)\n    # find the index of smallest triangular number with n digits\n    index = (int(math.pow(10, num_digits - 1)) - 1) // 10\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    start = 1\n    end = int(math.pow(10, n))\n    while start < end:\n        mid = (start + end) // 2\n        count = 0\n        for i in str(mid):\n            count += 1\n        if count == n:\n            end = mid\n        else:\n            start = mid + 1\n    return start"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.ceil(n*(2*n-1)/2))"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Find the index of smallest triangular number with n digits.\n    '''\n    # find the nth triangular number\n    nth_triangular = int((math.pow(10,n+1)-1)/6)\n    \n    # find the index of the nth triangular number\n    index = nth_triangular - 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # calculate the first n digits of the smallest triangular number\n    i = 1\n    triangular_number = 1\n    while len(str(triangular_number)) < n:\n        i += 1\n        triangular_number = (i * (i + 1)) // 2\n    \n    # find the index of the smallest triangular number\n    index = i - 1\n    triangular_number = (index * (index + 1)) // 2\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Return the index of smallest triangular number with n digits. \n    return n * (n+1) // 2 - 1 "
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Find the square root of 2 and round it up to the nearest integer\n    sqrt_2 = math.ceil(math.sqrt(2))\n    # Initialize the triangular number with n digits as 1\n    triangular_number = 10**(n-1)\n    # Initialize the index as 1\n    index = 1\n    while triangular_number <= sqrt_2**2:\n        # Increment the index and multiply the triangular number by the next integer\n        index += 1\n        triangular_number = index*(index+1)//2\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict = {}\n    for i in range(0, len(test_tup), 2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # create an empty dictionary\n    d = {}\n    # iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # add a key-value pair to the dictionary\n        d[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are same, else it returns False.\n    \"\"\"\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same, else False.\n    '''\n    if len(s) == 0:\n        return False\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a given string are the same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are same,\n    otherwise False.\n    \"\"\"\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in the given string s are the same or not.\n    :param s: string\n    :return: True if all characters are the same, otherwise False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a string are the same or not.\n    Returns True if all characters are the same, else returns False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Returns True if all characters in the string s are the same, and False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) > 1:\n        first_char = s[0]\n        for i in range(1, len(s)):\n            if s[i]!= first_char:\n                return False\n        return True"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6)/4)*side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    volume = (math.sqrt(6)/3) * side**3\n    return 6 * volume"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    s = 0.5 * side\n    \n    # calculate the area using Heron's formula\n    area = math.sqrt(6/3) * s ** 2\n    \n    # return the result\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n\n    Parameters:\n    side (float): The length of one side of the tetrahedron.\n\n    Returns:\n    area (float): The area of the tetrahedron.\n    '''\n\n    # Calculate the area of the tetrahedron using Heron's formula.\n    s = (3 * side ** 2) / (4 * math.tan(math.pi / 6))\n    area = (6 * s) / (4 * math.tan(math.pi / 6))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron given its side length.\n    '''\n    area = (6 * math.pow(side, 2)) / (4 * math.tan(math.pi/6))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the volume of the tetrahedron\n    volume = (1/3) * (6 * side ** 3)\n    # calculate the surface area of the tetrahedron\n    surface_area = 4 * math.sqrt(3) * side ** 2\n    # calculate the area of the tetrahedron\n    area = (1/3) * surface_area\n    # return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n\n    Args:\n    side (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (3 * side) / (4 * math.tan(math.pi/6))\n\n    # Calculate the area of the tetrahedron\n    area = (math.sqrt(3) * s**2) / 4\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a single argument, the length of one of the sides of the tetrahedron,\n    and returns the area of the tetrahedron.\n    '''\n    area = (6 * math.sqrt(6) * pow(side, 2)) / (4 * math.tan(math.pi / 12))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    volume = (1/3) * (math.sqrt(5) * side**3)\n    area = 6 * volume\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 * math.sqrt(2) / 4) * (side ** 2)\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Rotate a given list by specified number of items to the right direction.\n    '''\n    m = m % len(list)  # to handle case where m is larger than the list length\n    return list[-m:] + list[:-m]  # rotate the list by m elements to the right"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a given list by a specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0], list[n-m] = list[n-m], list[0]\n    for i in range(n-m-1):\n        list[i], list[i+m+1] = list[i+m+1], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    new_list = list[n-m:] + list[:n-m]\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    :param list: The list to be rotated.\n    :param m: The number of items to rotate.\n    :return: The rotated list.\n    \"\"\"\n\n    # If the list is empty or m is greater than the length of the list,\n    # return the original list.\n    if len(list) == 0 or m >= len(list):\n        return list\n\n    # Rotate the list to the right.\n    rotated_list = list[m:] + list[:m]\n\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n # make sure m is within the bounds of the list\n    lst = lst[n-m:] + lst[:n-m] # concatenate the last m elements to the front of the list\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    This function rotates a given list to the right direction by m positions.\n    '''\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    This function checks if the given tuple has any None value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # create a list of all possible digits\n    digits = [str(i) for i in range(0, 10)]\n\n    # create a list of all possible combinations of digits\n    digit_combs = [int(''.join(p)) for p in itertools.product(digits, repeat=3)]\n\n    # create a lambda function that checks if a number is divisible by all its digits\n    is_divisible = lambda x: all(x % int(digit) == 0 for digit in str(x))\n\n    # iterate over all numbers in the given range and check if they are divisible by all their digits\n    for num in range(startnum, endnum+1):\n        if is_divisible(num) and all(num % digit_comb == 0 for digit_comb in digit_combs):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # lambda function to check if a number is divisible by every digit it contains\n    check_divisible = lambda num: all(int(digit) % num == 0 for digit in str(num))\n\n    # loop through all the numbers between startnum and endnum and check if they are divisible by every digit they contain\n    for num in range(startnum, endnum+1):\n        if check_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes in two parameters, startnum and endnum, and returns a list of numbers between startnum and endnum\n    that are divisible by every digit they contain.\n    '''\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum \n    where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(i) % x == 0 for i in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(i)]\n        if all(i % d == 0 for d in digits):\n            print(i)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes a range of numbers (startnum, endnum) and checks if every number within the range is divisible by every digit it contains.\n    Returns a list of all the numbers that satisfy this condition.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by all its digits\n    check_div = lambda num: all(int(digit)!= 0 and num % int(digit) == 0 for digit in str(num))\n    \n    # Use a list comprehension to generate a list of all numbers in the given range that satisfy the condition\n    result = [num for num in range(startnum, endnum+1) if check_div(num)]\n    \n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda num: all(int(digit) % num == 0 for digit in str(num))\n    \n    # Use the filter function to find numbers in the given range that are divisible by every digit\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    def check_divisibility(num):\n        digits = list(str(num))\n        for digit in digits:\n            if num % int(digit)!= 0:\n                return False\n        return True\n\n    return list(filter(check_divisibility, range(startnum, endnum+1)))\n\nprint(divisible_by_digits(100, 1000))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    divisible_nums = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible_nums.append(num)\n    return divisible_nums"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)\n\nradius = float(input(\"Enter the radius of the circle: \"))\nangle = float(input(\"Enter the angle of the sector in degrees: \"))\n\narea = sector_area(radius, angle)\n\nif area == None:\n    print(\"Invalid input. Angle should be less than or equal to 360 degrees.\")\nelse:\n    print(\"The area of the sector is:\", area)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (math.pi * r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a/360 * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    else:\n        return (r**2 * a/360) * math.pi\n\nradius = float(input(\"Enter the radius of the circle: \"))\nangle = float(input(\"Enter the angle of the sector in degrees: \"))\n\narea = sector_area(radius, angle)\n\nif area is None:\n    print(\"The angle is larger than 360 degrees. Please enter a valid angle.\")\nelse:\n    print(\"The area of the sector is:\", area)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (r ** 2) * (a / 360) * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360\n\nradius = float(input(\"Enter the radius of the circle: \"))\nangle = float(input(\"Enter the angle of the sector (in degrees): \"))\n\narea = sector_area(radius, angle)\n\nif area is None:\n    print(\"Invalid input! Angle should be less than or equal to 360.\")\nelse:\n    print(\"The area of the sector is:\", area)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi\n"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Find LCS of X[0], Y[0], and Z[0]\n    if X[0] == Y[0] == Z[0]:\n        lcs = X[0]\n    else:\n        lcs = \"\"\n    \n    # Find LCS of X[1:], Y[1:], and Z[1:]\n    for i in range(1, len(X)):\n        if X[i] == Y[i] == Z[i]:\n            lcs += X[i]\n        elif len(lcs) < len(lcs_of_three(X[:i], Y[:i], Z[:i])):\n            lcs = lcs_of_three(X[:i], Y[:i], Z[:i])\n    \n    # Find LCS of X[:-1], Y[:-1], and Z[:-1]\n    for i in range(1, len(X)):\n        if X[-i] == Y[-i] == Z[-i]:\n            lcs += X[-i]\n        elif len(lcs) < len(lcs_of_three(X[:-i], Y[:-i], Z[:-i])):\n            lcs = lcs_of_three(X[:-i], Y[:-i], Z[:-i])\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D array to store lengths of longest common suffixes of subsequences of all 3 strings\n    L = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # Initialize the first row, column and diagonal elements of the 3D array\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # The length of the longest common subsequence is stored in L[m][n][o]\n    length = L[m][n][o]\n\n    # Create a 2D array to store the longest common subsequence\n    lcs = [[\"\"] * (o + 1) for _ in range(n + 1)]\n\n    # Backtrack to find the actual subsequence\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs[j - 1][k - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] >= L[i][j - 1][k] and L[i - 1][j][k] >= L[i][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] >= L[i - 1][j][k] and L[i][j - 1][k] >= L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the subsequence and return it\n    return lcs[n][o][::-1]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[\"\" for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    lcs[i][j][k] = \"\"\n                elif (X[i-1] == Y[j-1] == Z[k-1]):\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + X[i-1]\n                elif (len(lcs[i-1][j][k]) >= len(lcs[i][j-1][k])):\n                    lcs[i][j][k] = lcs[i-1][j][k]\n                elif (len(lcs[i-1][j][k]) < len(lcs[i][j-1][k])):\n                    lcs[i][j][k] = lcs[i][j-1][k]\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0] * (o + 1) for i in range(n + 1)] for j in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n  \n    # Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] and Z[0..k-1] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n  \n    # Following code is used to print LCS \n    index = L[m][n][o] \n  \n    # Create a character array to store the lcs string \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n  \n    # Start from the right-most-bottom-most corner and one by one store characters in lcs[] \n    i = m \n    j = n \n    k = o \n    while i > 0 and j > 0 and k > 0: \n  \n        # If current character in X, Y and Z are same, then current character is part of LCS \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n            lcs[index-1] = X[i-1] \n            i-=1\n            j-=1\n            k-=1\n            index-=1\n  \n        # If not same, then find the maximum of L[i-1][j][k], L[i][j-1][k] and L[i][j][k-1] and move in the direction of greater value \n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]: \n            i-=1\n  \n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]: \n            j-=1\n  \n        else: \n            k-=1\n  \n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    # filling the table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    # finding the lcs using backtracking\n    lcs = ''\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0]*(o+1) for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] < L[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<=[\\w\\s])[A-Z][a-z]*')\n    return re.sub(pattern, r' \\g<0>', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regex\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    result = pattern.sub(r'\\1 ', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    \n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Iterate over the words and add spaces to words starting with capital letters\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            words[i] ='' + word\n            \n    # Join the words back into a string with spaces between them\n    result = ''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all words starting with capital letters\n    capital_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Replace each capital word with its capitalized version followed by a space\n    result = re.sub(r'\\b[A-Z][a-z]*\\b', lambda match: match.group(0).capitalize() +'', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Use regex to find all non-capitalized words in the string\n    non_capitalized_words = re.findall(r'\\b[a-z]+\\b', str1)\n    \n    # Create an empty list to store the capitalized words with spaces\n    capitalized_words_with_spaces = []\n    \n    # Add spaces between capitalized words and add them to the list\n    for word in capitalized_words:\n        capitalized_words_with_spaces.append(word.strip() + \" \")\n        \n    # Add non-capitalized words to the list\n    capitalized_words_with_spaces.extend(non_capitalized_words)\n    \n    # Join the words with spaces in between\n    result = \"\".join(capitalized_words_with_spaces)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string by non-alphanumeric characters\n    words = re.findall(r'\\w+', str1)\n    \n    # Create a new string with spaces between capitalized words\n    result = ''\n    for i, word in enumerate(words):\n        if i == 0 or word[0].isupper():\n            result += word\n        else:\n            result +='' + word\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Join the words with spaces in between\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Use regular expression to find all words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Use regular expression to find all non-word characters (i.e., punctuation)\n    non_words = re.findall(r'\\W+', str1)\n    # Combine words and non-words into a single list\n    combined = words + non_words\n    # Join the list into a single string with spaces in between\n    result =''.join(combined)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<!\\s)\\b[A-Z][a-z]+\\b')\n    return pattern.sub(r'\\1 ', str1)"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Splitting the list of strings into a list of integers\n    nums_int = [int(num_str) for num_str in nums_str]\n    \n    # Sorting the list of integers\n    sorted_nums = sorted(nums_int)\n    \n    # Converting the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in sorted_nums]\n    \n    # Returning the sorted list of strings of numbers\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Splitting the string into individual elements\n    nums = nums_str.split()\n    # Converting each element into int type\n    nums = [int(i) for i in nums]\n    # Sorting the list using sort() method\n    nums.sort()\n    # Converting the sorted list into string type\n    sorted_str =''.join(str(i) for i in nums)\n    return sorted_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function sorts a given list of strings of numbers numerically.\n\n    :param nums_str: A list of strings containing numeric values.\n    :return: A sorted list of strings containing numeric values.\n    \"\"\"\n\n    return sorted(nums_str, key=lambda x: [int(c) for c in x.split()])\n"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function sorts a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. \n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str = [int(num) if num.isdigit() else num for num in nums_str]\n    nums_str.sort(key=lambda x: (isinstance(x, int), x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n    nums_str (list): A list of strings that contain numbers.\n\n    Returns:\n    list: A sorted list of the input strings in ascending order.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: [int(c) if c.isdigit() else c for c in x])"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: [int(c) for c in x.split()])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num_str) for num_str in nums_str]  # converting string to integer\n    nums.sort()  # sorting the integer list\n    nums_str = [str(num) for num in nums]  # converting integer to string\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str = sorted(nums_str, key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list.\n    \"\"\"\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function takes a list and a tuple as inputs and adds the tuple to the list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < len(arr):\n            if arr[left] > arr[i]:\n                return False\n        \n        if right < len(arr):\n            if arr[right] > arr[i]:\n                return False\n        \n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        return False\n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        return False\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents min heap or not.\n    \"\"\"\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[smallest], arr[i] = arr[i], arr[smallest]\n        return check_min_heap_helper(arr, smallest)\n    return True\n\ndef check_min_heap(arr):\n    \"\"\"\n    Main function to check if the given array represents min heap or not.\n    \"\"\"\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n        \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return check_min_heap_helper(arr, smallest)\n    else:\n        return True\n        \n        \ndef check_min_heap(arr):\n    for i in range(len(arr)//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n    for i in range(len(arr)):\n        if arr[i] > arr[0]:\n            return False\n        \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function checks if the given array represents a min heap or not.\n    \"\"\"\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    n = len(arr)\n\n    if left_child < n:\n        if arr[left_child] > arr[i]:\n            return False\n\n    if right_child < n:\n        if arr[right_child] > arr[i]:\n            return False\n\n    return True\n\ndef check_min_heap(arr):\n    \"\"\"\n    This function checks if the given array represents a min heap or not.\n    \"\"\"\n    for i in range(len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Check if the given array represents min heap or not.\n\n    Args:\n    - arr: list of elements\n    - i: index of the last parent node\n\n    Returns:\n    - True if the given array represents a min heap, False otherwise.\n    '''\n\n    # Base case\n    if i < 0 or i >= len(arr):\n        return True\n\n    # check if both children of i are less than or equal to arr[i]\n    if (2*i+1 < len(arr) and arr[2*i+1] < arr[i]) or (2*i+2 < len(arr) and arr[2*i+2] < arr[i]):\n        return False\n\n    # recursively check left and right sub-trees\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case: if the array size is less than or equal to 1, it is a min heap\n    if len(arr) <= 1:\n        return True\n    \n    # check if the left child of i is greater than or equal to the parent\n    left_child = 2*i + 1\n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    \n    # check if the right child of i is greater than or equal to the parent\n    right_child = 2*i + 2\n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    \n    # recursively check the left and right subtrees\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    left_child_index = 2 * i + 1\n    right_child_index = 2 * i + 2\n\n    if left_child_index < len(arr) and arr[left_child_index] < arr[i]:\n        return False\n    if right_child_index < len(arr) and arr[right_child_index] < arr[i]:\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    \n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    \n    if left < len(arr) or right < len(arr):\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    \n    return True\n    \ndef check_min_heap(arr):\n    for i in range(len(arr)//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    This function takes an integer n and returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th Jacobsthal number is: {jacobsthal_num(n)}\")"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function finds the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order of the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Return the first K elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples as input and returns the minimum K tuples based on the first element of the tuples.\n    '''\n    return sorted(test_list, key=lambda x: x[0])[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[0:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Get the first K elements from the sorted list\n    result = sorted_list[:K]\n\n    # Return the result\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list in ascending order of the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    heap = []\n    # build max heap\n    for i in range(len(test_list)):\n        heapq.heappush(heap, -test_list[i][1])\n    \n    # get k minimum elements\n    result = []\n    for i in range(K):\n        result.append(-heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list in ascending order of first element of tuple\n    test_list.sort(key=lambda x:x[0])\n\n    # initialize a list to store the minimum k records\n    min_list = []\n\n    # iterate over the sorted list and append the first k records to the minimum list\n    for i in range(K):\n        min_list.append(test_list[i])\n\n    # iterate over the remaining elements of the sorted list and compare each element with the minimum element of the minimum list\n    for i in range(K, len(test_list)):\n        if test_list[i][0] < min_list[-1][0]:\n            # if the current element is smaller than the last minimum element of the minimum list, replace the last minimum element with the current element\n            min_list[-1] = test_list[i]\n        elif test_list[i][0] == min_list[-1][0]:\n            # if the current element has the same value as the last minimum element of the minimum list, compare the second elements of the two elements and replace the minimum element accordingly\n            if test_list[i][1] < min_list[-1][1]:\n                min_list[-1] = test_list[i]\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[0:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n\n    # Check common elements in each list\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] == l3[i]:\n            common_list.append(l1[i])\n\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Given three lists, returns a list of elements that appear in all three lists under the same index.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Extract common elements from three lists based on their indices.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    This function finds the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # initialize variables to store smallest and second smallest numbers\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    # loop through the list and update the smallest and second smallest variables accordingly\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    # return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # find the smallest number in the list\n    smallest = min(numbers)\n    \n    # remove the smallest number from the list\n    numbers.remove(smallest)\n    \n    # find the second smallest number in the updated list\n    second_smallest = min(numbers)\n    \n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(b+)?\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a([b]*)'\n    match = re.match(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse_pair(test_list[i], test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse_pair(string1, string2):\n    '''\n    Helper function to check if two strings are reverse pairs of each other.\n    '''\n    return string1 == string2[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings as input and returns the number of pairs of reverse strings in the list.\n    '''\n    count = 0\n    \n    # sort the list of strings\n    sorted_list = sorted(test_list)\n    \n    # iterate through the sorted list of strings\n    for i in range(len(sorted_list)):\n        # check if the current string is a reverse of the previous string\n        if sorted_list[i] == sorted_list[i][::-1]:\n            # if the current string is a reverse of the previous string, count it\n            count += 1\n            \n    # return the count of pairs of reverse strings in the list\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    # Create an empty dictionary to store the unique sublists\n    sublist_dict = {}\n    \n    # Iterate over each sublist in the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j]) # Convert the sublist to a tuple\n            if sublist not in sublist_dict: # Check if the sublist is already in the dictionary\n                sublist_dict[sublist] = 1 # If not, add it to the dictionary with a value of 1\n            else:\n                sublist_dict[sublist] += 1 # If it is already in the dictionary, increment its value by 1\n                \n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in dict_count:\n                dict_count[sublist] = 1\n            else:\n                dict_count[sublist] += 1\n    return dict_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = set()\n    unique_sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.add(tuple(list1[i:j]))\n    for sublist in sublists:\n        unique_sublists[sublist] = list1.count(list(sublist))\n    return unique_sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    # convert list1 into a set of tuples to remove duplicates\n    unique_tuples = set(tuple(sublist) for sublist in list1)\n    \n    # count the number of occurrences of each unique tuple\n    counts = {}\n    for sublist in unique_tuples:\n        count = list1.count(list(sublist))\n        counts[sublist] = count\n    \n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    result = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in result:\n                result[sublist] = 1\n            else:\n                result[sublist] += 1\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with unique sublists as keys and their frequency as values.\n    \"\"\"\n    unique_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_dict:\n                unique_dict[sublist] = 1\n            else:\n                unique_dict[sublist] += 1\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = tuple(lst[i:j+1])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublst = tuple(lst[i:j])\n            if sublst in sublists:\n                sublists[sublst] += 1\n            else:\n                sublists[sublst] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists.append(sublist)\n    \n    # count occurrences of each sublist\n    counts = {}\n    for sublist in sublists:\n        count = 0\n        for lst in list1:\n            if sublist == tuple(lst):\n                count += 1\n        counts[sublist] = count\n    \n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts) > 2:\n            return False\n        if len(parts) == 2:\n            return len(parts[1]) <= 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') > 1:  # check if there are more than one decimal points\n        return False\n    elif num.count('.') == 1:  # check if there is only one decimal point\n        if '.' in num[:num.index('.')]:  # check if the decimal point is not at the beginning of the number\n            return False\n        else:\n            num = num.replace('.', '')  # remove decimal point from the number\n    if num == '':  # check if the number is empty\n        return False\n    else:\n        return all(char.isdigit() for char in num) and len(num) <= 2  # check if all characters in the number are digits and the number has a precision of 2 or less"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        parts = num.split(\".\")\n        if len(parts)!= 2:\n            return False\n        if len(parts[1])!= 2:\n            return False\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num == int(num):\n            return False\n        return round(num, 2) == float(num)\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    \n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) < 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if abs(float_num - round(float_num, 2)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) < 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) <= 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n    \n    if float_num == int(float_num):\n        return True\n    \n    return round(float_num, 2) == float_num"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return abs(float(num) - round(float(num), 2)) < 0.01"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains multiple distinct elements\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_element(arr):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False\n\nprint(check_monthnumber_number(2))"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    else:\n        print(\"Invalid month number. Please enter a valid month number between 1 and 12.\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month has 30 days, and False otherwise.\n    \"\"\"\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        print(\"February has 29 days in a common year and 28 days in a leap year.\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"April, June, September, and November have 30 days.\")\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"January, March, May, July, August, October, and December have 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True  # April, June, September, and November have 30 days\n    elif monthnum == 2:\n        return True  # February has 29 days in leap years\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True  # All the other months have 31 days\n    else:\n        return False  # Month number not recognized"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Checks if the given month number has 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month has 30 days and False otherwise.\n    Month numbers are 1 to 12.\n    '''\n    if monthnum == 2:\n        # February has 29 days in a leap year\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        # April, June, September, and November have 30 days\n        return True\n    else:\n        # All other months have 31 days\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return 30\n    elif monthnum == 2:\n        return 29\n    else:\n        return 31"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Returns the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function will find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as inputs, and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()  # sort the array in ascending order\n    min_diff = float('inf')  # initialize minimum difference to a very large value\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # calculate the difference between the current element and the next element\n        if diff < min_diff:\n            min_diff = diff  # update the minimum difference if the current difference is smaller\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference to infinity\n\n    # Traverse the sorted array and find the minimum difference between any two elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()  # Sorting the array in ascending order\n    \n    min_diff = float('inf')  # Initializing minimum difference to infinity\n    \n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:  # Checking if the difference between current and next element is less than the minimum difference\n            min_diff = arr[i+1] - arr[i]  # Updating minimum difference\n            \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()  # sorting the array to find the minimum difference\n    min_diff = arr[1] - arr[0]  # calculating the minimum difference between the first two elements\n    for i in range(2, n):\n        diff = arr[i] - arr[i-1]  # calculating the difference between two adjacent elements in the sorted array\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    arr.sort() # Sorting the array in ascending order\n\n    min_diff = float('inf') # Initialize minimum difference with positive infinity\n\n    for i in range(n-1): # Loop through all possible pairs of elements\n        diff = arr[i+1] - arr[i] # Calculate the difference between current pair of elements\n        if diff < min_diff: # If the difference is less than the current minimum difference\n            min_diff = diff # Update the minimum difference\n\n    return min_diff # Return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (list): The input array of integers.\n        n (int): The length of the input array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the count of numbers present in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 9\n    else:\n        for i in range(4, n + 1):\n            j = int(math.log10(i)) + 1\n            if (10 ** (j - 1) + 1) * (10 ** j) - i == 1:\n                return i"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 1\n        count = 0\n        while True:\n            j = math.floor(math.sqrt(i))\n            if i % j == 0 and j!= 1:\n                count += 2\n            else:\n                count += 1\n            if count == n:\n                return i\n            i += 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Function to check if a number is polite or not. A polite number is a positive integer greater than or equal to 2 that is divisible by the sum of its digits.\n    '''\n    i = 2\n    while True:\n        if len(str(i)) == 1:\n            return False\n        s = sum(int(digit) for digit in str(i))\n        if i % s == 0:\n            if n == 1:\n                return True\n            n -= 1\n        i += 1\n\nn = int(input(\"Enter the value of n: \"))\npolite_num = 0\ni = 1\nwhile polite_num < n:\n    if is_polite(i):\n        polite_num += 1\n    i += 1\n\nprint(\"The nth polite number is:\", i-1)"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 1\n        i = 2\n        while count < n:\n            if is_prime(i):\n                count += 1\n                if count == n:\n                    return i\n            i += 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 1\n    while True:\n        if is_prime(i):\n            count += 1\n        if count == n:\n            return i\n        i += 1\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    \n    while count < n:\n        if is_polite_helper(num):\n            count += 1\n        num += 1\n    \n    return num - 1\n\ndef is_polite_helper(num):\n    '''\n    Helper function to check if a number is polite.\n    '''\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Returns the nth polite number.\n    A polite number is defined as a positive integer whose reverse is also a polite number. \n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_reverse_polite(num):\n            count += 1\n    return num\n\ndef is_reverse_polite(num):\n    \"\"\"\n    Returns True if a number is a reverse of a polite number, False otherwise.\n    \"\"\"\n    return is_polite(int(str(num)[::-1]))\n\nprint(is_polite(10)) # Output: 888"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Step 1: Find the first polite number greater than 1\n    count = 0\n    num = 2\n\n    while count < n:\n        if is_polite_num(num):\n            count += 1\n        num += 1\n\n    # Step 2: Check if the nth polite number is divisible by any number from 2 to sqrt(n)\n    if is_polite_num(num):\n        return True\n    else:\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\ndef is_polite_num(num):\n    '''\n    A helper function to check if a number is polite\n    '''\n    if num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(num))+1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        is_polite = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n            print(i)\n        i += 1"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes in a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. \n    The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort() # sorting the array to get the pairs in sorted order\n    \n    # two pointer approach\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n            \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    arr.sort()\n    left = 0\n    right = n-1\n    \n    while left < right:\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n            \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Counts the number of pairs of numbers in the given array whose sum is equal to the given sum.\n    :param arr: List of numbers.\n    :param sum: Sum of the pairs to be counted.\n    :return: Number of pairs whose sum is equal to the given sum.\n    \"\"\"\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Get the intersection of the two lists\n    intersection = list(set(li1) & set(li2))\n\n    # Get the union of the two lists\n    union = list(set(li1) | set(li2))\n\n    # Subtract the intersection from the union to get the difference\n    difference = list(set(union) - set(intersection))\n\n    return difference"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a Python function to get the difference between two lists.\n    \"\"\"\n    diff_list = list(set(li1) - set(li2))\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists and returns the difference between them.\n    \"\"\"\n    # Initialize an empty list to store the difference\n    diff = []\n    \n    # Loop through each element in the first list\n    for elem in li1:\n        # Check if the element is not in the second list\n        if elem not in li2:\n            # If the element is not in the second list, add it to the difference list\n            diff.append(elem)\n    \n    # Return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function returns the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff_list = []\n\n    # Iterate through the first list and check if each element is in the second list\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function returns the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return (4**4 * 3**3 * 2**2 * (n-1) + 4**4 * 3**3 * 2 * 2) * n // 2"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n*2, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through first n odd numbers\n    for i in range(1, n*2, 2):\n        # Calculate fourth power of the current odd number and add it to the sum\n        sum += i**4\n        \n    # Return the final sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n*2, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum of odd numbers to 0\n    odd_sum = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # calculate fourth power of i\n        num = i**4\n        # add to odd_sum\n        odd_sum += num\n    \n    # return the sum\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    \n    # loop through first n odd numbers\n    for i in range(1, 2*n, 2):\n        # add fourth power of the current odd number to the sum\n        sum += i**4\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    pairs = {'(': ')', '{': '}', '[': ']'}\n\n    for char in exp:\n        if char in pairs.keys():\n            stack.append(char)\n        elif char in pairs.values():\n            if not stack or pairs[stack[-1]]!= char:\n                return False\n            stack.pop()\n\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            if i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    \n    for char in exp:\n        if char in \"({[\":\n            stack.append(char)\n        elif char in \")}]\":\n            if not stack:\n                return False\n            elif pairs[char]!= stack[-1]:\n                return False\n            else:\n                stack.pop()\n                \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function takes a string as input and returns True if the parentheses in the string are balanced, and False otherwise.\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Splitting the string into words\n    words = test_str.split()\n\n    # Creating a new list to store words with k length\n    words_with_k_length = []\n\n    # Iterating through each word and checking its length\n    for word in words:\n        if len(word)!= K:\n            words_with_k_length.append(word)\n\n    # Joining the words in the list to form a new string\n    result_str =''.join(words_with_k_length)\n\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    # Split the test string into a list of words\n    words = test_str.split()\n    \n    # Create a new list with words of length K or less\n    short_words = [word for word in words if len(word) <= K]\n    \n    # Join the short words into a string and return it\n    return''.join(short_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    new_str =''.join(new_words)\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all words with length K in the given string.\n    '''\n    words = test_str.split()\n    return''.join([word for word in words if len(word)!= K])"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()  # split the string into a list of words\n    filtered_words = [word for word in words if len(word)!= K]  # filter out words with length K\n    return''.join(filtered_words)  # join the filtered words into a string separated by spaces"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return [(m.start(), m.end()) for m in re.finditer(pattern, text)]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    pattern_regex = re.compile(pattern)\n    matches = pattern_regex.finditer(text)\n    if matches:\n        return [(match.group(0), match.start()) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    This function takes in two arguments:\n    text: a string for which we want to find the occurrence of a substring\n    pattern: a substring for which we want to find the occurrence and position in the text\n\n    It returns a list of tuples containing the occurrence and position of the pattern in the text.\n    If there is no match, it returns None.\n    '''\n    result = []\n    match = re.finditer(pattern, text)\n    for m in match:\n        result.append((m.start(), m.end()))\n    if len(result) == 0:\n        return None\n    else:\n        return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        results = []\n        for match in matches:\n            results.append((match.group(), match.start()))\n        return results\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_regex = re.compile(pattern)\n    match_list = pattern_regex.finditer(text)\n    if match_list:\n        return [(match.group(), match.start()) for match in match_list]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function finds the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        return [(match.start(), match.end()) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if len(result) == 0:\n        return None\n    else:\n        return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments - text and pattern.\n    It returns a list of tuples containing the position and occurrence of the pattern in the text.\n    If there is no match, it returns None.\n    '''\n    \n    # Find all occurrences of the pattern in the text using the re.finditer() method\n    matches = re.finditer(pattern, text)\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate through the matches and append the positions and occurrences to the result list\n    for match in matches:\n        result.append((match.start(), match.group()))\n    \n    # If there are no matches, return None\n    if not result:\n        return None\n    \n    # Otherwise, return the result list\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function returns a list of tuples containing the substring and its position in the text.\n    If there is no match, it returns None.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        return [(match.group(), match.start()) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.findall(pattern, text)\n    if match:\n        return [(m.start(), m.end()-1) for m in match]\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels and (i == 0 or test_str[i-1].lower() not in vowels) and (i == len(test_str)-1 or test_str[i+1].lower() not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    This function takes a string as input and returns the count of characters which have vowels as their neighbors.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u'] and test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    sum_non_repeated = 0\n    non_repeated = set()\n    for element in arr:\n        if element not in non_repeated:\n            sum_non_repeated += element\n            non_repeated.add(element)\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    This function finds the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    sum_unique_arr = sum(unique_arr)\n    return sum_unique_arr"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    # iterate over the list and update the count of each element in the dictionary\n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    # iterate over the dictionary and sum up all the non-repeated elements\n    sum = 0\n    for elem, count in count_dict.items():\n        if count == 1:\n            sum += elem\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Iterate over the list to count the frequency of each element\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    # Calculate the sum of non-repeated elements\n    total_sum = 0\n    for elem in arr:\n        if freq[elem] == 1:\n            total_sum += elem\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    non_repeated_set = set()\n    for i in arr:\n        if i not in non_repeated_set:\n            non_repeated_sum += i\n            non_repeated_set.add(i)\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    non_repeated_sum = 0\n    non_repeated_list = []\n\n    # Iterate through the input list\n    for i in range(len(arr)):\n        # Check if the element is not already in the non-repeated list\n        if arr[i] not in non_repeated_list:\n            # Add the element to the non-repeated list\n            non_repeated_list.append(arr[i])\n            # Add the element to the non-repeated sum\n            non_repeated_sum += arr[i]\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    sum_non_repeated = 0\n    non_repeated = []\n    \n    for num in arr:\n        if num not in non_repeated:\n            non_repeated.append(num)\n            sum_non_repeated += num\n            \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_unique_elements = sum(unique_elements)\n    return sum_unique_elements"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for k, g in groupby(lst):\n        if k:\n            result.append([k])\n        else:\n            result[-1].extend(list(g))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as an argument and returns a new list with consecutive duplicates\n    of the original list elements packed into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(lst), lambda x: x[0] - x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function packs consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(lst):\n        group = list(g)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        group = list(map(itemgetter(1), group))\n        result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k,g in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k]*len(list(v)) for k, v in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns the list with consecutive duplicates\n    of elements packed into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(lst):\n        group = list(group)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group)\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Initialize an empty dictionary\n    unique_dict = {}\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple to ensure uniqueness\n        sublist_tuple = tuple(sublist)\n        # If the tuple is not in the dictionary, add it with a value of 1\n        if sublist_tuple not in unique_dict:\n            unique_dict[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment its value by 1\n        else:\n            unique_dict[sublist_tuple] += 1\n\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = tuple(lst[i:j])\n            if sub_lst in count_dict:\n                count_dict[sub_lst] += 1\n            else:\n                count_dict[sub_lst] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    sublists_dict = {}\n    for sublist in sublists:\n        if sublist in sublists_dict:\n            sublists_dict[sublist] += 1\n        else:\n            sublists_dict[sublist] = 1\n    return sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in dict1:\n                dict1[sublist] = 1\n            else:\n                dict1[sublist] += 1\n    return dict1"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every list is converted to a tuple and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    unique_lst = []\n    for sublist in lst:\n        if sublist not in unique_lst:\n            unique_lst.append(sublist)\n    unique_dict = {}\n    for sublist in unique_lst:\n        count = lst.count(sublist)\n        unique_dict[tuple(sublist)] = count\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    sublists = set()\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sublists.add(tuple(list1[i:j+1]))\n    unique_sublists = {}\n    for sublist in sublists:\n        count = list1.count(sublist)\n        unique_sublists[sublist] = count\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in result:\n                result[sublist] = 1\n            else:\n                result[sublist] += 1\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(2, len(test_list) + 1):\n        result += list(combinations(test_list, i))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for c in combinations(test_list, i):\n            if sum(c) == 0:\n                result.append(c)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    results = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combination = test_list[i][0] + test_list[j][0]\n            if combination == test_list[i][1] or combination == test_list[j][1]:\n                results.append((test_list[i], test_list[j]))\n    return results"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Calculate the sum of all tuples in the list\n    total_sum = sum([sum(t) for t in test_list])\n    \n    # Create a list of tuples with the same sum as the total sum\n    target_sum_tuples = [t for t in test_list if sum(t) == total_sum]\n    \n    # Find all possible combinations of the tuples with the same sum as the total sum\n    combinations_list = []\n    for t in target_sum_tuples:\n        temp_list = [c for c in combinations(t, len(t))]\n        combinations_list.extend(temp_list)\n        \n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            comb_sum = sum(combo)\n            if comb_sum == 0:\n                combs.append(combo)\n    return combs"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result_list = []\n    for i in range(1, len(test_list) + 1):\n        for tup in combinations(test_list, i):\n            if sum(tup) == sum(test_list):\n                result_list.append(tup)\n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # find all possible sums\n    all_sums = set()\n    for t in test_list:\n        all_sums.update([sum(t)])\n    \n    # find combinations of sums\n    for n in range(1, len(all_sums)+1):\n        for combo in combinations(all_sums, n):\n            # check if the sum of tuples in the combination equals the sum of the combination\n            if sum([sum(t) for t in test_list if sum(t) in combo]) == sum(combo):\n                # print the tuples that add up to the combination\n                print([t for t in test_list if sum(t) in combo])"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == sum(test_list):\n                result.append(j)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer as input and returns the count of divisors of the given number.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, n+1) : \n        if n%i == 0 : \n            count += 1 \n    if count%2 == 0 : \n        return True \n    else : \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function checks whether the count of divisors is even or odd.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return f\"The count of divisors of {n} is even.\"\n    else:\n        return f\"The count of divisors of {n} is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Counts the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    s = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            s += sum(arr[i:j])\n    return s"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    # Initialize a variable to store the sum\n    total_sum = 0\n    \n    # Iterate through each element of the array\n    for i in range(len(arr)):\n        # Calculate the length of the subarray and check if it is odd\n        length = i + 1\n        if length % 2!= 0:\n            # Calculate the sum of the subarray\n            subarray_sum = sum(arr[i:i+length])\n            # Add the subarray sum to the total sum\n            total_sum += subarray_sum\n            \n    # Return the total sum of all odd length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. \n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(1, n+1, 2):\n        for j in range(i, n+1, 2):\n            subarray = arr[j-i:j]\n            total_sum += sum(subarray)\n    \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    res = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n    \n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum_odd = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            sum_odd += sum(arr[i:j+1])\n    \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1) % 2!= 0:\n                sum += sum(arr[i:j+1])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n\n    # Loop through all possible odd length subarrays\n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            subarray = arr[i:j]\n            total_sum += sum(subarray)\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum += sum(arr[i:j+1])\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    else:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff / cmax) * 100\n    v = cmax * 100\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = int(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else delta / cmax\n    \n    value = cmax\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # normalizing the rgb values\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # calculating the maximum and minimum values for each color\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    \n    # calculating the difference between max and min values\n    diff = cmax - cmin\n    \n    # calculating the hue value\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        hue = (60 * ((b - r) / diff) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / diff) + 240) % 360\n    \n    # calculating the saturation value\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = (diff / cmax) * 100\n    \n    # calculating the value\n    value = cmax * 100\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Find the maximum and minimum values of the rgb color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the value\n    value = max_val\n\n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n\n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / (max_val - min_val)) + 360) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / (max_val - min_val)) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / (max_val - min_val)) + 240) % 360\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else delta / cmax\n    \n    value = cmax\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60, 2)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else round(delta / cmax, 2)\n    value = round(cmax, 2)\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else (delta / cmax)\n    value = cmax\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60, 2)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if max_val == 0 else round(delta / max_val * 100, 2)\n    \n    value = round(max_val / 255 * 100, 2)\n    \n    return hue, saturation, value"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    even_sum = 1\n    odd_sum = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_sum *= list1[i]\n        else:\n            odd_sum *= list1[i]\n    return even_sum, odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num * num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num * num\n    return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1[::-1]:\n        if num % 2!= 0:\n            odd = num\n            break\n    if even and odd:\n        return even * odd\n    else:\n        return \"There are no even and odd numbers in the list\""
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function finds the product of the first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    if even is None or odd is None:\n        return None\n    else:\n        return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Find the product of the first even and odd numbers in a list.\n    \"\"\"\n    even = odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                break\n        else:\n            if odd is None:\n                odd = num\n            else:\n                break\n    if even is None or odd is None:\n        return None\n    else:\n        return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return \"List must contain at least one even and one odd number\""
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Find the product of the first even and odd numbers of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num * num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num * num\n    return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num * num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num * num\n    if even_num is None and odd_num is None:\n        return None\n    elif even_num is None:\n        return odd_num\n    elif odd_num is None:\n        return even_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of first even and odd number in the list.\n    \"\"\"\n    if len(list1) < 2:  # if the list has less than two elements, return None\n        return None\n\n    even_num = None  # initialize even_num to None\n    odd_num = None  # initialize odd_num to None\n\n    for num in list1:  # iterate through each element in the list\n        if num % 2 == 0:  # if the element is even, update even_num\n            even_num = num\n        else:  # if the element is odd, update odd_num\n            odd_num = num\n\n        if even_num is not None and odd_num is not None:  # if both even_num and odd_num are not None, break out of the loop\n            break\n\n    if even_num is None or odd_num is None:  # if either even_num or odd_num is still None, return None\n        return None\n\n    return even_num * odd_num  # return the product of even_num and odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Find the product of the first even and odd numbers in a list.\n    '''\n    even_found = False\n    odd_found = False\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_found = True\n            product *= num\n        elif num % 2 == 1 and not odd_found:\n            odd_found = True\n            product *= num\n            \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.strip('()').split(',')\n\n    # Convert the string elements to integers and create a tuple\n    int_tuple = tuple(int(s) for s in str_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as input and returns the corresponding integer tuple.\n    \"\"\"\n    # Splitting the tuple string using ',' as the delimiter\n    str_tuple = test_str.strip('()').split(',')\n    # Converting each element of the tuple to integer\n    int_tuple = tuple(map(int, str_tuple))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.strip('()').split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string into individual elements\n    str_list = test_str.split(\",\")\n    # Converting each element from string to integer\n    int_list = [int(i) for i in str_list]\n    # Returning the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    test_str = test_str.replace(\"(\", \"\").replace(\")\", \"\")\n    return tuple(int(num) for num in test_str.split(\",\"))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert tuple string to list\n    test_list = test_str[1:-1].split(',')\n    \n    # Convert list of strings to list of integers\n    test_int_list = [int(i) for i in test_list]\n    \n    # Convert list of integers to tuple\n    test_tuple = tuple(test_int_list)\n    \n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    str_list = test_str[1:-1].split(\",\")\n\n    # Convert the strings to integers\n    int_list = [int(i) for i in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a string representing a tuple in Python format and returns the equivalent integer tuple.\n    \"\"\"\n    # Split the string into a list of tuples\n    tuples_str = test_str.split(\"), (\")\n    # Convert each tuple string into a tuple of integers\n    tuples_int = [tuple(int(i) for i in t.split(\",\")) for t in tuples_str]\n    return tuples_int"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # Split the input string into a list of tuples\n    tuple_list = eval(test_str)\n\n    # Convert each tuple from string to integer\n    int_tuple_list = []\n    for tpl in tuple_list:\n        int_tpl = tuple(int(x) for x in tpl)\n        int_tuple_list.append(int_tpl)\n\n    return int_tuple_list"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'The quick brown fox jumps over the lazy dog'\nif text_match_three(text):\n    print('Match found!')\nelse:\n    print('No match found.')"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*?b{3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r\"a.*b.*b.*b\")\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = \"The cat in the hat likes to sit in the box with three balls.\"\nprint(text_match_three(text)) # True"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb\\bb\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([test_str] + test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    This function checks whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains an even number, False otherwise.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            result.append(item)\n        else:\n            result += remove_nested(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            remove_nested(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    new_tup = ()\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup += remove_nested(item)\n        else:\n            new_tup += (item,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes any nested tuples from it.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) is not tuple:\n            result.append(i)\n        else:\n            result.extend(remove_nested(i))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function removes tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n        else:\n            for j in i:\n                new_tup.append(j)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            result.extend(remove_nested(elem))\n        else:\n            result.append(elem)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Removes tuples from the given tuple.\n    \"\"\"\n    # Create an empty list to store the non-nested tuples\n    non_nested = []\n\n    # Iterate over each element of the input tuple\n    for elem in test_tup:\n        # If the element is not a tuple, add it to the non_nested list\n        if not isinstance(elem, tuple):\n            non_nested.append(elem)\n        # If the element is a tuple, recursively call the function to remove any nested tuples\n        else:\n            non_nested.extend(remove_nested(elem))\n\n    return tuple(non_nested)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes any nested tuples from it.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    This function takes in a list of lists as input and returns the count of lists in that input.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and returns the number of lists in it.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    last_pos = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n    \"\"\"\n    if x in arr:\n        return arr.index(x)\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Finds the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    last_pos = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if the element is not present in the array, return -1\n    if x not in arr:\n        return -1\n    # if the element is present at the end of the array, return its index\n    if x == arr[-1]:\n        return len(arr)-1\n    # if the element is present in the array, find its last index using binary search\n    else:\n        start = 0\n        end = len(arr)-1\n        while start<=end:\n            mid = (start+end)//2\n            if arr[mid] == x:\n                if mid == len(arr)-1 or arr[mid+1]!= x:\n                    return mid\n                else:\n                    end = mid-1\n            elif arr[mid] < x:\n                start = mid+1\n            else:\n                end = mid-1\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the index of the first occurrence of x in the array using binary search\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            # If x is found at mid, then search for its last occurrence to the left\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n    \n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function takes a string as input and returns a list of strings that match the pattern \"a\" followed by any characters, ending in \"b\".\n    '''\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"^a.*b$\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its items.\n    \"\"\"\n    total_sum = 0\n    for item in dictionary.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as an argument and returns the sum of all items in the dictionary.\n    \"\"\"\n    total = 0\n    for key in dictionary:\n        total += dictionary[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    This function takes a dictionary as an input and returns the sum of all its items.\n\n    Args:\n    dict (dictionary): A dictionary of numbers.\n\n    Returns:\n    int: The sum of all items in the dictionary.\n\n    \"\"\"\n    # initialize a variable to store the sum of all items\n    total_sum = 0\n\n    # loop through all items in the dictionary and add them to the total sum\n    for item in dict.items():\n        total_sum += item[1]\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as an input and returns the sum of all its values.\n\n    Parameters:\n    dictionary (dict): A dictionary containing key-value pairs.\n\n    Returns:\n    int: The sum of all the values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum = 0\n    \n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n            \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a single parameter `n` which represents the upper limit of the range.\n    It returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Loop through all odd numbers from 1 to n and add them to the sum\n    for i in range(1, n+1, 2):\n        total_sum += i\n        \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all odd numbers in the range\n    for num in range(l, r+1, 2):\n        sum += num\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    \n    for i in range(1, n+1, 2):\n        sum += i\n        \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    \"\"\"\n    This function takes an integer n and returns the sum of all odd numbers from 1 to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum to zero\n    s = 0\n    \n    # loop through all odd numbers in the range [l, r]\n    for n in range(l, r+1, 2):\n        # add the current number to the sum\n        s += n\n    \n    # return the final sum\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments l and r and returns the sum of all odd numbers within the range [l, r].\n    \"\"\"\n    if l % 2 == 0:\n        l += 1\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd numbers between l and r (inclusive).\n    \"\"\"\n    result = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            result += i\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of the array elements.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all the elements in the array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns its sum.\n    '''\n    # Initialize a variable to store the sum\n    total_sum = 0\n    \n    # Loop through each element in the array and add it to the sum\n    for num in arr:\n        total_sum += num\n    \n    # Return the sum\n    return total_sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of the elements in the array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as an input and returns the sum of the array.\n\n    Args:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of the array.\n    \"\"\"\n\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as an argument and returns the sum of all the elements in the array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left n bits by d bits. Assumes n is 32 bit.\n    '''\n    mask = (1 << d) - 1  # Mask to keep only the leftmost d bits\n    shifted = (n << d) & 0xFFFFFFFF  # Shift left and mask\n    return (shifted | (n >> (32 - d))) & 0xFFFFFFFF  # Combine shifted and rotated bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    binary_n = bin(n)[2:].zfill(32)\n    rotated_binary_n = binary_n[d:] + binary_n[:d]\n    rotated_n = int(rotated_binary_n, 2)\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF >> (32 - d)\n    return ((n << d) & mask) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments, n and d, where n is the number to be rotated and d is the number of bits to be rotated.\n    The function returns the rotated number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff >> (32 - d)  # mask to rotate the bits\n    return (n << d) & mask | (n & ~mask) >> (32 - d)  # left shift the bits and combine with the right shift of the remaining bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    mask = 2**32 - 1  # Create a mask to extract only the relevant bits of the number\n    shifted = (n << d) & mask  # Shift n left by d bits and mask the result\n    rotated = (n >> (32 - d)) & mask  # Shift n right by 32 - d bits and mask the result\n    return shifted | rotated  # Combine shifted and rotated bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments - n (the number to be rotated) and d (the number of bits to rotate).\n    It rotates left d bits of the number n and returns the rotated number.\n    '''\n    # Convert the number to a binary string\n    binary_n = bin(n)[2:]\n    # Pad the binary string with zeros if it is less than 32 bits\n    while len(binary_n) < 32:\n        binary_n = '0' + binary_n\n    # Rotate left d bits of the binary string\n    rotated_binary = binary_n[d:] + binary_n[:d]\n    # Convert the rotated binary string to an integer and return the result\n    rotated_number = int(rotated_binary, 2)\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1<<d) - 1 # mask to clear d bits\n    n = n & mask # clear d bits\n    \n    shifted = n << (32-d) # shift d bits to the left\n    return shifted | (n >> d) # combine shifted and shifted-d bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**d-1) << (32-d)\n    return (n << d) & 0xffffffff | (n & mask) >> (32-d)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number.\n    '''\n    # convert n to binary string\n    n_bin = bin(n)[2:].zfill(32)\n    # reverse the binary string\n    n_bin_rev = n_bin[::-1]\n    # slice the reversed binary string to obtain the right-shifted bits\n    shifted_bits = n_bin_rev[:d]\n    # reverse the shifted bits to obtain the left-shifted bits\n    shifted_bits_rev = shifted_bits[::-1]\n    # concatenate the shifted bits with the left-shifted bits\n    shifted_bits_concat = shifted_bits_rev + n_bin_rev[d:]\n    # convert the concatenated string to a binary number\n    shifted_n = int(shifted_bits_concat, 2)\n    return shifted_n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    '''\n    mask = (1 << 32) - 1  # create a mask to get the last 32 bits\n    n &= mask  # mask the number to get the last 32 bits\n    d &= 31  # mask d to get the last 5 bits (number of bits to rotate)\n    d = 32 - d  # reverse the rotation (equivalent to shifting right)\n    return ((n << d) & mask) | ((n >> 32 - d) & mask)  # rotate left and combine with the bits to the right"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the count of equal numbers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or z == x:\n        count += 1\n    elif x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    This function will count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif x == z:\n        return 2\n    elif y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n        \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Args:\n    x, y, z (int): integers to be tested for equality\n\n    Returns:\n    int: the number of equal integers\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y:\n        count = 2\n    elif x == z:\n        count = 2\n    elif y == z:\n        count = 2\n    else:\n        count = 0\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 1\n    elif x!= y and y!= z and x!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n\n    # find the pivot element in the array\n    pivot = arr[0]\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # pivot element is found at mid\n        if arr[mid] == pivot:\n            pivot_index = mid\n            break\n\n        # pivot element is on the right side\n        elif arr[mid] < pivot:\n            left = mid + 1\n\n        # pivot element is on the left side\n        else:\n            right = mid - 1\n\n    # if pivot is not found, then array is not rotated\n    if pivot_index == -1:\n        return 0\n\n    # count number of rotations\n    count = 0\n\n    # if pivot is not at the end of the array, then\n    # array has to be rotated\n    if pivot_index!= n-1:\n        count = min(pivot_index, n-pivot_index-1)\n\n    # find the first element in the array greater than pivot\n    for i in range(n):\n        if arr[i] > pivot:\n            first_greater = i\n            break\n\n    # if the array is not rotated, then the first greater\n    # element will be greater than pivot element\n    if count == 0:\n        return n - first_greater - 1\n\n    # if array is rotated, then the first greater element\n    # will be greater than or equal to pivot element\n    else:\n        return n - first_greater - 1 - count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    \n    # Find the mid-point of the array\n    mid = n // 2\n    \n    # Check if the mid-point element is greater than the first element\n    if arr[mid] > arr[0]:\n        return mid\n    \n    # Check if the mid-point element is greater than the last element\n    if arr[mid] > arr[n-1]:\n        return count_rotation(arr[mid:]) + mid\n    \n    # The element is not present in the array\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n\n    # If array is already sorted, then no rotation is needed\n    if arr == sorted(arr):\n        return 0\n\n    # Initialize left and right pointers\n    left = 0\n    right = n-1\n\n    # Find the rotation point\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n\n    # After this loop, left will point to the rotation point.\n\n    # Check if rotation point is at the end of the array\n    if arr[left] >= arr[0]:\n        return left\n\n    # Otherwise, rotation point must be at the beginning of the array\n    return n - left\n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # If array is empty or has only one element, return 0\n    if n == 0 or n == 1:\n        return 0\n    # If array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    \n    # Initialize left and right pointers\n    left = 0\n    right = n-1\n    \n    # Traverse the array and check if the left element is greater than the right element\n    while left < right and arr[left] <= arr[right]:\n        # If the array is already sorted, return 0\n        if left == n-1:\n            return 0\n        left += 1\n        \n    # If the left pointer is greater than the right pointer, the array is already sorted\n    if left == right:\n        return 0\n        \n    # If the left pointer is less than the right pointer, the array is not sorted.\n    # Find the minimum element in the array and move it to the beginning of the array\n    min_index = right\n    for i in range(left, right):\n        if arr[i] < arr[min_index]:\n            min_index = i\n            \n    # Swap the minimum element with the first element of the array\n    arr[left], arr[min_index] = arr[min_index], arr[left]\n    \n    # Reverse the array from the left pointer to the right pointer\n    arr[left+1:] = arr[left+1:][::-1]\n    \n    # Return the number of rotations\n    return left+1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # If the mid element is greater than the first element,\n        # then the array is rotated to the right side\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        # If the mid element is smaller than the last element,\n        # then the array is rotated to the left side\n        elif arr[mid] < arr[right]:\n            right = mid\n        # If the mid element is equal to the last element,\n        # then the array is not rotated\n        else:\n            right -= 1\n\n    # If the array is not rotated, then return 0\n    if left == n - 1:\n        return 0\n    # If the array is rotated once, then return 1\n    elif left == right:\n        return 1\n    # If the array is rotated more than once, then return the count\n    else:\n        return count + (n - right)\n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # if the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    # if the array is not sorted, perform binary search on the array\n    # to determine the number of rotations required\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        elif arr[mid] < arr[high]:\n            high = mid - 1\n        else:\n            high -= 1\n    # return the number of rotations required\n    return low"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count = i\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    start = 0\n    end = n-1\n    count = 0\n    \n    # Perform binary search\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] <= arr[end]:\n            end = mid - 1\n        else:\n            start = mid + 1\n            \n    # Count the number of rotations\n    count = n - start\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Find the pivot point, if it exists\n    pivot = find_pivot(arr, 0, n-1)\n\n    # If pivot point exists\n    if pivot!= -1:\n        # If pivot point is at the start of the array\n        if pivot == 0:\n            return 0\n        return (n - pivot)\n\n    # If pivot point does not exist, array is not rotated\n    return -1\n\n\ndef find_pivot(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n\n        # If mid element is greater than mid+1 element\n        if arr[mid] > arr[mid+1]:\n            return mid\n\n        # If mid element is smaller than or equal to mid+1 element\n        if arr[low] <= arr[mid]:\n            return find_pivot(arr, mid+1, high)\n        return find_pivot(arr, low, mid-1)\n\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    if arr == sorted(arr):\n        return 0\n    else:\n        # Find the point of rotation\n        pivot = arr[0]\n        left = 0\n        right = n-1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] >= pivot:\n                right = mid\n            else:\n                left = mid+1\n        # Now, left index will point to the point where the array is rotated\n        # Count the number of rotations\n        count = 0\n        i = 0\n        while i < n and arr[i] <= pivot:\n            i += 1\n        count += i\n        return count"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    root = int(math.sqrt(n))\n    return root*root == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    if int(n ** 0.5) ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    import math\n    root = math.sqrt(n)\n    return int(root + 0.5)**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n*sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    \n    x = n // 2\n    y = (x + 1) ** 2\n    \n    while y < n:\n        x += 1\n        y = (x + 1) ** 2\n        \n    return x * x == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    This function returns True if the given number is a perfect square, otherwise, it returns False.\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check if the product of the numbers in the list is even or odd.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and returns True if the product of all the numbers is even, otherwise False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the product of the numbers in the list is even, False otherwise.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return [max_list]"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = [lst]\n        elif lst_sum == max_sum:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = None\n    max_sum = float('-inf')\n    for l in lists:\n        s = sum(l)\n        if s > max_sum:\n            max_sum = s\n            max_list = l\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    This function returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = -float('inf')\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_list = [lst]\n            max_sum = sum(lst)\n        elif sum(lst) == max_sum:\n            max_list.append(lst)\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function returns the maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n            \n    return max(max_run, current_run)"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        \n        if current_run > max_run:\n            max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Find the maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n\n    :param test_str: The string to search for maximum run of uppercase characters.\n    :return: The length of the maximum run of uppercase characters.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    \n    max_run = 1\n    current_run = 1\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n            \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    if not test_str:\n        return 0\n\n    max_run = 1\n    current_run = 1\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n\n        max_run = max(max_run, current_run)\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    This function finds the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # if no odd number is found, return None."
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers.\n    If no odd number is found, returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number from the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # If no odd number is found, return None.\n"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Return the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # if no odd number is found in the list"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number from the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return any(K in t for t in test_tup)"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a number K as input and returns True if the tuple contains K, else False.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            print(f\"Found {K} in tuple {tup}\")\n            return True\n    print(f\"{K} not found in any tuple\")\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: tuples have different lengths\")\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(f\"Error: element {i} of second tuple is not smaller than its corresponding element in the first tuple\")\n            return False\n    print(\"All elements of the second tuple are smaller than their corresponding elements in the first tuple\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns True if each element of the second tuple is smaller than its corresponding element in the first tuple, otherwise it returns False.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and checks if each element of the second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    }
]