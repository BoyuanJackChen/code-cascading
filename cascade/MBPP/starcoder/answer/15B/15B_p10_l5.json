[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = set()\n    for elem in test_tup1:\n        if elem in test_tup2:\n            result.add(elem)\n    return result",
        "num_ids": 68
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common = set1.intersection(set2)\n    return common",
        "num_ids": 71
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create two empty sets\n    set1 = set()\n    set2 = set()\n\n    # Add elements of tuple1 to set1\n    for element in test_tup1:\n        set1.add(element)\n\n    # Add elements of tuple2 to set2\n    for element in test_tup2:\n        set2.add(element)\n\n    # Find the common elements in both sets\n    common_elements = set1.intersection(set2)\n\n    # Return the common elements in a tuple\n    return tuple(common_elements)",
        "num_ids": 146
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Using set intersection method to find the common elements between two tuples\n    common_elements = set(test_tup1).intersection(test_tup2)\n    return common_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples and returns a new tuple with the common elements.\n    \"\"\"\n    common_elements = tuple(set(test_tup1) & set(test_tup2))\n    return common_elements",
        "num_ids": 63
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))",
        "num_ids": 54
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))",
        "num_ids": 54
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for element in test_tup1:\n        if element in test_tup2:\n            result.append(element)\n    return result",
        "num_ids": 67
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    A function to check if a number is not prime\n    '''\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False",
        "num_ids": 72
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(7))  # True\nprint(is_not_prime(10)) # False",
        "num_ids": 88
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    A function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "num_ids": 114
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "num_ids": 116
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    # Check if n is divisible by any number between 2 and sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If n is not divisible by any number between 2 and sqrt(n), it is a prime number\n    return False",
        "num_ids": 116
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    \n    # Create a list of all numbers from 2 to n\n    numbers = list(range(2, n+1))\n    \n    # Use the sieve of Eratosthenes to remove multiples of prime numbers\n    for i in range(2, int(math.sqrt(n))+1):\n        if i in numbers:\n            for j in range(i*i, n+1, i):\n                if j in numbers:\n                    numbers.remove(j)\n    \n    # Check if n is in the list of remaining numbers\n    if n in numbers:\n        return True\n    else:\n        return False",
        "num_ids": 165
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "num_ids": 116
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap, num)\n    return heap[::-1]",
        "num_ids": 117
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 97
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted([hq.heappop(heap) for i in range(n)], reverse=True)",
        "num_ids": 110
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]",
        "num_ids": 97
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res",
        "num_ids": 83
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Returns the n largest integers from the given list of numbers,\n    sorted in descending order.\n    \"\"\"\n    heap = []\n\n    # Add the first n elements of the list to the heap\n    for num in nums[:n]:\n        hq.heappush(heap, num)\n\n    # Add the remaining elements to the heap, replacing the smallest\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n\n    return heap",
        "num_ids": 135
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    hq.heapify(nums)  # Convert nums into a heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))  # Pop the largest number from the heap\n    return largest_nums[::-1]  # Return the largest numbers in descending order\n",
        "num_ids": 119
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)  # convert the list into a max heap\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result",
        "num_ids": 66
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    hq.heapify(nums)\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n    largest_nums.reverse()\n    return largest_nums",
        "num_ids": 70
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 71
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if the number is a power of 2\n    if x & (x-1) == 0 and x!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check whether the number is zero\n    if x == 0:\n        return False\n    \n    # Check whether the number is a power of two or not\n    while x!= 1:\n        # If the number is odd, return False\n        if x & 1!= 0:\n            return False\n        # Right shift the number by one bit\n        x >>= 1\n    \n    # If the loop finishes without returning False, the number is a power of two\n    return True",
        "num_ids": 128
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes a number x as input and returns True if x is a power of 2 and False otherwise.\n    '''\n    # Check if x is a power of 2\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return ((x & (x-1)) == 0) and (x!= 0)",
        "num_ids": 57
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if x is a power of two,\n    False otherwise.\n    '''\n    # To check if x is a power of two, we can use the fact that 2^n = x, where n is an integer.\n    # We can calculate log2(x) using binary logarithm and check if the result is an integer or not.\n    \n    # To calculate log2(x) using binary logarithm, we can use the math.log function with base 2 as argument.\n    import math\n    log2_x = math.log(x, 2)\n    \n    # Check if the log2_x is an integer or not.\n    if log2_x.is_integer():\n        return True\n    else:\n        return False",
        "num_ids": 180
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    :param x: The number to be checked.\n    :return: True if the two numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    # If the number is a power of two, then it will have only one bit set to 1.\n    # We can check this by checking if the number is a power of two using bitwise AND operator.\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 130
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Checks if the given number x is a power of 2 or not.\n    \"\"\"\n    return (x!= 0) and ((x & (x - 1)) == 0)\n",
        "num_ids": 55
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    # return true if x is power of 2 else false\n    return ((x!= 0) and ((x & (x-1)) == 0))",
        "num_ids": 46
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return ((x & (x - 1)) == 0) and (x!= 0)",
        "num_ids": 58
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expressions to find words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 58
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # Split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Filter out words that are not at least 4 characters long\n    words = [word for word in words if len(word) >= 4]\n    \n    # Return the filtered list of words\n    return words",
        "num_ids": 84
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words of 4 or more characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all matches in the text\n    matches = pattern.findall(text)\n    # Return matches\n    return matches",
        "num_ids": 71
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 42
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words that are at least 4 characters long.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 65
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to match all words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 57
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words with 4 or more characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n\n    # Print the matching words\n    print(matches)",
        "num_ids": 65
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        square = num ** 2\n        result.append(square)\n    return result",
        "num_ids": 53
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns a list of the squares of individual elements in the input list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 61
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums",
        "num_ids": 50
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums",
        "num_ids": 54
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return 0\n    \n    # Find the minimum rotation of s[0:i]\n    # where i is the index of the smallest character in s[0:i]\n    min_rot = float('inf')\n    for i in range(n):\n        if s[i] < s[i+1]:\n            min_rot = 1\n            break\n        else:\n            for j in range(i+1, n):\n                if s[i] < s[j]:\n                    min_rot = min(min_rot, j-i)\n                    break\n    \n    # Find the minimum rotation of s[0:i]\n    # where i is the index of the largest character in s[0:i]\n    max_rot = float('inf')\n    for i in range(n):\n        if s[i] > s[i+1]:\n            max_rot = 1\n            break\n        else:\n            for j in range(i+1, n):\n                if s[i] > s[j]:\n                    max_rot = min(max_rot, j-i)\n                    break\n    \n    return min(min_rot, max_rot)",
        "num_ids": 270
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    If the string cannot be rotated, it returns -1.\n    \"\"\"\n    \n    # create a dictionary to store the characters and their positions in the string\n    char_dict = {}\n    for i in range(len(str)):\n        char_dict[str[i]] = i\n    \n    # check if the string can be obtained by rotating the original string by any number of positions\n    for i in range(len(str)):\n        rotated_str = str[i:] + str[:i]\n        if rotated_str == str:\n            return i\n    \n    # if the string cannot be rotated, return -1\n    return -1",
        "num_ids": 162
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        for i in range(len(str)):\n            if str == str[i:]+str[:i]:\n                return i+1\n        return -1",
        "num_ids": 88
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Find the mid point of the string\n        mid = n // 2\n        # Create two substrings - left and right of the mid point\n        left = str[:mid]\n        right = str[mid:]\n        # Recursively find the minimum number of rotations for left and right substrings\n        left_rotations = find_Rotations(left)\n        right_rotations = find_Rotations(right)\n        # Check if left and right substrings are same or not\n        if left == right:\n            return min(left_rotations, right_rotations)\n        else:\n            return min(left_rotations, right_rotations) + n // 2\n",
        "num_ids": 184
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    count = 0\n    for i in range(n//2): \n        if str[i]!= str[n-i-1]: \n            count += 1\n    return count + (n//2) if n%2!= 0 else count",
        "num_ids": 69
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n    if str == \"\":\n        return 0\n    else:\n        return min(find_Rotations(str[1:]), find_Rotations(str[:-1])) + 1",
        "num_ids": 68
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    else:\n        temp = str + str  # Concatenate the string with itself to get a new string of length 2n\n        for i in range(n):\n            if temp[i:i+n] == str:  # Check if the substring from index i to i+n is equal to the original string\n                return (i+1) % n  # Return the index where the original string ends up after n rotations\n        return -1  # If the original string is not found in the concatenated string after n rotations, return -1",
        "num_ids": 174
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(s):\n    if len(s) == 1:\n        return 1\n    elif s == s[::-1]:\n        return 0\n    else:\n        mid = len(s) // 2\n        if s[mid:] == s[:mid][::-1]:\n            return 1 + find_Rotations(s[mid:])\n        else:\n            return 1 + min(find_Rotations(s[mid:]), find_Rotations(s[:mid]))",
        "num_ids": 106
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    if len(str) == 0:\n        return 0\n    else:\n        n = len(str)\n        for i in range(n):\n            if str[i] == str[n-1]:\n                return i\n        return n",
        "num_ids": 60
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str1 = str + str\n    for i in range(n):\n        if str1[i:i+n] == str:\n            return i\n    return -1",
        "num_ids": 82
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        # Remove first occurrence\n        s = s.replace(ch, '', 1)\n        # Remove last occurrence\n        s = s.rsplit(ch, 1)[0]\n    return s",
        "num_ids": 80
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two arguments: a string and a character.\n    It returns a new string with the first and last occurrence of the given character removed.\n    \"\"\"\n    # Finding the index of the first occurrence of the character\n    first_index = s.find(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # Finding the index of the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # Removing the character from the string and returning the modified string\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]",
        "num_ids": 162
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes first and last occurrence of a given character from the string.\n    \"\"\"\n    # check if the character is present in the string\n    if ch in s:\n        # get the index of first occurrence of the character\n        first_index = s.find(ch)\n        # get the index of last occurrence of the character\n        last_index = s.rfind(ch)\n        # get the substring from first index to last index\n        substring = s[first_index:last_index+1]\n        # remove the substring from the original string\n        new_s = s.replace(substring, '')\n        # return the new string\n        return new_s\n    else:\n        # if the character is not present in the string, return the original string\n        return s",
        "num_ids": 172
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes in a string and a character as inputs and returns the string with the first and last occurrence of the given character removed.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        return s[:s.index(ch)] + s[s.index(ch) + 1:s.rindex(ch)] + s[s.rindex(ch) + 1:]",
        "num_ids": 99
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes in a string and a character and removes the first and last occurrence of the character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s\n    else:\n        # Find the index of the first occurrence of the character in the string\n        first_occurrence = s.find(ch)\n        # Find the index of the last occurrence of the character in the string\n        last_occurrence = s.rfind(ch)\n        # Create a substring of the string from the first occurrence to the last occurrence\n        substring = s[first_occurrence:last_occurrence+1]\n        # Remove the substring from the original string\n        new_s = s.replace(substring, \"\")\n        return new_s",
        "num_ids": 170
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    \n    # find the index of the first occurrence of ch in s\n    first_idx = s.index(ch)\n    \n    # find the index of the last occurrence of ch in s\n    last_idx = s.rindex(ch)\n    \n    # slice the string to exclude the characters at the first and last indices\n    new_s = s[:first_idx] + s[first_idx+1:last_idx] + s[last_idx+1:]\n    \n    return new_s",
        "num_ids": 143
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s  # nothing to remove\n    else:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        return s[:first_occ] + s[last_occ+1:]",
        "num_ids": 96
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a character from a string.\n    \"\"\"\n    if len(s) < 2:\n        return s\n\n    # Remove first occurrence\n    i = 0\n    while i < len(s) and s[i] == ch:\n        i += 1\n    s = s[i:]\n\n    # Remove last occurrence\n    i = len(s) - 1\n    while i >= 0 and s[i] == ch:\n        i -= 1\n    s = s[:i+1]\n\n    return s",
        "num_ids": 124
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Removes first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    \n    # remove first occurrence of the character\n    if s[0] == ch:\n        s = s[1:]\n    else:\n        i = 0\n        while i < len(s) and s[i]!= ch:\n            i += 1\n        s = s[:i] + s[i+1:]\n    \n    # remove last occurrence of the character\n    if s[-1] == ch:\n        s = s[:-1]\n    else:\n        i = len(s) - 1\n        while i >= 0 and s[i]!= ch:\n            i -= 1\n        s = s[:i] + s[i+1:]\n    \n    return s",
        "num_ids": 178
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string s and a character ch as input and removes the first and last occurrence of ch from the string.\n    '''\n    s = s.replace(ch, '', 1)\n    s = s.replace(ch, '', -1)\n    return s",
        "num_ids": 69
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            for k in range(n):\n                if sum(M[j]) > sum(M[j+1]):\n                    temp = M[j]\n                    M[j] = M[j+1]\n                    M[j+1] = temp\n    return M",
        "num_ids": 113
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    # Sort matrix rows based on their sum in ascending order\n    for i in range(n):\n        row_sum = sum(M[i])\n        M[i].sort()\n        \n        # Update the sum of the sorted rows to the matrix\n        for j in range(m):\n            M[i][j] = row_sum\n            \n    # Sort matrix based on the sorted row sums in ascending order\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    \n    return M",
        "num_ids": 190
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Create a list of tuples, where each tuple contains the sum of the row and the row itself\n    sums = [(sum(row), row) for row in M]\n    # Sort the list of tuples by the sum of the rows\n    sums.sort()\n    # Return a list of rows sorted by the sum of the rows in ascending order\n    return [row for (s, row) in sums]",
        "num_ids": 113
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Sort the rows in ascending order based on their sum\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M",
        "num_ids": 111
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M",
        "num_ids": 99
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    sorted_indices = sorted(range(len(row_sums)), key=row_sums.__getitem__)\n    sorted_matrix = [[M[i][j] for j in sorted_indices] for i in range(len(M))]\n    return sorted_matrix",
        "num_ids": 103
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M",
        "num_ids": 101
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the dimensions of a triangular prism and returns its volume.\n\n    :param l: length of the base of the triangular prism\n    :param b: width of the base of the triangular prism\n    :param h: height of the triangular prism\n    :return: the volume of the triangular prism\n    \"\"\"\n    return 0.5 * l * b * h",
        "num_ids": 99
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input parameters and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume",
        "num_ids": 58
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism and returns its volume.\n    '''\n    return (l * b * h) / 3",
        "num_ids": 52
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as arguments and returns its volume.\n    '''\n    volume = (1/3)*l*b*h\n    return volume",
        "num_ids": 58
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as inputs and returns its volume.\n    '''\n    volume = (1/3)*l*b*h\n    return volume",
        "num_ids": 57
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 52
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of the triangular prism as input parameters and returns the volume of the prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume",
        "num_ids": 62
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Calculates the volume of a triangular prism.\n    Parameters:\n        l (float): length of the triangular prism.\n        b (float): width of the triangular prism.\n        h (float): height of the triangular prism.\n    Returns:\n        (float): volume of the triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 101
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as input parameters and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 59
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth, and height of a triangular prism as arguments\n    and returns its volume.\n    \"\"\"\n    volume = (l * b * h) / 3\n    return volume",
        "num_ids": 59
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 76
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'\\b[a-z]+_[a-z]+\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.search(text))",
        "num_ids": 43
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function checks whether a given input string contains sequences of lowercase letters joined with an underscore or not.\n    '''\n    # Define a pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n\n    # Use the re.search() function to check if the pattern matches the input string or not\n    match = re.search(pattern, text)\n\n    # If the match is found, return True, else return False\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 131
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return pattern.search(text) is not None",
        "num_ids": 68
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    return match is not None",
        "num_ids": 79
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter",
        "num_ids": 44
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "num_ids": 44
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n\n    Args:\n    string (str): The input string to be processed.\n    remove_chars (str): The characters to be removed from the input string.\n\n    Returns:\n    str: The processed string.\n\n    Example:\n    >>> str_to_list(\"hello world\", \"ld\")\n    'heo wor'\n    '''\n\n    # Convert the remove_chars string to a list for faster access.\n    remove_chars_list = list(remove_chars)\n\n    # Create an empty list to store the characters from the input string.\n    result = []\n\n    # Iterate over each character in the input string.\n    for char in string:\n        # Check if the character is not in the remove_chars list.\n        if char not in remove_chars_list:\n            # Add the character to the result list.\n            result.append(char)\n\n    # Convert the result list to a string and return it.\n    return ''.join(result)",
        "num_ids": 229
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string, exclude_chars):\n    # Create a list of characters to exclude\n    exclude = [False] * NO_OF_CHARS\n    for char in exclude_chars:\n        exclude[ord(char)] = True\n    \n    # Convert the string to a list of characters\n    char_list = [char for char in string]\n    \n    # Remove excluded characters from the list\n    for i in range(len(char_list)):\n        if exclude[ord(char_list[i])]:\n            del char_list[i]\n            i -= 1\n    \n    return char_list",
        "num_ids": 125
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if ord(string[i]) not in string:\n            new_string += string[i]\n    return new_string",
        "num_ids": 75
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string, remove_chars): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a boolean array to mark characters to be removed\n    remove = [False] * NO_OF_CHARS\n    for char in remove_chars:\n        remove[ord(char)] = True\n\n    # Iterate over the string and append each character that is not to be removed to a new list\n    result = []\n    for char in string:\n        if not remove[ord(char)]:\n            result.append(char)\n\n    # Convert the list to a string and return it\n    return ''.join(result)",
        "num_ids": 143
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return result",
        "num_ids": 48
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list of characters after removing the characters present in the given string.\n    '''\n    # Create a boolean list of size NO_OF_CHARS and initialize all elements as True\n    # This list will be used to keep track of characters present in the input string\n    char_present = [True] * NO_OF_CHARS\n    # Convert the input string to a list of characters\n    char_list = list(string)\n    # Remove all the characters present in the input string from the char_present list\n    for char in char_list:\n        char_present[ord(char)] = False\n    # Create a new list of characters by iterating over the char_present list and adding all characters which are present in char_present to the new list\n    new_list = []\n    for i in range(NO_OF_CHARS):\n        if char_present[i]:\n            new_list.append(chr(i))\n    return new_list",
        "num_ids": 218
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    This function removes characters from the first string which are present in the second string.\n    \"\"\"\n    result = []\n    for char in string:\n        if char not in remove_chars:\n            result.append(char)\n    return ''.join(result)",
        "num_ids": 68
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Removes characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in remove_chars:\n            result.append(char)\n    return result",
        "num_ids": 62
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list of characters\n    that are not present in the input string.\n    '''\n    no_of_chars = 256\n    char_set = [False]*no_of_chars\n    for char in string:\n        char_set[ord(char)] = True\n    return [chr(i) for i in range(no_of_chars) if not char_set[i]]",
        "num_ids": 105
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    lst = list(string)\n\n    # Remove characters present in the second string from the list\n    for char in string:\n        if char in lst:\n            lst.remove(char)\n\n    # Convert the list back to a string and return it\n    return ''.join(lst)\n",
        "num_ids": 101
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(arraynums)!= len(unique_nums):\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set from the input array to remove duplicates\n    unique_nums = set(arraynums)\n    # compare the length of the input array and the length of the set to check for duplicates\n    if len(arraynums)!= len(unique_nums):\n        return True\n    else:\n        return False",
        "num_ids": 93
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the count of each integer in the array\n    count_dict = {}\n\n    # iterate through the array and update the count of each integer\n    for num in arraynums:\n        count_dict[num] = count_dict.get(num, 0) + 1\n\n    # iterate through the dictionary and check if any count is greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n\n    # if no duplicate is found, return False\n    return False",
        "num_ids": 143
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True",
        "num_ids": 63
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if the array contains any duplicate element, otherwise it returns False.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True",
        "num_ids": 63
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Using a set to remove duplicates\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True",
        "num_ids": 71
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    This function takes an integer as input and returns True if it is a Woodall number and False otherwise.\n    A Woodall number is a positive integer that is divisible only by 3, 5 or 7.\n    '''\n    if x <= 0:\n        return False\n    for i in range(2, int(x**(0.5))+1):\n        if x % i == 0:\n            return False\n        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\n            return True\n    return False",
        "num_ids": 133
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2!= 0 or (x == 2 and x!= 2):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1 or x > 100:\n        return False\n    elif x % 5 == 0 and (x + 1) % 5 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 78
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    This function takes a number x as input and checks if it is a woodball or not.\n    Woodball is a number whose digits sum up to the sum of its digits raised to the power of 2.\n    '''\n    num = x\n    while num > 0:\n        digit_sum = 0\n        digit = num % 10\n        digit_sum += digit\n        num = num // 10\n    \n    # Calculate the sum of digits raised to the power of 2\n    power = 0\n    while digit_sum > 0:\n        digit = digit_sum % 10\n        power_digit = digit ** 2\n        power += power_digit\n        digit_sum = digit_sum // 10\n    \n    if x == power:\n        return True\n    else:\n        return False",
        "num_ids": 178
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n    \"\"\"\n    if x < 1:\n        return False\n    if x == 1:\n        return True\n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2:\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Check if the given number is woodball or not.\n    '''\n    sum = 0\n    temp = x\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == x",
        "num_ids": 68
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Initialize variables\n    divisors = []\n    factors = []\n    \n    # Check if the number is even or not\n    if x % 2 == 0:\n        return False\n    \n    # Find all factors of the number\n    for i in range(1, x+1):\n        if x % i == 0:\n            factors.append(i)\n    \n    # Check if the factors form a woodball\n    for factor in factors:\n        for divisor in range(1, factor):\n            if factor % divisor == 0:\n                divisors.append(divisor)\n    \n    if len(divisors) == len(factors):\n        return True\n    else:\n        return False",
        "num_ids": 169
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Convert x to string and reverse it\n    s = str(x)[::-1]\n    # Check if the reversed number is divisible by 3\n    if int(s) % 3 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the number is a multiple of 7 and greater than or equal to 35.\n    if x % 7 == 0 and x >= 35:\n        return True\n    else:\n        return False",
        "num_ids": 76
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = (reverse * 10) + temp % 10\n        temp //= 10\n    if num == (reverse * 2) + 1:\n        return True\n    else:\n        return False",
        "num_ids": 91
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    # converting the number to string and then reversing it\n    reverse_num = int(str(num)[::-1])\n\n    # checking if the number is one less than twice the reverse\n    if num == reverse_num + 1 and num!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    \n    # Convert the reversed number back to an integer and add 1 to it\n    rev_num_plus_one = int(rev_num) + 1\n    \n    # Check if the original number is equal to the number obtained by reversing the reversed number plus 1\n    if num == rev_num_plus_one:\n        return True\n    else:\n        return False",
        "num_ids": 107
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        remainder = temp % 10\n        reverse = (reverse * 10) + remainder\n        temp = temp // 10\n\n    if num == (reverse * 2) - 1:\n        return True\n    else:\n        return False",
        "num_ids": 96
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the original number is one less than twice the reversed number\n    if num == rev_num + 1:\n        return True\n    else:\n        return False",
        "num_ids": 96
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string to an integer\n    rev_int = int(rev_str)\n    # check if the number is one less than twice the reversed integer\n    if num == rev_int + 1:\n        return True\n    else:\n        return False",
        "num_ids": 120
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n    # Reverse the string and convert it back to an integer\n    reversed_num = int(num_str[::-1])\n    # Check if the reversed number is twice the original number minus one\n    if num == (reversed_num * 2) - 1:\n        return True\n    else:\n        return False",
        "num_ids": 91
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    # convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # convert the reversed string back to an integer and add 1 to it\n    rev_num = int(num_str) + 1\n    # check if the original number plus 1 is equal to the reversed number\n    if num + 1 == rev_num:\n        return True\n    else:\n        return False",
        "num_ids": 95
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the given number is one less than twice its reverse, and False otherwise.\n    \"\"\"\n    rev_num = str(num)[::-1] # reverse the number and convert it to a string\n    if int(rev_num) * 2 + 1 == num:\n        return True\n    else:\n        return False",
        "num_ids": 85
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    reverse_num = int(num_str[::-1])\n    if num + 1 == 2 * reverse_num:\n        return True\n    else:\n        return False\n\nprint(rev(123)) # Output: True\nprint(rev(456)) # Output: False",
        "num_ids": 102
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True) # Sorting the array in descending order\n    max_num = 0\n    \n    for i in range(len(arr)):\n        temp = int(''.join(map(str, arr[:i+1]))) # Converting the array to string and taking the first i+1 elements as a list and then joining them as a string and converting it back to integer\n        if temp > max_num: # If the temporary integer is greater than the previous maximum integer, then update the maximum integer\n            max_num = temp\n            \n    return max_num",
        "num_ids": 155
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n    n = len(arr)\n    arr.sort(reverse=True)\n    res = 0\n    for i in range(n):\n        res += arr[i] * (10 ** i)\n    return res",
        "num_ids": 78
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    # Convert the input list to a set to remove duplicates\n    arr_set = set(arr)\n    \n    # Initialize variables\n    max_num = 0\n    base = 1\n    \n    # Iterate over the set of digits\n    for digit in arr_set:\n        # Multiply the current base by the current digit and update max_num if necessary\n        max_num = max(max_num, base * digit)\n        \n        # Multiply the base by 10 to get to the next power of 10\n        base *= 10\n    \n    return max_num",
        "num_ids": 125
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            num = int(\"\".join(str(x) for x in arr[i:j+1]))\n            max_num = max(max_num, num)\n    return max_num",
        "num_ids": 105
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes an array of digits and returns the largest number that can be formed using those digits.\n    \"\"\"\n    # convert array to string\n    arr = ''.join(map(str, arr))\n    # initialize variables\n    largest = arr[0]\n    current = arr[0]\n    # loop through array\n    for i in range(1, len(arr)):\n        # if current number is greater than the largest number found so far, update largest number\n        if arr[i] > current:\n            largest = current + arr[i]\n            current = arr[i]\n        # if current number is less than or equal to the largest number found so far, update current number\n        else:\n            current = current * 10 + arr[i]\n    return largest",
        "num_ids": 171
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables to keep track of the largest number and its current value\n    max_num = 0\n    curr_num = 0\n\n    # Loop through each digit in the list\n    for digit in arr:\n        # Add the digit to the current number\n        curr_num = (curr_num * 10) + digit\n\n        # Compare the current number with the largest number found so far\n        if curr_num > max_num:\n            max_num = curr_num\n\n    # Return the largest number found\n    return max_num",
        "num_ids": 122
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort()\n    max_num = ''\n    for i in arr:\n        max_num += str(i)\n    return int(max_num)",
        "num_ids": 69
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed using these digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num = max_num * 10 + arr[i]\n    return max_num",
        "num_ids": 81
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    \n    for i in range(len(arr)):\n        max_num += arr[i] * (10**(len(arr)-1-i))\n    \n    return max_num",
        "num_ids": 88
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort() # Sort the given list of digits in ascending order\n    \n    largest_num = 0 # Initialize the largest number to 0\n    \n    # Iterate through the sorted list of digits\n    for i in range(len(arr)):\n        # Multiply each digit with the largest power of 10 possible\n        largest_num += arr[i] * (10 ** i)\n        \n    return largest_num # Return the largest number that can be formed with the given list of digits",
        "num_ids": 134
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, otherwise False.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n\n    :param x: An integer\n    :param y: An integer\n    :return: True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False",
        "num_ids": 99
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite sign, otherwise False.\n    \"\"\"\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and checks whether they have opposite sign or not.\n    If they have opposite sign, then it returns True, otherwise it returns False.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if they have opposite sign, otherwise False.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and checks whether they have opposite sign or not.\n    '''\n\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = (n * (3*n - 2)) // 2\n    return oct_num",
        "num_ids": 51
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        oct_num = i * (2*i - 1)\n        if oct_num == n:\n            return True\n        elif oct_num > n:\n            return False\n        i += 1",
        "num_ids": 78
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        octagonal = i * (3 * i - 1) // 2\n        if octagonal == n:\n            return True\n        count += 1\n        i += 1\n    return False",
        "num_ids": 85
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    This function takes an integer 'n' as input and returns True if the nth octagonal number exists, otherwise it returns False.\n    \"\"\"\n    # Find the octagonal number\n    octagonal_num = (3 * n * n) + (n * n)\n    \n    # Check if it exists\n    if octagonal_num % 12 == 5:\n        return True\n    else:\n        return False",
        "num_ids": 100
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        octagon = i * (2*i - 1)\n        if octagon == n:\n            return True\n        elif octagon > n:\n            return False\n        i += 1",
        "num_ids": 75
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function finds the nth octagonal number.\n    \"\"\"\n    i = 1\n    octagonal_number = 0\n    while i <= n:\n        octagonal_number = (i * (3 * i - 2))\n        i += 1\n    return octagonal_number",
        "num_ids": 75
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, otherwise it returns False.\n    An octagonal number is a number that can be expressed as the sum of the nth and (n-1)th triangular numbers.\n    For example, 10th octagonal number is 143, which can be written as the sum of 216 and 168 triangular numbers.\n    '''\n    triangular_numbers = [i*(i+1)//2 for i in range(1, int(n**0.5)+1)]\n    if n in triangular_numbers:\n        for i in range(n, len(triangular_numbers)):\n            if triangular_numbers[i] - triangular_numbers[i-n] == triangular_numbers[i-1] - triangular_numbers[i-n-1]:\n                return True\n        return False\n    else:\n        return False",
        "num_ids": 217
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while True:\n        octagonal = i*(3*i-1)\n        if octagonal >= n:\n            break\n        count += 1\n        i += 1\n    if octagonal == n:\n        return True\n    else:\n        return False",
        "num_ids": 91
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    oct_num = 0\n    while count < n:\n        oct_num += 8\n        count += 1\n    return oct_num",
        "num_ids": 62
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is an octagonal number or not.\n    \"\"\"\n    # Calculate the nth octagonal number\n    nth_octagonal = n * (3 * n - 2)\n\n    # Check if the number is divisible by 24\n    return nth_octagonal % 24 == 0",
        "num_ids": 81
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    substrings = defaultdict(int)\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n                substrings[substring] += 1\n\n    return count, substrings",
        "num_ids": 138
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    # a dictionary to store the frequency of each digit in the string\n    freq = defaultdict(int)\n    # loop through each digit of the string\n    for i in range(n):\n        freq[int(s[i])] += 1\n    # loop through each substring of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # calculate the sum of digits in the substring\n            digit_sum = sum(int(s[k]) for k in range(i,j))\n            # if the sum of digits is equal to the length of the substring, increment the count\n            if digit_sum == j-i:\n                count += 1\n    return count",
        "num_ids": 203
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    digit_sum = defaultdict(int)\n    for i in range(len(s)):\n        digit_sum[int(s[i])] += 1\n        for j in range(i+1, len(s)+1):\n            if sum(digit_sum.values()) == len(s):\n                count += 1\n            digit_sum[int(s[j-1])] -= 1\n            if digit_sum[int(s[j-1])] == 0:\n                del digit_sum[int(s[j-1])]\n    return count",
        "num_ids": 166
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(digit) for digit in sub) == len(sub):\n                count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the count of substrings with sum of digits as their length\n    count = defaultdict(int)\n\n    # Iterate through the string and calculate the sum of digits of each substring\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            sub_sum = sum(int(digit) for digit in sub_str)\n            count[sub_sum] += 1\n\n    # Count the number of substrings with sum of digits as their length\n    count_sum = sum(count[i] for i in count if i == len(str(i)))\n\n    return count_sum",
        "num_ids": 165
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            if sum(int(digit) for digit in sub_str) == len(sub_str):\n                count += 1\n                for digit in sub_str:\n                    digit_count[digit] += 1\n    print(\"Number of substrings with sum of digits equal to their length:\", count)\n    print(\"Number of occurrences of each digit in the substrings:\", digit_count)",
        "num_ids": 147
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        count[i] = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                if i-j == abs(sum(map(int, s[j:i]))) and (i-j > 1 or s[j]!= '0'):\n                    count[i] += count[j]\n    \n    return count[n-1]\n",
        "num_ids": 156
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count[digits_sum] += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string s as input and returns the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length.\n    count = defaultdict(int)\n    # Loop through all substrings of length 1 to n.\n    for i in range(n):\n        count[s[i]] += 1\n        # Check if the sum of digits in the substring is equal to the length of the substring.\n        if len(str(sum(int(digit) for digit in s[i:i+1]))) == len(s[i:i+1]):\n            count[''.join(sorted(s[i:i+1]))] += 1\n    # Loop through all substrings of length 2 to n.\n    for i in range(n-1):\n        for j in range(i+2, n+1):\n            substring = s[i:j]\n            # Check if the sum of digits in the substring is equal to the length of the substring.\n            if len(str(sum(int(digit) for digit in substring))) == len(substring):\n                count[''.join(sorted(substring))] += 1\n    # Return the total count of substrings with sum of digits equal to their length.\n    return sum(count.values())",
        "num_ids": 314
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0] # assume the first number is the smallest\n    for i in range(1, len(xs)):\n        if xs[i] < smallest: # if the current number is smaller than the smallest so far\n            smallest = xs[i] # update the smallest to be the current number\n    return smallest # return the smallest number",
        "num_ids": 103
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    return min(xs)",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function returns the smallest number in a list of numbers.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Find the smallest number in a list of numbers.\n    '''\n    return min(xs)",
        "num_ids": 29
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list by the first element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[0])\n    \n    # initialize variables for the maximum difference and the current pair\n    max_diff = 0\n    current_pair = (test_list[0][1], test_list[1][1])\n    \n    # iterate over the sorted list of tuples\n    for i in range(2, len(test_list)):\n        # calculate the difference between the current pair and the next available pair\n        diff = test_list[i][0] - current_pair[1]\n        \n        # update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n        \n        # update the current pair to the next available pair\n        current_pair = (current_pair[1], test_list[i][1])\n    \n    return max_diff",
        "num_ids": 218
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 44
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples by the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 43
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n\n    Args:\n    subject_marks (list): A list of tuples where each tuple contains the name of the subject and the marks obtained in that subject.\n    \n    Returns:\n    A sorted list of tuples where each tuple contains the name of the subject and the marks obtained in that subject.\n    '''\n    return sorted(subject_marks, key=lambda x: x[1])",
        "num_ids": 103
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "num_ids": 55
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "num_ids": 55
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    if not data_list: # Base case: empty list\n        return 0\n    \n    if isinstance(data_list[0], list): # Recursive case: list contains another list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 117
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    if len(data_list) == 0:\n        return 0\n    \n    if type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 109
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 106
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 95
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(item) for item in data_list)\n    else:\n        return data_list",
        "num_ids": 68
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        total = 0\n        for item in data_list:\n            total += recursive_list_sum(item)\n        return total",
        "num_ids": 77
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        total = 0\n        for item in data_list:\n            total += recursive_list_sum(item)\n        return total",
        "num_ids": 77
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list\n    if not data_list:\n        return 0\n    # Recursive case: list with at least one element\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 84
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Initialize the Bell numbers list with the first number (1)\n    bell_numbers = [1]\n    \n    # Loop through the range from 1 to n and calculate each Bell number\n    for i in range(1, n+1):\n        # Calculate the sum of the previous Bell numbers\n        bell_sum = sum(bell_numbers)\n        \n        # Append the new Bell number to the Bell numbers list\n        bell_numbers.append(bell_sum)\n    \n    # Return the nth Bell number\n    return bell_numbers[n]",
        "num_ids": 160
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_number(k)*bell_number(n-k) for k in range(n+1)])",
        "num_ids": 50
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n + 1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]",
        "num_ids": 77
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_num = [1]\n    for i in range(1, n+1):\n        bell_num.append(sum(bell_num))\n    return bell_num[-1]",
        "num_ids": 76
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]",
        "num_ids": 76
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [0, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]",
        "num_ids": 79
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_list = [0, 1]\n    for i in range(2, n+1):\n        bell_list.append(sum(bell_list[-2:i]))\n    return bell_list[n]",
        "num_ids": 83
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers[-i:]))\n    return bell_numbers[n]",
        "num_ids": 79
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_num = 1\n        for i in range(1, n + 1):\n            bell_num = bell_num * (i + 1) / i\n        return bell_num",
        "num_ids": 92
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]",
        "num_ids": 72
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            is_decreasing = False\n        elif A[i] < A[i-1]:\n            is_increasing = False\n\n    return is_increasing or is_decreasing",
        "num_ids": 99
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array as an input and returns True if it is monotonic, else False.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    if n == 2:\n        if A[0] <= A[1]:\n            return True\n        else:\n            return False\n    \n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True",
        "num_ids": 107
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 2:\n        return True\n    else:\n        is_increasing = True\n        is_decreasing = True\n        for i in range(n - 1):\n            if A[i] > A[i + 1]:\n                is_increasing = False\n            if A[i] < A[i + 1]:\n                is_decreasing = False\n        if is_increasing or is_decreasing:\n            return True\n        else:\n            return False",
        "num_ids": 138
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes in an array A and returns True if the array is monotonic, otherwise it returns False.\n    A monotonic array is an array which is either strictly increasing or strictly decreasing.\n    '''\n    \n    n = len(A)\n    \n    # Check if the array is strictly increasing\n    if all(A[i] < A[i+1] for i in range(n-1)):\n        return True\n    \n    # Check if the array is strictly decreasing\n    elif all(A[i] > A[i+1] for i in range(n-1)):\n        return True\n    \n    # If the array is neither strictly increasing nor strictly decreasing, it's not monotonic\n    else:\n        return False",
        "num_ids": 159
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n < 2:\n        return True\n    \n    inc = True\n    dec = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            inc = False\n        if A[i] > A[i-1]:\n            dec = False\n    \n    return inc or dec",
        "num_ids": 104
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n\n    # checking if array is increasing\n    if all(A[i] <= A[i+1] for i in range(n-1)):\n        return \"increasing\"\n\n    # checking if array is decreasing\n    if all(A[i] >= A[i+1] for i in range(n-1)):\n        return \"decreasing\"\n\n    # if array is neither increasing nor decreasing\n    return \"not monotonic\"",
        "num_ids": 129
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    if n == 1: \n        return True \n    elif n == 2: \n        return A[0] <= A[1] \n    else: \n        inc = A[1] > A[0] \n        dec = A[1] < A[0] \n\n        for i in range(2, n): \n            if inc: \n                if A[i] <= A[i-1]: \n                    return False \n            elif dec: \n                if A[i] >= A[i-1]: \n                    return False \n            else: \n                return False \n\n        return True ",
        "num_ids": 152
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # check if array is increasing or decreasing\n    is_increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    is_decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    return is_increasing or is_decreasing",
        "num_ids": 136
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 95
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n    - l: the list to search in\n    - s: the sublist to search for\n\n    Returns:\n    - True if the sublist is found in the list, False otherwise\n    \"\"\"\n\n    # Check if the sublist is empty\n    if not s:\n        return True\n\n    # Check if the list is empty\n    if not l:\n        return False\n\n    # Check if the list has enough elements for the sublist to be contained in it\n    if len(l) < len(s):\n        return False\n\n    # Check if the sublist is the same as a prefix of the list\n    if s == l[:len(s)]:\n        return True\n\n    # Check if the sublist can be found in the list by slicing it\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    # If the sublist was not found, return False\n    return False",
        "num_ids": 232
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Checks whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 68
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False",
        "num_ids": 86
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two arguments - l (the main list) and s (the sublist to check)\n    and returns True if the sublist is present in the main list, else False.\n    '''\n\n    # If the length of sublist is greater than the length of main list, then it cannot be a sublist\n    if len(s) > len(l):\n        return False\n\n    # Using two pointers approach to check if sublist is present in main list\n    for i in range(len(l) - len(s) + 1):\n        for j in range(len(s)):\n            if l[i+j]!= s[j]:\n                break\n        else:\n            # If the loop completes without breaking, then sublist is present in main list\n            return True\n\n    # If sublist is not found in main list, then return False\n    return False",
        "num_ids": 194
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 72
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 86
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 82
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list l contains the sublist s.\n    \"\"\"\n    # Convert the sublist to a set for faster membership testing\n    s = set(s)\n    for i in range(len(l) - len(s) + 1):\n        if set(l[i:i+len(s)]) == s:\n            return True\n    return False",
        "num_ids": 89
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two arguments, a list 'l' and a sublist's'.\n    It returns True if the sublist's' is present in the list 'l' or False otherwise.\n\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n        \n    return False",
        "num_ids": 109
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # get the length of the first tuple\n    length = len(Input[0])\n    # check if all tuples have the same length\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True",
        "num_ids": 69
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    m = len(Input[0])\n    for i in range(n):\n        if len(Input[i])!= m:\n            return False\n    return True",
        "num_ids": 72
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, and False otherwise.\n    '''\n    # initialize the length of the first tuple in the list as length\n    length = len(Input[0])\n    # loop through the list and check if the length of each tuple is equal to the length of the first tuple in the list\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True",
        "num_ids": 115
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Get the lengths of all tuples\n    lengths = set(len(t) for t in Input)\n    # Check if there is only one length\n    if len(lengths) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 81
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if length!= len(i):\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 113
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums",
        "num_ids": 131
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        \n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    \n    return nums",
        "num_ids": 123
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Implementation of Comb Sort algorithm to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 146
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n\n    Args:\n        nums (list): A list of elements to be sorted.\n\n    Returns:\n        list: A sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted_flag = False\n\n    while not sorted_flag:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted_flag = False\n        else:\n            gap = 1\n            sorted_flag = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted_flag = False\n            i += 1\n\n    return nums",
        "num_ids": 183
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 146
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n            \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n                \n    return nums",
        "num_ids": 139
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function takes a list of elements and sorts it using the comb sort algorithm.\n    \"\"\"\n\n    # Initialize gap and swapped as True\n    gap = len(nums)\n    swapped = True\n\n    # Loop through the list until no swaps are made\n    while gap!= 1 or swapped == True:\n        gap = int(gap / 1.3)  # Update gap by 1.3 times\n        if gap < 1:\n            gap = 1  # If gap is less than 1, set it to 1\n\n        swapped = False\n\n        # Compare elements and swap them if they are not in the correct order\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums",
        "num_ids": 201
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    if int(n**(0.5))**2 == n:\n        return \"Yes\"\n    elif int((n+2)**(0.5))**2 == n+2:\n        return \"Yes\"\n    elif int((n-2)**(0.5))**2 == n-2:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 86
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_diff_squares(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it can be represented as the difference of two squares or\n    False otherwise.\n    \"\"\"\n    # Calculate the square root of the given number\n    root = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if root ** 2 == n:\n        return False\n\n    # Check if the difference of the squares is equal to the given number\n    for i in range(2, root+1):\n        if (root - i) ** 2 == n:\n            return True\n\n    return False\n",
        "num_ids": 132
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            if i*i == n:\n                return \"The given number can be represented as the difference of two squares.\"\n            else:\n                return \"The given number cannot be represented as the difference of two squares.\"\n        i += 1\n    return \"The given number cannot be represented as the difference of two squares.\"",
        "num_ids": 121
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square root of n\n    root = int(n ** 0.5)\n\n    # check if root is an integer or not\n    if root ** 2 == n:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the given number into a list of factors\n    factors = [i for i in range(1, int(n**0.5)+1) if n%i == 0]\n    \n    # Check if the number can be represented as the difference of two squares\n    for i in range(len(factors)):\n        for j in range(i+1, len(factors)):\n            if (factors[i]**2 + factors[j]**2) == n:\n                return True\n    \n    # If the number is not represented as the difference of two squares, return False\n    return False",
        "num_ids": 156
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    for i in range(int(n ** 0.5) + 1):\n        if n == i ** 2 + (n - i ** 2):\n            return True\n    \n    return False",
        "num_ids": 87
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a perfect square\n    if int(math.sqrt(n))**2 == n:\n        return False\n    \n    # check if n can be represented as the difference of two squares\n    for i in range(2, int(math.sqrt(n))+1):\n        if int(math.sqrt(n-i**2))**2 == n-i**2 and int(math.sqrt(i**2))**2 == i**2:\n            return True\n    \n    return False\n",
        "num_ids": 145
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n == i*i + (i-2)*(i-2):\n            return True\n    return False",
        "num_ids": 81
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff_Square(num):\n    \"\"\"\n    Check if the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    num (int): Given number to check.\n\n    Returns:\n    bool: True if the given number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    # Check if the number is a perfect square\n    root = int(num ** 0.5)\n    if root**2 == num:\n        return True\n\n    # Check if the number can be represented as the difference of two squares\n    # If num can be represented as the difference of two squares, then it will have a form like x^2 - y^2, where x and y are squares\n    # and x <= y. So, we can check all possible pairs of squares (x, y) and see if the given number can be represented as the difference of two squares.\n    for i in range(2, int(num/2)+1):\n        if num % i == 0 and i**2 <= num:\n            return True\n    return False",
        "num_ids": 227
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    This function takes an integer as input and checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    import math\n    if math.sqrt(n/2).is_integer():\n        return True\n    else:\n        return False\n\nprint(is_diff_square(16)) # Output: True\nprint(is_diff_square(15)) # Output: False",
        "num_ids": 99
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function checks whether a given set of colors follows the given sequence of patterns.\n    '''\n    for i in range(len(colors)):\n        if i == len(colors) - 1:\n            # if it reaches the end of the list, return True\n            return True\n        elif patterns[i] == 'R':\n            # if the pattern is red, check if the color is red\n            if colors[i]!= 'R':\n                return False\n        elif patterns[i] == 'G':\n            # if the pattern is green, check if the color is green\n            if colors[i]!= 'G':\n                return False\n        elif patterns[i] == 'B':\n            # if the pattern is blue, check if the color is blue\n            if colors[i]!= 'B':\n                return False\n        else:\n            # if the pattern is none of the above, it is invalid\n            return False\n    return True",
        "num_ids": 204
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes two input arrays - colors and patterns - and returns True if the pattern array follows the sequence of colors.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True",
        "num_ids": 80
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if patterns[i]!= colors[i] and patterns[i]!= colors[i+1]:\n            return False\n    return True",
        "num_ids": 73
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-len(patterns)+1):\n        for j in range(len(patterns)):\n            if colors[i+j]!= patterns[j]:\n                break\n        else:\n            return True\n    return False",
        "num_ids": 82
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for i in range(len(colors)):\n        if colors[i] == patterns[count]:\n            count += 1\n            if count == len(patterns):\n                return True\n    return False",
        "num_ids": 77
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two arguments - colors and patterns.\n    colors is a list of strings representing different colors.\n    patterns is a list of strings representing the sequence of colors to be followed.\n    '''\n\n    # If the length of colors and patterns are not equal, return False\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create an empty dictionary to store the color-pattern pairs\n    color_pattern_dict = {}\n\n    # Iterate through the colors and patterns lists and add them to the dictionary\n    for i in range(len(colors)):\n        color_pattern_dict[colors[i]] = patterns[i]\n\n    # Iterate through the list of colors and check if the sequence of colors is followed\n    for i in range(len(colors)-1):\n        if color_pattern_dict[colors[i]]!= color_pattern_dict[colors[i+1]]:\n            return False\n\n    return True",
        "num_ids": 203
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes two arrays as input - colors and patterns - and checks whether they follow the sequence given in the patterns array.\n    \"\"\"\n\n    # Check if the length of the colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a dictionary to store the color and its corresponding pattern\n    color_to_pattern = {}\n\n    # Iterate through the colors and patterns arrays\n    for i in range(len(colors)):\n        color = colors[i]\n        pattern = patterns[i]\n\n        # If the color is already in the dictionary, check if the pattern matches with the existing pattern in the dictionary\n        if color in color_to_pattern:\n            if color_to_pattern[color]!= pattern:\n                return False\n        # If the color is not in the dictionary, add the color and its corresponding pattern to the dictionary\n        else:\n            color_to_pattern[color] = pattern\n\n    # If the function has not returned False, it means that all the patterns match the sequence in the patterns array\n    return True",
        "num_ids": 232
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Check if the length of the colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check if the colors and patterns arrays are the same\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n        \n    # If the colors and patterns arrays are the same, return True\n    return True",
        "num_ids": 112
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    i = 0\n    while i < len(colors):\n        if colors[i] not in patterns[i]:\n            return False\n        i += 1\n    \n    return True",
        "num_ids": 81
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function checks whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tup in test_list:\n        flag = True\n        for num in tup:\n            if num % K!= 0:\n                flag = False\n                break\n        if flag:\n            result_list.append(tup)\n    return result_list",
        "num_ids": 95
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result",
        "num_ids": 92
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns all tuples which have all elements divisible by K.\n    '''\n    result = []\n    for tup in test_list:\n        flag = True\n        for elem in tup:\n            if elem % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result",
        "num_ids": 94
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer 'K' as input and returns a list of tuples that have all elements divisible by 'K' from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result",
        "num_ids": 92
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(f\"{n} is divisible by 11.\")\n    else:\n        print(f\"{n} is not divisible by 11.\")",
        "num_ids": 75
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is divisible by 11,\n    otherwise False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0",
        "num_ids": 40
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    if n % 11 == 0: \n        return True\n    else: \n        return False",
        "num_ids": 28
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, else False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0",
        "num_ids": 42
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    :param s: the word to check\n    :return: True if the length of the word is odd, False otherwise\n    \"\"\"\n    return len(s) % 2 == 1",
        "num_ids": 62
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as an input and checks whether the length of the word is odd or not.\n    \"\"\"\n    # Splitting the string into a list of words\n    words = s.split()\n\n    # Looping through each word and checking its length\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is a even length word\")\n        else:\n            print(f\"{word} is a odd length word\")",
        "num_ids": 111
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\"",
        "num_ids": 68
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as an input and returns True if the length of the first word is odd,\n    otherwise, it returns False.\n    '''\n    words = s.split()\n    if len(words[0]) % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 72
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} has an even length.\")\n    else:\n        print(f\"{s} has an odd length.\")",
        "num_ids": 73
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Check whether the length of a word is odd or even.\n    :param s: str\n    :return: bool\n    \"\"\"\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        print(f\"{s} is an even length word.\")\n    else:\n        print(f\"{s} is an odd length word.\")\n\nword = input(\"Enter a word: \")\nword_len(word)",
        "num_ids": 68
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 1\n    else:\n        return 4 * n**3 + 1",
        "num_ids": 74
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    t = 0\n    s = 1\n    # Loop through each number from 1 to n\n    for i in range(1, n + 1):\n        # Calculate the next tetrahedral number\n        t = s + t\n        # Update the sum of tetrahedral numbers\n        s += t\n    # Return the nth tetrahedral number\n    return t",
        "num_ids": 111
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6",
        "num_ids": 42
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    total = 0\n    while count < n:\n        total += count + 1\n        count += 1\n    return total",
        "num_ids": 60
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    return (n * (n+1) * (n+2)) // 6",
        "num_ids": 53
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n * (n + 1) * (n + 2)) / 6)",
        "num_ids": 52
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n*(n+1)*(n+2)//6",
        "num_ids": 42
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 0\n    for i in range(n):\n        num += (4 * i + 1)\n    return num",
        "num_ids": 56
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result",
        "num_ids": 55
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculate the volume of a sphere.\n\n    Parameters:\n    r (float): the radius of the sphere\n\n    Returns:\n    float: the volume of the sphere\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "num_ids": 68
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of the sphere as input and returns the volume of the sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nvolume = volume_sphere(radius)\nprint(\"The volume of the sphere is:\", volume)",
        "num_ids": 72
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "num_ids": 52
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume",
        "num_ids": 54
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Returns the volume of a sphere with radius r.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "num_ids": 47
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 47
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "num_ids": 52
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius r and returns the volume of a sphere with that radius.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 54
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 51
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values of characters to zero\n    sum = 0\n    \n    # Iterate through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    \n    # Return the character made by adding the sum modulo 26\n    return chr(sum % 26)",
        "num_ids": 81
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # Find the sum of ASCII values of all characters in the string\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    \n    # Find the character made by adding the sum modulo 26\n    return chr(sum % 26 + 97)",
        "num_ids": 70
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    sum_ASCII = 0\n    for i in strr:\n        sum_ASCII += ord(i)\n    return chr((sum_ASCII % 26) + 65)",
        "num_ids": 49
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    This function takes a string as an argument and returns the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum = 0\n    for char in strr:\n        sum += ord(char) - 64\n    return chr((sum % 26) + 65)",
        "num_ids": 83
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the sum of ASCII values to 0\n    sum = 0\n    \n    # Iterate over each character of the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    \n    # Return the character made by adding the sum modulo 26\n    return chr(sum % 26)",
        "num_ids": 112
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    # Initialize the sum to 0\n    sum_of_ascii = 0\n    # Iterate over each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum_of_ascii += ord(char)\n    # Calculate the modulo 26 of the sum\n    remainder = sum_of_ascii % 26\n    # Find the character made by adding the remainder\n    char_made = chr(ord('a') + remainder)\n    return char_made",
        "num_ids": 117
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total_sum = sum(ord(c) - ord('a') + 1 for c in strr)\n    return chr((total_sum % 26) + ord('a') - 1)",
        "num_ids": 87
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # calculate the sum of ASCII values of characters in the string\n    sum_ASCII = sum(ord(c) for c in strr)\n    # get the character made by adding the sum modulo 26\n    char = chr((sum_ASCII % 26) + ord('a'))\n    # return the character\n    return char",
        "num_ids": 79
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    char = char % 26\n    return chr(char+65) # 65 is the ASCII value for 'A'",
        "num_ids": 89
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through each character of the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n\n    # Find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    char_code = sum % 26\n\n    # Return the character corresponding to the character code\n    return chr(65 + char_code)",
        "num_ids": 139
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev1 = 1\n        prev2 = 1\n        for i in range(3, n+1):\n            curr = prev1 + prev2\n            prev1 = prev2\n            prev2 = curr\n        return curr",
        "num_ids": 98
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return [0, 1]\n    else:\n        seq = [0, 1]\n        for i in range(2, n+1):\n            next_num = seq[seq[i-1]] + seq[i-seq[i-1]]\n            seq.append(next_num)\n        return seq",
        "num_ids": 118
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]",
        "num_ids": 120
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "num_ids": 107
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "num_ids": 103
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return \"n must be a positive integer\"\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n]",
        "num_ids": 113
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]",
        "num_ids": 119
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n]",
        "num_ids": 108
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    This function returns the nth number in the Newman Conway Sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_num = 1\n        curr_num = 1\n        for i in range(3, n+1):\n            next_num = prev_num + curr_num\n            prev_num = curr_num\n            curr_num = next_num\n        return next_num",
        "num_ids": 109
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "num_ids": 106
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns the surface area of the sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 56
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area\n\nr = float(input(\"Enter the radius of the sphere: \"))\nsa = surfacearea_sphere(r)\nprint(\"The surface area of the sphere is\", sa, \"square units.\")",
        "num_ids": 88
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r**2\n    return surfacearea",
        "num_ids": 48
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r**2\n    return surfacearea\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(radius)\nprint(\"The surface area of the sphere is:\", surface_area)",
        "num_ids": 91
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 33
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r ** 2\n    return surfacearea",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as an input and returns the surface area of the sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 59
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Computes the surface area of a sphere with radius r.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        hexagonal_number = 2*n**2 - n + 2\n        return hexagonal_number",
        "num_ids": 79
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    hexagonal_number = 0\n    while True:\n        hexagonal_number = i*(2*i - 1)\n        if hexagonal_number >= n:\n            break\n        i += 1\n    return hexagonal_number",
        "num_ids": 87
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = (2*n) ** 2 - n\n    return hexagonal_number",
        "num_ids": 53
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = 2*n*n - n\n    return h",
        "num_ids": 43
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n\n    :param n: The index of the centered hexagonal number to find.\n    :return: The nth centered hexagonal number.\n    \"\"\"\n    hex_nums = []\n    num = 1\n    while len(hex_nums) < n:\n        hex_nums.append(num * (2 * num - 1))\n        num += 1\n    return hex_nums[-1]",
        "num_ids": 107
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = (2*i*i - i)\n        count += 1\n        i += 1\n    return hex_num",
        "num_ids": 74
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    count = 1\n    hexagonal_number = 1\n    while count <= n:\n        hexagonal_number += 6*count\n        count += 1\n    return hexagonal_number",
        "num_ids": 72
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_num = (2 * n) ** 2 - n\n    return hexagonal_num",
        "num_ids": 53
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initializing the value of first centered hexagonal number\n    hexagon = 1\n    \n    # Loop to find the nth centered hexagonal number\n    for i in range(2, n+1):\n        # Finding the previous centered hexagonal number\n        prev_hexagon = hexagon - (i-2) * (i-2)\n        \n        # Finding the next centered hexagonal number\n        hexagon = prev_hexagon + 2*(i-1)\n    \n    return hexagon",
        "num_ids": 134
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result",
        "num_ids": 68
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = {}\n    for key in dict1.keys():\n        result_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in result_dict:\n            result_dict[key] = dict2[key]\n        else:\n            if isinstance(result_dict[key], list):\n                result_dict[key].extend(dict2[key])\n            elif isinstance(result_dict[key], dict):\n                result_dict[key] = merge_dictionaries_two(result_dict[key], dict2[key])\n            else:\n                result_dict[key] = [result_dict[key], dict2[key]]\n    for key in dict3.keys():\n        if key not in result_dict:\n            result_dict[key] = dict3[key]\n        else:\n            if isinstance(result_dict[key], list):\n                result_dict[key].extend(dict3[key])\n            elif isinstance(result_dict[key], dict):\n                result_dict[key] = merge_dictionaries_two(result_dict[key], dict3[key])\n            else:\n                result_dict[key] = [result_dict[key], dict3[key]]\n    return result_dict\n\ndef merge_dictionaries_two(dict1, dict2):\n    result_dict = {}\n    for key in dict1.keys():\n        result_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in result_dict:\n            result_dict[key] = dict2[key]\n        else:\n            if isinstance(result_dict[key], list):\n                result_dict[key].extend(dict2[key])\n            elif isinstance(result_dict[key], dict):\n                result_dict[key] = merge_dictionaries_two(result_dict[key], dict2[key])\n            else:\n                result_dict[key] = [result_dict[key], dict2[key]]\n    return result_dict",
        "num_ids": 486
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Merging the dictionaries\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = {}\n    result_dict.update(dict1)\n    result_dict.update(dict2)\n    result_dict.update(dict3)\n    return result_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)",
        "num_ids": 68
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)",
        "num_ids": 65
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for d in [dict1, dict2, dict3]:\n        for key, value in d.items():\n            merged_dict[key] = value\n    return merged_dict",
        "num_ids": 85
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    # create an empty dictionary to store the frequency count\n    freq_dict = {}\n    \n    # iterate through the list and count the frequency of each element\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n            \n    # return the frequency dictionary\n    return freq_dict",
        "num_ids": 90
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the input list.\n    \"\"\"\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 79
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq",
        "num_ids": 77
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def freq_count(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 58
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through the list and count the frequency of each element\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n\n    return freq_dict",
        "num_ids": 88
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq",
        "num_ids": 50
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in a list.\n    \"\"\"\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 78
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N - 1\n    \n    while num > 0:\n        if num % N == 0:\n            return num\n        num -= 1\n        \n    return \"There is no smaller number.\"",
        "num_ids": 65
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(n):\n    # initialize the closest number to infinity\n    closest = float('inf')\n    \n    # loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # if the current number is closer to n than closest, update closest\n        if abs(i - n) < abs(closest - n):\n            closest = i\n    \n    # return the closest smaller number\n    return closest",
        "num_ids": 90
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(n):\n    '''\n    This function finds the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(n-1, 0, -1):\n        if (i+n)%n == 0:\n            closest = i\n            break\n    return closest",
        "num_ids": 64
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize the closest number as infinity\n    closest = float('inf')\n\n    # loop through the numbers from 1 to N\n    for i in range(1, N):\n        # if the current number is smaller than the closest, update closest\n        if abs(i-N) < abs(closest-N):\n            closest = i\n    \n    return closest",
        "num_ids": 97
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    This function takes a number N and returns the closest smaller number than N.\n    '''\n    if N == 0:\n        return 0\n    \n    smaller_num = float('inf')  # initialize a very large number\n    \n    for i in range(N-1, -1, -1):\n        if i < smaller_num and i < N:\n            smaller_num = i\n    \n    return smaller_num",
        "num_ids": 94
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(n):\n    \"\"\"\n    Returns the closest number to n that is smaller than n.\n    \"\"\"\n    # Initialize the closest number to be n itself\n    closest = n\n    \n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # If the current number is smaller than n and closer to n than the current closest number\n        if i < n and abs(i - n) < abs(closest - n):\n            # Set the current number as the new closest number\n            closest = i\n    \n    # Return the closest number\n    return closest",
        "num_ids": 124
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer as input and returns the closest smaller integer.\n    '''\n    closest = None\n    for i in range(n-1, 0, -1):\n        if abs(i - n) < abs(closest - n) or closest is None:\n            closest = i\n    return closest",
        "num_ids": 74
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(n):\n    '''\n    This function finds the closest smaller number than n.\n    '''\n    # Initialize the closest smaller number variable to infinity\n    closest = float('inf')\n    \n    # Loop through all the numbers between 1 and n\n    for i in range(1, n):\n        # If the current number is smaller than the closest number and greater than n, update closest\n        if i < closest and i > n:\n            closest = i\n    \n    # Return the closest smaller number\n    return closest",
        "num_ids": 105
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = N - 1\n    while True:\n        if smaller < 1:\n            return 1\n        if N % smaller == 0:\n            return smaller\n        smaller -= 1",
        "num_ids": 64
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [i for i in range(1, N) if i < N]\n    closest = min(nums, key=lambda x: abs(x-N))\n    return closest",
        "num_ids": 65
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word.\n    '''\n    longest_word_length = 0\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length",
        "num_ids": 79
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest",
        "num_ids": 58
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    result = False\n    for string in str1:\n        if sub_str in string:\n            result = True\n            break\n    return result",
        "num_ids": 67
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1.startswith(sub_str, i):\n            return True\n    return False",
        "num_ids": 69
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes in two parameters, str1 and sub_str, and checks if sub_str is a substring of str1.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False",
        "num_ids": 82
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found.\")\n    else:\n        print(\"Substring not found.\")",
        "num_ids": 64
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function checks if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 55
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str == str1[i:i+len(sub_str)]:\n            return True\n    return False",
        "num_ids": 76
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string and split it into digits\n    digits = [int(d) for d in str(n)]\n    # Check whether the digits are in ascending or descending order\n    is_ascending = digits == sorted(digits)\n    is_descending = digits == sorted(digits, reverse=True)\n    # Return whether the number is undulating\n    return is_ascending or is_descending",
        "num_ids": 111
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string and check if the number is repeated\n    # or not\n    num_str = str(n)\n    if num_str == num_str[::-1]:\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is odd\n    if n % 2 == 1:\n        return False\n    \n    # Check if the number has an even number of digits\n    if len(str(n)) % 2 == 0:\n        # Check if the number has an even number of digits at the beginning\n        if str(n)[:len(str(n))//2] == ''.join(['0']*(len(str(n))//2)):\n            # Check if the number has an even number of digits at the end\n            if str(n)[len(str(n))//2:] == ''.join(['0']*(len(str(n))//2)):\n                return True\n        # Check if the number has an even number of digits at the end\n        elif str(n)[len(str(n))//2:] == ''.join(['0']*(len(str(n))//2)):\n            return True\n    # Check if the number has an odd number of digits\n    else:\n        # Check if the number has an odd number of digits at the beginning\n        if str(n)[:len(str(n))//2] == ''.join(['0']*(len(str(n))//2-1)):\n            # Check if the number has an odd number of digits at the end\n            if str(n)[len(str(n))//2:] == ''.join(['0']*(len(str(n))//2-1)):\n                return True\n        # Check if the number has an odd number of digits at the end\n        elif str(n)[len(str(n))//2:] == ''.join(['0']*(len(str(n))//2-1)):\n            return True\n\n    return False",
        "num_ids": 391
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # initialize variables\n    count_odd = 0\n    count_even = 0\n    count_same_oddeven = 0\n    count_different_oddeven = 0\n    \n    # loop through each digit of the number\n    for digit in str(n):\n        # check if the digit is odd or even\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n            \n        # check if the number of odd and even digits are the same or different\n        if count_odd == count_even:\n            count_same_oddeven += 1\n        else:\n            count_different_oddeven += 1\n            \n    # check if the number is undulating or not\n    if count_same_oddeven == 1 and count_different_oddeven == 0:\n        return True\n    else:\n        return False",
        "num_ids": 221
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd\n    if n % 2 == 1:\n        return False\n\n    # Check if the number has 3 or more factors\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n\n    if len(factors) >= 3:\n        return True\n    else:\n        return False",
        "num_ids": 113
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if n is even or odd\n    if n % 2 == 0:\n        # If n is even, check if its last digit is equal to the sum of the first half of its digits\n        return n % 10 == sum(int(i) for i in str(n//2))\n    else:\n        # If n is odd, check if its last digit is equal to the sum of the first half of its digits\n        return n % 10 == sum(int(i) for i in str(n//2)) + 1",
        "num_ids": 148
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if len(s) == 1:\n        return False\n    return s[0] == s[1]!= s[2]!= s[3] == s[4]!= s[5]!= s[6] == s[7]!= s[8]",
        "num_ids": 95
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a positive integer as input and returns True if the number is undulating, otherwise False.\n    '''\n    # Initialize variables\n    count = 1\n    prev_digit = n % 10\n    current_digit = n // 10\n    \n    # Loop through the digits of the number\n    while current_digit!= 0:\n        # Check if the current digit is greater than the previous digit\n        if current_digit > prev_digit:\n            count += 1\n        else:\n            count = 1\n        \n        # Update variables\n        prev_digit = current_digit % 10\n        current_digit = current_digit // 10\n    \n    # Check if the number is undulating\n    if count == 1:\n        return False\n    else:\n        return True",
        "num_ids": 171
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the number is undulating, and False otherwise.\n    \"\"\"\n    # Convert n to string to check for repeating digits\n    n_str = str(n)\n    # Check if there are any repeating digits in the string\n    if len(set(n_str)) == len(n_str):\n        return False\n    else:\n        return True",
        "num_ids": 96
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # If the number is divisible by 2, it's not undulating\n    if n % 2 == 0:\n        return False\n\n    # Loop through all odd numbers up to n/2\n    for i in range(3, n//2, 2):\n        # Check if the difference between i and n/i is odd\n        if (i - n//i) % 2 == 1:\n            return False\n\n    # If no odd difference is found, return True\n    return True",
        "num_ids": 133
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a,b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = a**b\n    return result",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 48
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 50
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments a and b and returns the value of a to the power b.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 41
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a**b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments, a and b, and returns the value of a to the power of b.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 55
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = a ** b\n    return result",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 46
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' raised to the power of 'b'.\n    \"\"\"\n    return a ** b",
        "num_ids": 47
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 63
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=lambda x: x[1][1])[0]\n",
        "num_ids": 69
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = test_list.index(min(test_list, key=itemgetter(1)))\n    return minimum_index",
        "num_ids": 74
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=lambda x: x[1][1])[0]",
        "num_ids": 68
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')  # initialize the minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
        "num_ids": 84
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize the minimum length to a very large value\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist) # update the minimum length if a smaller sublist is found\n    return min_length",
        "num_ids": 98
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisor(10)) # Output: 4",
        "num_ids": 77
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sub_list in list1:\n        for element in sub_list:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 95
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 137
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                freq[j] = freq.get(j, 0) + 1\n        else:\n            freq[i] = freq.get(i, 0) + 1\n    return freq",
        "num_ids": 103
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict",
        "num_ids": 98
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict",
        "num_ids": 66
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in flatten_list(list1):\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a list of lists into a single list.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        flattened_list.extend(sublist)\n    return flattened_list",
        "num_ids": 150
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 93
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten(lst):\n    \"\"\"\n    Takes a list of lists and returns a flattened list\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.extend(sublist)\n    return result\n\ndef frequency_lists(lst):\n    \"\"\"\n    Takes a list of lists and returns a dictionary where the keys are the unique elements\n    in the flattened list and the values are the frequency of each element.\n    \"\"\"\n    flat_list = flatten(lst)\n    freq_dict = {}\n    for element in flat_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 149
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq = {}\n    for item in flattened_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq",
        "num_ids": 97
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a list of lists into a single list.\n    \"\"\"\n    return [item for sublist in lst for item in sublist]\n\ndef frequency_lists(lst):\n    \"\"\"\n    Return a dictionary with the frequency of each element in a flattened list of lists.\n    \"\"\"\n    flattened_lst = flatten_list(lst)\n    freq = {}\n    for elem in flattened_lst:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    return freq",
        "num_ids": 124
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result",
        "num_ids": 60
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 61
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "num_ids": 57
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result",
        "num_ids": 60
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
        "num_ids": 81
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 70
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary",
        "num_ids": 85
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary if binary else \"0\"",
        "num_ids": 76
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:] # remove the '0b' prefix from the binary string\n    return binary",
        "num_ids": 62
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary.lstrip('0')",
        "num_ids": 91
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
        "num_ids": 83
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    This function takes a decimal number as input and returns its binary representation as a string.\n    '''\n    # Convert decimal number to binary using the bin() function\n    binary = bin(n)[2:]  # [2:] removes the '0b' prefix from the binary representation\n    \n    # Return the binary representation as a string\n    return binary",
        "num_ids": 81
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 82
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary using the built-in bin() function\n    binary = bin(n)[2:]\n    \n    # Remove any leading zeros from the binary string\n    binary = binary.lstrip('0')\n    \n    # If the binary string is now empty, set it to '0'\n    if not binary:\n        binary = '0'\n    \n    return binary",
        "num_ids": 111
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is a palindrome, increment it by 1 and return it\n        return num + 1\n    \n    # If the number is not a palindrome, find the largest odd factor of the number\n    for i in range(num // 2, 1, -1):\n        if num % i == 0:\n            break\n    \n    # If the number is odd, return the largest odd factor + 1\n    if num % 2 == 1:\n        return i * i + 1\n    \n    # If the number is even, return the largest odd factor + 2\n    else:\n        return i * (i + 2)",
        "num_ids": 216
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        next_palindrome = num + 1\n        while not is_palindrome(next_palindrome):\n            next_palindrome += 1\n        return next_palindrome\n    else:\n        return None",
        "num_ids": 133
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input number to a string and reverse it\n    num_str = str(num)\n    num_str_reverse = num_str[::-1]\n    \n    # Check if the original number is a palindrome\n    if num_str == num_str_reverse:\n        # If the original number is already a palindrome, then the next smallest palindrome is the number with a '1' added to the end\n        return num*10 + 1\n    \n    # Convert the reversed string to an integer and add 1 to get the next smallest palindrome\n    next_palindrome = int(num_str_reverse) + 1\n    \n    # Convert the next palindrome integer back to a string and reverse it\n    next_palindrome_str = str(next_palindrome)\n    next_palindrome_str_reverse = next_palindrome_str[::-1]\n    \n    # Compare the original number with the next palindrome and return the smaller one\n    if next_palindrome_str < num_str:\n        return next_palindrome\n    else:\n        return num + int(num_str[-1])",
        "num_ids": 275
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    # Check if a number is palindrome or not\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    # Find the next smallest palindrome of a specified integer\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n\nif __name__ == '__main__':\n    # Test the function with a sample input\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))",
        "num_ids": 136
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if input is a palindrome\n    if str(num) == str(num)[::-1]:\n        # If it is, add 1 to the number and return it\n        return num + 1\n    \n    # If the input is not a palindrome, find the next smallest palindrome by adding 1 to the largest palindrome found so far\n    largest_palindrome = num\n    while largest_palindrome > 0:\n        largest_palindrome -= largest_palindrome % 10\n        largest_palindrome /= 10\n    \n    return largest_palindrome * largest_palindrome",
        "num_ids": 165
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, find the next smallest palindrome by adding 1 to the number\n        return num + 1\n    # If the number is not a palindrome, find the largest palindrome that is smaller than the number\n    palindrome = num - 1\n    while palindrome > 0:\n        if str(palindrome) == str(palindrome)[::-1]:\n            return palindrome\n        palindrome -= 1\n    # If there is no smaller palindrome, return the original number\n    return num",
        "num_ids": 188
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert num to string for easier manipulation\n    num_str = str(num)\n\n    # Check if num is already a palindrome\n    if num_str == num_str[::-1]:\n        # If so, add 1 to num and return the result\n        return num + 1\n    \n    # Otherwise, convert num to its reverse and append it to itself\n    reversed_num = num_str[::-1]\n    palindrome = num_str + reversed_num\n\n    # Find the smallest palindrome larger than num by checking all integers from num+1 to sys.maxsize\n    for i in range(num + 1, sys.maxsize):\n        # Convert the integer to a string and check if it is a palindrome\n        i_str = str(i)\n        if i_str == i_str[::-1]:\n            # If so, return it\n            return i\n    \n    # If we reach this point, there are no more palindromic integers than sys.maxsize\n    return None",
        "num_ids": 226
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Find the center of the palindrome (i.e. the middle character)\n    center = len(num_str) // 2\n\n    # Increment the center until we find a palindrome\n    while not num_str[:center+1] == num_str[center+1:][::-1]:\n        center += 1\n\n    # Convert the palindrome to an integer and add 1 to get the next smallest palindrome\n    return int(num_str[:center] + str(int(num_str[center])+1) + num_str[center+1:])",
        "num_ids": 180
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Handle edge cases\n    if num < 10:\n        return 10\n    elif is_palindrome(num):\n        return num + 1\n\n    # Find the next largest palindrome\n    next_palindrome = num\n    while not is_palindrome(next_palindrome):\n        next_palindrome -= 1\n\n    # Find the next smallest palindrome\n    next_palindrome += 1\n    while not is_palindrome(next_palindrome):\n        next_palindrome += 1\n\n    return next_palindrome",
        "num_ids": 194
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string for easier manipulation\n    num_str = str(num)\n\n    # Check if the number itself is a palindrome\n    if num_str == num_str[::-1]:\n        # If it's a palindrome, return the next integer\n        return int(num_str) + 1\n    else:\n        # If it's not a palindrome, find the next largest palindrome and return it as an integer\n        largest_palindrome = int(num_str[::-1])\n        while True:\n            num_str = str(largest_palindrome)\n            if num_str == num_str[::-1]:\n                return largest_palindrome + 1\n            else:\n                largest_palindrome += 1",
        "num_ids": 173
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    return arr[k-1]",
        "num_ids": 65
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k > len(arr):\n        return \"k is greater than the length of the array.\"\n    return arr[k-1]",
        "num_ids": 61
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and an integer k as input and returns the kth element in the array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 51
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]",
        "num_ids": 45
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is valid\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the kth element\n    return arr[k-1]",
        "num_ids": 87
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    This function finds the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"k is larger than the length of the array\")\n    return sorted(arr)[k-1]",
        "num_ids": 66
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    This function finds the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 42
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Sort the given array in ascending order\n    arr.sort()\n    # Return the kth element in the sorted array\n    return arr[k-1]",
        "num_ids": 69
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word",
        "num_ids": 71
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return word.title().replace(\"_\", \"\")",
        "num_ids": 35
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 54
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace(\"_\", \"\")",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 54
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    for i in range(len(word)):\n        if word[i] == '_':\n            camel_case_word += word[i+1].upper()\n        else:\n            camel_case_word += word[i]\n    return camel_case_word",
        "num_ids": 92
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '')",
        "num_ids": 39
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n and m are positive integers\n    if type(n)!= int or type(m)!= int or n <= 0 or m <= 0:\n        return \"n and m should be positive integers.\"\n\n    # Calculate the Eulerian number\n    num = 1\n    den = 1\n    for i in range(1, m+1):\n        num *= i\n    for i in range(1, n+1):\n        den *= i\n    result = num // den\n\n    # Return the result as a string\n    return str(result)",
        "num_ids": 148
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)",
        "num_ids": 83
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n + m) * (n + m - 1) // 2\n",
        "num_ids": 53
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n + m + 1) * (n + m + 2) // 2 + m",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # initialize the number of s and t nodes\n    s = n\n    t = m\n\n    # initialize the graph as a dictionary\n    graph = {}\n\n    # initialize the dictionary with the initial node values\n    for i in range(1, n + 1):\n        graph[i] = [(i + 1) % n + 1, (i - 1) % n + 1]\n\n    # iterate through the remaining nodes\n    for i in range(n + 1, m + 1):\n        # find the closest node to the current node\n        closest_node = 0\n        closest_dist = float('inf')\n        for j in range(1, n + 1):\n            dist = abs(j - i)\n            if dist < closest_dist:\n                closest_node = j\n                closest_dist = dist\n        # connect the current node to the closest node\n        graph[i] = [closest_node, (i - 1) % n + 1]\n\n    # create the adjacency list representation of the graph\n    adjacency_list = []\n    for i in range(1, m + 1):\n        adjacency_list.append(graph[i])\n\n    # check if the graph is Eulerian\n    def is_eulerian(adjacency_list):\n        in_degree = [0] * m\n        out_degree = [0] * m\n        for i in range(m):\n            for j in adjacency_list[i]:\n                out_degree[i] += 1\n                in_degree[j - 1] += 1\n        for i in range(m):\n            if in_degree[i]!= out_degree[i]:\n                return False\n        return True\n\n    # find the Eulerian circuit\n    def eulerian_circuit(adjacency_list):\n        circuit = []\n        current = 0\n        while current < m:\n            if len(adjacency_list[current]) > 1:\n                circuit.append(current + 1)\n                current = adjacency_list[current][1] - 1\n            else:\n                circuit.append(current + 1)\n                current = 0\n        return circuit\n\n    # find the Eulerian path\n    def eulerian_path(adjacency_list):\n        circuit = eulerian_circuit(adjacency_list)\n        path = []\n        for i in range(len(circuit)):\n            if i % 2 == 0:\n                path.append(circuit[i])\n        return path\n\n    # find the Eulerian number\n    def eulerian_number(path):\n        eulerian_num = 1\n        for i in range(len(path) - 1):\n            if path[i]!= path[i + 1]:\n                eulerian_num *= path[i]\n        return eulerian_num\n\n    # return the Eulerian number\n    if is_eulerian(adjacency_list):\n        eulerian_path = eulerian_path(adjacency_list)\n        return eulerian_number(eulerian_path)\n    else:\n        return -1",
        "num_ids": 695
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    This function finds the Eulerian number a(n, m).\n    \"\"\"\n    # Define variables\n    count = 0\n    product = 1\n    numerator = 1\n    denominator = 1\n    \n    # Calculate the denominator and numerator\n    for i in range(1, n+1):\n        product *= i\n        denominator *= i\n    for i in range(1, m+1):\n        product *= i\n        numerator *= i\n        \n    # Calculate the count of eulerian numbers\n    count = product // (numerator*denominator)\n    \n    # Return the count\n    return count",
        "num_ids": 135
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m == 1:\n        return 1\n    else:\n        if n == 1:\n            return m\n        elif m == 1:\n            return n\n        else:\n            return n*m",
        "num_ids": 77
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            result += i**j * j**i\n    return result",
        "num_ids": 75
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize Eulerian number to 0\n    a = 0\n    \n    # loop through all possible values of a\n    for i in range(n+m):\n        # calculate value of a\n        a_value = i*(i+1)//2\n        \n        # check if a_value is less than or equal to n and m\n        if a_value <= n and a_value <= m:\n            # add a_value to Eulerian number\n            a += a_value\n    \n    # return Eulerian number\n    return a",
        "num_ids": 142
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = (n * (n - 1) // 2) ** 2 + (m * (m - 1) // 2) ** 2\n    return result",
        "num_ids": 72
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list",
        "num_ids": 55
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n",
        "num_ids": 55
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):   \n  '''\n  Write a python function to count true booleans in the given list.\n  '''\n  count = 0\n  for i in lst:\n    if i:\n      count += 1\n  return count",
        "num_ids": 49
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of true booleans in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of true values in the given list.\n    \"\"\"\n    return lst.count(True)",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True booleans present in the list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "num_ids": 48
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes two arguments, a list and a tuple.\n    The function appends the list to the tuple and returns the result.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup",
        "num_ids": 66
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the list to a tuple\n    test_tup = tuple(test_list + list(test_tup))\n    \n    return test_tup",
        "num_ids": 62
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    return test_tup + tuple(test_list)",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 43
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuple and return the new tuple.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 45
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_tup) + tuple(test_list)",
        "num_ids": 47
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # create a max-heap from the three lists\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n\n    # merge the max-heaps into a single sorted list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result",
        "num_ids": 132
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(merged_list, num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            heapq.heappush(merged_list, num2[0])\n            heapq.heappop(num2)\n        else:\n            heapq.heappush(merged_list, num3[0])\n            heapq.heappop(num3)\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n    return merged_list",
        "num_ids": 259
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap) # initialize heap\n    \n    # add elements to heap\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n        \n    # merge elements in sorted order\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n        \n    return merged_list",
        "num_ids": 157
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n    \n    while len(heap) > 0:\n        yield heapq.heappop(heap)",
        "num_ids": 92
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as input and merges them into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num1 or num2[0] < num1[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n            \n    return merged_list",
        "num_ids": 192
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Use heapq.merge() to merge the three lists and store it in a new list\n    merged_list = list(heapq.merge(num1, num2, num3))\n\n    # Return the merged list\n    return merged_list",
        "num_ids": 92
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heappush(merged_list, num1[0])\n    heapq.heappush(merged_list, num2[0])\n    heapq.heappush(merged_list, num3[0])\n\n    i, j, k = 1, 1, 1\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            heapq.heappush(merged_list, num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            heapq.heappush(merged_list, num2[j])\n            j += 1\n        else:\n            heapq.heappush(merged_list, num3[k])\n            k += 1\n\n    while i < len(num1):\n        heapq.heappush(merged_list, num1[i])\n        i += 1\n\n    while j < len(num2):\n        heapq.heappush(merged_list, num2[j])\n        j += 1\n\n    while k < len(num3):\n        heapq.heappush(merged_list, num3[k])\n        k += 1\n\n    return merged_list",
        "num_ids": 350
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for i in range(len(num1)):\n        heapq.heappush(heap, num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(heap, num2[i])\n    for i in range(len(num3)):\n        heapq.heappush(heap, num3[i])\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list",
        "num_ids": 153
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a max heap from num1\n    heapq.heapify(num1)\n    # Create a min heap from num2\n    heapq.heapify(num2,reverse=True)\n    # Create an empty list to store the merged list\n    merged_list = []\n    # Merge the two heaps into a single heap\n    while num1 and num2:\n        if num1[0] <= num2[0]:\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n    # Add the remaining elements from the heap(s) to the merged list\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    # Return the merged list\n    return merged_list",
        "num_ids": 215
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    while heap:\n        smallest = heapq.heappop(heap)\n        yield smallest\n\n        if smallest == num1[0]:\n            num1.pop(0)\n            if num1:\n                heapq.heappush(heap, num1[0])\n        elif smallest == num2[0]:\n            num2.pop(0)\n            if num2:\n                heapq.heappush(heap, num2[0])\n        else:\n            num3.pop(0)\n            if num3:\n                heapq.heappush(heap, num3[0])\n",
        "num_ids": 196
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        for digit in rotated:\n            if digit == '1':\n                count += 1\n    return count",
        "num_ids": 87
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    # Loop through the list n times\n    for i in range(n):\n        # Rotate the list by one position\n        s = s[1:] + s[:1]\n        # Count the number of odd values in the rotated list\n        count += sum(1 for i in s if i % 2 == 1)\n    return count",
        "num_ids": 140
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        for digit in s:\n            if digit == '1':\n                count += 1\n                break\n    return count",
        "num_ids": 89
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # convert the given string to binary\n    binary = bin(int(s, 2))[2:]\n\n    # repeat the binary string n times\n    rotated_binary = binary*n\n\n    # count the number of 1's in the rotated binary string\n    count = 0\n    for bit in rotated_binary:\n        if bit == '1':\n            count += 1\n\n    # find the number of odd numbers in the rotated binary string\n    odd_count = 0\n    for i in range(len(rotated_binary)):\n        if rotated_binary[i] == '1' and rotated_binary[(i+n)%len(rotated_binary)] == '0':\n            odd_count += 1\n\n    # return the number of odd numbers\n    return odd_count",
        "num_ids": 203
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        temp = s[i:]+s[:i]\n        for j in range(len(temp)):\n            if int(temp[j]) % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        rotated_s = s[i:] + s[:i]\n        for digit in rotated_s:\n            if int(digit)%2!= 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n    # Rotate the digits n times\n    digits = digits[n:] + digits[:n]\n    # Count the number of odd digits\n    count = sum(1 for d in digits if d % 2!= 0)\n    return count",
        "num_ids": 114
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    This function takes two arguments:\n    1. s (string): A binary string\n    2. n (integer): Number of rotations to be performed\n\n    This function finds the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Returns:\n    The number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Convert binary string to integer\n    s = int(s, 2)\n\n    # Rotate the binary string n times\n    for i in range(n):\n        s = int(str(s)[::-1], 2)\n\n    # Count the number of odd numbers in the rotated string\n    count = 0\n    while s:\n        digit = s & 1\n        if digit == 1:\n            count += 1\n        s >>= 1\n\n    return count",
        "num_ids": 189
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes a binary string and the number of rotations, and returns the number of numbers with an odd value after rotation.\n    '''\n    # Convert the binary string to a list of digits\n    s_list = [int(i) for i in s]\n    # Rotate the binary string n times\n    for i in range(n):\n        s_list.insert(0,s_list.pop())\n    # Count the number of odd numbers in the rotated binary string\n    odd_count = 0\n    for digit in s_list:\n        if digit % 2!= 0:\n            odd_count += 1\n    return odd_count",
        "num_ids": 148
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes two arguments:\n    s: A binary string\n    n: The number of times the binary string should be rotated\n    \n    The function returns the number of numbers with an odd value when the binary string is rotated n times.\n    '''\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    # Initialize a variable to keep track of the number of odd numbers\n    odd_count = 0\n    # Loop through the binary string n times\n    for i in range(n):\n        # Rotate the binary string by one position\n        s = [s[-1]] + s[:-1]\n        # Check if the first number in the rotated string is odd\n        if s[0] % 2 == 1:\n            odd_count += 1\n    # Return the number of odd numbers\n    return odd_count",
        "num_ids": 191
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common = set(nestedlist[i]) & set(nestedlist[j])\n            if common:\n                common_elements.extend(common)\n    return common_elements",
        "num_ids": 99
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty set to store the common elements\n    common_set = set()\n\n    # Iterate over each list in the nested list\n    for lst in nestedlist:\n        # Create a set of the current list\n        set_lst = set(lst)\n\n        # If the current list is the first one, add its elements to the common set\n        if len(common_set) == 0:\n            common_set = set_lst\n        # If there are common elements, update the common set with the intersection of the two sets\n        else:\n            common_set = common_set.intersection(set_lst)\n\n    # Convert the set to a list and return it\n    return list(common_set)",
        "num_ids": 178
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for sublist in nestedlist:\n        if len(common_elements) == 0:\n            common_elements = sublist\n        else:\n            common_elements = [x for x in common_elements if x in sublist]\n    return common_elements",
        "num_ids": 87
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    common = set(nestedlist[0]).intersection(*nestedlist)\n    return list(common)",
        "num_ids": 34
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist:\n        common_elements.intersection_update(sublist)\n    return common_elements",
        "num_ids": 68
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return list(common_elements)",
        "num_ids": 58
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements and nestedlist[i][j] in nestedlist[i+1:]:\n                common_elements.append(nestedlist[i][j])\n    return common_elements",
        "num_ids": 112
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            for k in range(len(nestedlist[i])):\n                if nestedlist[i][k] in nestedlist[j]:\n                    if nestedlist[i][k] not in common_elements:\n                        common_elements.append(nestedlist[i][k])\n    return common_elements",
        "num_ids": 126
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return result",
        "num_ids": 51
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common = set(nestedlist[i]) & set(nestedlist[j])\n            if common:\n                common_elements.extend(list(common))\n    return list(set(common_elements))",
        "num_ids": 106
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks if the given string represents an integer or not.\n\n    :param text: A string representing an integer\n    :return: True if the string represents an integer, False otherwise\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 68
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks whether a given string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 44
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 41
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \n    :param text: string to be checked\n    :type text: str\n    :return: True if the string represents an integer, False otherwise\n    :rtype: bool\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 75
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dict in list1:\n        if dict!= {}:\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic!= {}:\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not bool(d):\n            return False\n    return True",
        "num_ids": 50
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    This function will check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True",
        "num_ids": 48
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dict(lst):\n    '''\n    Check if all dictionaries in a list are empty or not.\n\n    Parameters:\n    lst (list): A list of dictionaries.\n\n    Returns:\n    bool: True if all dictionaries are empty, False otherwise.\n    '''\n\n    for d in lst:\n        if d:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    Checks whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item:\n            return False\n    return True",
        "num_ids": 43
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i:\n            empty = False\n            break\n    return empty",
        "num_ids": 54
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item == {}:\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))",
        "num_ids": 44
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result = result * 10 + nums[i]\n    return result",
        "num_ids": 62
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 92
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.', '', 1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "num_ids": 118
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "num_ids": 106
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list",
        "num_ids": 110
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list",
        "num_ids": 91
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list",
        "num_ids": 95
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Converts all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list",
        "num_ids": 106
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    This function takes a list of lists as input and converts all possible convertible elements to float.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_element = float(element)\n                new_sublist.append(new_element)\n            except ValueError:\n                pass\n        result.append(new_sublist)\n    return result",
        "num_ids": 106
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            try:\n                new_sublist.append(float(item))\n            except ValueError:\n                pass\n        result_list.append(new_sublist)\n    return result_list",
        "num_ids": 98
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 96
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as input and returns a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    # Initialize variables\n    n = len(arr)\n    count = 0\n    prev_num = None\n\n    # Traverse through the array and count the frequency of each element\n    for i in range(n):\n        if arr[i]!= prev_num:\n            if count == 0:\n                prev_num = arr[i]\n            else:\n                return prev_num\n        else:\n            count += 1\n\n    # If the element appears more than once, this code block will not be executed\n    return None",
        "num_ids": 113
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    # Find the middle index of the array\n    mid = len(arr) // 2\n\n    # If the array has only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n\n    # If the left half of the array has the same frequency of elements,\n    # return None (as there can't be a single element)\n    if arr.count(arr[mid]) == 2:\n        return None\n\n    # If the left half of the array has more than one element,\n    # search in the left half\n    if arr.count(arr[mid]) > 2:\n        return search(arr[:mid])\n\n    # If the right half of the array has more than one element,\n    # search in the right half\n    else:\n        return search(arr[mid:])",
        "num_ids": 178
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    # Initialize variables\n    n = len(arr)\n    count = 1\n    current = arr[0]\n\n    # Traverse the array\n    for i in range(1, n):\n        # If current element is same as previous, increment count\n        if arr[i] == current:\n            count += 1\n        # If current element is different from previous, decrement count\n        else:\n            count -= 1\n        # Update current element\n        current = arr[i]\n\n    # Traverse the array again to find the element that appears only once\n    for i in range(n):\n        # If count of current element is zero, return it\n        if arr[i] == current:\n            return arr[i]",
        "num_ids": 153
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    n = len(arr)\n\n    # If the array has only one element, return that element\n    if n == 1:\n        return arr[0]\n\n    # If the array has two elements, return the element that is not equal to the first element\n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n\n    # If the array has more than two elements, iterate through the array\n    for i in range(n):\n        # If the current element is equal to the next element, move to the next element\n        if arr[i] == arr[i+1]:\n            continue\n        # If the current element is not equal to the next element, check if it appears only once\n        else:\n            if arr.count(arr[i]) == 2:\n                return None\n            else:\n                return arr[i]",
        "num_ids": 216
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    \n    while i < j:\n        mid = (i + j) // 2\n        if arr[mid] > arr[j]:\n            i = mid + 1\n        elif arr[mid] < arr[j]:\n            j = mid\n        else:\n            j -= 1\n    \n    # Find the element that appears only once\n    for k in range(len(arr)):\n        if arr[k] == arr[i]:\n            return arr[k]\n    \n    return -1",
        "num_ids": 141
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return None\n    elif n == 2:\n        return arr[0] if arr[0]!= arr[1] else None\n    else:\n        # initialize two pointers, one at the beginning and one at the end\n        left = 0\n        right = n - 1\n        while left < right:\n            # if the elements at the left and right pointers are the same,\n            # move the right pointer to the left until they are different\n            if arr[left] == arr[right]:\n                right -= 1\n            # if the elements at the left and right pointers are different,\n            # move the left pointer to the right until they are the same\n            else:\n                left += 1\n        # at this point, the left and right pointers are pointing to the\n        # only element that appears only once in the array\n        # check if there is only one element or none\n        if left == 0 or left == n - 1:\n            return arr[left]\n        # if there are multiple elements, return None\n        else:\n            return None",
        "num_ids": 259
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables for counting\n    count = 0\n    prev_num = None\n    \n    # Loop through the array\n    for num in arr:\n        # If the current number is the same as the previous number, increment the count\n        if num == prev_num:\n            count += 1\n        # Otherwise, update the previous number\n        else:\n            prev_num = num\n            \n    # Loop through the array again to find the element that appears only once\n    for num in arr:\n        if arr.count(num) == 1:\n            return num",
        "num_ids": 140
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n\n    Parameters:\n        arr (list): A sorted list of integers.\n\n    Returns:\n        int: The element that appears only once in the list.\n    \"\"\"\n    # Initialize a counter variable to zero.\n    count = 0\n\n    # Iterate through the array and increment the count for each element.\n    for i in arr:\n        count += 1\n\n    # Initialize variables to keep track of the first and second elements seen so far.\n    first = second = -1\n\n    # Iterate through the array again and check if the count of each element is 1.\n    # If it is, update the first and second variables accordingly.\n    for i in arr:\n        if count == 1:\n            return i\n        elif count == 2 and i!= first:\n            return i\n        elif count > 2 and i == first:\n            return i\n        else:\n            first = i if count == 2 else second\n            second = i\n            count -= 1",
        "num_ids": 218
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    left = 0\n    right = n - 1\n    result = -1\n\n    # Loop until the left pointer is less than the right pointer\n    while left < right:\n\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # Check if the middle element appears only once\n        if (mid == 0 or arr[mid - 1]!= arr[mid]) and (mid == n - 1 or arr[mid + 1]!= arr[mid]):\n            result = arr[mid]\n            break\n\n        # If the middle element appears more than once, move the left pointer to the right\n        elif mid > 0 and arr[mid] == arr[mid - 1]:\n            right = mid - 1\n\n        # If the middle element appears more than once, move the right pointer to the left\n        else:\n            left = mid + 1\n\n    return result",
        "num_ids": 227
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize the count variable to 0\n    count = 0\n    # Traverse the array\n    for i in range(n):\n        # If the count is 0, set the current element as the element to be counted\n        if count == 0:\n            current_element = arr[i]\n        # If the current element is equal to the previous element, increment the count\n        elif current_element == arr[i]:\n            count += 1\n        # If the count is greater than 0, decrement the count\n        else:\n            count -= 1\n    # Traverse the array again and find the element that appears only once\n    for i in range(n):\n        if current_element == arr[i]:\n            return arr[i]\n    # If the element is not found, return -1\n    return -1",
        "num_ids": 206
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 94
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 83
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]) * abs(list1[j][0]) * abs(list1[i][1]) * abs(list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 105
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0]*lst[i][1]*lst[j][0]*lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 89
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 101
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 107
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 95
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]) * abs(list1[j][0]) * abs(list1[i][1]) * abs(list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product",
        "num_ids": 131
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisors(n):\n    '''\n    Returns the set of divisors of a number.\n    '''\n    divs = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.add(i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        div_i = divisors(i)\n        div_sum_i = sum(div_i)\n        if div_sum_i!= i and i!= div_sum_i and i < div_sum_i:\n            if sum(divisors(div_sum_i)) == i:\n                amicable_sum += i\n    return amicable_sum",
        "num_ids": 202
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    sum_of_divisors = sum(i for i in range(1, n//2 + 1) if n % i == 0)\n    return sum_of_divisors == n and sum(i for i in range(1, sum_of_divisors//2 + 1) if sum_of_divisors % i == 0)!= n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers",
        "num_ids": 196
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for n in range(1, limit+1):\n        sum_divisors = sum(i for i in range(1, n) if n % i == 0)\n        if sum_divisors < n:\n            other_divisor = sum_divisors\n        else:\n            other_divisor = sum(i for i in range(1, sum_divisors) if sum_divisors % i == 0)\n        if n!= other_divisor and n == sum(i for i in range(1, other_divisor) if other_divisor % i == 0):\n            total_sum += n + other_divisor\n    return total_sum",
        "num_ids": 192
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        sum_divisors = sum(divisor for divisor in range(1, i//2+1) if i % divisor == 0)\n        if sum_divisors < i:\n            continue\n        if sum_divisors == i and i!= 2:\n            total_sum += i + sum_divisors\n            print(i)\n    return total_sum",
        "num_ids": 142
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        if i == 1:\n            continue\n        sum += i\n        for j in range(1, i):\n            if i == j:\n                continue\n            if i == sum_of_divisors(j):\n                sum += i\n    return sum\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function to calculate the sum of divisors of a given number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum",
        "num_ids": 169
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit+1):\n        sum_divisors = sum(x for x in range(1, i) if i % x == 0)\n        if sum_divisors > i and sum(x for x in range(1, sum_divisors+1) if sum_divisors % x == 0) == i:\n            total += i\n    return total",
        "num_ids": 129
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_amicable_number(n):\n    '''\n    Check if a number is amicable or not.\n    '''\n    sum_divisors = 0\n    divisor = 1\n    \n    while divisor <= n / 2:\n        if n % divisor == 0:\n            sum_divisors += divisor\n        \n        divisor += 1\n    \n    if sum_divisors > n and sum_divisors!= n:\n        return True\n    \n    return False\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    \n    for i in range(1, limit):\n        if is_amicable_number(i):\n            sum_amicable_numbers += i\n    \n    return sum_amicable_numbers",
        "num_ids": 185
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Create a dictionary to store the sums of each number's divisors\n    divisors_sum = {}\n\n    # Create a list to store the amicable numbers\n    amicable_numbers = []\n\n    # Loop through the numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Calculate the sum of the divisors of the current number\n        divisors_sum[num] = sum(i for i in range(1, num // 2 + 1) if num % i == 0)\n\n        # Check if the sum of the divisors is equal to the current number\n        if divisors_sum[num] == num:\n            # Check if the sum of the divisors of the sum of the divisors is equal to the sum of the divisors of the current number\n            if divisors_sum.get(divisors_sum[num], None) == divisors_sum[num] and num not in amicable_numbers:\n                # Add the current number and its sum of divisors to the list of amicable numbers\n                amicable_numbers.append(num)\n                amicable_numbers.append(divisors_sum[num])\n\n    # Sum all the amicable numbers\n    result = sum(amicable_numbers)\n\n    return result",
        "num_ids": 328
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisors(n):\n    \"\"\"Returns a list of divisors of n.\"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Returns the sum of all amicable numbers from 1 to a specified number.\"\"\"\n    amicable_numbers = []\n    for i in range(2, limit):\n        div1 = sum(divisors(i))\n        div2 = sum(divisors(div1))\n        if i == div2 and div1!= i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)",
        "num_ids": 169
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to the specified limit.\n    '''\n    amicable_numbers = []\n\n    # Iterate through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the amicable number to the list\n            amicable_numbers.append(num)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    '''\n    Checks if a given number is amicable.\n    '''\n    # Get the sum of all divisors of the number\n    divisors_sum = sum(divisor for divisor in range(1, num) if num % divisor == 0)\n\n    # Check if the sum of all divisors is equal to the number itself\n    return divisors_sum == num and divisors_sum!= 1 and divisors_sum!= num - 1\n",
        "num_ids": 244
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)",
        "num_ids": 46
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the phase angle of the complex number\n    phase_angle = cmath.phase(a+b)\n\n    # Convert the phase angle from radians to degrees\n    angle = phase_angle * 180 / cmath.pi\n\n    return angle",
        "num_ids": 85
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)",
        "num_ids": 39
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle between them in degrees.\n    '''\n    return cmath.phase(complex(a, b)) * 180 / 3.14159",
        "num_ids": 64
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Get the angle of a complex number.\n    '''\n    # Get the phase angle of the complex number\n    phase = cmath.phase(a)\n    \n    # Convert the phase angle to degrees and return it\n    return round(phase * 180 / cmath.pi, 2)",
        "num_ids": 78
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return angle",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))",
        "num_ids": 45
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle between them in degrees.\n    \"\"\"\n    # Finding the conjugate of complex number b\n    b_conj = complex(b.real, -b.imag)\n    \n    # Finding the product of the two complex numbers and taking the modulus of it\n    product = a * b_conj\n    modulus = abs(product)\n    \n    # Finding the angle of the product in degrees\n    angle = cmath.phase(product) * 180 / cmath.pi\n    \n    # Returning the angle in degrees\n    return angle",
        "num_ids": 141
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Compute the complex conjugate of b\n    b_conj = complex(b.real, -b.imag)\n    # Compute the product a * b_conj\n    product = a * b_conj\n    # Compute the phase angle of the result\n    angle = cmath.phase(product)\n    # Return the angle in degrees\n    return angle * 180 / cmath.pi",
        "num_ids": 115
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))",
        "num_ids": 45
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    ans = 0\n    \n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            count += int(string[j])\n            if count == 0 or count == n - i:\n                ans = max(ans, j - i + 1)\n            elif count > n - i:\n                break\n                \n    return ans",
        "num_ids": 93
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 113
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    # Initialize variables to store the maximum difference and current difference for each position\n    max_diff = 0\n    curr_diff = 0\n    \n    # Loop through each position in the string\n    for i in range(n):\n        if string[i] == '0':\n            curr_diff -= 1\n            # Update max_diff if curr_diff becomes smaller than max_diff\n            if curr_diff < max_diff:\n                max_diff = curr_diff\n        else:\n            curr_diff += 1\n            # Update max_diff if curr_diff becomes larger than max_diff\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n    \n    return max_diff",
        "num_ids": 198
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            length = abs(zeros-ones)\n            if length > max_len:\n                max_len = length\n    return max_len",
        "num_ids": 105
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    curr_length = 0\n    prev_char = ''\n    for char in string:\n        if char == prev_char:\n            curr_length += 1\n        else:\n            curr_length = 1\n        prev_char = char\n        max_length = max(max_length, curr_length)\n    return max_length",
        "num_ids": 122
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            zeros = substring.count('0')\n            ones = substring.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_length:\n                max_length = diff\n    return max_length",
        "num_ids": 96
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    This function takes a binary string as input and finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    max_diff = 0 # initialize max_diff to 0\n\n    for i in range(len(string)): # iterate through each character in the string\n        for j in range(i+1, len(string)+1): # iterate through each possible sub-string starting from i+1 up to the end of the string\n            sub_string = string[i:j] # extract the sub-string\n            count_0 = sub_string.count('0') # count the number of 0s in the sub-string\n            count_1 = sub_string.count('1') # count the number of 1s in the sub-string\n            diff = abs(count_0 - count_1) # calculate the absolute difference between the number of 0s and number of 1s in the sub-string\n            if diff > max_diff: # update max_diff if the difference is greater than the current max_diff\n                max_diff = diff\n\n    return max_diff",
        "num_ids": 259
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            if abs(zeros - ones) > max_length:\n                max_length = abs(zeros - ones)\n    return max_length",
        "num_ids": 103
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_len = 0\n    for i in range(n):\n        dp[i][i] = 1 if string[i] == '1' else 0\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if string[i] == '1' and string[j] == '0':\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n            elif string[i] == '0' and string[j] == '1':\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = dp[i+1][j] + dp[i][j-1]\n            max_len = max(max_len, dp[i][j])\n    return max_len",
        "num_ids": 245
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            count_0 = sub_str.count('0')\n            count_1 = sub_str.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_length:\n                max_length = diff\n    return max_length",
        "num_ids": 113
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #Find the larger number\n    if a>b:\n        larger=a\n        smaller=b\n    else:\n        larger=b\n        smaller=a\n\n    #Find the common divisors of the two numbers\n    divisor=1\n    while divisor<=larger:\n        if larger%divisor==0 and smaller%divisor==0:\n            common_divisor=divisor\n        divisor+=1\n\n    #Find the sum of common divisors\n    sum_of_common_divisors=0\n    divisor=1\n    while divisor<=common_divisor:\n        if common_divisor%divisor==0:\n            sum_of_common_divisors+=divisor\n        divisor+=1\n\n    #Return the sum of common divisors\n    return sum_of_common_divisors",
        "num_ids": 198
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum(a,b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n    # Finding the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n        \n    # Finding the common divisors of smaller number\n    divisors = []\n    for i in range(1, smaller+1):\n        if smaller % i == 0:\n            divisors.append(i)\n            \n    # Finding the common divisors of both numbers\n    common_divisors = []\n    for i in divisors:\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n            \n    # Finding the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    \n    # Returning the sum of common divisors\n    return sum_of_common_divisors",
        "num_ids": 210
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum",
        "num_ids": 89
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Finding the prime factors of the first number\n    factors = []\n    for i in range(1, num1+1):\n        if num1 % i == 0:\n            factors.append(i)\n    # Finding the prime factors of the second number\n    for i in range(1, num2+1):\n        if num2 % i == 0:\n            if i in factors:\n                factors.remove(i)\n    # Finding the sum of common divisors\n    sum_of_divisors = sum(factors)\n    return sum_of_divisors\n\nprint(sum_of_common_divisors(12, 24))  # Output: 12\nprint(sum_of_common_divisors(15, 21))  # Output: 4",
        "num_ids": 220
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    # Find the maximum number among the given numbers\n    max_num = max(a, b)\n\n    # Find the minimum number among the given numbers\n    min_num = min(a, b)\n\n    # Find the sum of common divisors\n    sum_of_divisors = 0\n    for i in range(1, max_num + 1):\n        if max_num % i == 0 and min_num % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors",
        "num_ids": 153
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as arguments and returns the sum of their common divisors.\n    \"\"\"\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)",
        "num_ids": 95
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of common divisors of these two numbers.\n    \"\"\"\n    # Finding the prime factors of both numbers\n    prime_factors_a = []\n    for i in range(2, a+1):\n        if a % i == 0:\n            prime_factors_a.append(i)\n\n    prime_factors_b = []\n    for i in range(2, b+1):\n        if b % i == 0:\n            prime_factors_b.append(i)\n\n    # Finding the common divisors\n    common_divisors = []\n    for i in prime_factors_a:\n        if i in prime_factors_b:\n            common_divisors.append(i)\n\n    # Finding the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors",
        "num_ids": 213
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\nprint(sum_common_divisors(12, 18)) # Output: 6\nprint(sum_common_divisors(30, 45)) # Output: 7",
        "num_ids": 147
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n    return sum(divisors)",
        "num_ids": 75
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all the common divisors of a and b\n    divisors = [i for i in range(1, min(a, b)+1) if a % i == 0 and b % i == 0]\n    \n    # Calculate the sum of the common divisors\n    return sum(divisors)",
        "num_ids": 100
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers x and y as input and returns their product.\n    '''\n    return x * y",
        "num_ids": 35
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    result = x * y\n    return result",
        "num_ids": 36
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    product = x * y\n    return product",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 65
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 59
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words",
        "num_ids": 65
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments, n and str.\n    n is the number of characters to compare the length of words.\n    str is a list of words.\n    This function returns a list of words that are longer than n characters.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "num_ids": 103
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n\n    # Split the string into words and iterate through them\n    for word in str.split():\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Append the word to the long_words_list\n            long_words_list.append(word)\n\n    return long_words_list",
        "num_ids": 113
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 71
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the diagonal elements\n    sum_diagonal = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    # Calculate the sum of the anti-diagonal elements\n    sum_antidiagonal = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Calculate the sum of the rows\n    sum_rows = sum(sum(row) for row in my_matrix)\n    \n    # Calculate the sum of the columns\n    sum_cols = sum(my_matrix[i][i] + my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if all sums are equal\n    return all(sum_diagonal == sum_antidiagonal, sum_rows == sum_cols)",
        "num_ids": 221
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function checks if the given matrix is a magic square or not.\n    A magic square is a square matrix filled with distinct positive integers from 1 to n^2,\n    where n is the size of the square. The sum of the values in each row, column, and diagonal should be the same.\n\n    Args:\n    my_matrix (list): A list of lists representing the matrix.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    '''\n\n    n = len(my_matrix)\n\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if all elements in the matrix are positive integers from 1 to n^2\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] < 1 or my_matrix[i][j] > n**2:\n                return False\n\n    # Check if the sum of the values in each row, column, and diagonal is the same\n    row_sum = [0] * n\n    col_sum = [0] * n\n    diag_sum1 = 0\n    diag_sum2 = 0\n\n    for i in range(n):\n        for j in range(n):\n            # Check row sum\n            row_sum[i] += my_matrix[i][j]\n            # Check column sum\n            col_sum[j] += my_matrix[i][j]\n            # Check diagonal sum (from top left to bottom right)\n            if i == j:\n                diag_sum1 += my_matrix[i][j]\n            # Check diagonal sum (from top right to bottom left)\n            if i + j == n - 1:\n                diag_sum2 += my_matrix[i][j]\n\n    # Check if the sum of the values in each row, column, and diagonal is the same\n    if row_sum!= col_sum:\n        return False\n    if diag_sum1!= diag_sum2:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True",
        "num_ids": 462
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = 0\n    magic_sum_exp = (n * (n * n + 1)) // 2\n    \n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        \n        if row_sum!= magic_sum_exp or col_sum!= magic_sum_exp:\n            return False\n        \n        magic_sum += row_sum\n        \n    if magic_sum!= magic_sum_exp:\n        return False\n        \n    return True",
        "num_ids": 143
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[i][i] for i in range(n))\n    for i in range(n):\n        row_sum = sum(my_matrix[i][j] for j in range(n))\n        if row_sum!= magic_sum:\n            return False\n    for i in range(n):\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if col_sum!= magic_sum:\n            return False\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1!= magic_sum or diagonal_sum2!= magic_sum:\n        return False\n    return True",
        "num_ids": 223
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and returns True if it is a magic square, else False.\n    A magic square is a square matrix of size n x n where the sum of the elements in each row, column, and diagonal is the same.\n    '''\n    n = len(my_matrix)\n    # checking the sum of each row and column\n    for i in range(n):\n        if sum(my_matrix[i])!= sum(my_matrix[j][i] for j in range(n)):\n            return False\n    # checking the sum of the diags\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag_sum!= sum(my_matrix[i][n-i-1] for i in range(n)):\n        return False\n    return True",
        "num_ids": 190
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = sum(my_matrix[0])  # calculate the sum of the first row\n    \n    # check whether the sum of each row and each column is equal to the magic sum\n    for i in range(1, len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n        if row_sum!= magic_sum or col_sum!= magic_sum:\n            return False\n    \n    # check whether the sum of the diagonals is equal to the magic sum\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diagonal_sum!= magic_sum:\n        return False\n    \n    anti_diagonal_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if anti_diagonal_sum!= magic_sum:\n        return False\n    \n    return True",
        "num_ids": 254
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum([row[i] for row in my_matrix]) for i in range(len(my_matrix[0]))]\n    \n    # Check if all rows and columns have the same sum\n    if sum(row_sums)!= sum(col_sums):\n        return False\n    \n    # Calculate the expected sum of the diagonal\n    expected_sum = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    \n    # Check if the sum of the diagonal is equal to the expected sum\n    if sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])!= expected_sum:\n        return False\n    \n    # If all checks pass, return True\n    return True",
        "num_ids": 251
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if the sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n    \n    # Calculate the sum of the diagonal\n    diag_sum_left = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum_right = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if the diagonal sums are the same\n    if diag_sum_left!= diag_sum_right:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True",
        "num_ids": 246
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n    \n    # Calculate the sum of each row and column of the matrix\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix[0]))]\n    \n    # Calculate the expected sum of each row and column of the magic square\n    magic_num = len(my_matrix) * (len(my_matrix) ** 2 + 1) // 2\n    expected_row_sums = [magic_num] * len(my_matrix)\n    expected_col_sums = [magic_num] * len(my_matrix)\n    \n    # Check if the row and column sums are equal to the expected sums\n    if row_sums == expected_row_sums and col_sums == expected_col_sums:\n        return True\n    else:\n        return False",
        "num_ids": 265
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix[0]))]\n    \n    # check if sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n    \n    # calculate the sum of the diagonal and anti-diagonal\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    antidiag_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # check if the sum of diagonal and anti-diagonal is the same\n    if diag_sum!= antidiag_sum:\n        return False\n    \n    # if all checks pass, return True\n    return True",
        "num_ids": 266
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num",
        "num_ids": 68
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item",
        "num_ids": 76
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item",
        "num_ids": 110
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of numbers as input and returns the item with the maximum frequency in the list.\n    '''\n    # Initialize an empty dictionary to store the frequency of each item in the list.\n    freq = defaultdict(int)\n    # Loop through each item in the list and increment its frequency in the dictionary.\n    for num in nums:\n        freq[num] += 1\n    # Find the item with the maximum frequency in the dictionary.\n    max_freq = max(freq.values())\n    for item, count in freq.items():\n        if count == max_freq:\n            return item",
        "num_ids": 141
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num",
        "num_ids": 84
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_frequency = max(frequency.values())\n    max_items = [item for item, freq in frequency.items() if freq == max_frequency]\n    return max_items[0]",
        "num_ids": 98
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        frequency[num] += 1\n        if frequency[num] > max_count:\n            max_count = frequency[num]\n            max_item = num\n    \n    return max_item",
        "num_ids": 100
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num",
        "num_ids": 84
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n    \n    return max_item",
        "num_ids": 102
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function finds the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num",
        "num_ids": 94
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels and str1[i]!= 'y':\n            new_str += str1[i]\n    return new_str[::-1] + \"\".join([str1[i] for i in range(len(str1)) if str1[i] not in vowels or str1[i] == 'y'])",
        "num_ids": 120
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    vowel_indices = [i for i, letter in enumerate(str_list) if letter in vowels]\n    for i in range(len(vowel_indices)//2):\n        j = len(vowel_indices)-i-1\n        str_list[vowel_indices[i]], str_list[vowel_indices[j]] = str_list[vowel_indices[j]], str_list[vowel_indices[i]]\n    return ''.join(str_list)",
        "num_ids": 142
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_indices = [i for i in range(len(str1)) if str1[i].lower() in vowels]\n    vowels_indices.reverse()\n    result = ''\n    for i in range(len(str1)):\n        if i in vowels_indices:\n            result += str1[i].lower()\n        else:\n            result += str1[i]\n    return result",
        "num_ids": 121
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    for i in range(len(vowel_indices)//2):\n        left, right = vowel_indices[i], vowel_indices[-1-i]\n        str1 = str1[:left] + str1[right] + str1[left+1:right] + str1[left] + str1[right+1:]\n    return str1",
        "num_ids": 127
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)",
        "num_ids": 133
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str_list = list(str1)\n    start_vowel = 0\n    end_vowel = len(str_list) - 1\n    \n    while start_vowel < end_vowel:\n        if str_list[start_vowel].lower() in vowels and str_list[end_vowel].lower() in vowels:\n            if str_list[start_vowel].lower()!= 'y':\n                str_list[start_vowel], str_list[end_vowel] = str_list[end_vowel], str_list[start_vowel]\n            start_vowel += 1\n            end_vowel -= 1\n            \n        elif str_list[start_vowel].lower() in vowels:\n            end_vowel -= 1\n            \n        elif str_list[end_vowel].lower() in vowels:\n            start_vowel += 1\n            \n        else:\n            start_vowel += 1\n            end_vowel -= 1\n            \n    return ''.join(str_list)",
        "num_ids": 260
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = [i for i in str1 if i in vowels]\n    str_list = [i for i in str1 if i not in vowels]\n    str_list.reverse()\n    vowels_list.reverse()\n    str2 = \"\".join(str_list + vowels_list)\n    return str2",
        "num_ids": 101
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_indices = []\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels and i not in vowels_indices:\n            vowels_indices.append(i)\n    reversed_vowels = []\n    for i in vowels_indices:\n        if i!= len(str1) - 1:\n            reversed_vowels.append(str1[i+1])\n        else:\n            reversed_vowels.append(str1[i-1])\n    for i in range(len(vowels_indices)):\n        if i!= len(vowels_indices) - 1:\n            str1 = str1[:vowels_indices[i]] + reversed_vowels[i] + str1[vowels_indices[i]+1:]\n        else:\n            str1 = str1[:vowels_indices[i]] + reversed_vowels[i] + str1[vowels_indices[i]:]\n    return str1",
        "num_ids": 262
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(s: str) -> str:\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    # Use a set to speed up checking for vowels\n    i, j = 0, len(s) - 1\n    # Two pointers that start at the beginning and end of the string, respectively\n    while i < j:\n        if s[i] not in vowels and s[j] not in vowels:\n            # If both characters are not vowels, move both pointers inward\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            # If the left character is not a vowel, move the left pointer inward\n            i += 1\n        elif s[j] not in vowels:\n            # If the right character is not a vowel, move the right pointer inward\n            j -= 1\n        else:\n            # If both characters are vowels, swap them and move both pointers inward\n            s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n            i += 1\n            j -= 1\n    return s",
        "num_ids": 286
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    vowels_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_indices.append(i)\n    for i in range(len(vowels_indices)//2):\n        j = len(vowels_indices)-i-1\n        str1_list[vowels_indices[i]], str1_list[vowels_indices[j]] = str1_list[vowels_indices[j]], str1_list[vowels_indices[i]]\n    return \"\".join(str1_list)",
        "num_ids": 170
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''.join(tup1)\n    return result",
        "num_ids": 37
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))",
        "num_ids": 37
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string.\n    \"\"\"\n    return str(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 34
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    \n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function calculates the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative",
        "num_ids": 63
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of all the negative numbers in the list.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 69
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function calculates the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "num_ids": 57
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculates the sum of the negative numbers in a list of numbers.\n    \"\"\"\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result",
        "num_ids": 54
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_count = 0\n    i = 1\n    while hex_count < n:\n        hex_count += i\n        i += 1\n    return hex_count",
        "num_ids": 63
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function finds the nth hexagonal number.\n\n    Parameters:\n    n (int): The number of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n*(2*n-1)",
        "num_ids": 67
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 6 * count\n        count += 1\n    return num",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6\n        count += 1\n    return num",
        "num_ids": 56
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    current = 1\n    while count < n:\n        current += 6\n        count += 1\n    return current",
        "num_ids": 56
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    num = n * (2 * n - 1)\n    return num",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function finds the nth hexagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 6 * count\n        count += 1\n    return num",
        "num_ids": 56
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    count = 0\n    while count < n:\n        hex_num += count + 1\n        count += 1\n    return hex_num",
        "num_ids": 64
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n*(2*n - 1)\n    return hex_num",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes",
        "num_ids": 93
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes",
        "num_ids": 90
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    if count_non_zeros == 0:\n        return 'Error: Array contains no non-zero elements.'\n    return count_zeros / count_non_zeros",
        "num_ids": 123
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count",
        "num_ids": 73
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(nums)",
        "num_ids": 51
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    ratio = zero_count / len(nums)\n    return ratio",
        "num_ids": 81
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 45
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes",
        "num_ids": 93
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count",
        "num_ids": 99
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0.0\n    else:\n        return zeroes / non_zeroes",
        "num_ids": 112
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n\n    # Initialize sum as zero\n    sum = 0\n\n    # Loop till n becomes zero\n    while n > 0:\n\n        # Check if the last bit of n is 1\n        if n & 1:\n\n            # If yes, then check if the current bit is a power of 2 or not\n            if n == 1:\n                # If the last bit is 1 and n is 1, it means there is a single 1 bit left in n,\n                # which is not a power of 2. So return False\n                return False\n            elif n == 3:\n                # If the last bit is 1 and n is 3, it means there are two 1 bits left in n,\n                # which is a power of 2. So add 1 to the sum and continue with the loop.\n                sum += 1\n            else:\n                # If the last bit is 1 and n is not 1 or 3, then n cannot be represented as sum of powers of 2.\n                # So return False.\n                return False\n\n        # Shift the bits of n to the right by 1 and add it to sum.\n        sum += n & 1\n\n        # Remove the last bit of n\n        n >>= 1\n\n    # If the loop ends and sum is greater than 0, then n can be represented as the sum of powers of 2.\n    # So return True.\n    return True if sum > 0 else False",
        "num_ids": 362
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Base case\n    if n == 0:\n        return False\n    \n    # If n is even, we can represent it as sum of 2^(k-1) + 2^(k-2) +... + 2^0\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    \n    # If n is odd, we can represent it as sum of 2^(k-1) + 2^(k-2) +... + 2^0\n    # or 2^(k-1) + 2^(k-2) +... + 2^(k-m) + 2^(k-m-1) +... + 2^0\n    # where m = floor(log2(n))\n    for i in range(1, int(n * log2(n)) + 1):\n        if 2 ** i > n:\n            return is_Sum_Of_Powers_Of_Two(n - (2 ** (i - 1)))\n    \n    # If we reach here, it means that n cannot be represented as sum of non-zero powers of 2\n    return False",
        "num_ids": 301
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1: \n        return False\n    \n    count = 0\n    \n    while n > 0: \n        if n % 2 == 0: \n            n //= 2\n            count += 1\n        else: \n            return False\n    \n    return count > 0",
        "num_ids": 103
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a variable to keep track of sum of powers of two\n    power_sum = 0\n    \n    # Loop through all the powers of 2 up to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # Check if n is divisible by i^2\n        if n % (i**2) == 0:\n            # Check if i is a power of two\n            if i == 2 or i == 4 or i == 8 or i == 16 or i == 32 or i == 64 or i == 128 or i == 256 or i == 512 or i == 1024 or i == 2048 or i == 4096 or i == 8192 or i == 16384 or i == 32768 or i == 65536 or i == 131072 or i == 262144 or i == 524288 or i == 1048576 or i == 2097152 or i == 4194304 or i == 8388608 or i == 16777216 or i == 33554432 or i == 67108864 or i == 134217728 or i == 268435456 or i == 536870912 or i == 1073741824:\n                # Add i^2 to the sum of powers of two\n                power_sum += i**2\n                # Subtract i^2 from n to check for other factors\n                n = n // i**2\n    \n    # Check if n is a power of two or not\n    if n == 2 or n == 4 or n == 8 or n == 16 or n == 32 or n == 64 or n == 128 or n == 256 or n == 512 or n == 1024 or n == 2048 or n == 4096 or n == 8192 or n == 16384 or n == 32768 or n == 65536 or n == 131072 or n == 262144 or n == 524288 or n == 1048576 or n == 2097152 or n == 4194304 or n == 8388608 or n == 16777216 or n == 33554432 or n == 67108864 or n == 134217728 or n == 268435456 or n == 536870912 or n == 1073741824:\n        # Add n to the sum of powers of two\n        power_sum += n\n    \n    # If the sum of powers of two is equal to n, then n can be represented as sum of non-zero powers of 2\n    if power_sum == n:\n        return True\n    else:\n        return False",
        "num_ids": 812
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Loop through all possible powers of 2\n    for i in range(31, -1, -1):\n        # If the power of 2 is a factor of n\n        if n & (1 << i):\n            # Check if the power of 2 is not a factor of n-1\n            if not n & (1 << (i-1)):\n                sum += (1 << i)\n    # If the sum is equal to n, then n can be represented as sum of non-zero powers of 2\n    if sum == n:\n        return True\n    else:\n        return False",
        "num_ids": 185
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to keep track of the sum of powers of 2\n    sum_of_powers_of_two = 0\n    \n    # Iterate through the numbers from 0 to n\n    for i in range(n+1):\n        \n        # If i is a power of 2 and greater than or equal to 2, add i to the sum of powers of 2\n        if (i & (i-1)) == 0 and i >= 2:\n            sum_of_powers_of_two += i\n    \n    # If the sum of powers of 2 is equal to n, return True\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False",
        "num_ids": 201
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    \n    # Find the smallest power of 2 that is greater than or equal to n\n    p = 1\n    while p <= n:\n        p *= 2\n    \n    # If p is not 1, then n is not a sum of powers of 2\n    if p!= 1:\n        return False\n    \n    # Check if n can be represented as sum of powers of 2\n    while n > 0:\n        # Check if the least significant bit of n is 1\n        if n & 1 == 1:\n            # Check if n is a power of 2\n            if n == 1:\n                return True\n            else:\n                return False\n        # Remove the least significant bit of n\n        n >>= 1\n    \n    # If n is zero, then it is a sum of powers of 2\n    return True",
        "num_ids": 227
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Define a list of powers of 2\n    powers_of_two = [2**i for i in range(32)]\n    \n    # Check if the given number is already a power of 2\n    if n in powers_of_two:\n        return True\n    \n    # Check if the given number can be represented as sum of powers of 2\n    for i in range(len(powers_of_two)-1):\n        for j in range(i+1, len(powers_of_two)):\n            if n == powers_of_two[i] + powers_of_two[j]:\n                return True\n    \n    # If the given number cannot be represented as sum of powers of 2\n    return False",
        "num_ids": 200
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Create a list of all powers of 2 up to the number n\n    powers_of_two = [2 ** i for i in range(int(n**0.5)+1)]\n    # Check if the number n can be represented as a sum of non-zero powers of 2\n    if n in powers_of_two:\n        return True\n    else:\n        return False",
        "num_ids": 99
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        while n % 2 == 0:\n            n = n // 2\n            \n        i = 3\n        while i <= n:\n            if n % i == 0:\n                n = n // i\n            else:\n                i += 2\n                \n        if n == 1:\n            return True\n        else:\n            return False",
        "num_ids": 138
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r",
        "num_ids": 39
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as an input and returns the circumference of the circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 53
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r",
        "num_ids": 39
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as input and returns its circumference.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 49
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes in the radius of a circle and returns the circumference.\n    '''\n    return 2 * 3.14 * r",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle with radius r.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 44
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "num_ids": 48
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 80
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            flattened_list.extend(sublist)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "num_ids": 89
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 90
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            result.extend(extract_singly(sublist))\n        else:\n            result.append(sublist)\n    return result",
        "num_ids": 81
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty list to store the flattened numbers\n    flattened_list = []\n    \n    # Iterate through each element of the list\n    for element in test_list:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # If it is, recursively call the function on that sublist\n            flattened_list.extend(extract_singly(element))\n        else:\n            # If it is not a list, append it to the flattened list\n            flattened_list.append(element)\n    \n    return flattened_list",
        "num_ids": 149
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.append(num)\n    return flattened_list",
        "num_ids": 71
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flattened_list.extend(sublist)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "num_ids": 88
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 68
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 85
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            for item in sublist:\n                result.append(item)\n        else:\n            result.append(sublist)\n    return result",
        "num_ids": 83
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    # Sort the list in reverse order using pancakes\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = max(range(i, n), key=nums.__getitem__)\n        \n        # If the index of the maximum element is not the end of the list,\n        # move it to the end by pancaking the list\n        if max_idx!= n-1:\n            nums = reverse(nums, max_idx+1)\n            nums = reverse(nums, n)\n    \n    return nums\n    \ndef reverse(lst, start):\n    \"\"\"\n    Reverses the elements in a list from the given start index to the end.\n    \"\"\"\n    return lst[:start][::-1] + lst[start:]",
        "num_ids": 202
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort algorithm.\n    \"\"\"\n    # find the length of the list\n    n = len(nums)\n    \n    # perform pancake sort\n    for i in range(n-1, 0, -1):\n        # find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # flip the maximum element to the beginning of the unsorted part of the list\n        if max_index!= i:\n            nums = flip(nums, max_index, i)\n            nums = flip(nums, 0, i-1)\n    \n    return nums\n    \ndef flip(nums, start, end):\n    \"\"\"\n    Helper function to reverse a portion of the list.\n    \"\"\"\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n        \n    return nums",
        "num_ids": 237
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of integers and sorts them using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Start from the maximum element and pancake-sort the array until it is sorted.\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the array.\n        max_index = nums.index(max(nums[:i+1]))\n        # If the maximum element is not at the beginning, swap it with the first element.\n        if max_index!= 0:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n        # Pancake-sort the array from the beginning up to the maximum element.\n        nums[:i+1] = nums[:i+1][::-1]\n        nums[:i+1] = nums[:i+1][::-1]\n    return nums",
        "num_ids": 236
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find index of the maximum element in the unsorted part of the list\n        max_index = i - 1\n        for j in range(i - 1, 0, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Reverse the unsorted part of the list to sort it\n        if max_index!= i - 1:\n            nums[:max_index + 1] = reversed(nums[:max_index + 1])\n            nums[max_index + 1:] = reversed(nums[max_index + 1:])\n    \n    # Return the sorted list\n    return nums",
        "num_ids": 184
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of elements as input and sorts it using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Start from the last element and move forward\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = nums.index(max(nums[:i+1]))\n        # If the index of the maximum element is not at the beginning of the list,\n        # flip the first i+1 elements and move the index to the beginning\n        if max_idx!= 0:\n            nums[:max_idx+1] = nums[:max_idx+1][::-1]\n            nums[:max_idx+1] = nums[:max_idx+1][::-1]\n    return nums",
        "num_ids": 190
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Start with a range of n to 1\n    for i in range(len(nums), 1, -1):\n        # Find the index of the maximum element in the range\n        max_index = nums.index(max(nums[:i]))\n        # Reverse the maximum element\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # Reverse the entire list\n        nums = nums[::-1]\n    return nums",
        "num_ids": 123
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of elements as input and returns a sorted list.\n    '''\n    n = len(nums)\n    # Traverse through all array elements\n    for i in range(n):\n        # Find the maximum element in the unsorted array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Move the maximum element to the end of the sorted array\n        if max_idx!= i:\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n            # Reverse the subarray from 0 to i\n            nums[:i+1] = nums[:i+1][::-1]\n    return nums",
        "num_ids": 175
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Iterate over the list from 1 to n-1\n    for i in range(1, n):\n        # Find the index of the maximum element in the unsorted list\n        max_index = nums.index(max(nums[:i+1]))\n        # If max_index is not equal to i, swap the elements at indices i and max_index\n        if max_index!= i:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            nums[:i+1] = nums[:i+1][::-1]\n    return nums",
        "num_ids": 161
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    curr_size = n\n    \n    while curr_size > 1:\n        # find index of maximum element in nums[:curr_size]\n        max_idx = nums.index(max(nums[:curr_size]))\n        \n        # flip the maximum element to the beginning of nums[:curr_size]\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        \n        # flip the entire nums[:curr_size] to sort it\n        nums[:curr_size] = nums[:curr_size][::-1]\n        \n        # increment curr_size to continue sorting the remaining elements\n        curr_size -= 1\n        \n    return nums",
        "num_ids": 168
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:n]))\n        # Reverse the maximum element\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # Reverse the entire list\n        nums = nums[::-1]\n        # Set n to the length of the reversed list\n        n = len(nums)\n    return nums",
        "num_ids": 139
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes in three lists and returns the number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in it.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 100
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # sort the array in ascending order\n    arr.sort()\n    # initialize the maximum difference to be zero\n    max_diff = 0\n    # loop through the array and find the maximum difference\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 120
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return None\n    max_diff = abs(arr[1] - arr[0])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 86
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 100
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 97
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_diff = abs(arr[1] - arr[0])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum absolute difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    # iterate over the array and find the maximum absolute difference\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 107
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function returns the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum absolute difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 95
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Find the maximum and minimum element in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Calculate the absolute difference between the maximum and minimum element\n    diff = abs(max_val - min_val)\n\n    return diff",
        "num_ids": 90
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if n is divisible by a\n    if n % a == 0:\n        # Check if a is divisible by b\n        if a % b == 0:\n            # Return None if both conditions are true\n            return None\n        else:\n            # Return x = n/a and y = 0\n            return (n//a, 0)\n    else:\n        # Check if b is divisible by a\n        if b % a == 0:\n            # Return x = 0 and y = n/b\n            return (0, n//b)\n        else:\n            # Check if gcd(a,b) divides n\n            if a*b % gcd(a, b) == 0:\n                # Return x = (n-b)/(a*b/gcd(a,b)) and y = (n-a)/(a*b/gcd(a,b))\n                return ((n-b)//(a*b//gcd(a,b)), (n-a)//(a*b//gcd(a,b)))\n            else:\n                # Return None if no solution exists\n                return None",
        "num_ids": 283
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        y = n - a * x\n        if y % b == 0:\n            return (x, y // b)\n    return None",
        "num_ids": 85
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 83
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (n-a*x)%b == 0:\n            y = (n-a*x)//b\n            return (x, y)\n    return None",
        "num_ids": 90
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    if n % a == 0:\n        x = n // a\n        y = 0\n        return (x, y)\n    elif n % b == 0:\n        x = 0\n        y = n // b\n        return (x, y)\n    else:\n        for i in range(n // a + 1):\n            if a * i % n == 0:\n                x = a * i // n\n                y = (n - a * x) // b\n                return (x, y)\n        return None",
        "num_ids": 123
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    if a == 0 and b == 0:  # special case: x = y = 0\n        return (0, 0)\n    elif a == 0:  # special case: y = n // b\n        return (0, n // b)\n    elif b == 0:  # special case: x = n // a\n        return (n // a, 0)\n    elif a == 1:  # special case: x = n // b\n        return (n // b, 0)\n    elif b == 1:  # special case: y = n // a\n        return (0, n // a)\n    else:\n        d = n // (a*b)  # calculate the common denominator\n        if n % (a*b)!= 0:  # there is no solution if n is not divisible by ab\n            return None\n        else:\n            x = d * a  # calculate x as d * a\n            y = d * b  # calculate y as d * b\n            return (x, y)",
        "num_ids": 235
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 83
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if a * x % n == b:\n            return (x, n // a)\n        elif a * x % n == 0:\n            return None\n    return None",
        "num_ids": 92
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if n % x == 0:\n            y = n // x\n            if a * x + b * y == n:\n                return (x, y)\n    return None",
        "num_ids": 93
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 87
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Removes all elements from list1 that are also present in list2.\n    \"\"\"\n    for elem in list1[:]: # make a copy of the list to avoid modifying it while iterating\n        if elem in list2:\n            list1.remove(elem)\n    return list1",
        "num_ids": 72
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        while elem in list1:\n            list1.remove(elem)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]",
        "num_ids": 49
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as arguments and removes all elements from the first list that are present in the second list.\n    '''\n    # Create an empty list to store the elements to be removed.\n    remove_list = []\n\n    # Iterate through the first list and check if each element is present in the second list.\n    for element in list1:\n        if element in list2:\n            # If the element is present, add it to the remove_list.\n            remove_list.append(element)\n\n    # Iterate through the remove_list and remove each element from the first list.\n    for element in remove_list:\n        list1.remove(element)\n\n    # Return the modified first list.\n    return list1",
        "num_ids": 163
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    # Create an empty list to store the elements that are not in list2\n    result = []\n    # Loop through all elements in list1\n    for element in list1:\n        # Check if the element is not in list2\n        if element not in list2:\n            # Add the element to the result list\n            result.append(element)\n    # Return the result list\n    return result",
        "num_ids": 109
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from the list1 which are present in the list2.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1",
        "num_ids": 60
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of series 1 + (2*2) + (3*3) +... + (n-2*i) + (n-2*i-1) + (n-2*i-2) +... + 1.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i <= n//2:\n        sum += (n - 2*i)\n        i += 1\n    return sum",
        "num_ids": 107
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n // 2 + 1) // 2",
        "num_ids": 79
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(i for i in range(n//2 + 1))",
        "num_ids": 80
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(n - 2*i for i in range(n//2 + 1))",
        "num_ids": 85
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Calculates the sum of the series (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 1:\n        # if n is odd, the sum is (n // 2) + (n // 2 - 1) + (n // 2 - 2) +... + 1\n        total = (n // 2) * (n // 2 + 1) // 2\n    else:\n        # if n is even, the sum is (n // 2) + (n // 2 - 1) + (n // 2 - 2) +... + (n // 2 - n)\n        total = n // 2 * (n // 2 + 1) // 2\n    return total",
        "num_ids": 219
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum_series(n-1) + (n-2)\n",
        "num_ids": 80
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    This function calculates the sum of the series (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2 + 1):\n        total += n - 2*i\n    return total",
        "num_ids": 94
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (n + (n-2)) // 2\n    else:\n        return n // 2",
        "num_ids": 106
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # Calculate the value of (n - 2*i) and add it to the sum\n        total += (n - 2*i)\n        \n    # Return the sum\n    return total",
        "num_ids": 140
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2!= 0:  # if n is odd, there's no pair of numbers to add\n        return n\n    else:\n        return n + (n-2) + (n-4) + sum_series(n-6)  # add up all the remaining terms recursively",
        "num_ids": 126
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)",
        "num_ids": 60
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    apothem = l / (2 * tan(pi / s))\n    return 0.5 * s * apothem ** 2",
        "num_ids": 74
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s * tan(pi/s)",
        "num_ids": 60
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l / tan(pi / s)",
        "num_ids": 56
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)",
        "num_ids": 56
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l / 2 * tan(pi / s)\n    area = a * s\n    return area",
        "num_ids": 66
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l * tan(pi / s))\n    return area",
        "num_ids": 65
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculates the area of a regular polygon given the length and number of sides.\n    '''\n    apothem = l / (2 * tan(pi / s))\n    area = (s * apothem) / 2\n    return area",
        "num_ids": 70
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem of the polygon\n    apothem = l / (2 * tan(pi / s))\n    # Calculate the area of the polygon using the formula A = (n * s^2) / 4 * tan(pi / n)\n    area = (s * apothem**2) / 2\n    return area",
        "num_ids": 117
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi / s)\n    return area",
        "num_ids": 64
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n//i!= i:\n                div_sum += n//i\n    return div_sum\n\nn1 = int(input(\"Enter first integer: \"))\nn2 = int(input(\"Enter second integer: \"))\n\nif div_sum(n1) == div_sum(n2):\n    print(f\"The sum of divisors of {n1} and {n2} are the same.\")\nelse:\n    print(f\"The sum of divisors of {n1} and {n2} are not the same.\")",
        "num_ids": 197
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Initialize variables to hold the sum of divisors for each number\n    sum_1 = 0\n    sum_2 = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # If i is a divisor of n, add it to the sum of divisors for n\n            sum_1 += i\n\n    # Check if the sum of divisors for n is even or odd\n    if sum_1 % 2 == 0:\n        # If the sum of divisors for n is even, loop through all numbers from 1 to n-1\n        for j in range(1, n):\n            # Check if j is a divisor of n\n            if n % j == 0:\n                # If j is a divisor of n, add it to the sum of divisors for n\n                sum_2 += j\n    else:\n        # If the sum of divisors for n is odd, loop through all numbers from 1 to n-1\n        for j in range(1, n):\n            # Check if j is a divisor of n\n            if n % j == 0:\n                # If j is a divisor of n, add it to the sum of divisors for n\n                sum_2 += j\n\n        # Add the largest odd number to the sum of divisors for n\n        sum_2 += int((n-1)/2)\n\n    # Check if the sum of divisors for n and n-1 are equal\n    if sum_1 == sum_2:\n        return True\n    else:\n        return False",
        "num_ids": 394
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    divisors = sorted(set(divisors))\n    return sum(divisors) == n",
        "num_ids": 123
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function determines if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0 \n\n    for i in range(1, n+1): \n        if n % i == 0: \n            div_sum += i \n\n    return div_sum \n\nnum1 = int(input(\"Enter the first number: \")) \nnum2 = int(input(\"Enter the second number: \")) \n\nif div_sum(num1) == div_sum(num2): \n    print(\"The sum of the divisors of\", num1, \"and\", num2, \"are the same.\") \nelse: \n    print(\"The sum of the divisors of\", num1, \"and\", num2, \"are different.\") ",
        "num_ids": 178
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.sort()\n    return sum(divisors)\n",
        "num_ids": 114
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n//i!= i:\n                div_sum += n//i\n    return div_sum",
        "num_ids": 98
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div1 = 0\n    sum_div2 = 0\n    div_count = 0\n    \n    # find divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_count += 2\n            sum_div1 += i\n            if i!= n//i:\n                sum_div2 += n//i\n    \n    # check if sum of divisors are equal\n    if div_count == 0 or (div_count == 2 and sum_div1 == sum_div2):\n        return True\n    else:\n        return False",
        "num_ids": 173
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Finding the divisors of the given number\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # Checking if the sum of the divisors is equal to the given number\n    if sum(divisors) == n:\n        return True\n    else:\n        return False",
        "num_ids": 122
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i!= n // i:\n                return True\n    return False",
        "num_ids": 80
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    return div_list\n\ndef check_sum(n):\n    '''\n    Check if the sum of the divisors of two integers are the same.\n    '''\n    div_list = div_sum(n)\n    if sum(div_list) == n:\n        print(f\"The sum of the divisors of {n} are the same.\")\n    else:\n        print(f\"The sum of the divisors of {n} are not the same.\")\n\ncheck_sum(24)  # Output: The sum of the divisors of 24 are the same.",
        "num_ids": 202
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # create an empty dictionary to store the count of each character\n    char_count = {}\n\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # convert the character to lowercase (case insensitive)\n        char = char.lower()\n\n        # check if the character is a letter (a-z or A-Z)\n        if char.isalpha():\n            # add the character and its count to the dictionary\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # loop through the dictionary and count the number of characters that occur at the same position as the English alphabet\n    same_pos_count = 0\n    for i in range(ord('a'), ord('z')+1):\n        if chr(i) in char_count:\n            same_pos_count += 1\n\n    return same_pos_count",
        "num_ids": 211
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0] * len(alpha)\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in alpha:\n            index = alpha.index(str1[i].lower())\n            count[index] += 1\n    \n    return count",
        "num_ids": 116
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # convert both strings to lowercase\n    str1 = str1.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    # loop through the string and check if the character is at the same position as in the alphabet\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            count += 1\n    \n    return count",
        "num_ids": 91
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is a letter\n        if char.isalpha():\n            # convert the character to lowercase to make it case insensitive\n            char = char.lower()\n            # check if the character is a letter in the English alphabet\n            if ord('a') <= ord(char) <= ord('z'):\n                # if it is, check if it occurs at the same position in the string as in the English alphabet\n                if char in char_count:\n                    char_count[char] += 1\n                else:\n                    char_count[char] = 1\n    # return the dictionary of character counts\n    return char_count",
        "num_ids": 179
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # create a dictionary to store the character count at each position\n    char_count = {}\n    # loop through each character in the string and count the characters at each position\n    for char in str1:\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # return the dictionary\n    return char_count",
        "num_ids": 121
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the character count for each position in the alphabet\n    char_count = {chr(i):0 for i in range(ord('a'),ord('z')+1)}\n\n    # convert the input string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n\n    # iterate over each character in the string\n    for i, char in enumerate(str1):\n        # check if the character is in the English alphabet and if it's in the same position as the character in the English alphabet\n        if char in char_count and char_count[char] == (i % 26):\n            char_count[char] += 1\n\n    # count the number of characters that occur at the same position as the English alphabet\n    same_position_count = sum([1 for count in char_count.values() if count > 0])\n\n    return same_position_count",
        "num_ids": 240
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase and remove all non-alphabetic characters\n    str1 = ''.join(filter(str.isalpha, str1.lower()))\n    # initialize a list of zeros to store the counts for each position\n    counts = [0] * 26\n    # iterate through the string and increment the count for the corresponding position\n    for char in str1:\n        counts[ord(char) - ord('a')] += 1\n    # return the counts for each position\n    return counts",
        "num_ids": 152
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0] * 26\n    \n    # Loop through each character in the string and increment the count of the corresponding alphabet position\n    for char in str1:\n        if char.isalpha():\n            char_index = alphabet.lower().index(char.lower())\n            count[char_index] += 1\n            \n    return count",
        "num_ids": 127
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the character counts\n    char_counts = {}\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a letter in the English alphabet, increment its count in the dictionary by 1\n        if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if i+1 in char_counts:\n                char_counts[i+1] += 1\n            else:\n                char_counts[i+1] = 1\n    # Return the dictionary of character counts\n    return char_counts",
        "num_ids": 187
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    # Loop over each character in the string\n    for i, c in enumerate(str1):\n        # Convert the character to lowercase\n        c = c.lower()\n        # Check if the character is in the English alphabet\n        if c.isalpha():\n            # If it is, increment the count for the current position in the dictionary\n            char_count[i] = char_count.get(i, 0) + 1\n    # Count the number of characters that occur at the same position as in the English alphabet\n    count = sum(1 for count in char_count.values() if count > 1)\n    return count",
        "num_ids": 163
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (A[i]^A[j])%2 == 0:\n                count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2",
        "num_ids": 66
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 50
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2**(len(bin(n))-2)",
        "num_ids": 64
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()",
        "num_ids": 51
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()",
        "num_ids": 65
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2\n    greater than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n    return power_of_2",
        "num_ids": 76
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments: a list and a number.\n    It returns the number of times the number appears in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a,x):\n    \"\"\"\n    This function takes a list `a` and a number `x` as input and returns the number of times `x` appears in `a`.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of all the elements in lst within the range [m, n] inclusive.\n    \"\"\"\n    return sum(lst[m:n+1])",
        "num_ids": 50
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    This function takes in a list, m and n as arguments.\n    m and n are the indices of the range within which the sum of numbers in the list is to be found.\n    It returns the sum of numbers in the list within the specified range.\n    '''\n    if m > n:\n        print(\"Invalid range! m should be less than or equal to n.\")\n        return None\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 125
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list, m, and n as input.\n    It returns the sum of all the elements of the list within the range [m, n] inclusive.\n    \"\"\"\n    sum_range = sum(lst[m:n+1])\n    return sum_range",
        "num_ids": 74
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list and two indices as inputs, and returns the sum of the numbers within the specified range.\n    \"\"\"\n    # initialize the sum variable\n    total = 0\n    # loop through the list\n    for i in range(m, n+1):\n        # add the current element to the sum\n        total += lst[i]\n    # return the sum\n    return total",
        "num_ids": 95
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum",
        "num_ids": 74
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "num_ids": 45
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "num_ids": 45
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\na = float(input(\"Enter the length of a side of the pentagon: \"))\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))",
        "num_ids": 85
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count",
        "num_ids": 82
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count",
        "num_ids": 52
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of times the string'std' appears in the string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 77
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as an argument and returns the number of times the string'std' occurs in the string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s[s.index('std') + 3:]\n    return count",
        "num_ids": 73
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of times the string'std' occurs in the string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 77
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    \n    data_type = type(test_tuple[0])\n    \n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    \n    return True",
        "num_ids": 96
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes in a tuple as an argument and returns True if all the elements in the tuple have the same data type, and False otherwise.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True",
        "num_ids": 81
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "num_ids": 81
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    \"\"\"\n    # Find the index of the element 'x' in the array.\n    index = binary_search(arr, n, x)\n    \n    # If the index is -1, then x is not present in the array, so return False.\n    if index == -1:\n        return False\n    \n    # If the index is 0, then the majority element can only be the first element in the array.\n    if index == 0:\n        if arr[index] > n/2:\n            return True\n        else:\n            return False\n    \n    # If the index is n-1, then the majority element can only be the last element in the array.\n    if index == n-1:\n        if arr[index] > n/2:\n            return True\n        else:\n            return False\n    \n    # If the element at the index is greater than the element at the index+1, then the majority element can only be at the index.\n    if arr[index] > arr[index+1]:\n        if arr[index] > n/2:\n            return True\n        else:\n            return False\n    \n    # If the element at the index is greater than the element at the index-1, then the majority element can only be at the index.\n    if arr[index] > arr[index-1]:\n        if arr[index] > n/2:\n            return True\n        else:\n            return False\n    \n    # If none of the above conditions are true, then the majority element can be at index+1 or index-1.\n    if arr[index+1] > arr[index-1]:\n        if arr[index+1] > n/2:\n            return True\n        else:\n            return False\n    else:\n        if arr[index-1] > n/2:\n            return True\n        else:\n            return False\n\ndef binary_search(arr, n, x):\n    \"\"\"\n    This function performs binary search on the given sorted array to find the index of the element 'x'.\n    \"\"\"\n    # Initialize the left and right pointers.\n    left = 0\n    right = n-1\n    \n    # Perform binary search until the left pointer is less than the right pointer.\n    while left <= right:\n        # Find the mid index.\n        mid = (left+right)//2\n        \n        # If the element at mid index is equal to x, then return the mid index.\n        if arr[mid] == x:\n            return mid\n        \n        # If the element at mid index is less than x, then update the left pointer to mid+1.\n        elif arr[mid] < x:\n            left = mid+1\n        \n        # If the element at mid index is greater than x, then update the right pointer to mid-1.\n        else:\n            right = mid-1\n    \n    # If x is not found in the array, then return -1.\n    return -1",
        "num_ids": 642
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize the count variable\n    count = 0\n    \n    # Traverse through the array and count the occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # Check if the count is greater than n/2\n    if count > n//2:\n        return True\n    else:\n        return False",
        "num_ids": 142
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[0] or x > arr[n-1]:\n        return False\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False",
        "num_ids": 131
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count -= 1\n    \n    return count > n/2 and arr[0] == x or count > n/2 and arr[n-1] == x",
        "num_ids": 147
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # initialize the count variable to zero\n    count = 0\n    \n    # iterate through the array\n    for i in range(n):\n        # if the current element is equal to the given element, increment the count\n        if arr[i] == x:\n            count += 1\n    \n    # if the count is greater than or equal to n/2, return True\n    if count >= n // 2:\n        return True\n    else:\n        return False",
        "num_ids": 159
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[0] == x:\n        return True\n    if arr[n-1] == x:\n        return True\n    if arr[n//2] == x:\n        return True\n    return False",
        "num_ids": 135
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Traverse through the sorted array\n    for i in range(n):\n        # If the current element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n\n            # If count becomes greater than or equal to n/2, return True\n            if count >= n // 2:\n                return True\n\n    # If no majority element is found, return False\n    return False",
        "num_ids": 164
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    # Count the number of occurrences of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    # If count is greater than n/2, the element is a majority\n    return count > n//2",
        "num_ids": 75
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    if x < arr[0] or x > arr[n-1]:\n        return False\n\n    # Count the frequency of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # If the count is greater than n/2, then x is the majority element\n    if count > n//2:\n        return True\n    else:\n        return False",
        "num_ids": 159
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1 \n        n >>= 1\n    return count \n",
        "num_ids": 65
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += 1\n        n &= (n-1)\n    return count",
        "num_ids": 36
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result",
        "num_ids": 67
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 62
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Remove characters with odd index values from a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 66
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 67
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "num_ids": 60
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and removes the characters which have odd index values.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 66
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three arguments and returns the minimum of them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 63
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 60
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)",
        "num_ids": 39
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)",
        "num_ids": 39
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n    \"\"\"\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num",
        "num_ids": 65
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 60
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three arguments and returns the minimum value among them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 64
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    This function returns True if all the bits are set in the given range [l,r] and False otherwise.\n    n: An integer which represents the number whose bits are to be checked.\n    l: An integer which represents the left endpoint of the range.\n    r: An integer which represents the right endpoint of the range.\n    \"\"\"\n\n    # Check if the number is negative or not\n    if n < 0:\n        n = n & 0xFFFFFFFFFFFFFFFF # Converting negative number to its 64 bit unsigned binary representation\n\n    # Get the bits of n in the given range [l,r]\n    bits = bin(n)[2:] # Converting n to its binary representation without the prefix '0b'\n    bits = bits[l:r+1]\n\n    # Check if all the bits are set or not\n    if '0' in bits:\n        return False\n    else:\n        return True",
        "num_ids": 213
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    # Convert l and r to binary strings\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n    # If the binary strings have different lengths, add leading zeros to make them the same length\n    if len(binary_l)!= len(binary_r):\n        binary_l = binary_l.zfill(len(binary_r))\n    # If the binary strings are different in length, we know that they have different numbers of bits set\n    if len(binary_l)!= len(bin(n-1)[2:]):\n        return False\n    # Loop through each bit position and check if all bits in the range are set\n    for i in range(len(binary_l)):\n        if binary_l[i] == '0' or binary_r[i] == '0':\n            return False\n    return True",
        "num_ids": 229
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function will check whether all the bits are unset in the given range or not.\n    Input:\n    n: An integer which represents the binary number.\n    l: An integer which represents the left endpoint of the range.\n    r: An integer which represents the right endpoint of the range.\n    Output:\n    A boolean value which represents whether all the bits are unset in the given range or not.\n    '''\n    # convert the given binary number to binary string\n    bin_str = bin(n)[2:]\n    # initialize a variable to store the number of bits set in the given range\n    count = 0\n    # iterate over the binary string from left to right\n    for i in range(l-1, r):\n        # if the ith bit is set, increment the count variable\n        if bin_str[i] == '1':\n            count += 1\n    # if the count variable is equal to the number of bits in the given range, then all the bits are unset in the given range\n    if count == r-l+1:\n        return True\n    else:\n        return False",
        "num_ids": 251
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    Input: n (integer), l (integer), r (integer)\n    Output: Boolean value True or False.\n    '''\n    # To check whether all the bits are set or not, we need to check if the difference between the maximum and minimum value is equal to the range itself.\n    if (1 << r) - (1 << l) == (1 << r) - 1:\n        return True\n    else:\n        return False",
        "num_ids": 132
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l < 0 or l > r or r > 31):\n        return False\n    else:\n        mask = ((1<<r) - 1) << l\n        return (n & mask) == 0",
        "num_ids": 94
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are set in the given range or not.\n    \"\"\"\n    # convert input to binary string\n    binary_string = bin(n)[2:]\n\n    # check if all bits are set in the given range\n    for i in range(l, r+1):\n        if binary_string[i]!= '1':\n            return False\n    \n    # if all bits are set, return True\n    return True",
        "num_ids": 116
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the given range to binary and store it in a string\n    binary = bin(n)[2:]\n    # Get the binary representation of the range\n    range_binary = bin(n & ((1 << r+1) - 1))[2:]\n    # Check if all the bits in the range are set or not\n    if range_binary[l:r+1] == '0'*len(range_binary[l:r+1]):\n        return True\n    else:\n        return False",
        "num_ids": 127
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << r) - 1) ^ ((1 << l) - 1)  # bit mask to unset bits from l to r\n    return n & mask == mask  # check if all bits are unset in the range",
        "num_ids": 73
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if ((i & n)!= 0):\n            return False\n    return True",
        "num_ids": 74
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three parameters n, l, r and returns True if all the bits are unset in the range [l, r]\n    '''\n    # Initialize all the bits as set\n    all_set = (1 << n) - 1\n\n    # Remove the bits in the range [l, r]\n    for i in range(l, r+1):\n        all_set &= ~(1 << (i-1))\n\n    # Check if all the bits are unset in the range [l, r]\n    if all_set == 0:\n        return True\n    else:\n        return False",
        "num_ids": 148
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # Step 1: Split the array into negative and positive sub-arrays\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    \n    # Step 2: Sort the negative sub-array in ascending order\n    neg_arr.sort()\n    \n    # Step 3: Concatenate the negative and positive sub-arrays\n    arr = neg_arr + pos_arr\n    \n    return arr",
        "num_ids": 133
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to keep track of negative and positive elements\n    negatives = []\n    positives = []\n    \n    # Iterate through the array and separate negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Sort the negative and positive elements separately\n    negatives.sort(reverse=True)\n    positives.sort()\n    \n    # Re-arrange the original array by combining negative and positive elements\n    for i in range(n):\n        if i < len(negatives):\n            arr[i] = negatives[i]\n        else:\n            arr[i] = positives[i-len(negatives)]\n    \n    return arr",
        "num_ids": 228
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    neg.sort()\n    pos.sort()\n    result = []\n    for i in range(n):\n        if i < len(neg):\n            result.append(neg[i])\n        if i < len(pos):\n            result.append(pos[i])\n    return result",
        "num_ids": 172
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, \n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists to store negative and positive elements separately\n    neg_arr = []\n    pos_arr = []\n    \n    # Separate negative and positive elements into two lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    \n    # Sort the negative and positive lists in descending and ascending order respectively\n    neg_arr.sort(reverse=True)\n    pos_arr.sort()\n    \n    # Merge the negative and positive lists in the original array\n    i = j = 0\n    for k in range(n):\n        if i < len(neg_arr) and j < len(pos_arr):\n            if neg_arr[i] > pos_arr[j]:\n                arr[k] = neg_arr[i]\n                i += 1\n            else:\n                arr[k] = pos_arr[j]\n                j += 1\n        elif i < len(neg_arr):\n            arr[k] = neg_arr[i]\n            i += 1\n        else:\n            arr[k] = pos_arr[j]\n            j += 1\n    \n    return arr",
        "num_ids": 312
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n\n    # Separate negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    # Re-arrange the array\n    arr = negatives + positives\n\n    return arr",
        "num_ids": 89
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize two pointers, one for negative elements and one for positive elements\n    i = 0\n    j = n - 1\n\n    # Traverse the array from both ends\n    while i < j:\n        # If the current element is negative, swap it with the element pointed by i\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        else:\n            i += 1\n\n    return arr",
        "num_ids": 131
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negatives = []\n    positives = []\n    zeros = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        elif arr[i] > 0:\n            positives.append(arr[i])\n        else:\n            zeros.append(arr[i])\n    arr = negatives + positives + zeros\n    return arr",
        "num_ids": 151
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two empty lists for negative and positive elements\n    negatives = []\n    positives = []\n\n    # iterate through the given array and separate negative and positive elements into respective lists\n    for i in arr:\n        if i < 0:\n            negatives.append(i)\n        else:\n            positives.append(i)\n\n    # sort the negative and positive lists in descending and ascending order respectively\n    negatives.sort(reverse=True)\n    positives.sort()\n\n    # combine the sorted negative and positive lists to form the final sorted array\n    sorted_arr = negatives + positives\n\n    # return the first n elements of the sorted array\n    return sorted_arr[:n]",
        "num_ids": 207
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # get indices of negative and positive elements\n    neg_indices = [i for i in range(n) if arr[i] < 0]\n    pos_indices = [i for i in range(n) if arr[i] >= 0]\n    \n    # sort negative and positive elements separately\n    neg_arr = sorted([arr[i] for i in neg_indices])\n    pos_arr = sorted([arr[i] for i in pos_indices])\n    \n    # combine negative and positive elements in the original order\n    result = [0] * n\n    for i in range(n):\n        if i < len(neg_indices):\n            result[i] = neg_arr[i]\n        else:\n            result[i] = pos_arr[i - len(neg_indices)]\n    \n    return result",
        "num_ids": 184
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create two empty lists to store positive and negative elements\n    pos_list = []\n    neg_list = []\n    \n    # Separate positive and negative elements into separate lists\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_list.append(arr[i])\n        else:\n            neg_list.append(arr[i])\n    \n    # Re-arrange the array by appending negative elements followed by positive elements\n    for i in range(n//2):\n        arr[i] = neg_list[i]\n        arr[n-i-1] = pos_list[n-i-1]\n    \n    return arr",
        "num_ids": 203
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in the given string with the given character.\n    '''\n    return str1.replace(\" \", char)",
        "num_ids": 40
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a specified character.\n\n    Parameters:\n    str1 (str): The string to be modified.\n    char (str): The character to replace blank spaces.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n    return str1.replace(' ', char)",
        "num_ids": 74
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in the string with the given character.\n\n    Args:\n        str1 (str): The input string.\n        char (str): The character to use for replacement.\n\n    Returns:\n        str: The string with blank spaces replaced with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 79
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 50
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function replaces blank spaces in a given string with the given character and returns the modified string.\n    '''\n    return str1.replace(\" \",\"\")",
        "num_ids": 44
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a string with the given character and returns the modified string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 44
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the given string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 40
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function replaces blank spaces in a string with a given character and returns the modified string.\n    '''\n    return str1.replace(\" \",char)",
        "num_ids": 44
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for i in range(n)]",
        "num_ids": 76
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes a list and an integer n as input and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap[::-1] # reversing the list to get the largest elements first",
        "num_ids": 107
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]  # create a heap with the first n items\n    heapq.heapify(heap)  # convert the list to a heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:  # if the current item is larger than the smallest item in the heap\n            heapq.heappushpop(heap, list1[i])  # remove the smallest item and add the current item\n    return list(reversed(heap))  # return the heap in reverse order",
        "num_ids": 164
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 96
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "num_ids": 93
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap",
        "num_ids": 118
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n] # Create a heap of the first n elements of the list\n    heapq.heapify(heap) # Convert the heap into a max-heap\n\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]: # If the current element is larger than the root of the heap\n            heapq.heappushpop(heap, list1[i]) # Replace the root with the current element and re-heapify\n\n    return sorted(heap, reverse=True) # Return the n largest elements from the heap in descending order",
        "num_ids": 173
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for num in list1[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return heap",
        "num_ids": 97
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result",
        "num_ids": 96
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "num_ids": 91
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    Find the lateral surface area of a cylinder.\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    Returns:\n    float: The lateral surface area of the cylinder.\n    '''\n    # Calculate the lateral surface area using the formula\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface",
        "num_ids": 118
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*math.pi*r*h + 2*math.pi*r**2\n    return lateral_surface_area",
        "num_ids": 75
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Parameters:\n    r - radius of the cylinder\n    h - height of the cylinder\n    \n    Returns:\n    lateral surface area of the cylinder\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area",
        "num_ids": 89
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Input: \n    - r (float): radius of the cylinder\n    - h (float): height of the cylinder\n    \n    Output:\n    - lateralsurface (float): lateral surface area of the cylinder\n    '''\n    \n    lateralsurface = 2*math.pi*r*h + 2*math.pi*r**2\n    \n    return lateralsurface",
        "num_ids": 110
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*3.14*r*h + 2*3.14*r**2\n    return lateralsurface",
        "num_ids": 67
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder\n    and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area",
        "num_ids": 68
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the lateral surface area.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area",
        "num_ids": 63
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    # Calculate the lateral surface area of the cylinder\n    lateral_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return lateral_area",
        "num_ids": 124
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface_area",
        "num_ids": 84
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface",
        "num_ids": 69
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 38
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 38
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0b1110111011101110  # pattern of bits with even positions\n    return (n & mask) ^ mask  # set even bits to 1 and leave odd bits as they are",
        "num_ids": 85
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    This function takes an integer as input and sets all even bits to 1.\n    \"\"\"\n    even_bits = bin(n & 0xAAAAAAAA)  # get even bits of n using bitwise AND operator with 0xAAAAAAAA\n    return int(even_bits.replace('0b', ''), 2) | n  # set even bits to 1 and return the updated number",
        "num_ids": 96
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes an integer as input and sets all even bits of the number.\n    '''\n    # Find the bitwise AND operation between the given number and 0b11011 (binary representation of 13).\n    # This operation will set all even bits of the number to 1.\n    return n & 0b11011",
        "num_ids": 90
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for i in range(32):\n        if n & (1 << i):\n            result |= (1 << i)\n    return result",
        "num_ids": 65
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes an integer as input and sets all even bits to 1.\n    '''\n    return n | (n >> 1)\n    \n",
        "num_ids": 44
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Using bitwise OR to set all even bits of a number\n    return n | (n >> 1)",
        "num_ids": 55
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n    \"\"\"\n    # Create a mask to select even bits\n    mask = 0b11101110111011101110111011101110\n    \n    # Clear all even bits\n    n &= ~mask\n    \n    # Set all even bits\n    n |= ((n >> 1) & mask) | ((n >> 2) & mask) | ((n >> 3) & mask)\n    \n    return n",
        "num_ids": 125
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and returns a number with all even bits set.\n    '''\n    # Iterate over each bit of the number and check if it is even or not.\n    # If it is even, set the corresponding bit in the result number.\n    result = 0\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            # This bit is not even, so skip it.\n            continue\n        # This bit is even, so set the corresponding bit in the result number.\n        result |= (1 << i)\n    return result",
        "num_ids": 138
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    This function sets all even bits of a given number.\n    \"\"\"\n    # Create a bit mask with only even bits set to 1\n    even_mask = 0b11001100110011001100110011001100\n    \n    # Clear all even bits in the number using bitwise AND operation\n    n = n & ~even_mask\n    \n    # Set all even bits in the cleared number using bitwise OR operation\n    n = n | even_mask\n    \n    return n",
        "num_ids": 131
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # iterate through all even bits of the number\n    for i in range(0, 32, 2): \n        # check if the bit is set\n        if (n & (1 << i)): \n            # set the corresponding bit in the result\n            result |= (1 << i)\n            \n    # return the result\n    return result",
        "num_ids": 113
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    return dict(Counter(test_list))",
        "num_ids": 62
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count",
        "num_ids": 64
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object from the list of tuples\n    counter = Counter(test_list)\n    \n    # convert the Counter object to a dictionary and return it\n    return dict(counter)",
        "num_ids": 90
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)",
        "num_ids": 67
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))",
        "num_ids": 62
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    for tup in test_list:\n        if tup not in result_dict:\n            result_dict[tup] = 1\n        else:\n            result_dict[tup] += 1\n    return result_dict",
        "num_ids": 101
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if len(s[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as an input and returns the number of non-empty substrings of that string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= \"\":\n                count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]!= \"\":\n                count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    if n == 1:\n        return m\n    else:\n        total_count = 0\n        for i in range(1,m+1):\n            total_count += get_total_number_of_sequences(m,n-1)\n            if i > 1:\n                total_count -= get_total_number_of_sequences(m-i,n-1)\n        return total_count",
        "num_ids": 104
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of sequences of length n, such that each element is a positive integer and is\n    greater than or equal to twice the previous element but less than or equal to m.\n\n    Args:\n        m (int): The upper limit of the sequence.\n        n (int): The length of each sequence.\n\n    Returns:\n        int: The total number of possible sequences.\n    \"\"\"\n\n    if n == 1:\n        return m\n\n    count = 0\n    prev_max = m\n    prev_min = m // 2\n    for i in range(2, n + 1):\n        curr_max = prev_max // 2 + 1\n        curr_min = prev_min // 2 + 1\n        count += curr_max - curr_min + 1\n        prev_max, prev_min = curr_max, curr_min\n\n    return count\n",
        "num_ids": 202
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        # Recursive step: divide the problem into smaller subproblems\n        subproblems = []\n        for i in range(1, m+1):\n            if i >= 2*subproblems[-1]:\n                subproblems.append(i)\n        # Solve the subproblems recursively\n        subproblem_solutions = [get_total_number_of_sequences(subproblem, n-1) for subproblem in subproblems]\n        # Combine the subproblem solutions to get the final solution\n        total_solution = 0\n        for i in range(len(subproblems)):\n            for j in range(subproblems[i]):\n                total_solution += subproblem_solutions[i]\n        return total_solution",
        "num_ids": 228
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n\n    count = 0\n    prev = 1\n\n    for i in range(n):\n        count += (m - prev + 1)\n        prev = prev * 2\n\n    return count",
        "num_ids": 120
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the number of possible sequences for each value of i\n    num_sequences = [0] * (m + 1)\n    \n    # The first element can be any value, so we have one sequence of length 1\n    num_sequences[1] = 1\n    \n    # For each element i from 2 to m, we can either take the previous element i-1 or we can use the previous element i-2 as a starting point, so we need to add both cases to the total number of sequences\n    for i in range(2, m+1):\n        num_sequences[i] = num_sequences[i-1] + num_sequences[i-2]\n        \n        # If the previous element i-2 is greater than or equal to twice the previous element i-1 but less than or equal to m, we can also add one more sequence starting with i-2\n        if i-2 >= 2*num_sequences[i-1] and i-2 <= m:\n            num_sequences[i] += num_sequences[i-2]\n            \n    return num_sequences[m]",
        "num_ids": 254
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of sequences of length n, such that each element is a positive integer\n    and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    sequence = [1]\n\n    # Loop through each possible length of the sequence\n    for i in range(1, n):\n        # Initialize a new sequence with the same length as the previous sequence\n        new_sequence = []\n        # Loop through each element in the previous sequence\n        for j in range(len(sequence)):\n            # Loop through each possible value for the current element\n            for k in range(sequence[j], m):\n                # Check if the value is valid (greater than or equal to twice the previous element)\n                if k >= 2 * sequence[j - 1]:\n                    # Add the value to the new sequence and increment the count\n                    new_sequence.append(k)\n                    count += 1\n                    # If the new sequence is the desired length, return the count\n                    if len(new_sequence) == n:\n                        return count\n        # Update the sequence with the new sequence\n        sequence = new_sequence\n    # If no sequence was found, return 0\n    return 0",
        "num_ids": 275
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    if n == 1:\n        for i in range(1, m+1):\n            if i >= 2*1 and i <= m:\n                count += 1\n    else:\n        for i in range(1, m+1):\n            if i >= 2*(n-1) and i <= m:\n                count += get_total_number_of_sequences(i, n-1)\n    return count",
        "num_ids": 111
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    count = 0\n    prev_num = 0\n    \n    # Loop through all possible combinations of n numbers\n    for i in range(m**n):\n        # Get the i-th combination of n numbers\n        combo = bin(i)[2:].zfill(n)\n        \n        # Check if the combination is valid\n        valid = True\n        for num in combo:\n            if int(num) > prev_num*2 or int(num) > m:\n                valid = False\n                break\n        \n        # If the combination is valid, increment the count\n        if valid:\n            count += 1\n            prev_num = max(prev_num, int(combo[-1]))\n    \n    # Return the total number of valid sequences\n    return count",
        "num_ids": 171
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element \n    but less than or equal to m.\n    \"\"\"\n    # initialize variables\n    total_count = 0\n    count = 1\n    current_sum = 0\n    \n    # loop through each number from 1 to m\n    for i in range(1, m+1):\n        current_sum += i\n        \n        # if the current sum is greater than or equal to 2 times the previous sum and less than or equal to m\n        if current_sum >= 2*i and current_sum <= m:\n            count += 1\n            \n            # if the length of the current sequence is equal to n, add 1 to the total count\n            if count == n:\n                total_count += 1\n                count = 1\n                current_sum = 0\n                \n    # return the total number of sequences\n    return total_count",
        "num_ids": 231
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        prev_num = 2\n        total_num = 0\n        for i in range(n-1):\n            current_num = prev_num + 2\n            total_num += current_num\n            prev_num = current_num\n        return total_num",
        "num_ids": 137
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2",
        "num_ids": 40
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    else:\n        list1[-1] = list2\n        return list1",
        "num_ids": 70
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check that both lists have at least one element\n    if len(list1) == 0 or len(list2) == 0:\n        raise ValueError('Both lists must have at least one element')\n\n    # remove the last element from list1\n    list1 = list1[:-1]\n\n    # add the elements of list2 to the end of list1\n    list1.extend(list2)\n\n    # return the modified list1\n    return list1",
        "num_ids": 138
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 44
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2",
        "num_ids": 49
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)",
        "num_ids": 36
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 47
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    return len(str1)",
        "num_ids": 34
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an argument and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)",
        "num_ids": 36
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    root = math.ceil(root) # rounding up the root to the nearest integer\n    return root**2\n    \nprint(next_Perfect_Square(12)) # Output: 16\nprint(next_Perfect_Square(25)) # Output: 26\nprint(next_Perfect_Square(26)) # Output: 26 (since 26 is already a perfect square)",
        "num_ids": 137
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N) == int(math.sqrt(N)):\n        # If the square root of N is an integer, then N itself is a perfect square\n        return N + 1\n    else:\n        # Otherwise, find the next perfect square by adding 1 to the nearest integer square root\n        return int(math.sqrt(N))**2 + 1",
        "num_ids": 115
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))**2",
        "num_ids": 50
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N))**2 == N:\n        return (int(math.sqrt(N)) + 1)**2\n    else:\n        return (int(math.sqrt(N)) + 1)**2",
        "num_ids": 86
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    if sqrt_N == int(sqrt_N):\n        return int(sqrt_N + 1) ** 2\n    else:\n        return int(math.ceil(sqrt_N + 1)) ** 2",
        "num_ids": 94
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    next_square = math.ceil(math.sqrt(N))**2\n    return next_square",
        "num_ids": 58
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a positive integer N as input and returns the next perfect square greater than N.\n    '''\n    if N <= 0:\n        print(\"Input must be a positive integer.\")\n        return None\n    \n    # Find the square root of N\n    root = math.sqrt(N)\n    \n    # Round up the square root to the nearest integer\n    rounded_root = math.ceil(root)\n    \n    # Find the next perfect square\n    next_square = rounded_root**2\n    \n    return next_square",
        "num_ids": 120
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    root = math.floor(math.sqrt(N)) # Finding the floor of square root of N\n    i = root + 1 # Initializing i to root+1\n    while True:\n        if i*i > N: # If i^2 is greater than N, then i^2 is the next perfect square greater than N\n            return i*i\n        i += 1 # If i^2 is not greater than N, then increment i and repeat the process",
        "num_ids": 115
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if root * root == N:\n        return N + 1\n    else:\n        return (root+1)**2",
        "num_ids": 72
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = int(math.sqrt(N)) # find the square root of the given number and convert it to an integer\n    while True: # repeat until a perfect square greater than N is found\n        sq += 1\n        if int(math.pow(sq, 2)) > N: # check if the square of the new square root is greater than N\n            return int(math.pow(sq, 2)) # return the square of the new square root",
        "num_ids": 134
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_ending_here = 0\n    max_so_far = 0\n    \n    for i in range(n):\n        max_ending_here += arr[i]\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far",
        "num_ids": 105
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n\n    # Initialize the diagonal elements\n    for i in range(n):\n        dp[0][i] = arr[i]\n        dp[1][i] = arr[i]\n\n    # Fill the rest of the matrix using dynamic programming approach\n    for i in range(2, n):\n        for j in range(n):\n            dp[i % 2][j] = max(dp[(i-1) % 2][j-1], dp[(i-1) % 2][j]) + arr[j]\n\n    # Return the maximum sum of a bitonic subsequence\n    return max(dp[0][-1], dp[1][-1])",
        "num_ids": 220
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if l == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + arr[i]\n    return dp[0][n-1]",
        "num_ids": 152
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = 0\n    dp = [[0]*n for i in range(n)]\n\n    # Build up the bottom-up dp table\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = arr[i]\n            elif j == i+1:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + arr[i]\n            max_sum = max(max_sum, dp[i][j])\n    \n    return max_sum",
        "num_ids": 164
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[n-1]",
        "num_ids": 136
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0]*n for i in range(n)] # initializing dp array\n    \n    for i in range(n):\n        dp[i][i] = arr[i] # for a single element array, max sum is the element itself\n        \n    for i in range(1, n):\n        for j in range(n-i):\n            k = j + i\n            dp[j][k] = max(dp[j+1][k], dp[j][k-1]) + arr[k] # finding maximum sum for the bitonic subsequence\n            \n    return dp[0][n-1] # returning maximum sum for the entire array",
        "num_ids": 151
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize the matrix to store the maximum sum of bitonic subsequence ending at each index.\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    # Initialize the diagonal elements of the matrix with the values of the given array.\n    for i in range(n):\n        dp[i][i] = arr[i]\n    # Compute the maximum sum of bitonic subsequence ending at each index.\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if length == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + arr[j]\n    # Return the maximum sum of bitonic subsequence.\n    return dp[0][n-1]",
        "num_ids": 263
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for s in range(1, n):\n        for i in range(n-s):\n            j = i + s\n            if s == 1:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + arr[i]\n    return dp[0][n-1]",
        "num_ids": 144
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    n = len(arr)\n    # initialize variables\n    prev = 0\n    curr = arr[0]\n    max_sum = 0\n    \n    # loop through array\n    for i in range(1, n):\n        temp = curr\n        curr = max(prev + arr[i], arr[i])\n        prev = temp\n        max_sum = max(max_sum, curr)\n    \n    return max_sum",
        "num_ids": 94
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a bitonic subsequence for the given array.\n    A bitonic subsequence is a subsequence that is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for _ in range(2)]  # two rows, one for increasing and one for decreasing\n\n    # initialize base cases\n    for i in range(n):\n        dp[0][i] = arr[i]\n        dp[1][i] = arr[i]\n\n    # fill the rest of the table\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[0][i] = max(dp[0][i], dp[0][j] + arr[i])\n                dp[1][i] = max(dp[1][i], dp[1][j] + arr[i])\n\n    # return the maximum sum\n    return max(dp[0][n-1], dp[1][n-1])",
        "num_ids": 236
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the Babylonian method.\n\n    Parameters:\n    number (float): A positive number for which the square root is to be computed.\n\n    Returns:\n    float: The square root of the number computed using the Babylonian method.\n    \"\"\"\n\n    # Initializing a variable to store the estimate of the square root\n    estimate = number\n\n    # Looping until the difference between the estimate and the actual square root is less than 0.00001\n    while abs(estimate**2 - number) >= 0.00001:\n        # Updating the estimate using the formula: estimate = (estimate + number/estimate) / 2\n        estimate = (estimate + number/estimate) / 2\n\n    # Returning the estimate\n    return estimate",
        "num_ids": 182
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number, precision=10):\n    '''\n    Computes the square root of a number using the Babylonian method.\n\n    Parameters:\n    - number: the number whose square root is to be computed\n    - precision: the desired precision of the result\n\n    Returns:\n    - the square root of the number with the specified precision\n    '''\n\n    # initialize the variables\n    guess = number / 2.0\n    diff = 1.0\n\n    # loop until the difference between the guess and the actual square root is less than the desired precision\n    while abs(diff) > precision:\n        # update the guess\n        new_guess = (guess + (number / guess)) / 2.0\n        diff = new_guess - guess\n        guess = new_guess\n\n    return guess",
        "num_ids": 169
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes the square root of a number using the Babylonian method.\n    \"\"\"\n    # Initialize the guess variable to the square root of the number\n    guess = number ** 0.5\n    # Initialize the epsilon variable to a very small value (e.g., 0.0001)\n    epsilon = 0.0001\n    # Keep looping until the difference between the guess and the number is smaller than epsilon\n    while abs(guess**2 - number) > epsilon:\n        # Update the guess using the Babylonian formula\n        guess = (guess + number/guess) / 2\n    # Return the computed square root\n    return guess",
        "num_ids": 156
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number, precision=0.00001):\n    '''\n    Computes the square root of a number using the Babylonian method.\n\n    Args:\n    - number (float): the number to find the square root of\n    - precision (float): the desired precision of the result\n\n    Returns:\n    - float: the square root of the number\n    '''\n    # Initialize the initial guess for the square root as the number itself\n    guess = number\n\n    # Iterate until the difference between the guess and the number is smaller than the desired precision\n    while abs(guess*guess - number) > precision:\n        # Update the guess using the average of the guess and the number divided by the guess\n        guess = (guess + number / guess) / 2\n\n    return guess",
        "num_ids": 168
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # start with a guess of half the number\n    while True:\n        # use the babylonian method to improve the guess\n        new_guess = (guess + number / guess) / 2\n        # check if the new guess is closer to the actual square root\n        if abs(new_guess**2 - number) < 1e-6:\n            return new_guess\n        # continue the loop with the new guess\n        guess = new_guess",
        "num_ids": 135
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    approx_sqrt = number / 2\n    while abs(approx_sqrt ** 2 - number) > 0.001:\n        approx_sqrt = (approx_sqrt + number / approx_sqrt) / 2\n    return approx_sqrt",
        "num_ids": 87
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Set the initial guess for the square root as the number itself\n    guess = number\n    # Loop until the guess is accurate to within 0.0001 of the actual square root\n    while abs(guess*guess - number) > 0.0001:\n        # Update the guess using the babylonian method\n        guess = (guess + number/guess) / 2\n    return guess",
        "num_ids": 120
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    y = (x + number / x) / 2\n    while abs(x - y) > 0.000001:\n        x = y\n        y = (x + number / x) / 2\n    return y",
        "num_ids": 92
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    precision = 0.000001\n    guess = number / 2\n    while abs(guess ** 2 - number) > precision:\n        guess = (guess + number / guess) / 2\n    return guess",
        "num_ids": 82
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize a starting guess for the square root\n    guess = number / 2.0\n\n    # iterate until the difference between the guess squared and the number is small enough\n    while abs(guess**2 - number) > 0.0001:\n        # use the babylonian method to improve the guess\n        guess = (guess + number / guess) / 2.0\n\n    # return the computed square root\n    return guess",
        "num_ids": 125
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store lengths of longest palindromes \n    # This table is used to build the solution in bottom-up manner. \n    lps = [1]*n \n  \n    # (1) Find the longest palindromic subsequence in the given string. \n    for i in range(1, n): \n        # (2) Check if the current character and the previous character form a palindrome \n        if str[i] == str[i-1]: \n            lps[i] = lps[i-1] + 2\n        # (3) If the characters don't form a palindrome, check the longest palindromic subsequence ending at the previous character \n        else: \n            lps[i] = max(lps[i], lps[i-1]) \n  \n    # Return the length of the longest palindromic subsequence. \n    return lps[n-1] ",
        "num_ids": 209
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    maxLength = 1\n    for k in range(2, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                maxLength = max(maxLength, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return maxLength",
        "num_ids": 200
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store length of LPS. \n    # Note that table[i][j] stores length of LPS of substring str[i...j] \n    table = [[0 for x in range(n)] for y in range(n)] \n    # All substrings of length 1 are palindrome of length 1. \n    for i in range(n): \n        table[i][i] = 1\n    # Check for substrings of length 2. \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            table[i][i+1] = 2\n        else: \n            table[i][i+1] = 1\n    # Check for substrings of length greater than 2. \n    for k in range(2, n): \n        for i in range(n-k): \n            j = i+k \n            if str[i] == str[j] and k == 2: \n                table[i][j] = 2\n            elif str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n            else: \n                table[i][j] = max(table[i][j-1], table[i+1][j]) \n    return table[0][n-1] ",
        "num_ids": 305
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for y in range(n)] \n  \n    # Strings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            L[i][i+1] = 2\n        else: \n            L[i][i+1] = 1\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 3: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    # L[i][j] contains length of LPS of str[i..j] \n    return L[0][n-1] \n  \n  \n",
        "num_ids": 304
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    \n    # Check for substrings of length greater than 2\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n    \n    # Find the maximum value in the dp table\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] > max_len:\n                max_len = dp[i][j]\n    \n    return max_len",
        "num_ids": 270
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]",
        "num_ids": 208
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n\n    # all substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]",
        "num_ids": 261
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D array to store length of LPS up to that point\n    L = [[0 for x in range(n)] for y in range(n)]\n    # all substrings of length 1 are palindromes\n    for i in range(n):\n        L[i][i] = 1\n    # check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            L[i][i+1] = 2\n        else:\n            L[i][i+1] = 1\n    # check for substrings of length greater than 2\n    for k in range(3,n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and k == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]",
        "num_ids": 284
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]",
        "num_ids": 270
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str): \n    n = len(str) \n    dp = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        dp[i][i] = 1\n  \n    # Check for substrings of length greater than 1. \n    # k is length of substring \n    for k in range(2, n + 1): \n        for i in range(n - k + 1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) \n  \n    return dp[0][n - 1] ",
        "num_ids": 225
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "num_ids": 68
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1.0 / i\n    return sum",
        "num_ids": 53
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "num_ids": 70
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "num_ids": 67
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n))",
        "num_ids": 48
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "num_ids": 69
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total",
        "num_ids": 51
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # create an empty list to store the intersection\n    intersection = []\n    # loop through the first array\n    for num in array_nums1:\n        # check if the current element is also in the second array\n        if num in array_nums2 and num not in intersection:\n            # if it is, add it to the intersection list\n            intersection.append(num)\n    # return the intersection list\n    return intersection",
        "num_ids": 118
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty list to store the intersection\n    intersection = []\n    \n    # Loop through the first array\n    for num in array_nums1:\n        # Check if the number is also in the second array\n        if num in array_nums2:\n            # If so, add it to the intersection list\n            intersection.append(num)\n    \n    return intersection",
        "num_ids": 104
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "num_ids": 69
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))",
        "num_ids": 66
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Returns the intersection of two arrays.\n\n    Args:\n    - array_nums1: a list of integers\n    - array_nums2: a list of integers\n\n    Returns:\n    - a list of integers containing the intersection of the two arrays\n    '''\n\n    # create a set from the first array\n    set1 = set(array_nums1)\n\n    # create a set from the second array\n    set2 = set(array_nums2)\n\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # convert the set back to a list and return it\n    return list(intersection)",
        "num_ids": 147
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # initialize an empty list to store the intersection of the two arrays\n    intersection = []\n\n    # iterate through each element in the first array\n    for num in array_nums1:\n        # check if the element is present in the second array and not already present in the intersection list\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection",
        "num_ids": 113
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays and returns the common elements in a list.\n    '''\n    intersection_list = []\n    for element in array_nums1:\n        if element in array_nums2 and element not in intersection_list:\n            intersection_list.append(element)\n    return intersection_list",
        "num_ids": 83
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "num_ids": 69
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the two arrays to sets to get the intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return intersection",
        "num_ids": 80
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays into sets to get the intersection\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)",
        "num_ids": 111
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes a tuple and an element as input and returns the count of the given element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, ele):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(ele)\n        new_lst.append(i)\n    return new_lst",
        "num_ids": 76
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n    return new_lst",
        "num_ids": 76
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Takes in a list and an element, and inserts the element before each element in the list.\n    Returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result",
        "num_ids": 67
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result",
        "num_ids": 75
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input and inserts the element before each element in the list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(elem)\n        new_lst.append(i)\n    return new_lst[::2]",
        "num_ids": 75
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    '''\n    Insert element before each element in the list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst",
        "num_ids": 65
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\n    Parameters:\n    lst (list): The list to be modified.\n    element (any): The element to be inserted.\n\n    Returns:\n    list: The modified list.\n    \"\"\"\n    new_list = []\n    for i in lst:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list[1:]",
        "num_ids": 114
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in a list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]  # remove the first added element",
        "num_ids": 68
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes a list and an element as input and inserts the element before each element in the list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result",
        "num_ids": 63
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert the given element before each element in the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]",
        "num_ids": 56
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        r = cmath.polar(number)[0]\n        theta = cmath.polar(number)[1]\n        print(\"The polar representation of {} is ({}, {})\".format(number, r, theta))",
        "num_ids": 79
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        polar_num = cmath.polar(num)\n        polar_numbers.append(polar_num)\n    return polar_numbers",
        "num_ids": 68
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    results = []\n    for z in numbers:\n        r, phi = cmath.polar(z)\n        results.append((r, phi))\n    return results",
        "num_ids": 57
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(f\"{num} = {polar}\")",
        "num_ids": 55
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        result.append((r, phi))\n    return result",
        "num_ids": 69
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"Polar coordinates of complex number\", num, \"are (r, theta) =\", polar)",
        "num_ids": 67
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # Calculate the polar coordinates of the complex number\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # Print the polar coordinates\n        print(\"Polar coordinates of {} are: r = {}, theta = {}\".format(num, r, theta))",
        "num_ids": 91
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        polar = cmath.polar(complex(number))\n        print(\"Polar coordinates of {} are: (r,phi) = {}\".format(number, polar))",
        "num_ids": 69
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)   # Calculate the magnitude (radius) of the complex number\n        theta = cmath.phase(num)   # Calculate the angle (phase) of the complex number in radians\n        print(f\"Polar coordinates of {num}: (r = {r}, theta = {theta})\")",
        "num_ids": 96
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(\"Polar coordinates of\", num, \"are\", cmath.polar(num))",
        "num_ids": 49
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 37
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 37
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count",
        "num_ids": 51
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 37
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integers in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "num_ids": 84
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [c for c in combinations_with_replacement(l, n)]",
        "num_ids": 80
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]",
        "num_ids": 81
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]",
        "num_ids": 84
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]",
        "num_ids": 81
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 137
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [True] * (n+1)\n    count = 0\n\n    for i in range(2, n+1):\n        if primes[i]:\n            count += 1\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    return count",
        "num_ids": 113
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        # prime numbers are greater than 1\n        if num > 1:\n            for i in range(2, num):\n                # if num is divisible by any number between 2 and num-1, it is not a prime number\n                if (num % i) == 0:\n                    break\n            else:\n                count += 1\n    return count",
        "num_ids": 130
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 144
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 106
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
        "num_ids": 96
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is prime, otherwise False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number as input and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 151
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 112
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                max_tup = test_tup1\n            else:\n                max_tup = test_tup2\n    else:\n        raise ValueError(\"The length of two tuples should be same\")\n    return max_tup",
        "num_ids": 128
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup2[i],)\n    return result_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0,) * len(test_tup1)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = (test_tup1[i],) + max_tup[1:]\n        elif test_tup2[i] > test_tup1[i]:\n            max_tup = (test_tup2[i],) + max_tup[1:]\n        else:\n            max_tup = (test_tup1[i],) + max_tup[1:]\n    return max_tup",
        "num_ids": 167
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if max(test_tup1) > max(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup",
        "num_ids": 82
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0,0)\n    for tup in [(test_tup1[0],test_tup2[0]), (test_tup1[1],test_tup2[1]), (test_tup1[0]+test_tup2[1],test_tup2[0]+test_tup1[1]), (test_tup1[1]+test_tup2[0],test_tup1[0]+test_tup2[1])]:\n        if max_tup[0] < tup[0]:\n            max_tup = tup\n    return max_tup",
        "num_ids": 160
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for tup in [test_tup1, test_tup2]:\n        if max(tup) > max(max_tup) or len(max_tup) == 0:\n            max_tup = tup\n    return max_tup",
        "num_ids": 89
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Find the nth newman-shanks-williams prime number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 3\n    else:\n        p = 3\n        k = 1\n        while k!= n:\n            p = 2*p - 1\n            if is_prime(p):\n                k += 1\n        return p\n\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "num_ids": 207
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    p = 2\n    i = 1\n    count = 0\n    \n    # Loop until we find the nth prime\n    while count < n:\n        # Check if the current number is prime\n        if is_prime(p):\n            # Increment the count and move on to the next number\n            count += 1\n        # Calculate the next number using the formula\n        p = (p**2 - 2*i*p + i**2) / (i + 1)\n        i += 1\n        \n    # Return the nth prime\n    return p",
        "num_ids": 217
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        p = [2, 3]\n        for i in range(2, n):\n            p.append(p[i-1] + p[i-2])\n        return p[n-1]",
        "num_ids": 103
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        p = 2\n        m = 2\n        while m <= n:\n            if is_prime(p):\n                p += 1\n            else:\n                m += 1\n                p = 2 * m - 1\n        return p\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True",
        "num_ids": 190
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    p = 2\n    count = 1\n    while count < n:\n        p += 1\n        if is_prime(p):\n            count += 1\n    return p",
        "num_ids": 100
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef nth_prime(n):\n    \"\"\"\n    Find the nth prime number using the newman-shanks-williams algorithm.\n    \"\"\"\n    if n <= 1:\n        return None\n    primes = [2]\n    count = 1\n    while count < n:\n        num = primes[-1]\n        is_new_prime = True\n        for i in range(3, num + 1, 2):\n            if is_prime(i) and is_prime(num - i):\n                primes.append(num - i)\n                is_new_prime = False\n                break\n        if is_new_prime:\n            primes.append(num + 2)\n        count = len(primes)\n    return primes[-1]",
        "num_ids": 228
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    num = 2\n    while count < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return num - 1",
        "num_ids": 115
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    \"\"\"\n    This function takes an integer 'n' as input and returns the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    num = 2\n    # Iterate until the nth prime number is found\n    while count < n:\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        # Move to the next number\n        num += 1\n    # Return the nth prime number\n    return num - 1",
        "num_ids": 147
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 17\n    elif n == 8:\n        return 19\n    elif n == 9:\n        return 23\n    elif n == 10:\n        return 29\n    else:\n        return \"Invalid input! Please enter a number between 1 and 10.\"",
        "num_ids": 171
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n    # Initialize variables\n    a = 2\n    b = 5\n    c = 1\n    d = 1\n    \n    # Find the nth newman-shanks-williams prime number\n    for i in range(n - 1):\n        p = a * b * c * d\n        a = b * d + a * c\n        b = a * c + b * d\n        c = a * d + b * c\n        d = a * c + b * d\n    \n    # Return the nth newman-shanks-williams prime number\n    return p",
        "num_ids": 153
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result",
        "num_ids": 82
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)",
        "num_ids": 85
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i]/test_tup2[i]),)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 86
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup",
        "num_ids": 87
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 86
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 92
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)",
        "num_ids": 104
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 71
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is greater than or equal to the length of the list\n    if L >= len(list1):\n        print(\"L cannot be greater than or equal to the length of the list.\")\n        return None\n\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the resulting lists in a tuple\n    return (part1, part2)",
        "num_ids": 147
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 73
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        print(\"Error: L is greater than the length of list1\")\n        return None\n    \n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)",
        "num_ids": 114
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is greater than the length of the list\n    if L > len(list1):\n        return \"Error: L should be less than or equal to the length of the list.\"\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)",
        "num_ids": 145
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return (list1[:L], list1[L:])",
        "num_ids": 71
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        print(\"Error: L is greater than the length of the list\")\n        return\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)",
        "num_ids": 117
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"Error: Length of list is less than L\")\n        return\n    \n    list1_part1 = list1[:L]\n    list1_part2 = list1[L:]\n    return (list1_part1, list1_part2)",
        "num_ids": 122
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"Error: Length of list is less than L.\"\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 99
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in human years\n    d_age = h_age * 7\n    \n    # Round the dog's age to the nearest integer\n    d_age = round(d_age)\n    \n    return d_age",
        "num_ids": 77
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    d_age = h_age * 7\n\n    # Return the dog's age in dog's years\n    return d_age",
        "num_ids": 66
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7",
        "num_ids": 37
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years",
        "num_ids": 41
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n",
        "num_ids": 46
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 68
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 34
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    start = 0\n    end = step\n    while end <= len(S):\n        result.append(S[start:end])\n        start += step\n        end += step\n    return result",
        "num_ids": 87
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list into chunks every `step` elements.\n\n    Args:\n        S (list): the list to be split\n        step (int): the step size for splitting\n\n    Returns:\n        list: a list of chunks of the original list\n    \"\"\"\n    chunks = []\n    i = 0\n    while i < len(S):\n        chunks.append(S[i:i+step])\n        i += step\n    return chunks",
        "num_ids": 100
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    count = 0\n    for i in range(len(S)):\n        result.append(S[i])\n        count += 1\n        if count == step:\n            count = 0\n            result = [result]\n    return result",
        "num_ids": 97
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    return [S[i::step] for i in range(step)]",
        "num_ids": 61
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Split a list S into sublists of size step.\n    '''\n    n = len(S)\n    return [S[i:i+step] for i in range(0, n, step)]",
        "num_ids": 55
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Splitting the list into n-sized chunks\n    result = [S[i:i+step] for i in range(0, len(S), step)]\n    return result",
        "num_ids": 81
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface",
        "num_ids": 54
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Returns the lateral surface area of a cube with side length l.\n    '''\n    return 6 * (l ** 2)",
        "num_ids": 40
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n\nprint(lateralsurface_cube(5))",
        "num_ids": 53
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)",
        "num_ids": 44
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Returns the lateral surface area of a cube of side length l.\n    '''\n    return 6 * l**2",
        "num_ids": 37
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers and add their squares to the sum\n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n        \n    # Return the sum of squares\n    return sum_of_squares",
        "num_ids": 107
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop over the first n odd numbers\n    for i in range(1, n*2, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n        \n    # Return the sum of the squares of the first n odd numbers\n    return sum",
        "num_ids": 107
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "num_ids": 77
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n * 2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 68
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 2\n        count += 2\n    return sum\n\nprint(square_Sum(5)) # Output: 55",
        "num_ids": 82
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum of squares to zero\n    sum_of_squares = 0\n    \n    # loop through first n odd numbers\n    for i in range(1, 2*n+1, 2):\n        # add square of current odd number to sum_of_squares\n        sum_of_squares += i**2\n    \n    # return sum of squares\n    return sum_of_squares",
        "num_ids": 115
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    \n    for i in range(1, 2*n, 2):\n        sum_squares += i**2\n        \n    return sum_squares",
        "num_ids": 74
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, (n*2)+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    count = 0\n    \n    while count < n:\n        print(num, end=' ')\n        num = num * 2 + 1\n        count += 1",
        "num_ids": 65
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * find_star_num(n-1) + n - 1",
        "num_ids": 60
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    while True:\n        product = 1\n        for i in range(1, count + 1):\n            product *= i\n        if product == n:\n            return count\n        count += 1",
        "num_ids": 71
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize variables\n    i = 1\n    count = 0\n    # Loop through the numbers until we find then'th star number\n    while count < n:\n        i += 1\n        count += sum(1 for j in range(1, i) if i % j == 0)\n    # Return then'th star number\n    return i",
        "num_ids": 99
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1  # start with 1 as first star number\n    for i in range(n):\n        count *= 2  # double the count for each new star number\n    return count",
        "num_ids": 67
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variables\n    count = 0\n    result = 0\n\n    # Loop until then'th star number is found\n    while count < n:\n        # Add the previous result to the count\n        count += result\n        # Add 1 to the result\n        result += 1\n\n    return count",
        "num_ids": 87
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    return ((2*n)+1)**2",
        "num_ids": 36
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += i\n    return count",
        "num_ids": 50
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    star_num = 1\n    \n    while count < n:\n        star_num += 2\n        count += 1\n        \n    return star_num",
        "num_ids": 61
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth star number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        return 2**n - 1",
        "num_ids": 55
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "num_ids": 32
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ascii value.\n    '''\n    return ord(k)",
        "num_ids": 32
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character k as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "num_ids": 33
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 92
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through the list and add even numbers at even positions to the sum variable\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    \n    # Return the sum\n    return sum",
        "num_ids": 114
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            result += arr[i]\n    return result",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    result = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            result += arr[i]\n    return result",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 83
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 91
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 83
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 86
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    \n    while i < n:\n        num = (2*i) + 2\n        power = num ** 5\n        sum += power\n        i += 1\n        \n    return sum",
        "num_ids": 91
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    i = 0\n    while i < n:\n        num = i*2 + 2\n        result += num**5\n        i += 1\n    return result",
        "num_ids": 81
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2): \n        sum += i**5\n    return sum",
        "num_ids": 77
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        if count % 2 == 0:\n            sum += count**5\n        count += 1\n    return sum\n",
        "num_ids": 86
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i**5\n        i += 1\n    return sum\n",
        "num_ids": 86
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    i = 2\n    while n > 0:\n        even_power_sum += i**5\n        i += 2\n        n -= 1\n    return even_power_sum",
        "num_ids": 93
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, 2*n+1, 2):\n        total += i**5\n    return total",
        "num_ids": 77
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i ** 5\n    return sum",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize a variable to store the sum of even numbers raised to the fifth power\n    sum = 0\n    \n    # Loop through the first n even numbers and add them to the sum\n    for i in range(2, 2*n, 2):\n        sum += i**5\n        \n    return sum",
        "num_ids": 106
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum",
        "num_ids": 74
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tpl in test_list:\n        rear_list.append(tpl[1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tpl in test_list:\n        result.append(tpl[-1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 95
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result",
        "num_ids": 91
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 92
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples, subtracts the corresponding elements of the two tuples and returns the result.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(0, n+1, 2):\n        coeff = math.comb(n, i)\n        sum += coeff\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(f\"The sum of even index binomial coefficients for {n} is: {even_binomial_Coeff_Sum(n)}\")",
        "num_ids": 125
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 51
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(0, n+1, 2):\n        result += math.comb(n, i)\n    return result",
        "num_ids": 78
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns the sum of the even-indexed binomial coefficients for n.\n    \"\"\"\n    total = 0\n    for i in range(0, n, 2):\n        total += math.comb(n, i)\n    return total",
        "num_ids": 68
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns the sum of the even index binomial coefficients for a positive integer n.\n    \"\"\"\n    return sum(math.comb(n, 2*k) for k in range(n//2 + 1))",
        "num_ids": 65
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += math.comb(n, i)\n    return even_sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of even index binomial coefficients is:\", even_binomial_Coeff_Sum(n))",
        "num_ids": 95
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(0, n+1, 2):\n        s += math.comb(n, i)\n    return s\n",
        "num_ids": 79
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1, 2):\n        s += math.comb(n, i)\n    return s\n",
        "num_ids": 75
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    for i in range(0, n+1, 2):\n        sum_even_binomial += math.comb(n, i)\n    return sum_even_binomial",
        "num_ids": 90
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 78
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "num_ids": 54
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \"\"\"\n    volume = 3.14159 * r ** 2 * h\n    return volume",
        "num_ids": 50
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "num_ids": 52
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = 3.141592653589793 * r ** 2 * h\n    return volume",
        "num_ids": 68
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14159265359 * r ** 2 * h\n    return volume",
        "num_ids": 60
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume",
        "num_ids": 53
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Calculates the volume of a cylinder given its radius and height.\n    '''\n    return math.pi * r**2 * h",
        "num_ids": 44
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "num_ids": 54
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (math.pi * r**2 * h)\n    return volume",
        "num_ids": 55
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h",
        "num_ids": 53
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Filter a dictionary to include only entries with values greater than or equal to n.\n\n    :param dict: a dictionary\n    :param n: an integer\n    :return: a new dictionary with entries filtered\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}",
        "num_ids": 75
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "num_ids": 80
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 80
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    This function takes in a tuple and returns the number of elements that occur before the tuple element in the tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 82
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count",
        "num_ids": 48
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if type(element) == tuple:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 72
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            count += 1\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 87
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count",
        "num_ids": 79
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[test_tup.index(i)-1]:\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * ((3*n) - 1) / 2)\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th decagonal number is: {is_num_decagonal(n)}\")",
        "num_ids": 89
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 10\n        count += 1\n    return num",
        "num_ids": 59
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 10\n        count += 1\n    return num",
        "num_ids": 59
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is the nth decagonal number, otherwise, it returns False.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    i = 1\n    decagonal = 0\n    \n    # Loop until nth decagonal number is found\n    while count < n:\n        decagonal += i\n        i += 1\n        count += 1\n        \n    # Check if nth decagonal number is found\n    if decagonal == n:\n        return True\n    else:\n        return False",
        "num_ids": 126
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if str(num)[-1] == '0':\n            continue\n        decagonal = int(str(num)[-1])*(10**(len(str(num))-1)) + num\n        if decagonal == count + 1:\n            count += 1\n    return num",
        "num_ids": 113
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    count = 1  # counter for decagonal numbers\n    decagonal = 0  # current decagonal number\n    while count <= n:\n        decagonal += count\n        count += 1\n    return decagonal",
        "num_ids": 78
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the first decagonal number to 10\n    decagonal_num = 10\n    # loop until we find the nth decagonal number\n    for i in range(2, n+1):\n        # calculate the next decagonal number by adding the previous one to the previous one\n        decagonal_num += decagonal_num - 10 + i * 10\n        # if the current decagonal number is equal to the nth one, return True\n        if decagonal_num == i * 10:\n            return True\n    # if we reach this point, it means we didn't find the nth decagonal number, so return False\n    return False",
        "num_ids": 178
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = (10**((n-1)//10) * (n%10)) + ((n//10)*((10**((n-1)//10)-1)//9))\n    return decagonal_num",
        "num_ids": 85
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    num = 10*n*(n-1) + 1\n    return num",
        "num_ids": 48
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += i*(10**i)\n    return decagonal\n",
        "num_ids": 66
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index",
        "num_ids": 105
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index",
        "num_ids": 105
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements of a given list are unique.\n\n    :param test_list: A list of elements.\n    :return: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(test_list) == len(set(test_list))",
        "num_ids": 69
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements of the list are unique, else False.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "num_ids": 64
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))",
        "num_ids": 47
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all elements of the list are unique, and False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "num_ids": 63
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n        nums1 (list): List of integers.\n        nums2 (list): List of integers.\n\n    Returns:\n        list: A new list containing the element-wise subtraction of nums1 and nums2.\n    \"\"\"\n\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # Initialize an empty list to store the element-wise subtraction\n    result = []\n\n    # Iterate over the lists and subtract corresponding elements\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result",
        "num_ids": 163
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result",
        "num_ids": 87
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts the corresponding elements of two lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    return [a - b for a, b in zip(nums1, nums2)]",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    return [a - b for a, b in zip(nums1, nums2)]",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should be of equal length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result",
        "num_ids": 88
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]",
        "num_ids": 77
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert integer to string\n    num = str(n)\n    # loop through each digit in the string\n    for digit in num:\n        # if the frequency of the digit is greater than the digit itself, return False\n        if num.count(digit) > int(digit):\n            return False\n    # if all digits pass the test, return True\n    return True",
        "num_ids": 115
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert the integer to a string to iterate over each digit\n    n_str = str(n)\n\n    # Iterate over each digit in the string\n    for digit in n_str:\n        # Check if the frequency of the digit is greater than or equal to the digit itself\n        if n_str.count(digit) >= int(digit):\n            return False\n    \n    return True",
        "num_ids": 118
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    # Convert the integer to a string to iterate over its digits\n    digits = [int(d) for d in str(n)]\n    \n    # Check the frequency of each digit in the integer\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    \n    # If all digits have a frequency less than or equal to the digit itself, return True\n    return True",
        "num_ids": 87
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n): \n    if n < 10:\n        return True\n    digits = [int(digit) for digit in str(n)]\n    freq = [digits.count(digit) for digit in range(10)]\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer into a string\n    n_str = str(n)\n\n    # Loop through each digit in the string\n    for digit in n_str:\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if int(n_str.count(digit)) > int(digit):\n            # If the frequency is greater than the digit, return False\n            return False\n\n    # If all digits have a frequency less than or equal to the digit itself, return True\n    return True",
        "num_ids": 145
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    Args:\n    n (int): The integer to be validated\n\n    Returns:\n    bool: True if the integer is valid, False otherwise.\n\n    \"\"\"\n    # Convert the integer to a string to iterate over its digits\n    n_str = str(n)\n    # Iterate over the digits in the string\n    for digit in n_str:\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if int(digit) > n_str.count(digit):\n            return False\n    return True",
        "num_ids": 145
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]  # convert integer to list of digits\n    for digit in digits:\n        if digits.count(digit) > digit:  # if digit appears more than its frequency\n            return False\n    return True  # if all digits have frequency <= digit, return True",
        "num_ids": 73
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True",
        "num_ids": 78
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Loop through each digit in the string\n    for digit in n_str:\n        # Convert the digit back to an integer\n        digit = int(digit)\n\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if n_str.count(str(digit)) > digit:\n            return False\n\n    # If all digits have a frequency less than or equal to the digit itself, return True\n    return True",
        "num_ids": 114
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    freq = [digits.count(digit) for digit in range(10)]\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True",
        "num_ids": 57
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for i in lst:\n        if i!= elem:\n            return False\n    return True",
        "num_ids": 54
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element, and returns True if all the elements in the list are equal to the given element, otherwise False.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True",
        "num_ids": 56
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)",
        "num_ids": 52
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(lst, element):\n    '''\n    Returns True if all elements in the list are equal to the given element, False otherwise.\n    '''\n    if len(set(lst)) == 1:\n        if lst[0] == element:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Checks if all elements in the list are equal to the given element.\n\n    :param lst: A list of elements.\n    :param elem: An element to compare the list to.\n    :return: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(x == elem for x in lst)",
        "num_ids": 85
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if list.count(element) == len(list):\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(elem == element for elem in lst):\n        print(\"All elements are equal to the given element.\")\n    else:\n        print(\"Not all elements are equal to the given element.\")",
        "num_ids": 78
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 76
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\bb{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 78
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 46
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    return bool(re.search(pattern, text))",
        "num_ids": 43
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a.*(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a\\bb{2,3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the original array\n    original_sum = sum(a)\n\n    # Calculate the sum of the repeated array\n    repeated_sum = k * sum(a)\n\n    # Calculate the total sum of the modified array\n    total_sum = (k*(2*original_sum + k*k) + k*(k-1)*repeated_sum) // (k+1)\n\n    # Calculate the maximum subarray sum\n    max_subarray_sum = total_sum - original_sum\n\n    return max_subarray_sum",
        "num_ids": 165
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "num_ids": 79
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a list to store the sums of contiguous subarrays of size k\n    subarray_sums = []\n    for i in range(n-k+1):\n        subarray_sum = sum(a[i:i+k])\n        subarray_sums.append(subarray_sum)\n\n    # Find the maximum subarray sum\n    max_subarray_sum = max(subarray_sums)\n\n    return max_subarray_sum",
        "num_ids": 146
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the total sum of the given array\n    total_sum = sum(a)\n    # Calculate the sum of each segment of the modified array\n    segment_sum = k * (sum(a) - a[0])\n    # Calculate the maximum sum of a contiguous array in the modified array\n    max_sub_array_sum = segment_sum\n    for i in range(1, n):\n        segment_sum = max(segment_sum + a[i], a[i])\n        max_sub_array_sum = max(max_sub_array_sum, segment_sum)\n    # Calculate the final answer by adding the total sum of the modified array\n    answer = max_sub_array_sum + (k-1) * total_sum\n    return answer",
        "num_ids": 215
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    for i in range(k): \n        current_sum = 0\n        for j in range(n): \n            current_sum += a[j]\n            if current_sum > max_sum: \n                max_sum = current_sum\n    return max_sum",
        "num_ids": 115
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = -float('inf')\n    for i in range(n):\n        temp_sum = 0\n        for j in range(i, n):\n            temp_sum += a[j]\n            if i == j:\n                temp_sum *= k\n            else:\n                temp_sum *= k-1\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum",
        "num_ids": 108
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k): \n        curr_sum = 0\n        for j in range(n): \n            curr_sum += a[j] \n            if curr_sum > max_sum: \n                max_sum = curr_sum \n    return max_sum",
        "num_ids": 115
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array of length n*k\n    new_a = [0]*(n*k)\n    for i in range(k):\n        for j in range(n):\n            new_a[i*n+j] = a[j]\n            \n    # Find the maximum subarray sum in the modified array\n    max_sum = float('-inf')\n    for i in range(n*k):\n        for j in range(i, n*k):\n            if sum(new_a[i:j+1]) > max_sum:\n                max_sum = sum(new_a[i:j+1])\n    \n    return max_sum",
        "num_ids": 191
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = 0\n    \n    # Repeat the given array k times and find the maximum subarray sum\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    \n    return max_sum",
        "num_ids": 92
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the first k elements of the array\n    sum_first_k = sum(a[:k])\n    \n    # Calculate the maximum sum possible by repeating the array k times\n    max_sum = sum_first_k * k\n    \n    # Calculate the sum of the last (n-k) elements of the array\n    sum_last_n_minus_k = sum(a[n-k:])\n    \n    # Calculate the maximum sum possible by repeating the last (n-k) elements of the array k times\n    max_sum = max(max_sum, sum_last_n_minus_k * k)\n    \n    # Calculate the maximum sum possible by repeating the middle (k) elements of the array k times\n    middle_sum = sum(a[k:n-k])\n    max_sum = max(max_sum, middle_sum * k)\n    \n    return max_sum",
        "num_ids": 243
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 65
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(0, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 65
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, (n*2)+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 65
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "num_ids": 66
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(2, 2 * n + 1, 2):\n        total += i ** 2\n    return total",
        "num_ids": 67
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            result = [lst]\n            max_len = len(lst)\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result",
        "num_ids": 95
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = [lst]\n        elif len(lst) == max_len:\n            max_list.append(lst)\n    return max_list",
        "num_ids": 103
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = len(max(list1, key=len))\n    result = []\n    for lst in list1:\n        if len(lst) == max_len:\n            result.append(lst)\n    return result",
        "num_ids": 78
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(lst):\n    \"\"\"\n    This function takes a list of lists as an input and returns the list with the maximum length.\n    \"\"\"\n    max_len = 0\n    max_lst = []\n    for lst in lst:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 82
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    This function finds the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 79
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = [lst]\n        elif len(lst) == max_len:\n            max_list.append(lst)\n    return max_list",
        "num_ids": 103
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Count the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n < 0 or k < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        # Count the number of ways to paint the first post with the first color\n        # and the number of ways to paint the remaining posts with the remaining colors\n        count1 = count_no_of_ways(n - 1, k)\n        count2 = count_no_of_ways(n - 2, k)\n        \n        # If the first and second posts have the same color, the remaining posts can have any color\n        if n >= 2 and k > 2:\n            count3 = count_no_of_ways(n - 2, k - 2)\n        else:\n            count3 = 0\n        \n        # Combine the counts\n        return count1 + count2 + count3",
        "num_ids": 242
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    dp = [0] * (k+1)\n    dp[1] = k\n    for i in range(2, n+1):\n        dp[i] = k * (i-1) + sum(dp[i-j] for j in range(1, k+1))\n    return dp[n]\n\nn = 4\nk = 3\nprint(count_no_of_ways(n, k))",
        "num_ids": 120
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n    dp[1][0] = 1\n    dp[1][1] = k-1\n    \n    for i in range(2, n+1):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j] + (dp[i-2][j] if j < k-1 else 0)\n            \n    return dp[n][0]",
        "num_ids": 120
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D list to store the number of ways of painting each post with each color\n    dp = [[0] * k for _ in range(n)]\n\n    # Base case: each post can be painted with any color\n    for i in range(n):\n        for j in range(k):\n            dp[i][j] = 1\n\n    # Compute the number of ways of painting each post with each color\n    for i in range(n):\n        for j in range(k):\n            if i > 0 and dp[i-1][j] > 0:\n                dp[i][j] += dp[i-1][j]\n            if i > 1 and dp[i-2][j] > 0:\n                dp[i][j] += dp[i-2][j]\n\n    # Return the number of ways of painting the fence\n    return dp[n-1][k-1]",
        "num_ids": 217
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize dp table with 0\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n\n    # Base case: first two posts have one color\n    dp[1][1] = 1\n\n    # For remaining posts, iterate over all colors from 1 to k\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            # Check if i-1 is valid as the last post has one color\n            if i-1 <= k:\n                dp[i][j] = dp[i][j] + dp[i-1][j]\n            # Check if i-2 is valid as the last two posts have the same color\n            if i-2 > 0 and j >= 2 and dp[i-1][j-1] == 0:\n                dp[i][j] = dp[i][j] + dp[i-2][j]\n    \n    # Return the last entry in the dp table\n    return dp[n][k]",
        "num_ids": 239
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1: # base case\n        return n\n    if k == 2: # base case\n        return n * (n - 1) // 2\n    \n    count = 0\n    for i in range(k):\n        count += count_no_of_ways(n - 1, k - 1)\n    \n    return count",
        "num_ids": 87
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        dp = [[0] * k for i in range(n)]\n        for i in range(n):\n            dp[i][0] = 1\n        for i in range(k):\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, k):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n        return dp[n-1][k-1]",
        "num_ids": 157
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the list to store the number of ways of painting the fence\n    dp = [[0 for i in range(k)] for j in range(n)]\n\n    # Base case - the first and last post can be painted in any of the k colors\n    for i in range(k):\n        dp[0][i] = 1\n        dp[n-1][i] = 1\n\n    # Fill the table using dynamic programming\n    for i in range(1, n-1):\n        for j in range(k):\n            for l in range(k):\n                if l!= j:\n                    dp[i][j] += dp[i-1][l]\n\n    # Return the total number of ways of painting the fence\n    return sum(dp[-1])",
        "num_ids": 180
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the number of ways to paint the fence with k colors\n    dp = [[0 for x in range(k)] for y in range(n)]\n\n    # Base cases: the first row and first column are always painted with one color\n    for i in range(n):\n        dp[i][0] = 1\n    for j in range(k):\n        dp[0][j] = 1\n\n    # Fill the rest of the 2D list using dynamic programming\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n\n    # The number of ways to paint the fence is the last element in the last row of the 2D list\n    return dp[n-1][k-1]",
        "num_ids": 216
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function calculates the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if k == 1:  # base case\n        return n\n    elif k == 2:  # recursive case with two colors\n        return (count_no_of_ways(n, k-1) * (n-1)) // (k-1)\n    else:  # recursive case with more than two colors\n        return (count_no_of_ways(n, k-1) * count_no_of_ways(n-1, k-1)) // (k-1)",
        "num_ids": 165
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    return n // m",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient",
        "num_ids": 43
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "num_ids": 43
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        return None\n    else:\n        return int(n/m)",
        "num_ids": 53
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of them, rounded down to the nearest integer.\n    \"\"\"\n    return n // m",
        "num_ids": 40
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a Python function to find the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m",
        "num_ids": 38
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers n and m as input and returns their quotient rounded down to the nearest integer.\n    '''\n    return n // m",
        "num_ids": 40
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "num_ids": 43
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient",
        "num_ids": 41
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function finds the third side of a right-angled triangle given the two sides.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 56
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 <= 168:\n        print(\"The triangle cannot be formed using the given sides.\")\n    else:\n        c = math.sqrt(168 - w**2 - h**2)\n        print(\"The third side is\", c)",
        "num_ids": 96
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the third side using the Pythagorean theorem\n    c = math.sqrt(w**2 + h**2)\n    # Return the third side\n    return c",
        "num_ids": 74
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the width and height of a right-angled triangle as inputs and returns the length of the third side.\n    '''\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c",
        "num_ids": 65
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n",
        "num_ids": 55
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the width and height of a right angled triangle\n    and returns the length of the third side.\n    '''\n    # Calculate the length of the hypotenuse using the Pythagorean theorem\n    c = math.sqrt(w**2 + h**2)\n    # Calculate the length of the third side\n    b = math.sqrt(c**2 - w**2)\n    # Return the length of the third side\n    return b",
        "num_ids": 114
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 54
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a heterogeneous list as input and returns the maximum value in the list.\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    \n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    \n    return max_val",
        "num_ids": 94
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(lst):\n    \"\"\"\n    Return the maximum value in a given list of heterogeneous types.\n    \"\"\"\n    if not lst:\n        return None\n    else:\n        max_val = lst[0]\n        for item in lst:\n            if item > max_val:\n                max_val = item\n        return max_val",
        "num_ids": 72
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num\n",
        "num_ids": 81
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    \n    return max_val",
        "num_ids": 94
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor",
        "num_ids": 72
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "num_ids": 69
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    This function returns the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 60
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through all numbers from 1 to the given number\n    for i in range(1, number+1):\n        # Check if i is a divisor of the given number\n        if number % i == 0:\n            # Add i to the sum\n            sum += i\n    \n    # Return the sum of all divisors of the given number\n    return sum",
        "num_ids": 116
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function returns the sum of all divisors of a given number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 61
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum",
        "num_ids": 69
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion in an array is defined as a pair of elements (i, j) such that i < j and arr[i] > arr[j].\n    '''\n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n    \n    # Create a copy of the input array to avoid modifying it\n    arr_copy = arr.copy()\n    \n    # Merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_arr = arr[:mid]\n            right_arr = arr[mid:]\n            merge_sort(left_arr)\n            merge_sort(right_arr)\n            i = j = k = 0\n            while i < len(left_arr) and j < len(right_arr):\n                if left_arr[i] < right_arr[j]:\n                    arr[k] = left_arr[i]\n                    i += 1\n                else:\n                    arr[k] = right_arr[j]\n                    j += 1\n                    inv_count += len(left_arr) - i\n                k += 1\n            while i < len(left_arr):\n                arr[k] = left_arr[i]\n                i += 1\n                k += 1\n            while j < len(right_arr):\n                arr[k] = right_arr[j]\n                j += 1\n                k += 1\n    \n    merge_sort(arr_copy)\n    \n    return inv_count",
        "num_ids": 351
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "num_ids": 64
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function counts the number of inversions in an array.\n    \"\"\"\n    n = len(arr) \n    inv_count = 0 \n  \n    # To keep track of visited elements \n    visited = [0]*n \n  \n    # recursive function to count inversions in a given array \n    def merge(arr, temp, left, mid, right): \n  \n        # Copy data to temp arrays \n        i = left \n        j = mid \n        k = left \n  \n        while i <= mid-1 and j <= right: \n            if arr[i] <= arr[j]: \n                temp[k] = arr[i] \n                i += 1\n            else: \n                temp[k] = arr[j] \n                j += 1\n                inv_count += (mid-i) \n  \n            k += 1\n  \n        while i <= mid-1: \n            temp[k] = arr[i] \n            i += 1\n            k += 1\n  \n        while j <= right: \n            temp[k] = arr[j] \n            j += 1\n            k += 1\n  \n        # Copy the sorted elements back to original array \n        for i in range(left, right+1): \n            arr[i] = temp[i] \n  \n    # recursive function to merge sort an array \n    def mergeSort(arr, temp, left, right): \n        if left < right: \n            mid = (left + right) // 2\n            mergeSort(arr, temp, left, mid) \n            mergeSort(arr, temp, mid+1, right) \n            merge(arr, temp, left, mid+1, right) \n  \n    mergeSort(arr, arr, 0, n-1) \n    return inv_count \n",
        "num_ids": 369
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr\n\n\ndef get_inv_count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n\n    for i in range(len(sorted_arr)):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += 1\n\n    return inv_count",
        "num_ids": 301
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Merge sort algorithm to count inversions in array\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            L = arr[:mid]\n            R = arr[mid:]\n            \n            # Recursive calls to merge_sort function\n            merge_sort(L)\n            merge_sort(R)\n            \n            # Merge two sorted arrays to get sorted array\n            i = j = k = 0\n            while i < len(L) and j < len(R):\n                if L[i] <= R[j]:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n                    inv_count += len(L[i:]) # Count inversions in R\n                k += 1\n            \n            while i < len(L):\n                arr[k] = L[i]\n                i += 1\n                k += 1\n            \n            while j < len(R):\n                arr[k] = R[j]\n                j += 1\n                k += 1\n    \n    # Call merge_sort function to count inversions in array\n    merge_sort(arr)\n    return inv_count",
        "num_ids": 298
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Merge sort algorithm\n    def merge(arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = 0\n        temp = [0] * (right - left + 1)\n        \n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += (mid - i + 1)\n            k += 1\n        \n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        \n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        \n        for i in range(len(temp)):\n            arr[left + i] = temp[i]\n    \n    def merge_sort(arr, left, right):\n        if left < right:\n            mid = (left + right) // 2\n            merge_sort(arr, left, mid)\n            merge_sort(arr, mid + 1, right)\n            merge(arr, left, mid, right)\n    \n    merge_sort(arr, 0, n - 1)\n    return inv_count",
        "num_ids": 320
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # merge sort algorithm\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n    \n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv_count += len(left[i:])\n        result += left[i:]\n        result += right[j:]\n        return result\n    \n    sorted_arr = merge_sort(arr)\n    return inv_count",
        "num_ids": 220
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion is a pair of elements that are in the wrong order.\n\n    The function uses merge sort algorithm to sort the array and count the number of inversions.\n    \"\"\"\n    n = len(arr)\n\n    if n <= 1:\n        return 0\n\n    mid = n // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    left_inv_count = get_Inv_Count(left_arr)\n    right_inv_count = get_Inv_Count(right_arr)\n    merge_inv_count = merge_sort(arr)\n\n    return left_inv_count + right_inv_count + merge_inv_count\n\n\ndef merge_sort(arr):\n    \"\"\"\n    This function takes an array as input and sorts the array using merge sort algorithm.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    left_arr = merge_sort(left_arr)\n    right_arr = merge_sort(right_arr)\n\n    return merge(left_arr, right_arr)\n\n\ndef merge(left_arr, right_arr):\n    \"\"\"\n    This function takes two sorted arrays as input and merges them into a single sorted array.\n    It also counts the number of inversions in the merged array.\n    \"\"\"\n    i = j = 0\n    merged_arr = []\n    inv_count = 0\n\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            merged_arr.append(left_arr[i])\n            i += 1\n        else:\n            merged_arr.append(right_arr[j])\n            j += 1\n            inv_count += len(left_arr[i:])\n\n    merged_arr += left_arr[i:]\n    merged_arr += right_arr[j:]\n\n    return merged_arr, inv_count",
        "num_ids": 473
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    count = 0\n    n = len(arr)\n    temp = [0] * n\n\n    # Merge sort function to count inversions\n    def merge_sort(arr, temp, left, right):\n        if left < right:\n            mid = (left + right) // 2\n            merge_sort(arr, temp, left, mid)\n            merge_sort(arr, temp, mid+1, right)\n            merge(arr, temp, left, mid, right)\n\n    # Merge function to merge two sorted subarrays\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                count += (mid - i + 1) # Count inversions in the smaller subarray\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right+1):\n            arr[i] = temp[i]\n\n    # Sort the array using merge sort\n    merge_sort(arr, temp, 0, n-1)\n\n    return count",
        "num_ids": 330
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened_list.extend(flatten_list(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "num_ids": 89
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened_list.extend(flatten_list(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "num_ids": 88
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure as input and returns a flattened list.\n    \"\"\"\n    result = []\n    for i in list1:\n        if type(i) == list:\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result",
        "num_ids": 74
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list as input and returns a flattened list.\n    '''\n    flat_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flat_list += flatten_list(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 82
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                flat_list.append(j)\n        else:\n            flat_list.append(i)\n    return flat_list",
        "num_ids": 79
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure and flattens it into a single list.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 83
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 80
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 81
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n        list1 (list): A nested list structure.\n\n    Returns:\n        list: The flattened list.\n\n    Examples:\n        >>> flatten_list([1, 2, 3, [4, 5], [6, [7, 8]]])\n        [1, 2, 3, 4, 5, 6, 7, 8]\n\n        >>> flatten_list([1, 2, [3, [4, 5], 6], [7, 8]])\n        [1, 2, 3, 4, 5, 6, 7, 8]\n\n        >>> flatten_list([])\n        []\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 221
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict with a default value of 0\n    aggregator = defaultdict(int)\n    \n    # Loop through the list of tuples and update the aggregator\n    for s, t, p in stdata:\n        aggregator[s] += p\n        aggregator[t] -= p\n    \n    # Find the maximum aggregate\n    max_aggregate = 0\n    for _, v in aggregator.items():\n        max_aggregate += v\n    \n    return max_aggregate",
        "num_ids": 128
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            if stdata[i][1] > stdata[j][1]:\n                d[stdata[i][0]] += stdata[j][1]\n            else:\n                d[stdata[j][0]] += stdata[i][1]\n\n    max_agg = 0\n    for k in d:\n        if d[k] > max_agg:\n            max_agg = d[k]\n\n    return max_agg",
        "num_ids": 161
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the sum of products for each product\n    dp = defaultdict(int)\n    # Create a defaultdict to store the maximum sum of products for each prefix\n    prefix_max = defaultdict(int)\n    # Create a defaultdict to store the maximum sum of products for each suffix\n    suffix_max = defaultdict(int)\n\n    # Initialize the sum of products for the first product\n    dp[stdata[0][0]] += stdata[0][1]\n    # Initialize the maximum sum of products for the first prefix and suffix\n    prefix_max[()] = dp[stdata[0][0]]\n    suffix_max[()] = dp[stdata[0][0]]\n\n    # Iterate over the remaining products and update the sum of products and the maximum sum of products for each prefix and suffix\n    for i in range(1, len(stdata)):\n        # Update the sum of products for the current product\n        dp[stdata[i][0]] += stdata[i][1]\n        # Update the maximum sum of products for the current prefix and suffix\n        prefix_max[tuple(sorted([stdata[j][0] for j in range(i+1)]))] = max(prefix_max[tuple(sorted([stdata[j][0] for j in range(i+1)]))], dp[stdata[i][0]])\n        suffix_max[tuple(sorted([stdata[j][0] for j in range(i+1)][::-1]))] = max(suffix_max[tuple(sorted([stdata[j][0] for j in range(i+1)][::-1]))], dp[stdata[i][0]])\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for i in range(1, len(stdata)+1):\n        for j in range(i):\n            prefix_sum = sum([stdata[k][1] for k in range(j, i)])\n            suffix_sum = sum([stdata[k][1] for k in range(j, i)[::-1]])\n            max_agg = max(max_agg, prefix_max[tuple(sorted([stdata[k][0] for k in range(j, i)]))]*suffix_max[tuple(sorted([stdata[k][0] for k in range(j, i)][::-1]))] + prefix_sum*suffix_sum)\n\n    return max_agg",
        "num_ids": 553
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a defaultdict object with a default value of 0\n    d = defaultdict(int)\n    \n    # Loop through the list of tuples\n    for t in stdata:\n        # Calculate the aggregate value and update the defaultdict object\n        d[t[0]] += t[1]\n        d[t[0]] += t[2]\n        d[t[1]] += t[2]\n        \n    # Find the maximum aggregate value\n    max_agg = max(d.values())\n    \n    # Return the maximum aggregate value\n    return max_agg",
        "num_ids": 127
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list of tuples\n    freq_dict = defaultdict(int)\n    for elem in stdata:\n        freq_dict[elem] += 1\n    \n    # Calculate the total frequency of all elements in the list of tuples\n    total_freq = sum(freq_dict.values())\n\n    # Calculate the maximum aggregate for each possible subset of the elements in the list of tuples\n    max_agg = 0\n    for subset_size in range(1, len(stdata) + 1):\n        for subset in itertools.combinations(stdata, subset_size):\n            # Calculate the frequency of the current subset\n            subset_freq = sum([freq_dict[elem] for elem in subset])\n            # Calculate the aggregate for the current subset\n            agg = subset_freq * (subset_freq - 1) / 2\n            # Update the maximum aggregate if the current subset has a higher aggregate\n            if agg > max_agg:\n                max_agg = agg\n    \n    # Return the maximum aggregate for all possible subsets of the elements in the list of tuples\n    return max_agg",
        "num_ids": 270
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes in a list of tuples where the first element is the student's name and the second element is a tuple of their grades.\n    It returns the maximum aggregate score from all the grades.\n    '''\n    # Initialize a defaultdict to store the grades for each student\n    grades = defaultdict(list)\n    \n    # Iterate through the list of tuples and store the grades for each student in a defaultdict\n    for name, grade_tuple in stdata:\n        for grade in grade_tuple:\n            grades[name].append(grade)\n    \n    # Calculate the maximum aggregate score for each student by taking the sum of their grades and dividing by the number of grades\n    max_aggregate = {}\n    for name, grade_list in grades.items():\n        max_aggregate[name] = sum(grade_list)/len(grade_list)\n    \n    # Return the maximum aggregate score for all students\n    return max(max_aggregate.values())",
        "num_ids": 217
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from a list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    for item, agg in stdata:\n        freq[item] += agg\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for item, count in freq.items():\n        if count > max_agg:\n            max_agg = count\n\n    return max_agg",
        "num_ids": 107
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n\n    # Iterate over each element in the list and update its frequency in the dictionary\n    for elem in stdata:\n        freq[elem] += 1\n\n    # Create an empty dictionary to store the prefix sum and prefix product of the list\n    prefix_sum = defaultdict(int)\n    prefix_product = defaultdict(int)\n\n    # Iterate over each element in the list and update its prefix sum and prefix product in the dictionaries\n    for i in range(len(stdata)):\n        prefix_sum[i+1] = prefix_sum[i] + stdata[i]\n        prefix_product[i+1] = prefix_product[i] * stdata[i]\n\n    # Initialize the maximum aggregate to negative infinity\n    max_aggregate = float('-inf')\n\n    # Iterate over each element in the list and calculate the maximum aggregate\n    for i in range(len(stdata)):\n        # Calculate the sum of the elements from i to the end of the list\n        current_sum = prefix_sum[len(stdata)] - prefix_sum[i]\n\n        # Calculate the product of the elements from i to the end of the list\n        current_product = prefix_product[len(stdata)] / prefix_product[i]\n\n        # Calculate the maximum aggregate using the current sum and product\n        current_aggregate = current_sum / current_product\n\n        # Update the maximum aggregate if the current aggregate is greater than the previous maximum\n        max_aggregate = max(max_aggregate, current_aggregate)\n\n    return max_aggregate",
        "num_ids": 375
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each stock\n    freq_dict = defaultdict(int)\n    for _, stock, price in stdata:\n        freq_dict[stock] += 1\n    \n    # Create a dictionary to store the total aggregate for each stock\n    agg_dict = defaultdict(int)\n    for _, stock, price in stdata:\n        agg_dict[stock] += price\n    \n    # Calculate the maximum aggregate\n    max_agg = 0\n    for stock in freq_dict:\n        max_agg += agg_dict[stock] / freq_dict[stock]\n    \n    return max_agg",
        "num_ids": 160
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for elem in stdata:\n        freq[elem] += 1\n    \n    # Calculate the maximum aggregate\n    max_agg = 0\n    for elem in stdata:\n        max_agg += elem * freq[elem]\n    return max_agg",
        "num_ids": 107
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(int(bits[:n])) == sum(int(bits[n:])):\n            count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in bits[:n]) == sum(int(bit) for bit in bits[n:]):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is {count_binary_seq(n)}\")",
        "num_ids": 134
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # Convert the binary number to a string and split it into two parts\n        s = bin(i)[2:].zfill(n)\n        first_n = int(s[:n], 2)\n        last_n = int(s[n:], 2)\n        # Check if the sum of the first n bits is the same as the sum of the last n bits\n        if first_n + last_n == 2**n:\n            count += 1\n    return count",
        "num_ids": 128
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if len(binary) < n:\n            binary = '0'*(n-len(binary)) + binary\n        if binary.count('0') == n and binary.count('1') == n:\n            if int(binary[:n], 2) == int(binary[-n:], 2):\n                count += 1\n    return count\n\nprint(count_binary_seq(3)) # Output: 21",
        "num_ids": 125
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # initialize a list to store the count of each prefix sum\n    prefix_count = [1] * (2 * n + 1)\n\n    # loop through each prefix sum\n    for i in range(1, 2 * n):\n        # loop through each possible value for the last bit\n        for j in range(2):\n            # update the count of the prefix sum\n            prefix_count[i + j] += prefix_count[i - 1]\n\n    # initialize a list to store the count of all binary sequences\n    count = [0] * (2 ** n)\n\n    # loop through each binary sequence of length 2n\n    for i in range(2 ** n):\n        # convert the binary sequence to a list of digits\n        digits = [int(d) for d in bin(i)[2:].zfill(n)]\n        # compute the sum of the first n bits\n        first_sum = sum(digits)\n        # compute the sum of the last n bits\n        last_sum = sum(digits[-n:])\n        # compute the index of the prefix sum in the prefix_count list\n        index = first_sum - last_sum\n        # update the count of the binary sequence\n        count[i] = prefix_count[index]\n\n    # return the total count of binary sequences\n    return sum(count)",
        "num_ids": 326
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    # Create a list to store all binary sequences of length 2n\n    binary_seq = []\n    # Loop through all binary numbers of length n\n    for i in range(2**n):\n        # Convert the decimal number to binary and add leading zeros if necessary\n        binary = bin(i)[2:].zfill(n)\n        # Check if the first n bits are equal to the last n bits\n        if int(binary[:n], 2) == int(binary[-n:], 2):\n            # Add the binary sequence to the list\n            binary_seq.append(binary)\n    # Return the count of binary sequences\n    return len(binary_seq)",
        "num_ids": 150
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1 << n):\n        bits = bin(i)[2:].zfill(n)\n        if bits[:n] == bits[n:]:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Generate all binary sequences of length 2n\n    for i in range(2 ** n):\n        # Convert the binary number to a list of bits\n        bits = [int(b) for b in bin(i)[2:].zfill(n)]\n        \n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if sum(bits[:n]) == sum(bits[n:]):\n            count += 1\n    \n    return count",
        "num_ids": 115
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # convert i to binary string of length n\n        binary_str = bin(i)[2:].zfill(n)\n        # check if sum of first n bits is same as sum of last n bits\n        if sum(int(binary_str[:n])) == sum(int(binary_str[n:])):\n            count += 1\n    return count",
        "num_ids": 102
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(int(bits[:n])) == sum(int(bits[n:])):\n            count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    \n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d, level=0):\n    \"\"\"\n    Recursively find the depth of a dictionary.\n\n    Args:\n    - d: The dictionary to find the depth of.\n    - level: The current level of recursion, initialized to 0.\n\n    Returns:\n    - The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return level\n    max_level = level\n    for value in d.values():\n        if isinstance(value, dict):\n            level += 1\n            max_level = max(max_level, dict_depth(value, level))\n            level -= 1\n    return max_level + 1",
        "num_ids": 138
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0",
        "num_ids": 59
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d, depth=0):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \n    Args:\n        d (dict): The input dictionary.\n        depth (int): The current depth of the recursion. Defaults to 0.\n    \n    Returns:\n        int: The depth of the dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        depth += 1\n        for v in d.values():\n            depth = max(depth, dict_depth(v, depth))\n    return depth",
        "num_ids": 108
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        if not d:\n            return 0\n        else:\n            return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0",
        "num_ids": 71
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 57
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    \n    depth = 0\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        elif isinstance(v, list):\n            for item in v:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n        depth += 1\n    return depth",
        "num_ids": 122
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 57
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n    return depth",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(value) for value in d.values())\n    else:\n        return 0",
        "num_ids": 59
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # extract ranges and rotations from input\n    start_index, end_index = ranges\n    num_rotations = rotations\n    \n    # calculate the index after rotations\n    rotated_index = (index - start_index + num_rotations) % len(arr)\n    \n    # return the element at the rotated index\n    return arr[rotated_index]",
        "num_ids": 112
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Find the element at the given index after rotating the array in the given range.\n    arr : List of elements\n    ranges : List of two values indicating the range of the array to be rotated\n    rotations : Number of rotations to be performed on the array\n    index : Index of the element to be searched\n    '''\n    n = len(arr)\n    start_index, end_index = ranges\n    rotated_index = (index - start_index + rotations * (end_index - start_index) + 1) % n + start_index - 1\n    return arr[rotated_index]",
        "num_ids": 146
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initializing the size of the array\n    n = len(arr)\n    \n    # Performing rotations\n    for i in range(rotations):\n        arr = arr[-1:]+arr[:-1]\n    \n    # Checking if index is within the given range\n    if (index < 0 or index >= n):\n        return \"Index out of range\"\n    \n    # Finding the element at the given index\n    return arr[index]",
        "num_ids": 127
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    left, right = 0, n-1\n    \n    # find the pivot index\n    pivot_index = left + (right - left) // 2\n    \n    # perform rotations to pivot the array\n    pivot_index = (pivot_index + rotations) % n\n    \n    # find the pivot value\n    pivot = arr[pivot_index]\n    \n    # perform binary search\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # calculate the index of the element after rotations\n        mid_index = (mid + rotations) % n\n        \n        # check if the mid_index is equal to the index\n        if mid_index == index:\n            return arr[mid_index]\n        \n        # check if the mid_index is less than the index\n        elif mid_index < index:\n            left = mid + 1\n            \n        # check if the mid_index is greater than the index\n        else:\n            right = mid - 1\n            \n    # if the element is not found, return None\n    return None",
        "num_ids": 235
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    #Calculating the new index after rotations\n    new_index = (index + rotations) % n\n    #Finding the element at the new index\n    element = arr[new_index]\n    return element",
        "num_ids": 89
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Calculate the offset to get the element at the given index\n    offset = (ranges[1] - ranges[0]) * (index - 1)\n    \n    # Adjust the offset for the rotations\n    offset = (offset + rotations) % len(arr)\n    \n    # Get the element at the offset position\n    element = arr[offset]\n    \n    return element",
        "num_ids": 90
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, the number of ranges to rotate the array, the number of rotations to perform, and the index of the element to find.\n    It returns the element at the given index after rotating the array the specified number of times.\n    \"\"\"\n    # Rotate the array the specified number of times\n    for i in range(rotations):\n        arr = arr[ranges:] + arr[:ranges]\n\n    # Find the element at the given index\n    return arr[index]",
        "num_ids": 118
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Get the rotated array\n    rotated_arr = arr[rotations:] + arr[:rotations]\n    # Find the range of indexes\n    start = ranges[0]\n    end = ranges[1]\n    # Check if the index is within the range of indexes\n    if index >= start and index <= end:\n        # Calculate the index of the element in the rotated array\n        rotated_index = index - start\n        rotated_index = (rotated_index + rotations) % len(arr)\n        # Return the element at the rotated index\n        return rotated_arr[rotated_index]\n    else:\n        return \"Index out of range\"",
        "num_ids": 172
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_element(arr, ranges, rotations, index):\n    n = len(arr)\n    start = ranges[0]\n    end = ranges[1]\n    k = rotations\n    \n    # if k is greater than end-start+1, then k = k%end-start+1\n    if k > end - start + 1:\n        k = k % end - start + 1\n    \n    # calculate the new index after rotations\n    new_index = (index - start + k) % n\n    \n    return arr[new_index]",
        "num_ids": 117
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    n=len(arr)\n    #calculating the actual index after the rotations\n    new_index=index-rotations\n    #calculating the number of times the array needs to be rotated\n    k=new_index//ranges\n    #calculating the index inside the rotated array\n    l=new_index%ranges\n    #finding the element at the new index\n    element=arr[(k+1)*ranges-l-1]\n    return element",
        "num_ids": 110
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w*\\b')\n    match = pattern.search(' '.join(words))\n    if match:\n        first_word = match.group(0)\n        second_word = pattern.search(words[words.index(first_word)+1:]).group(0)\n        return (first_word, second_word)\n    else:\n        return None",
        "num_ids": 121
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    This function returns two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n    if len(result) < 2:\n        return 'Not enough words starting with \"p\" found'\n    return result[0], result[1]",
        "num_ids": 103
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if re.match(\"^p\", word)]\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p'.\"\n    else:\n        return f\"Words starting with 'p': {p_words[0]} and {p_words[1]}\"",
        "num_ids": 108
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.match(r'^p\\w*', word, re.IGNORECASE):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result",
        "num_ids": 89
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    p_words = []\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n    return p_words[0:2]",
        "num_ids": 86
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match(r'^p', word.lower())]\n    return p_words[:2]",
        "num_ids": 69
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*\\b')\n    filtered_words = [word for word in words if pattern.match(word)]\n    if len(filtered_words) < 2:\n        return \"Not enough words starting with 'p'\"\n    else:\n        return filtered_words[:2]",
        "num_ids": 103
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result",
        "num_ids": 90
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Returns two words from a list of words starting with letter 'p'.\n    \"\"\"\n    words = [word for word in words if word.startswith('p')]\n    if len(words) < 2:\n        return \"Not enough words starting with 'p' were found in the list.\"\n    return words[:2]",
        "num_ids": 81
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    This function takes a list of words and returns two words from the list that start with the letter 'p'.\n    \"\"\"\n    words_list = []\n    for word in words:\n        if re.match('^p', word):\n            words_list.append(word)\n    return words_list",
        "num_ids": 77
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # create an array to store the sum of increasing subsequence up to the given index\n    sums = [0] * n\n\n    # iterate through the array and find the sum of increasing subsequence up to the given index\n    for i in range(index):\n        for j in range(i, index):\n            if a[j] > a[i]:\n                sums[j] = max(sums[j], sums[i] + a[j])\n\n    # iterate through the array and find the maximum sum of increasing subsequence up to the given index and also including a given kth element which is after i\n    max_sum = float('-inf')\n    for i in range(index + 1, n):\n        if a[i] > a[index]:\n            max_sum = max(max_sum, sums[index] + a[i] - sums[i-1])\n\n    # iterate through the array and find the maximum sum of increasing subsequence up to the given index and also including the given kth element\n    for i in range(index + 1, n):\n        if a[i] > k:\n            max_sum = max(max_sum, sums[index] + a[i] - sums[i-1])\n\n    return max_sum",
        "num_ids": 289
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if k <= j:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j] + a[j])\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[0][n - 1]",
        "num_ids": 164
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Base case\n    if index == 0:\n        if k > 0:\n            return a[0]\n        else:\n            return 0\n    \n    # Recursive case\n    # Include the current element\n    if k > index:\n        include = a[index] + max_sum_increasing_subseq(a, n, index-1, k)\n    else:\n        include = 0\n    \n    # Exclude the current element\n    exclude = max_sum_increasing_subseq(a, n, index-1, k)\n    \n    return max(include, exclude)",
        "num_ids": 140
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0] * n for i in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = a[i]\n            else:\n                if index == i and k > i:\n                    dp[i][j] = a[j]\n                else:\n                    if a[j] > a[i]:\n                        dp[i][j] = max(dp[i][j-1], dp[i+1][j] + a[j])\n                    else:\n                        dp[i][j] = dp[i+1][j]\n    return dp[0][n-1]",
        "num_ids": 214
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n        if i > index:\n            dp[i] = max(dp[i], dp[i-index-1] + a[i-1])\n        if i > k > index:\n            dp[i] = max(dp[i], dp[i-k-1] + a[i-1])\n    return dp[n]",
        "num_ids": 181
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return max(a[0], a[1])\n\n    max_sum = -float('inf')\n\n    # For each element before i (including a[index-1]), check if adding it to the increasing subsequence from prefix until i results in a larger sum\n    for i in range(index):\n        if a[i] <= k <= a[index-1]:\n            # If k is within the range of a[i] to a[index-1], add it to the increasing subsequence from prefix until i and find the maximum sum\n            temp_sum = max(a[i], a[index-1]) + max_sum_increasing_subseq(a, n, i, k)\n            max_sum = max(max_sum, temp_sum)\n\n    return max_sum",
        "num_ids": 241
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    dp = [0] * n\n\n    # Traverse from prefix until ith index\n    for i in range(index-1, -1, -1):\n        if a[i] <= a[index]:\n            dp[i] = dp[i+1] + a[i]\n\n    # Traverse from kth element to ith index\n    for i in range(k-1, index-1, -1):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    # Return the maximum sum\n    return max_sum",
        "num_ids": 199
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the variables for dynamic programming\n    dp = [0] * n\n    for i in range(n):\n        if i < k:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[j] + a[i] for j in range(i))\n\n    # Find the maximum sum of increasing subsequence\n    max_sum = float('-inf')\n    for i in range(k, index+1):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum",
        "num_ids": 138
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    prev_sum = 0\n    curr_sum = 0\n    max_prev = 0\n    \n    # Traverse the array from left to right\n    for i in range(index):\n        # Add the current element to the previous sum\n        prev_sum += a[i]\n        \n        # Check if the previous element is included in the increasing subsequence\n        if i >= max_prev:\n            # Add the current element to the current sum\n            curr_sum += a[i]\n            \n            # Check if the current sum is greater than the maximum sum\n            if curr_sum > max_sum:\n                # Update the maximum sum\n                max_sum = curr_sum\n                \n            # Check if the current element is the kth element after index i\n            if i+1 == k:\n                # Update the maximum previous index\n                max_prev = i\n                \n        # If the previous element is not included in the increasing subsequence, reset the current sum\n        else:\n            curr_sum = a[i]\n            \n    # Return the maximum sum\n    return max_sum",
        "num_ids": 291
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0]*n\n    for i in range(n):\n        if i < index:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[j]+a[i] for j in range(i+1))\n    if k > index:\n        return dp[index] + sum(a[index+1:k])\n    else:\n        return dp[index]",
        "num_ids": 155
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a colon of the input tuple.\n\n    :param tuplex: tuple of integers\n    :param m: start index of the colon\n    :param n: end index of the colon (exclusive)\n    :return: tuple of integers\n    \"\"\"\n\n    # Create a copy of the input tuple to avoid modifying it\n    tuplex = deepcopy(tuplex)\n\n    # Swap the elements in the colon\n    for i in range(m, n):\n        tuplex[i-m], tuplex[n-1-m+i] = tuplex[n-1-m+i], tuplex[i-m]\n\n    # Return the colon as a tuple\n    return tuplex[m:n]",
        "num_ids": 167
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a colon of the tuple tuplex between the indices m and n, inclusive.\n    \"\"\"\n    colon_tuplex = deepcopy(tuplex)\n    for i in range(m, n+1):\n        colon_tuplex[i-m] = None\n    return colon_tuplex",
        "num_ids": 83
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Slice the tuple from index m to index n\n    tuplex_copy = tuplex_copy[m:n]\n    \n    return tuplex_copy",
        "num_ids": 88
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplx = deepcopy(tuplex)\n    return tuplx[m:n]",
        "num_ids": 54
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    newtuplex = deepcopy(tuplex)\n    newtuplex = newtuplex[m-1:n]\n    return newtuplex",
        "num_ids": 66
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colx = deepcopy(tuplex)\n    colx = colx[m-1:n]\n    return colx",
        "num_ids": 62
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = deepcopy(tuplex)\n    colon_tuplex = colon_tuplex[m-1:n]\n    return colon_tuplex",
        "num_ids": 70
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n+1]",
        "num_ids": 60
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    This function takes in a tuple 'tuplex' and two integers'm' and 'n', and returns the colon of 'tuplex' from m to n inclusive.\n    '''\n    colontuplex = deepcopy(tuplex)\n    colontuplex = colontuplex[m-1:n] # slicing the tuple from m-1 to n-1 inclusive\n    return colontuplex",
        "num_ids": 107
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    colon = colon[m:n+1]\n    return colon",
        "num_ids": 58
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product not in products:\n                products.append(product)\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]",
        "num_ids": 105
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables for the largest products and the current product\n    max_products = []\n    current_product = 1\n\n    # Iterate over the lists, selecting one factor from each list at each step\n    for i in range(N):\n        current_product *= nums1[i] * nums2[i]\n        max_products.append(current_product)\n\n    return max_products",
        "num_ids": 151
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        max_product = float('-inf')\n        for j in range(len(nums1)):\n            if nums1[j] > 0 and nums2[j] > 0 and nums1[j] * nums2[j] > max_product:\n                max_product = nums1[j] * nums2[j]\n        result.append(max_product)\n        nums1.remove(nums1[nums1.index(max(nums1))])\n        nums2.remove(nums2[nums2.index(max(nums2))])\n    return result",
        "num_ids": 178
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum product and the indices of the corresponding factors\n    max_product = float('-inf')\n    max_indices = []\n    \n    # Iterate through all possible pairs of factors\n    for i in range(N):\n        for j in range(N):\n            # Compute the product of the selected factors and store the maximum\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n                max_indices = [i, j]\n    \n    # Return the maximum product and the selected factors\n    return max_product, nums1[max_indices[0]], nums2[max_indices[1]]",
        "num_ids": 183
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to keep track of largest products and indices\n    largest_products = []\n    largest_indices = []\n\n    # Loop through each element in the first list\n    for i in range(len(nums1)):\n        # Initialize variables to keep track of largest product and index for this element\n        max_product = float('-inf')\n        max_index = -1\n\n        # Loop through each element in the second list\n        for j in range(len(nums2)):\n            # Calculate the product of the current element in each list\n            product = nums1[i] * nums2[j]\n\n            # If this product is greater than the current largest product, update the variables\n            if product > max_product:\n                max_product = product\n                max_index = j\n\n        # Append the largest product and index to the lists\n        largest_products.append(max_product)\n        largest_indices.append(max_index)\n\n    # Sort the lists in descending order\n    largest_products.sort(reverse=True)\n    largest_indices.sort(reverse=True)\n\n    # Return the specified number of largest products and their indices\n    return [(largest_products[i], largest_indices[i]) for i in range(N)]",
        "num_ids": 298
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to keep track of the largest products found\n    max_product1 = max_product2 = float('-inf')\n    \n    # Loop through each factor in the first list\n    for num1 in nums1:\n        # Loop through each factor in the second list\n        for num2 in nums2:\n            # Compute the product and update the maximum if necessary\n            product = num1 * num2\n            if product > max_product1 or (product == max_product1 and num1 > num2):\n                max_product1 = product\n                max_product2 = num1 * max_product2\n                if len(set(nums1)) == len(set(nums2)):\n                    max_product2 = num2 * max_product2\n    \n    # Return the specified number of largest products\n    return max_product1, max_product2",
        "num_ids": 217
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_product = float('-inf')\n        for j in range(len(nums1)):\n            max_product = max(max_product, nums1[j] * nums2[i])\n        max_products.append(max_product)\n    return max_products",
        "num_ids": 114
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Create a list to store the products\n    products = []\n    # Iterate over the first list\n    for num1 in nums1:\n        # Iterate over the second list\n        for num2 in nums2:\n            # Multiply the two factors and append the product to the list\n            products.append(num1 * num2)\n    # Sort the list in descending order and return the first N elements\n    return sorted(products, reverse=True)[:N]",
        "num_ids": 136
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: The two lists must have the same length.\"\n\n    products = []\n    for i in range(len(nums1)):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n\n    sorted_products = sorted(products, reverse=True)\n\n    result = []\n    for i in range(N):\n        result.append(sorted_products[i])\n\n    return result",
        "num_ids": 143
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(N):\n        for j in range(N):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]",
        "num_ids": 65
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    This function finds the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "num_ids": 37
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5,10)) # Output: 10\nprint(maximum(-2,5)) # Output: 5",
        "num_ids": 71
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)",
        "num_ids": 18
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit of n to 1.\n    '''\n    return n | (n + 1)",
        "num_ids": 41
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the rightmost 1-bit in n\n    m = n & -n\n\n    # Set the rightmost 0-bit in n to 1\n    n |= m\n\n    return n",
        "num_ids": 55
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit of a number n.\n    '''\n    # Find the right most set bit\n    right_set_bit = n & -n\n\n    # Set the right most set bit to 1\n    n |= right_set_bit\n\n    return n",
        "num_ids": 71
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Find the left most set bit\n    left_most_set_bit = n & -n\n    \n    # Set the left most unset bit\n    n |= left_most_set_bit\n    \n    return n",
        "num_ids": 73
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a binary number.\n    '''\n    # Find the rightmost set bit\n    rightmost_set_bit = (n & -n)\n\n    # Set the rightmost set bit to 1\n    n |= rightmost_set_bit\n\n    return n",
        "num_ids": 77
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the number with the left most unset bit set to 1.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n & ~(n - 1)",
        "num_ids": 65
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a number.\n    \"\"\"\n    return n | (n - 1)",
        "num_ids": 41
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    # Iterate through the bits of the number from left to right\n    for i in range(31, -1, -1):\n        # Check if the i-th bit is set to 1\n        if (n >> i) & 1 == 0:\n            # Set the i-th bit to 1 and return the modified number\n            return n | (1 << i)\n    # If no unset bit is found, return -1 to indicate failure\n    return -1",
        "num_ids": 114
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the left most unset bit\n    left_most_unset_bit = 1\n    \n    # Loop through each bit from left to right, checking if it is set\n    while n & left_most_unset_bit!= 0:\n        # If the bit is set, shift the left_most_unset_bit to the left by 1\n        left_most_unset_bit <<= 1\n    \n    # Return the left most unset bit\n    return left_most_unset_bit",
        "num_ids": 138
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function returns the number with the left most unset bit set to 1.\n    '''\n    return n | (n + 1)\n",
        "num_ids": 46
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1.0/3.0) * math.pi * r**2 * h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(radius, height))",
        "num_ids": 109
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 50
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h / 3",
        "num_ids": 45
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n        r (float): the radius of the base of the cone.\n        h (float): the height of the cone.\n\n    Returns:\n        float: the volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 91
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes in the radius of a cone and its height to compute its volume.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 58
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 62
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    Parameters:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n    Returns:\n        float: The volume of the cone.\n    '''\n    volume = (1.0 / 3.0) * math.pi * r ** 2 * h\n    return volume",
        "num_ids": 96
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n    Returns:\n    float: The volume of the cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V",
        "num_ids": 93
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns its volume.\n    '''\n    return (1/3)*math.pi*r**2*h",
        "num_ids": 53
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 93
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power // 2",
        "num_ids": 55
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    power /= 2\n    return power",
        "num_ids": 62
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 2\n    while power_of_2 <= n: \n        n -= power_of_2\n        power_of_2 *= 2\n    return power_of_2 // 2",
        "num_ids": 84
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        j = i\n        while j < n:\n            j = j << 1\n        if j == n:\n            return i\n        i = i << 1\n    return None",
        "num_ids": 85
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    low = 1\n    high = n\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if mid == n or mid == 1:\n            return mid\n\n        if mid > n // mid:\n            high = mid - 1\n        else:\n            low = mid + 1",
        "num_ids": 77
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    p = 1\n    while (p * 2) <= n:\n        p *= 2\n    \n    return p",
        "num_ids": 73
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while (2 ** power) <= n:\n        power += 1\n    return 2 ** (power - 1)",
        "num_ids": 69
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to keep track of the highest power of 2 that is less than or equal to n\n    max_power_of_2 = 1\n\n    # Loop through all the possible powers of 2\n    while max_power_of_2 <= n:\n        # Update the maximum power of 2 that is less than or equal to n\n        max_power_of_2 *= 2\n\n    # Return the highest power of 2 that is less than or equal to n\n    return max_power_of_2 // 2",
        "num_ids": 156
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 *= 2\n    return highest_power_of_2 // 2",
        "num_ids": 81
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        n -= power_of_2\n        power_of_2 *= 2\n    return power_of_2 // 2",
        "num_ids": 84
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) ",
        "num_ids": 74
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    This function finds then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 71
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr\n",
        "num_ids": 98
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    \"\"\"\n    This function takes an integer n as input and returns then'th Lucas number.\n    \"\"\"\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        l1 = 2\n        l2 = 1\n        for i in range(2, n+1): \n            l = l1 + l2 \n            l1 = l2 \n            l2 = l \n        return l",
        "num_ids": 102
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 55
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 72
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr",
        "num_ids": 79
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes in an integer n and returns then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev_num = 2\n        prev_num = 1\n        for i in range(2, n+1):\n            curr_num = prev_prev_num + prev_num\n            prev_prev_num = prev_num\n            prev_num = curr_num\n        return curr_num\n",
        "num_ids": 121
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(lst, fmt):\n    '''\n    This function takes a list and a format string as input. It applies the format string to each element of the list and returns a new list containing the modified elements.\n    '''\n    # Create an empty list to store the modified elements\n    modified_lst = []\n    # Iterate over each element in the input list\n    for elem in lst:\n        # Apply the format string to the element and append it to the modified list\n        modified_lst.append(fmt.format(elem))\n    # Return the modified list\n    return modified_lst",
        "num_ids": 121
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(lst, string):\n    \"\"\"\n    This function takes a list and a string as input and applies the given string to all the elements in the list.\n    \"\"\"\n    for i in range(len(lst)):\n        lst[i] = string.format(lst[i])\n    return lst",
        "num_ids": 65
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(lst, string):\n    '''\n    Apply a given format string to all elements of a list.\n    '''\n    return [string.format(elem) for elem in lst]",
        "num_ids": 41
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(lst, string):\n    \"\"\"\n    Applies the format string to each element in the list and returns the modified list.\n\n    :param lst: list of strings\n    :param string: format string\n    :return: modified list of strings\n    \"\"\"\n    return [string.format(s) for s in lst]",
        "num_ids": 68
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(lst, string):\n    \"\"\"\n    Apply a format string to all elements of a list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(string.format(item))\n    return result",
        "num_ids": 50
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]",
        "num_ids": 47
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        d = {}\n        d['name'] = l1[i]\n        d['age'] = l2[i]\n        d['gender'] = l3[i]\n        result.append(d)\n    return result",
        "num_ids": 97
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert multiple lists to nested dictionary.\n\n    Args:\n        l1 (list): A list of keys.\n        l2 (list): A list of values.\n        l3 (list): A list of dictionaries.\n\n    Returns:\n        A nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        sub_dict = l3[i]\n        if key not in result:\n            result[key] = {}\n        result[key][sub_dict['sub_key']] = sub_dict['sub_value']\n    return result",
        "num_ids": 153
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {}\n        for j in range(len(l2)):\n            dictionary[l1[i]][l2[j]] = {}\n            for k in range(len(l3)):\n                dictionary[l1[i]][l2[j]][l3[k]] = i + j + k\n    return dictionary",
        "num_ids": 124
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and converts them into a nested dictionary.\n    The function takes three lists l1, l2, and l3 as input.\n    Each list contains key-value pairs in the format of {'key': 'value'}.\n    The function converts the three lists to a nested dictionary with the following format:\n    {\n        'list1': {\n            'key1': 'value1',\n            'key2': 'value2',\n            ...\n        },\n        'list2': {\n            'key1': 'value1',\n            'key2': 'value2',\n            ...\n        },\n        'list3': {\n            'key1': 'value1',\n            'key2': 'value2',\n            ...\n        }\n    }\n    \"\"\"\n\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Iterate through the three lists and add each list as a key in the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[f'list{i+1}'] = {}\n\n    # Iterate through the three lists and add the key-value pairs to their respective lists\n    for i in range(len(l1)):\n        for key, value in l1[i].items():\n            nested_dict[f'list{i+1}'][key] = value\n        for key, value in l2[i].items():\n            nested_dict[f'list{i+2}'][key] = value\n        for key, value in l3[i].items():\n            nested_dict[f'list{i+3}'][key] = value\n\n    return nested_dict",
        "num_ids": 366
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]]['list2'] = l2[i]\n        result[l1[i]]['list3'] = l3[i]\n    return result",
        "num_ids": 99
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Combine the three lists into a list of tuples\n    combined_list = list(zip(l1, l2, l3))\n    \n    # Create an empty dictionary to store the nested dictionary\n    result_dict = {}\n    \n    # Iterate over the combined list of tuples and create the nested dictionary\n    for item in combined_list:\n        key1 = item[0]\n        key2 = item[1]\n        value = item[2]\n        \n        # Check if key1 already exists in the result_dict\n        if key1 in result_dict:\n            # If key1 already exists, check if key2 already exists in the nested dictionary\n            if key2 in result_dict[key1]:\n                # If key2 already exists, append the value to the existing list\n                result_dict[key1][key2].append(value)\n            else:\n                # If key2 does not exist, create a new list with the value and add it to the nested dictionary\n                result_dict[key1][key2] = [value]\n        else:\n            # If key1 does not exist, create a new nested dictionary with key2 and value\n            result_dict[key1] = {key2: [value]}\n    \n    return result_dict",
        "num_ids": 292
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result[l1[i]] = {}\n        if l2[i] not in result[l1[i]]:\n            result[l1[i]][l2[i]] = []\n        result[l1[i]][l2[i]].append(l3[i])\n    return result",
        "num_ids": 125
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nprint(get_max_sum(10)) # Output: 18",
        "num_ids": 103
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)",
        "num_ids": 128
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    # base case\n    if n <= 1:\n        return n\n    \n    # recursive case\n    else:\n        return max(n, (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)))",
        "num_ids": 81
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    # Initialize the maximum sum variable to 0\n    max_sum = 0\n    \n    # Loop through each integer from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of the four largest factors of i\n        largest_factors = [f for f in (i//2, i//3, i//4, i//5) if f > 0]\n        sum_of_factors = sum(largest_factors)\n        \n        # Update the maximum sum variable if necessary\n        if sum_of_factors > max_sum:\n            max_sum = sum_of_factors\n    \n    # Add n to the maximum sum variable to include the last factor\n    max_sum += n\n    \n    # Return the maximum sum\n    return max_sum",
        "num_ids": 170
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n\n    max_sum = float('-inf')\n\n    for i in range(1, n+1):\n        if i % 2 == 0 and i % 3 == 0 and i % 4 == 0 and i % 5 == 0:\n            max_sum = i\n        else:\n            sum = (i/2) + (i/3) + (i/4) + (i/5)\n            if sum > max_sum:\n                max_sum = sum\n\n    return max_sum",
        "num_ids": 186
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    max_sum = max((n//2) + get_max_sum(n//2), n)\n    max_sum = max((n//3) + get_max_sum(n//3), max_sum)\n    max_sum = max((n//4) + get_max_sum(n//4), max_sum)\n    max_sum = max((n//5) + get_max_sum(n//5), max_sum)\n    \n    return max_sum",
        "num_ids": 127
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "num_ids": 131
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    max_sum = 0\n    for i in range(2, n+1):\n        max_sum = max(max_sum, (get_max_sum(i//2) + get_max_sum(i//3) + get_max_sum(i//4) + get_max_sum(i//5) + i))\n    return max_sum",
        "num_ids": 103
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)",
        "num_ids": 128
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n\n    if n % 2 == 0:\n        return max(n, get_max_sum(n // 2) + n // 2)\n    elif n % 3 == 0:\n        return max(n, get_max_sum(n // 3) + n // 3)\n    elif n % 4 == 0:\n        return max(n, get_max_sum(n // 4) + n // 4)\n    elif n % 5 == 0:\n        return max(n, get_max_sum(n // 5) + n // 5)\n    else:\n        return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))",
        "num_ids": 264
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_list = [i]\n        elif len(i) == max_length:\n            max_length_list.append(i)\n    \n    return max_length_list",
        "num_ids": 110
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    \n    return max_list\n",
        "num_ids": 81
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    return result",
        "num_ids": 94
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 91
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function finds the list with maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 83
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n            \n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list",
        "num_ids": 102
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Using set() function to remove duplicates and then comparing the length of original and new tuples\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 63
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return \"All characters are repeating\"",
        "num_ids": 111
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    # create an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary and return the first character that has a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeating characters are found, return None\n    return None",
        "num_ids": 170
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Returns the first non-repeating character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char",
        "num_ids": 98
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the string and find the first character that has a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no character has a count of 1, return None\n    return None",
        "num_ids": 152
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Loop through the string and return the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None",
        "num_ids": 137
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_dict = {}\n    for char in str1:\n        if char in str_dict:\n            str_dict[char] += 1\n        else:\n            str_dict[char] = 1\n    \n    for char in str1:\n        if str_dict[char] == 1:\n            return char",
        "num_ids": 102
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Loop through the string and return the first non-repeating character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # If all characters are repeating, return None\n    return None",
        "num_ids": 124
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the count of each character\n    count = {}\n    for c in str1:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n\n    # Iterate over the characters of the string and return the first one with count 1\n    for c in str1:\n        if count[c] == 1:\n            return c\n\n    # If no character is found, return None\n    return None",
        "num_ids": 130
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create an empty dictionary to store character frequencies\n    char_freq = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency count\n        if char in char_freq:\n            char_freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency count of 1\n        else:\n            char_freq[char] = 1\n    \n    # loop through each character in the string again\n    for char in str1:\n        # if the frequency count of the character is 1, return that character as the first non-repeated character\n        if char_freq[char] == 1:\n            return char\n    \n    # if no non-repeated characters are found, return None\n    return None",
        "num_ids": 205
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if len(string) < 2:\n        return True\n    pattern = re.compile(r'^([a-z]).*\\1$')\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 89
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    # Check if the string starts and ends with the same character\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 66
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    This function checks whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    # Test cases\n    string1 = \"abc\"\n    string2 = \"aBc\"\n    string3 = \"abcc\"\n    string4 = \"abC\"\n    string5 = \"Abc\"\n\n    print(check_char(string1)) # True\n    print(check_char(string2)) # True\n    print(check_char(string3)) # False\n    print(check_char(string4)) # False\n    print(check_char(string5)) # False",
        "num_ids": 171
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "num_ids": 53
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of them.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    median = sorted_numbers[1]\n    return median",
        "num_ids": 56
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "num_ids": 54
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "num_ids": 53
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #sort the numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    #if the sum of the first two numbers is greater than the third number,\n    #the median is the second number\n    if sorted_nums[0] + sorted_nums[1] > sorted_nums[2]:\n        return sorted_nums[1]\n\n    #if the sum of the second two numbers is greater than the first number,\n    #the median is the first number\n    elif sorted_nums[1] + sorted_nums[2] > sorted_nums[0]:\n        return sorted_nums[0]\n\n    #otherwise, the median is the third number\n    else:\n        return sorted_nums[2]",
        "num_ids": 180
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n\nprint(median_numbers(1,2,3)) # Expected output: 2\nprint(median_numbers(5,3,1)) # Expected output: 3\nprint(median_numbers(4,5,6)) # Expected output: 5",
        "num_ids": 111
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes in three numbers as arguments and returns their median value.\n    '''\n    numbers = sorted([a, b, c])\n    mid_index = len(numbers) // 2\n\n    if len(numbers) % 2 == 0:\n        # if there are even number of numbers, return the average of the two middle numbers\n        return (numbers[mid_index-1] + numbers[mid_index]) / 2\n    else:\n        # if there are odd number of numbers, return the middle number\n        return numbers[mid_index]",
        "num_ids": 131
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sorting the three numbers\n    sorted_numbers = sorted([a,b,c])\n    # checking if the median is an even number or odd number\n    if sorted_numbers[1] == sorted_numbers[2]:\n        # if the median is an even number, return the average of the two middle numbers\n        return (sorted_numbers[1] + sorted_numbers[2])/2\n    else:\n        # if the median is an odd number, return the middle number\n        return sorted_numbers[1]",
        "num_ids": 135
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    # Find the median of the three numbers\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median",
        "num_ids": 114
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median of the three numbers\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2] + sorted_numbers[len(sorted_numbers) // 2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median",
        "num_ids": 141
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        total = 0\n        for digit in str(num):\n            total += int(digit)\n        sum_of_digits.append(total)\n    return sum_of_digits",
        "num_ids": 84
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        # convert each number to string and iterate over its characters\n        # to add the integer value of each character to a running total\n        total = 0\n        for char in str(num):\n            total += int(char)\n        result.append(total)\n    return result",
        "num_ids": 98
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_digits(num)\n    return sum\n\ndef sum_digits(num):\n    '''\n    Returns the sum of digits of a given number.\n    '''\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum",
        "num_ids": 109
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result",
        "num_ids": 72
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Computes the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        # convert the number to a string and compute its sum of digits\n        sum_digits = sum(int(digit) for digit in str(num))\n        result.append(sum_digits)\n    return result",
        "num_ids": 82
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        while num > 0:\n            total_sum += num % 10\n            num = num // 10\n    return total_sum",
        "num_ids": 75
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function computes the sum of digits of each number in a list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits",
        "num_ids": 72
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        result.append(sum)\n    return result",
        "num_ids": 83
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        print(sum)",
        "num_ids": 74
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_list.append(sum(int(digit) for digit in str(num)))\n    return sum_list",
        "num_ids": 69
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    This function performs the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 76
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)",
        "num_ids": 84
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set(test_list)\n    return len(freq)",
        "num_ids": 45
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)",
        "num_ids": 64
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    freq = set()\n    for tuple in test_list:\n        freq.add(tuple)\n    return len(freq)",
        "num_ids": 36
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            tup = tuple(sorted([test_list[i], test_list[j]]))\n            if tup in freq_dict:\n                freq_dict[tup] += 1\n            else:\n                freq_dict[tup] = 1\n    return len(freq_dict)",
        "num_ids": 122
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for tuple in test_list:\n        if tuple not in freq_dict:\n            freq_dict[tuple] = 1\n        else:\n            freq_dict[tuple] += 1\n    return len(freq_dict)",
        "num_ids": 64
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(t) for t in test_list)\n    return len(unique_tuples)",
        "num_ids": 56
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "num_ids": 49
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for tup in test_list:\n        freq.add(tup)\n    return len(freq)",
        "num_ids": 56
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq_list = []\n    for i in test_list:\n        if i not in freq_list:\n            freq_list.append(i)\n    return len(freq_list)",
        "num_ids": 73
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        row = ()\n        for j in range(len(test_tup1[i])):\n            row += (test_tup1[i][j] + test_tup2[i][j], )\n        result += (row, )\n    return result",
        "num_ids": 112
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        nested_result = []\n        for j in range(len(test_tup1[i])):\n            nested_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(nested_result))\n    return tuple(result)",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        inner_tup = ()\n        for j in range(len(test_tup1[i])):\n            inner_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (inner_tup,)\n    return result",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        inner_tup = ()\n        for j in range(len(test_tup1[i])):\n            inner_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (inner_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(tuple(map(lambda x, y: x+y, test_tup1[i], test_tup2[i])))\n    return tuple(result_tup)",
        "num_ids": 102
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        \n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        \n        result_tup += (temp_tup,)\n    \n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function returns the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 37
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum value.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 41
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a<b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1",
        "num_ids": 38
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two parameters:\n    - tuplex: A tuple that needs to be checked.\n    - tuple1: A tuple that contains elements that needs to be searched in tuplex.\n\n    This function returns True if all elements of tuple1 exists in tuplex and False otherwise.\n    '''\n    for i in tuple1:\n        if i not in tuplex:\n            return False\n    return True",
        "num_ids": 96
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even\")\n    else:\n        print(f\"{x} is odd\")",
        "num_ids": 63
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Returns True if the parity of the given number is odd, False otherwise.\n    \"\"\"\n    return x % 2 == 1",
        "num_ids": 38
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")",
        "num_ids": 69
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_parity(x):\n    '''\n    This function takes in a number and returns True if the parity of the number is odd and False if the parity is even.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 57
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns True if the parity of the number is odd, else False.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 55
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        print(\"The parity of the given number is odd.\")\n    else:\n        print(\"The parity of the given number is even.\")",
        "num_ids": 67
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the rightmost digit that needs to be swapped\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    # If there are no digits to swap, return None\n    if i < 0:\n        return None\n    \n    # Find the digit to swap with\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the digits and return the result\n    digits[i], digits[j] = digits[j], digits[i]\n    return int(\"\".join(digits))",
        "num_ids": 192
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Convert n to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Find the index of the rightmost digit that can be incremented\n    i = len(digits) - 1\n    while i > 0 and digits[i] >= digits[i-1]:\n        i -= 1\n    \n    # If no such digit exists, return -1\n    if i == 0:\n        return -1\n    \n    # Increment the rightmost digit that can be incremented\n    digits[i-1] += 1\n    \n    # Set all digits to the right of i to 0\n    for j in range(i, len(digits)):\n        digits[j] = 0\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(str(d) for d in digits))",
        "num_ids": 189
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = list(map(int, str(n)))\n    \n    # Initialize variables for the index of the digit to be moved and the direction (up or down)\n    move_index = None\n    direction = None\n    \n    # Iterate over the digits from right to left\n    for i in range(len(digits) - 2, -1, -1):\n        # If the current digit is greater than the next digit, update the move_index and direction\n        if digits[i] > digits[i+1]:\n            move_index = i\n            direction = 'up'\n            break\n    \n    # If no digit was found to be moved, return None\n    if move_index is None:\n        return None\n    \n    # Move the digit up or down based on the direction\n    if direction == 'up':\n        digits[move_index], digits[move_index+1] = digits[move_index+1], digits[move_index]\n    else:\n        digits[move_index], digits[move_index+1] = digits[move_index+1], digits[move_index]\n        digits[move_index+1] -= 1\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(map(str, digits)))",
        "num_ids": 311
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Find the index of the maximum digit\n    max_idx = digits.index(max(digits))\n    \n    # Swap the maximum digit with the last digit\n    digits[max_idx], digits[-1] = digits[-1], digits[max_idx]\n    \n    # Reverse the remaining digits\n    digits[max_idx+1:] = digits[max_idx+1:][::-1]\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(str(d) for d in digits))",
        "num_ids": 147
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = list(str(n))\n    arr.sort(reverse=True)\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            j = i\n            while j < len(arr) and arr[j] == arr[i]:\n                j += 1\n            arr[i], arr[j-1] = arr[j-1], arr[i]\n            break\n    arr.sort(reverse=True)\n    return int(''.join(arr))\n",
        "num_ids": 146
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    n = str(n)\n    # Initialize a list to store the digits\n    digits = []\n    # Loop through the digits of the number and append them to the list\n    for i in n:\n        digits.append(i)\n    # Initialize a variable to store the index of the digit to swap\n    swap_index = None\n    # Loop through the digits of the list and find the first digit that is smaller than the digit next to it\n    for i in range(len(digits)-1):\n        if int(digits[i]) < int(digits[i+1]):\n            swap_index = i\n            break\n    # If no such digit is found, return -1\n    if swap_index is None:\n        return -1\n    # Swap the digits at the swap index with the digit next to it\n    digits[swap_index], digits[swap_index+1] = digits[swap_index+1], digits[swap_index]\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))",
        "num_ids": 238
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    n = list(str(n))\n    i = len(n)-2\n    while i>=0 and n[i]>=n[i+1]:\n        i -= 1\n    if i<0:\n        return -1\n    j = i+1\n    while j<len(n) and n[j]>n[i]:\n        j += 1\n    n[i],n[j-1] = n[j-1],n[i]\n    n[i+1:] = sorted(n[i+1:])\n    return int(\"\".join(n))",
        "num_ids": 134
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # convert n to a string so we can manipulate its digits\n    digits = list(str(n))\n\n    # find the index of the rightmost digit that can be moved\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            rightmost_index = i\n            break\n\n    # if there is no such digit, n is the largest possible number\n    if rightmost_index is None:\n        return -1\n\n    # find the index of the digit that is just smaller than digits[rightmost_index]\n    # that is, the digit that would need to move to digits[rightmost_index]\n    for i in range(len(digits)-1, rightmost_index, -1):\n        if digits[i] < digits[rightmost_index]:\n            target_index = i\n            break\n\n    # swap digits[rightmost_index] and digits[target_index]\n    digits[rightmost_index], digits[target_index] = digits[target_index], digits[rightmost_index]\n\n    # reverse the remaining digits\n    digits[rightmost_index+1:] = digits[rightmost_index+1:][::-1]\n\n    # convert the digits back to an integer and return it\n    return int(''.join(digits))",
        "num_ids": 292
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    n_str = str(n)\n    length = len(n_str)\n    \n    # find the index of the rightmost digit to be swapped\n    i = length - 2\n    while i >= 0 and n_str[i] >= n_str[i+1]:\n        i -= 1\n    \n    # if all digits are in descending order, return -1\n    if i == -1:\n        return -1\n    \n    # find the index of the smallest digit in the right side of i\n    j = i + 1\n    while j < length and n_str[j] < n_str[i]:\n        j += 1\n    \n    # swap the digits at i and j\n    n_str = n_str[:i] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]\n    return int(n_str)\n",
        "num_ids": 234
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string and split it into digits\n    digits = list(str(n))\n    \n    # Find the rightmost digit that can be swapped\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            # Swap the digits and return the result as an integer\n            left = digits[:i]\n            right = digits[i+1:]\n            for j in range(len(right)-1, -1, -1):\n                if right[j] > digits[i]:\n                    break\n            right[j], right[0] = right[0], right[j]\n            return int(''.join(left + right))\n    \n    # If no suitable digit is found, return -1\n    return -1",
        "num_ids": 179
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n\n    result = []\n    for i in range(k):\n        pair = heapq.heappop(heap)\n        result.append((pair[1], pair[2]))\n\n    return result",
        "num_ids": 137
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            if len(pairs) < k:\n                heapq.heappush(pairs, pair)\n            else:\n                heapq.heappushpop(pairs, pair)\n    return pairs",
        "num_ids": 123
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    res = []\n    for i in range(k):\n        pair = heapq.heappop(heap)\n        res.append((nums1[pair[1]], nums2[pair[2]]))\n    return res\n",
        "num_ids": 121
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        heap = []\n        for i in range(len(nums2)):\n            heapq.heappush(heap, (nums2[i]*-1, nums2[i], i))\n        while heap and k > 0:\n            _, pair, i = heapq.heappop(heap)\n            pairs.append((num, pair))\n            k -= 1\n    return pairs",
        "num_ids": 115
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        heap = []\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums2[j], j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n        pairs.extend([(num, x) for x, y in heap])\n    return pairs[:k]",
        "num_ids": 107
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n\n    # Push all pairs to the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n\n    # Pop k pairs from the heap and return them\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(heap))\n\n    return result",
        "num_ids": 145
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap\n\nnums1 = [1, 3, 5, 7, 9]\nnums2 = [2, 4, 6, 8, 10]\nk = 3\n\nprint(k_smallest_pairs(nums1, nums2, k))",
        "num_ids": 151
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap",
        "num_ids": 119
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        for num2 in nums2:\n            pair = (num, num2)\n            heapq.heappush(pairs, pair)\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return sorted(pairs)",
        "num_ids": 87
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i]+nums2[j], nums1[i], nums2[j]))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap",
        "num_ids": 100
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 106
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for pair in itertools.combinations(list1, 2):\n        product = pair[0][0] * pair[0][1] * pair[1][0] * pair[1][1]\n        if product < min_product:\n            min_product = product\n    return min_product",
        "num_ids": 107
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if min_product is None or product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 125
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    min_product = float('inf')  # initialize minimum product with infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if product < min_product:  # update minimum product if necessary\n                min_product = product\n    return min_product",
        "num_ids": 110
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for t1 in list1:\n        for t2 in list1:\n            if t1!= t2:\n                product = t1[0] * t1[1] * t2[0] * t2[1]\n                if product < min_product:\n                    min_product = product\n    return min_product",
        "num_ids": 112
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 68
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 80
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    minimum = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    \n    return minimum",
        "num_ids": 86
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a list of integers or floats.\n\n    Args:\n    lst (list): A list of integers or floats.\n\n    Returns:\n    int or float: The minimum value in the list.\n    \"\"\"\n    if not lst:\n        return None\n    return min(lst)",
        "num_ids": 69
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]  # assuming the first element is the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 90
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a list.\n    If the list is empty, returns None.\n    \"\"\"\n    if not lst:\n        return None\n    else:\n        return min(lst)",
        "num_ids": 48
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in listval:\n        if type(i) == type(min_val):\n            if i < min_val:\n                min_val = i\n        else:\n            if type(i) == type(min_val):\n                min_val = i\n    return min_val",
        "num_ids": 110
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function returns the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in listval:\n        if type(i) == str:\n            if i < min_val:\n                min_val = i\n        elif type(i) == int:\n            if i < min_val:\n                min_val = i\n        elif type(i) == float:\n            if i < min_val:\n                min_val = i\n    return min_val",
        "num_ids": 119
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a snake case string and converts it to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 46
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))",
        "num_ids": 44
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word",
        "num_ids": 80
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function converts a snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = word.split('_')\n    \n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    \n    # Join the words back to form the camel case string\n    return ''.join(words)",
        "num_ids": 87
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string and returns the camel case equivalent.\n    \"\"\"\n    # Split the string into words using regex\n    words = re.findall(r'\\w+', word)\n    \n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    \n    # Join the words back into a string with the first word capitalized\n    camel_case_string = words[0].capitalize() + ''.join(word.title() for word in words[1:])\n    \n    return camel_case_string",
        "num_ids": 125
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))",
        "num_ids": 51
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake_case string to camelCase string.\n    \"\"\"\n    words = re.findall(r'\\w+', word)\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 64
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))",
        "num_ids": 44
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda x: x.group(1).upper(), word)",
        "num_ids": 59
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 63
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as an input and returns a new list without the odd numbers.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 67
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the odd numbers removed from it.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 70
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list without odd numbers.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 46
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a list of integers.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 39
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    This function removes odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 40
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 62
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all the odd numbers from it.\n    '''\n    return [num for num in l if num%2!=0]",
        "num_ids": 44
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all the odd numbers from it.\n    '''\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l",
        "num_ids": 55
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function extracts the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]",
        "num_ids": 43
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as input and extracts the nth element from each tuple.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result",
        "num_ids": 62
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "num_ids": 44
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"Extract the nth element from a list of tuples\"\"\"\n    return [t[n] for t in lst]",
        "num_ids": 36
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # iterate through each tuple in the list\n    for tup in list1:\n        # if the nth element is found, return it\n        if n == 1:\n            return tup[n-1]\n        # decrement n and continue iterating through the list\n        n -= 1\n    # if n is still greater than the length of the list, return None\n    return None",
        "num_ids": 110
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # initialize an empty list to store the nth elements\n    nth_elements = []\n\n    # iterate through the list of tuples\n    for tpl in list1:\n        # append the nth element of each tuple to the list of nth elements\n        nth_elements.append(tpl[n-1])\n\n    return nth_elements",
        "num_ids": 98
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "num_ids": 44
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(zip(*list1))[n-1]",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples and extracts the nth element from each tuple.\n\n    Parameters:\n    lst (list): A list of tuples.\n    n (int): An integer specifying the index of the element to be extracted.\n\n    Returns:\n    list: A list of nth elements from each tuple.\n\n    \"\"\"\n    result = []\n    for tup in lst:\n        result.append(tup[n])\n    return result",
        "num_ids": 101
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result",
        "num_ids": 58
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in the first list is present in the second list.\n    If no value is found, it returns False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "num_ids": 70
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check if any value in list1 exists in list2 or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "num_ids": 49
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two lists as input and returns True if any value in list1 exists in list2 and False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in a sequence or not.\n    It takes two parameters, list1 and list2, which are sequences of values.\n    Returns True if any value in list1 exists in list2, otherwise it returns False.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False",
        "num_ids": 105
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if any value in list1 exists in list2 and vice versa,\n    otherwise it returns False.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Returns True if there are any overlapping values between two lists,\n    and False otherwise.\n    \"\"\"\n    return any(value in list2 for value in list1)",
        "num_ids": 46
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 49
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = float('-inf')\n    second_max_num = float('-inf')\n    for num in arr: \n        if num > max_num: \n            second_max_num = max_num \n            max_num = num \n        elif num > second_max_num and num!= max_num: \n            second_max_num = num \n    return (max_num-1) * (second_max_num-1) ",
        "num_ids": 125
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            product = arr[i] * arr[j] \n            if product > max_product: \n                max_product = product \n    return max_product",
        "num_ids": 93
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Returns the maximum product of two distinct elements in the given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 96
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    elif n == 2:\n        return (max(arr[0], arr[1]), min(arr[0], arr[1]))\n    else:\n        max_product = -float('inf')\n        max_pair = None\n        for i in range(n):\n            for j in range(i+1, n):\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    max_product = product\n                    max_pair = (arr[i], arr[j])\n        return max_pair",
        "num_ids": 162
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair",
        "num_ids": 128
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair, max_product",
        "num_ids": 119
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_index1 = max_index2 = -1\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_index1 = i\n                max_index2 = j\n    \n    return [max_index1, max_index2]",
        "num_ids": 130
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return \"Array should have atleast two elements\"\n    \n    max_num = arr[0]\n    min_num = arr[0]\n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_product = max_num * (max_num if i == 1 else max(max_product, arr[i-2] * arr[i]))\n            \n        elif arr[i] < min_num:\n            min_num = arr[i]\n            min_product = min_num * (min_num if i == 1 else min(min_product, arr[i-2] * arr[i]))\n    \n    return max(max_product, min_product)\n",
        "num_ids": 227
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = []\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    \n    return max_pair, max_product",
        "num_ids": 119
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair",
        "num_ids": 115
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store the tuples\n    d = {}\n\n    # iterate through the list of tuples\n    for tup in Input:\n        # check if the first element of the tuple is already present in the dictionary\n        if tup[0] in d:\n            # if yes, add the tuple to the list of tuples associated with the first element\n            d[tup[0]].append(tup)\n        else:\n            # if not, create a new key-value pair with the first element as the key and a list containing the tuple as the value\n            d[tup[0]] = [tup]\n\n    # iterate through the dictionary to find the common first element\n    for key in d:\n        if len(d[key]) > 1:\n            # if there are multiple tuples with the same first element, return the list of tuples\n            return d[key]\n\n    # if there are no common first elements, return an empty list\n    return []",
        "num_ids": 222
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for i in Input:\n        if i[0] in result:\n            result[i[0]].append(i)\n        else:\n            result[i[0]] = [i]\n    return result",
        "num_ids": 74
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for t in Input:\n        if common_first_element is None:\n            common_first_element = t[0]\n        elif common_first_element!= t[0]:\n            return None\n    return common_first_element",
        "num_ids": 84
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for i in range(len(Input)):\n        if common_first_element is None:\n            common_first_element = Input[i][0]\n        elif Input[i][0]!= common_first_element:\n            return None\n    return common_first_element",
        "num_ids": 93
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for t in Input:\n        first_element = t[0]\n        if first_element in groups:\n            groups[first_element].append(t)\n        else:\n            groups[first_element] = [t]\n    return groups",
        "num_ids": 82
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes in a list of tuples and returns a new list of tuples \n    containing only the tuples that have the same first element.\n    '''\n    Output = []\n    for tup in Input:\n        if tup[0] not in [t[0] for t in Output]:\n            Output.append(tup)\n    return Output",
        "num_ids": 78
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store the count of each element\n    count_dict = {}\n    \n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Get the first element of the tuple\n        first_elem = tup[0]\n        \n        # If the first element is not already in the dictionary, add it and set the count to 1\n        if first_elem not in count_dict:\n            count_dict[first_elem] = 1\n        \n        # If the first element is already in the dictionary, increment its count\n        else:\n            count_dict[first_elem] += 1\n    \n    # Create a new list to store the tuples with the highest count\n    max_count = max(count_dict.values())\n    result = []\n    \n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Get the first element of the tuple\n        first_elem = tup[0]\n        \n        # If the count of the first element is equal to the maximum count, add the tuple to the result list\n        if count_dict[first_elem] == max_count:\n            result.append(tup)\n    \n    # Return the result list\n    return result",
        "num_ids": 274
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = set([x[0] for x in Input])\n    return common_first_element",
        "num_ids": 52
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tup in Input:\n        key = tup[0]\n        if key in result:\n            result[key].append(tup)\n        else:\n            result[key] = [tup]\n    return result",
        "num_ids": 74
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element == None:\n            common_element = tup[0]\n        elif common_element!= tup[0]:\n            return common_element\n    return common_element",
        "num_ids": 76
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(str(ele)) > max_len:\n            max_len = len(str(ele))\n            max_ele = ele\n    return max_ele",
        "num_ids": 82
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    for i in lst:\n        if len(i) == max_len:\n            return i",
        "num_ids": 66
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_max(lst):\n    max_element = lst[0]\n    max_length = len(max_element)\n    for element in lst:\n        if len(element) > max_length:\n            max_element = element\n            max_length = len(element)\n    return max_element",
        "num_ids": 65
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(map(lambda x: round(x), list1))\n    print(total_sum * len(list1))",
        "num_ids": 74
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(map(lambda x: round(x), list1))\n    total_length = len(list1)\n    result = total_sum * total_length\n    print(result)",
        "num_ids": 87
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))",
        "num_ids": 44
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    This function takes a list of numbers as input and rounds each number to the nearest integer and returns the sum of rounded numbers multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 92
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**3\n    return sum",
        "num_ids": 65
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n*2, 2):\n        cube_sum += i**3\n    return cube_sum",
        "num_ids": 64
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    \n    while i <= n:\n        sum += pow(i, 3)\n        i += 2\n        \n    return sum",
        "num_ids": 63
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 2\n    return sum\n",
        "num_ids": 60
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    This function finds the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 55
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n*2, 2):\n        cube_sum += i**3\n    return cube_sum",
        "num_ids": 64
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes in an integer n and returns the cube sum of first n even natural numbers.\n    '''\n    # Initialize a variable to store the sum of cubes of even natural numbers\n    cube_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n*2, 2): \n        # Add the cube of each even natural number to the sum\n        cube_sum += i**3\n    \n    # Return the sum of cubes of even natural numbers\n    return cube_sum",
        "num_ids": 118
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Returns the sum of cubes of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 56
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1] # remove the last delimiter",
        "num_ids": 62
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-len(delimiter)]",
        "num_ids": 61
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function takes a tuple as input and concatenates each element of tuple by the delimiter.\n    By default, the delimiter is a space.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "num_ids": 74
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    \"\"\"\n    This function takes a tuple as input and concatenates each element of tuple by the delimiter.\n    \"\"\"\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-2]",
        "num_ids": 72
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            result += str(test_tup[i])\n        else:\n            result += str(test_tup[i]) + delimiter\n    return result",
        "num_ids": 90
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result",
        "num_ids": 54
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1] # remove last delimiter",
        "num_ids": 61
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "num_ids": 57
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-len(delimiter)]",
        "num_ids": 67
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]  # remove the last delimiter",
        "num_ids": 65
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average",
        "num_ids": 81
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_average_of_cubes(n):\n    '''\n    This function calculates the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average",
        "num_ids": 64
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n",
        "num_ids": 66
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**3\n    return total_sum/n",
        "num_ids": 68
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n",
        "num_ids": 77
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n",
        "num_ids": 92
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n",
        "num_ids": 62
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum and count variables to zero\n    sum = 0\n    count = 0\n    \n    # Loop through first n natural numbers\n    for i in range(1, n+1):\n        # Calculate cube of the current number and add it to the sum\n        sum += i**3\n        # Increment count variable\n        count += 1\n    \n    # Calculate the average of cubes\n    average = sum / count\n    \n    # Return the average of cubes\n    return average",
        "num_ids": 132
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        \n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes",
        "num_ids": 91
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n",
        "num_ids": 62
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function will extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return tuple(rear_list)",
        "num_ids": 65
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    rear_index = len(test_tuple[0]) - 1 # set rear index as the index of last character in the first string in the tuple\n    rear_tuple = () # create an empty tuple to store the rear index elements\n    for string in test_tuple:\n        rear_tuple += (string[rear_index],) # add the rear index element to the rear_tuple tuple\n    return rear_tuple",
        "num_ids": 98
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    result_tuple = ()\n    for string in test_tuple:\n        result_tuple = result_tuple + (string[rear_index],)\n    return result_tuple",
        "num_ids": 85
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple",
        "num_ids": 67
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return tuple(rear_list)",
        "num_ids": 66
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple",
        "num_ids": 67
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1  # assuming all strings have the same length\n    return tuple(s[rear_index] for s in test_tuple)",
        "num_ids": 75
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    \"\"\"\n    Counts the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        for j in range(len(list1[i])): \n            if list1[i][j] == x: \n                count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, elem):\n    count = 0\n    for sublist in lst:\n        if elem in sublist:\n            count += 1\n    return count",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 52
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 52
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 1:\n            result.append(num)\n    return result",
        "num_ids": 52
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    return result",
        "num_ids": 52
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))",
        "num_ids": 40
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 68
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 39
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 103
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = '{}-{}-{}'.format(day, month, year)\n        return new_date\n    else:\n        return 'Invalid date format'",
        "num_ids": 126
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 107
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match the date format (yyyy-mm-dd)\n    date_pattern = re.compile(r'^\\d{4}-\\d{2}-\\d{2}$')\n    if date_pattern.match(dt):\n        # Splitting the date into year, month, and day\n        year, month, day = map(int, dt.split('-'))\n        # Reversing the date format (dd-mm-yyyy)\n        return f\"{day:02d}-{month:02d}-{year:04d}\"\n    else:\n        return \"Invalid date format\"",
        "num_ids": 171
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)",
        "num_ids": 78
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date_obj = re.search(pattern, dt)\n    if date_obj:\n        year, month, day = date_obj.groups()\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return None",
        "num_ids": 121
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date_parts = re.search(pattern, dt).groups()\n    return '{}-{}-{}'.format(date_parts[2], date_parts[1], date_parts[0])",
        "num_ids": 107
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return new_dt",
        "num_ids": 86
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = date_pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 113
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 103
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n//2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap,n):\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap for the next iteration\n        gap //= 2\n    \n    return my_list",
        "num_ids": 195
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    This function sorts the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Start with a gap of n/2 and then reduce it by half until gap is 1\n    gap = n // 2\n    while gap > 0:\n        # Perform a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # add the gap elements to the sorted sublist\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap for the next element\n        gap //= 2\n    return my_list",
        "num_ids": 183
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    \n    # Do a gapped insertion sort for this gap size.\n    while gap > 0:\n        \n        # For each gap, do a gapped insertion sort.\n        for i in range(gap, n):\n            \n            # Insert my_list[i] at position i, \n            # but first move the elements that are\n            # greater than my_list[i] one position up\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        \n        # Reduce the gap for the next iteration\n        gap //= 2\n    \n    return my_list",
        "num_ids": 211
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            my_list[j] = temp\n        \n        gap //= 2\n    \n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n                \n            my_list[j] = temp\n            \n        gap //= 2\n    \n    return my_list",
        "num_ids": 127
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    This function sorts the given array using shell sort algorithm.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while  j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 129
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Start with a gap of n/2 and reduce it in a loop\n    gap = n//2\n    while gap > 0:\n        # Sort elements at the gap distance\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 136
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result",
        "num_ids": 73
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and tuples.\n    '''\n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] & test_tup2[i]),)\n    \n    return result_tup",
        "num_ids": 82
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)",
        "num_ids": 80
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    return result_tup",
        "num_ids": 83
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "num_ids": 79
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i],)\n    return result_tup",
        "num_ids": 92
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] and test_tup2[i]),)\n    return result_tup",
        "num_ids": 87
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None # no real solution\n    elif delta == 0:\n        return -b/(2*a) # one solution\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return (x1, x2) # two solutions",
        "num_ids": 129
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d < 0:\n        return None\n    else:\n        x = (-b + d**0.5)/(2*a)\n        return x",
        "num_ids": 79
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None # imaginary or complex roots\n    else:\n        x1 = (-b + math.sqrt(delta)) / (2*a)\n        x2 = (-b - math.sqrt(delta)) / (2*a)\n        return x1, x2",
        "num_ids": 115
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b ** 2 - 4 * a * c\n    x = (-b + d ** 0.5) / (2 * a)\n    return x",
        "num_ids": 70
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        print(\"The parabola has complex roots and directrix is not defined.\")\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The parabola has a repeated root at x =\", x)\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The parabola has two distinct real roots at x1 =\", x1, \"and x2 =\", x2)\n",
        "num_ids": 182
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    x = (-b + d**0.5) / (2*a)\n    return x",
        "num_ids": 68
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the x-coordinate of the directrix\n        x = (-b + discriminant**0.5) / (2*a)\n        return x\n    \n    else:\n        return \"The parabola does not have a directrix.\"",
        "num_ids": 126
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is negative\n    if discriminant < 0:\n        print(\"The parabola has no real roots.\")\n        return None\n\n    # Calculate the two roots\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n\n    # Check if the roots are real\n    if abs(root1.imag) < 1e-10:\n        x1 = root1.real\n    else:\n        print(\"The parabola has no real roots.\")\n        return None\n\n    if abs(root2.imag) < 1e-10:\n        x2 = root2.real\n    else:\n        print(\"The parabola has no real roots.\")\n        return None\n\n    # Check if the roots are equal or opposite\n    if x1 == x2 or x1 + x2 == 0:\n        print(\"The parabola has no real roots.\")\n        return None\n\n    # Determine which root is the directrix\n    if x1 == 0:\n        x0 = x2\n    else:\n        x0 = x1\n\n    # Return the directrix\n    return x0",
        "num_ids": 316
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the x-coordinate of the directrix\n        x = (-b + discriminant**0.5) / (2*a)\n        \n        # Return the x-coordinate of the directrix\n        return x\n    else:\n        # If the discriminant is not positive, there are no real roots\n        return None",
        "num_ids": 142
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = 4*a*c\n    if D == 0:\n        print(\"The given equation is not a parabola.\")\n    else:\n        x_d = -b/(2*a)\n        print(\"The directrix of the parabola is at x =\", x_d)",
        "num_ids": 98
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return True if set(list1).intersection(set(list2)) else False",
        "num_ids": 54
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Iterate through each element in the first list\n    for i in list1:\n        # Check if the element is also in the second list\n        if i in list2:\n            return True\n\n    return False",
        "num_ids": 78
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if there is any common element\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium with given bases and height.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the median length\n    median = area / (base1 + base2)\n    \n    return median",
        "num_ids": 87
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median",
        "num_ids": 53
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * (base1 + base2) * height\n    median_length = 2 * area / (base1 + base2)\n    return median_length",
        "num_ids": 76
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculates the median length of a trapezium given its bases and height.\n    '''\n    # Calculate the semi-perimeter of the trapezium\n    s = (base1 + base2) / 2\n    # Calculate the median length of the trapezium\n    median = (2 * height) / (base1 + base2)\n    # Return the result\n    return median",
        "num_ids": 101
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments:\n    base1: The length of the shorter base of the trapezium\n    base2: The length of the longer base of the trapezium\n    height: The height of the trapezium\n\n    It returns the median length of the trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the median length of the trapezium\n    median = (2 * area) / (base1 + base2)\n\n    return median",
        "num_ids": 141
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return height * median / 2\n",
        "num_ids": 59
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # calculate the median length of the trapezium\n    median_length = 2 * area / (base1 + base2)\n    \n    return median_length",
        "num_ids": 99
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = ((base1 + base2) / 2) * height\n    return median_length\n\nprint(median_trapezium(10, 20, 15)) # Output: 125.0",
        "num_ids": 91
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments: base1, base2 and height of a trapezium.\n    It returns the median length of the trapezium.\n    '''\n    median = ((base1 + base2) / 2) * height\n    return median",
        "num_ids": 74
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes in three parameters:\n    base1: the length of one of the trapezium's bases\n    base2: the length of the other trapezium's base\n    height: the height of the trapezium\n    \n    It returns the median length of the trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = ((base1 + base2) / 2) * height\n\n    # Calculate the median length of the trapezium\n    median = (2 * area) / (base1 + base2)\n\n    return median",
        "num_ids": 142
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function checks whether the entered number is greater than the elements of the given array.\n    If number is greater than any element of the array, it returns True.\n    If number is not greater than any element of the array, it returns False.\n    \"\"\"\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "num_ids": 83
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False",
        "num_ids": 48
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    If the number is greater than any element in the array, then it returns True, else it returns False.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 73
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n\narr = [1, 2, 3, 4, 5]\nnumber = 3\nif check_greater(arr, number):\n    print(f\"{number} is greater than all the elements in the array.\")\nelse:\n    print(f\"{number} is not greater than all the elements in the array.\")",
        "num_ids": 131
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return n % 10",
        "num_ids": 61
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    return n % 10",
        "num_ids": 31
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function returns the last digit of the given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10",
        "num_ids": 45
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)\n        return n % 10\n    else:\n        return n % 10",
        "num_ids": 61
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function returns the last digit of a given number.\n    \"\"\"\n    return n % 10",
        "num_ids": 31
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "num_ids": 34
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10",
        "num_ids": 36
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as an input and returns the last digit of the number.\n    '''\n    return n % 10",
        "num_ids": 37
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "num_ids": 34
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    This function returns the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 58
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as an input and returns a new list containing only negative numbers.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 68
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Return a list with the negative numbers from the input list.\n    \"\"\"\n    return [x for x in lst if x < 0]",
        "num_ids": 39
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers from the list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "num_ids": 58
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list with negative numbers from the original list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 68
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            result += char\n    return result",
        "num_ids": 55
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            result += char\n    return result",
        "num_ids": 49
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if ord(i)%2 == 0:\n            new_str += i\n    return new_str",
        "num_ids": 60
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])",
        "num_ids": 50
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])",
        "num_ids": 50
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if int(i) % 2 == 0:\n            result += i\n    return result",
        "num_ids": 56
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            result += char\n    return result",
        "num_ids": 55
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            result += char\n    return result",
        "num_ids": 55
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                count += 1\n    return count",
        "num_ids": 106
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] > test_list[j][0] and test_list[j][1] > test_list[i][0]) or \\\n               (test_list[i][1] < test_list[j][0] and test_list[j][1] < test_list[i][0]):\n                count += 1\n    return count",
        "num_ids": 144
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Counts the number of bidirectional tuples in a list of tuples.\n    A tuple pair is bidirectional if the elements in the pair are in opposite order.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] > test_list[j][0]:\n                count += 1\n            elif test_list[i][1] < test_list[j][1]:\n                count += 1\n    return count",
        "num_ids": 133
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 86
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count",
        "num_ids": 85
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuples in a list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] > test_list[j][0]) and (test_list[i][1] < test_list[j][1]):\n                count += 1\n            elif (test_list[i][0] < test_list[j][0]) and (test_list[i][1] > test_list[j][1]):\n                count += 1\n    return count",
        "num_ids": 154
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    This function takes a list of integers and returns a single integer\n    that is the result of joining all the integers in the list.\n    \"\"\"\n    return sum(L)",
        "num_ids": 47
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize an empty string to store the final result\n    result = \"\"\n    \n    # loop through the list and add each integer to the result string\n    for i in L:\n        result += str(i)\n    \n    # convert the result string to an integer and return it\n    return int(result)",
        "num_ids": 90
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    This function takes a list of multiple integers and returns a single integer by joining them together.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through the list and add each element to the result variable\n    for i in L:\n        result += i\n    # Return the result variable\n    return result",
        "num_ids": 80
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)",
        "num_ids": 36
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    return sum(L)",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L)))",
        "num_ids": 43
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "num_ids": 36
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|extremely|quite|really|rather|really|probably|undoubtedly|surely|definitely)\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.start(), match.end()\n    return None, None",
        "num_ids": 109
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.search(r'\\b(very|extremely|quite|fairly|really|rather|probably|presumably|approximately|almost|nearly|generally|approximately|exactly|absolutely|undoubtedly|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably|probably",
        "num_ids": 1000
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(very|really|fast|quickly|slowly|highly|lowly)\\b')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(f\"Adverb: {match.group(1)}, Position: {match.start()}\")",
        "num_ids": 107
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|extremely|quite|really|rather|really\\s+badly|really\\s+well|fairly|generally)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None",
        "num_ids": 112
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expression to find all adverbs in the sentence\n    adverbs = re.findall(r'\\b(?:[a-zA-Z]+ )*(?:early|late|recently|immediately|finally)\\b', text)\n    \n    # If adverbs found, find the first one and its position in the sentence\n    if adverbs:\n        adverb = adverbs[0]\n        position = text.index(adverb)\n        return (adverb, position)\n    else:\n        return None",
        "num_ids": 148
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = re.compile(r'\\b(very|extremely|really|quite|fairly|generally)\\b')\n    match = pattern.search(text)\n    if match:\n        return f\"The first adverb is '{match.group()}' at position {match.start()}.\"\n    else:\n        return \"There is no adverb in the sentence.\"",
        "num_ids": 118
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    if len(adverbs) > 0:\n        for adverb in adverbs:\n            positions = [m.start() for m in re.finditer(r'\\b' + adverb + r'\\b', text)]\n            print(f'The first adverb \"{adverb}\" is at position(s) {positions}')\n    else:\n        print('There are no adverbs in the given sentence.')",
        "num_ids": 148
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return None",
        "num_ids": 55
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    '''\n    \n    # Finding the adverb using regular expression\n    adverb = re.search(r'\\b\\w*ly\\b', text)\n    \n    # If there is no adverb found, return None\n    if adverb is None:\n        return None\n    \n    # Finding the starting and ending positions of the adverb\n    start_pos = adverb.start()\n    end_pos = adverb.end()\n    \n    # Returning the adverb and their positions\n    return {'adverb': adverb.group(),'start_pos': start_pos, 'end_pos': end_pos}",
        "num_ids": 159
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*ly\\b'  # regex pattern to find adverb ending with 'ly'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "num_ids": 97
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function calculates the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area",
        "num_ids": 45
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area",
        "num_ids": 46
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "num_ids": 38
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l**2\n    return area",
        "num_ids": 42
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length of a cube as input and returns the surface area of the cube.\n    '''\n    surfacearea = 6 * l ** 2\n    return surfacearea",
        "num_ids": 48
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length of a cube and returns its surface area.\n    '''\n    return 6 * l**2",
        "num_ids": 36
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area",
        "num_ids": 47
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area",
        "num_ids": 47
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / total_count * 100",
        "num_ids": 86
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / total_count",
        "num_ids": 59
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = 0\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n    return positive_nums / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    \n    if len(nums) == 0:\n        return 0\n    \n    return count_positive / len(nums)",
        "num_ids": 87
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 45
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = []\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    return len(positive_nums) / len(nums)",
        "num_ids": 77
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number from the list.\n    \"\"\"\n    largest = -float('inf')  # initialize largest to negative infinity\n    \n    for num in list1:\n        if num < largest:\n            largest = num\n    \n    return largest",
        "num_ids": 68
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')  # initialize largest to negative infinity\n    for num in list1:\n        if num < largest:\n            largest = num\n    return largest",
        "num_ids": 43
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    \n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n            \n    return largest",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    if largest is None:\n        return \"There are no negative numbers in the list.\"\n    else:\n        return \"The largest negative number in the list is: \" + str(largest)",
        "num_ids": 99
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    If there are no negative numbers in the list, the function returns None.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    if len(neg_nums) == 0:\n        return None\n    else:\n        return max(neg_nums)",
        "num_ids": 104
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    largest_negative = None\n    for num in list1:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n    return largest_negative",
        "num_ids": 53
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = -float('inf')  # initialize largest to negative infinity\n    for num in list1:\n        if num < largest:\n            largest = num\n    return largest",
        "num_ids": 68
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    This function returns the largest negative number from a list of numbers.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg",
        "num_ids": 72
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    If there are no negative numbers in the list, the function returns None.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest",
        "num_ids": 82
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg",
        "num_ids": 75
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(len(tup)):\n            if i >= K and i < len(tup) - K:\n                trimmed_tup += (tup[i],)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 104
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(K))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 80
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as inputs. It returns a new list of tuples with each tuple trimmed by K in each direction.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tup[K:-K]\n        new_list.append(new_tup)\n    return new_list",
        "num_ids": 89
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list",
        "num_ids": 65
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in test_list:\n        trimmed_tuple = tuple(i[K:])\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list",
        "num_ids": 73
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a[0], a[1]) for a in test_list if a[1] >= K]",
        "num_ids": 57
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tuple = []\n        for item in tup:\n            trimmed_tuple.append(item[K:])\n        trimmed_list.append(tuple(trimmed_tuple))\n    return trimmed_list",
        "num_ids": 87
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        new_tup = tup[:K] + tup[K+1:]\n        result_list.append(new_tup)\n    return result_list",
        "num_ids": 78
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0], x[1][K:]) for x in test_list]",
        "num_ids": 52
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        new_tup = ()\n        for i in range(len(tup)):\n            new_tup += (tup[i][K:],)\n        result_list.append(new_tup)\n    return result_list",
        "num_ids": 91
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple, after performing index-wise multiplication of their elements.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 91
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Perform index-wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        test_tup1 (tuple): the first tuple to multiply\n        test_tup2 (tuple): the second tuple to multiply\n\n    Returns:\n        tuple: a new tuple with the result of index-wise multiplication\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result)",
        "num_ids": 152
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "num_ids": 82
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for i in tup: \n        if i in count_dict: \n            result.append(count_dict[i])\n        else: \n            result.append(0)\n    return result",
        "num_ids": 91
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count.items()",
        "num_ids": 53
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    return tuple(count_dict[i] for i in tup)",
        "num_ids": 64
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of each element of the list in the tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element)\n    return count_dict",
        "num_ids": 79
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count_dict:\n            result.append((i, count_dict[i]))\n        else:\n            result.append((i, 0))\n    return result",
        "num_ids": 94
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count:\n            result.append(count[i])\n        else:\n            result.append(0)\n    return result",
        "num_ids": 85
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for i in lst:\n        if i in count_dict:\n            print(i, \"occurs\", count_dict[i], \"times in the tuple.\")\n        else:\n            print(i, \"does not occur in the tuple.\")",
        "num_ids": 100
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for i in count_dict:\n        result[i] = tup.count(i)\n    return result",
        "num_ids": 76
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for elem in lst:\n        if elem in count:\n            result[elem] = count[elem]\n        else:\n            result[elem] = 0\n    return result",
        "num_ids": 87
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Count the occurrence of each element in the list using Counter()\n    count_dict = Counter(lst)\n    # Iterate over each element in the tuple and check if it is in the list\n    for element in tup:\n        if element in count_dict:\n            print(f\"{element}: {count_dict[element]}\")",
        "num_ids": 109
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "num_ids": 53
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "num_ids": 53
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of their cubes.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 56
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result",
        "num_ids": 49
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubed_nums = []\n    for num in nums:\n        cubed_nums.append(num ** 3)\n    return cubed_nums",
        "num_ids": 59
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list",
        "num_ids": 55
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result",
        "num_ids": 49
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "num_ids": 53
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)",
        "num_ids": 63
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += ((-1) ** i) / (2 * i + 1)\n    return result",
        "num_ids": 61
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    This function will return the sum of the first n Perrin numbers.\n    '''\n    perrin_list = [1, 1]\n    sum_perrin = sum(perrin_list)\n\n    while len(perrin_list) < n:\n        next_perrin = perrin_list[-1] + perrin_list[-2]\n        perrin_list.append(next_perrin)\n        sum_perrin += next_perrin\n    \n    return sum_perrin",
        "num_ids": 119
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    \"\"\"\n    This function calculates the sum of Perrin numbers.\n    \"\"\"\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n + cal_sum(n-1)",
        "num_ids": 61
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function will calculate the sum of Perrin numbers up to a given number n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return (n**2 + 2*n + 1) + cal_sum(n-1)",
        "num_ids": 69
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)",
        "num_ids": 50
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers up to n.\n    \"\"\"\n    perrin = [1, 1, 2]\n    for i in range(3, n+1):\n        perrin.append(perrin[-1] + perrin[-2] + perrin[-3])\n    return perrin[-1]",
        "num_ids": 87
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i * (i + 1)) // 2\n    return sum",
        "num_ids": 57
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return n + cal_sum(n-1)",
        "num_ids": 51
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\nprint(cal_sum(5))",
        "num_ids": 73
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str_list, n):\n    '''\n    Extracts a specified number of strings from a list of strings.\n    '''\n    if n > len(str_list):\n        n = len(str_list)\n    return str_list[:n]",
        "num_ids": 57
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the desired size of the string to be extracted.\n    It returns a list of extracted strings of the specified size.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string[:size])\n    return result",
        "num_ids": 82
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    :param str_list: List of string values.\n    :param size: Size of the string to be extracted.\n    :return: List of extracted string values.\n    \"\"\"\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result",
        "num_ids": 97
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) == str:\n            result.append(s)\n    return result",
        "num_ids": 61
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes two arguments, a string and a list of string values.\n    It returns a list of specified size of strings from the given list.\n    '''\n    result = []\n    n = len(str)\n    if n > len(l):\n        return \"Error: n should be less than or equal to length of list of strings.\"\n    for i in range(len(l)):\n        if len(l[i]) == n:\n            result.append(l[i])\n    return result",
        "num_ids": 116
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(0, len(str), l):\n        res.append(str[i:i+l])\n    return res",
        "num_ids": 66
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result",
        "num_ids": 64
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    if len(str) > len(l):\n        return \"Error: The length of string is greater than the length of list.\"\n    else:\n        result = []\n        for i in range(len(l)):\n            if len(l[i]) == len(str):\n                result.append(l[i])\n        return result",
        "num_ids": 99
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result",
        "num_ids": 69
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < l:\n        return None\n    else:\n        return [str[i:i+l] for i in range(len(str)-l+1)]",
        "num_ids": 71
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 46
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 48
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2",
        "num_ids": 56
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from the given string\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 66
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)",
        "num_ids": 44
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 66
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments - actual_cost and sale_amount.\n    It calculates the loss amount on the sale and returns it if sale_amount is less than actual_cost else it returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0",
        "num_ids": 91
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Function to calculate loss amount on sale\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "num_ids": 60
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 66
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale.\n\n    :param actual_cost: The actual cost of the product or service before the sale.\n    :param sale_amount: The amount of the product or service sold.\n    :return: The loss amount on the sale. If there is no loss, it will return 0.\n    \"\"\"\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return loss\n    else:\n        return 0",
        "num_ids": 114
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given amount has loss,\n    else it returns 0.\n    \"\"\"\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0",
        "num_ids": 69
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Returns the loss amount on a sale if the given amount has loss, else returns 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 64
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculates the loss amount on a sale.\n\n    :param actual_cost: The actual cost of the item before the sale.\n    :param sale_amount: The amount of the item that was sold.\n    :return: The loss amount on the sale, or 0 if there was no loss.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "num_ids": 110
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on a sale if the given amount has loss else returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "num_ids": 69
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates loss amount on a sale if the given sale_amount is greater than actual_cost.\n    If the sale_amount is less than or equal to actual_cost, then it returns 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0\n",
        "num_ids": 93
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Initialize the sum of factors\n    sum_of_factors = 0\n    \n    # Loop through all numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # If n is divisible by i, add i to the sum of factors\n        if n % i == 0:\n            sum_of_factors += i\n            \n            # If i is even and less than or equal to the square root of n,\n            # add the other even factor to the sum of factors\n            if i % 2 == 0 and i <= int(math.sqrt(n)):\n                sum_of_factors += int(n/i)\n    \n    return sum_of_factors",
        "num_ids": 185
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of that number.\n    '''\n    factors = []  # create an empty list to store the factors of n\n    for i in range(1, n+1):\n        if n % i == 0:  # check if i is a factor of n\n            factors.append(i)  # add i to the list of factors\n    even_factors = [i for i in factors if i % 2 == 0]  # create a new list of even factors\n    return sum(even_factors)  # return the sum of even factors",
        "num_ids": 143
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all the even factors of that number.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through all numbers from 2 to n (inclusive)\n    for i in range(2, n+1):\n        \n        # Check if i is a factor of n\n        if n % i == 0:\n            \n            # Check if i is even\n            if i % 2 == 0:\n                sum += i\n    \n    # Return the sum of even factors\n    return sum",
        "num_ids": 127
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes a number as input and returns the sum of all even factors of the number.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through all factors of n\n    for i in range(1, n+1) : \n        # check if i is a factor of n and even\n        if n % i == 0 and i % 2 == 0 : \n            sum += i\n    \n    return sum",
        "num_ids": 105
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of even factors of n.\n    \"\"\"\n    # Initialize the sum of even factors to 0.\n    even_sum = 0\n    \n    # Check if n is an even number. If not, return None.\n    if n % 2!= 0:\n        return None\n    \n    # Loop through all the numbers from 2 to n (excluding n itself).\n    for i in range(2, n):\n        # Check if i is a factor of n.\n        if n % i == 0:\n            # If i is even, add it to the sum of even factors.\n            if i % 2 == 0:\n                even_sum += i\n    \n    # Return the sum of even factors.\n    return even_sum",
        "num_ids": 177
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n    return sum ",
        "num_ids": 76
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0:\n                sum += n//i\n    return sum",
        "num_ids": 101
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    factors = [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n    return sum([i for i in factors if i % 2 == 0])",
        "num_ids": 82
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0:\n                sum += n//i\n    return sum",
        "num_ids": 101
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0:\n                sum += n//i\n    return sum",
        "num_ids": 101
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 62
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result",
        "num_ids": 60
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 68
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n    \"\"\"\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regex pattern to match words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Use re.findall() to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the matches\n    return matches",
        "num_ids": 95
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)",
        "num_ids": 56
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 48
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 60
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in the input text.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 63
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        print(\"The month number\", monthnum2, \"has 30 days.\")\n    else:\n        print(\"The month number\", monthnum2, \"has 31 days.\")",
        "num_ids": 95
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return False\n    else:\n        return monthnum2 in [1, 3, 5, 7, 8, 10, 12]",
        "num_ids": 103
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return \"The month contains 31 days.\"\n    elif monthnum in [4, 6, 9, 11]:\n        return \"The month contains 30 days.\"\n    elif monthnum == 2:\n        return \"The month contains 28 or 29 days.\"\n    else:\n        return \"Invalid month number.\"",
        "num_ids": 135
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False\n\nmonthnum = int(input(\"Enter a month number (1-12): \"))\n\nif check_monthnumb_number(monthnum):\n    print(\"The month\", monthnum, \"contains 31 days.\")\nelse:\n    print(\"The month\", monthnum, \"does not contain 31 days.\")",
        "num_ids": 156
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return (monthnum % 2 == 1)",
        "num_ids": 60
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number entered.\"\n\nprint(check_monthnumb_number(2))\nprint(check_monthnumb_number(12))\nprint(check_monthnumb_number(7))\nprint(check_monthnumb_number(13))",
        "num_ids": 165
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\"",
        "num_ids": 98
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 == 2:\n        return True\n    else:\n        return None",
        "num_ids": 109
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and checks whether the month has 31 days or not.\n    Returns True if the month has 31 days, False otherwise.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False",
        "num_ids": 112
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month has 31 days, False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None",
        "num_ids": 110
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_stringlist.append(string[::-1])\n    return reversed_stringlist",
        "num_ids": 64
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n\nstringlist = [\"hello\", \"world\", \"python\"]\nprint(reverse_string_list(stringlist))",
        "num_ids": 71
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    return [string[::-1] for string in stringlist]",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_stringlist = []\n    for string in stringlist:\n        new_stringlist.append(string[::-1])\n    return new_stringlist",
        "num_ids": 64
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_strings = []\n    for s in stringlist:\n        reversed_strings.append(s[::-1])\n    return reversed_strings",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "num_ids": 70
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_sublist(lst):\n    \"\"\"\n    This function will take a list as input and return the sublist with minimum length.\n    \"\"\"\n    min_len = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist",
        "num_ids": 121
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist",
        "num_ids": 99
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 84
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    \n    return min_lst",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst\n",
        "num_ids": 92
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    \n    return min_lst",
        "num_ids": 90
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    \n    return min_lst",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst[1:]:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst",
        "num_ids": 94
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst",
        "num_ids": 96
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 87
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 35
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two arguments l and b representing the length and breadth of a rectangle, respectively.\n    It calculates the area of the rectangle using the formula area = l*b and returns it as the output.\n    '''\n    area = l * b\n    return area",
        "num_ids": 68
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(length, width):\n    '''\n    This function takes the length and width of a rectangle as arguments and returns the area of the rectangle.\n    '''\n    area = length * width\n    return area",
        "num_ids": 44
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b",
        "num_ids": 31
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as inputs and returns its area.\n    \"\"\"\n    area = length * breadth\n    return area",
        "num_ids": 47
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    print(f\"The area of the rectangle is {area}\")",
        "num_ids": 50
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = length * breadth\n    return area",
        "num_ids": 47
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes two parameters, length and breadth, and returns the area of a rectangle.\n    '''\n    area = length * breadth\n    return area",
        "num_ids": 48
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as arguments and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area",
        "num_ids": 50
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 35
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 52
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return re.sub(pattern, '', str1)",
        "num_ids": 54
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 34
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 49
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings using regular expressions\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Remove all occurrences of uppercase substrings from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    # Return the modified string\n    return str1",
        "num_ids": 105
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return re.sub(pattern, '', str1)",
        "num_ids": 57
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    matches = pattern.findall(str1)\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1",
        "num_ids": 77
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 50
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to match all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    # Remove all uppercase substrings from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1",
        "num_ids": 100
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst): \n    \"\"\"\n    This function takes a list of sublists and returns a new list containing the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 57
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an argument and returns the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 53
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    return [sublist[0] for sublist in lst]",
        "num_ids": 20
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst",
        "num_ids": 55
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of lists as input and returns a new list containing the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]",
        "num_ids": 48
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 55
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as an argument and returns a new list containing the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst",
        "num_ids": 66
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]",
        "num_ids": 43
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count",
        "num_ids": 60
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as input and returns the count of upper case characters present in it.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of uppercase characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef combinations_list(lst):\n    '''\n    Returns a list of all possible combinations of elements in the input list.\n    '''\n    return list(combinations(lst, len(lst)))",
        "num_ids": 46
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    comb_lst = []\n    for i in range(1, len(lst)+1):\n        for comb in itertools.combinations(lst, i):\n            comb_lst.append(comb)\n    return comb_lst",
        "num_ids": 79
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst) + 1):\n        result += [list(x) for x in itertools.combinations(lst, i)]\n    return result",
        "num_ids": 71
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of the given list.\n    \"\"\"\n    comb = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            comb.append(lst[i]+lst[j])\n    return comb",
        "num_ids": 75
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    n = len(lst)\n    for i in range(2 ** n):\n        bits = bin(i)[2:].zfill(n)\n        combo = [lst[j] for j in range(n) if bits[j] == '1']\n        result.append(combo)\n    return result",
        "num_ids": 98
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef combinations_list(lst):\n    '''\n    Returns a list of all possible combinations of the elements of a given list.\n    '''\n    return list(combinations(lst, len(lst)))",
        "num_ids": 47
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    return list(combinations(list1, len(list1)))",
        "num_ids": 50
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.product(list1, repeat=len(list1)))\n\nprint(combinations_list([1, 2, 3]))",
        "num_ids": 66
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "num_ids": 78
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], max(max_ending_here * arr[i], min_ending_here * arr[i]))\n        min_ending_here = min(arr[i], min(temp * arr[i], min_ending_here * arr[i]))\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "num_ids": 188
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    \n    return max_product",
        "num_ids": 100
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(n):\n        max_ending_here *= arr[i]\n        min_ending_here *= arr[i]\n        \n        if max_ending_here < min_ending_here:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        \n        if max_product < max_ending_here:\n            max_product = max_ending_here\n    \n    return max_product",
        "num_ids": 160
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function finds the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n        if curr_product < 0:\n            curr_product = 1\n    return max_product",
        "num_ids": 103
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_left = 0\n    current_left = 0\n    max_right = len(arr) - 1\n    current_right = len(arr) - 1\n    \n    while current_left <= current_right:\n        if arr[current_left] < 0:\n            current_product *= arr[current_left]\n            current_left += 1\n        else:\n            current_right -= 1\n            if arr[current_right] < 0:\n                current_product *= arr[current_right]\n            else:\n                current_product *= arr[current_right]\n                if current_product > max_product:\n                    max_product = current_product\n                    max_left = current_left\n                    max_right = current_right\n                current_left += 1\n                current_product = 1\n                \n    return arr[max_left:max_right+1]",
        "num_ids": 235
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product == 0:\n            current_product = 1\n            \n    return max_product",
        "num_ids": 98
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    \n    if n == 1:\n        return arr[0]\n    \n    # Initialize variables to store the maximum subarray and its product\n    max_subarray = [arr[0], arr[0]]\n    max_product = arr[0]\n    \n    for i in range(1, n):\n        # Update the maximum subarray and its product\n        if arr[i] > max_subarray[1]:\n            max_subarray[0] = max_subarray[1]\n            max_subarray[1] = arr[i]\n        else:\n            max_subarray[0] = max(max_subarray[0], arr[i])\n            max_subarray[1] = min(max_subarray[1], arr[i])\n        \n        max_product = max(max_product, max_subarray[0] * max_subarray[1])\n    \n    return max_product",
        "num_ids": 233
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for num in arr:\n        max_ending_here *= num\n        min_ending_here *= num\n        \n        if max_ending_here < min_ending_here:\n            max_product, max_ending_here, min_ending_here = max_product, min_ending_here, max_ending_here\n        elif max_ending_here > max_product:\n            max_product = max_ending_here\n            \n    return max_product",
        "num_ids": 149
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    curr_product = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_product = max(max_product, curr_product, max_ending_here)\n\n    return max_product",
        "num_ids": 154
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        \n        if max_ending_here < 0:\n            max_ending_here = 1\n            \n        if max_ending_here > max_product:\n            max_product = max_ending_here\n            \n    return max_product",
        "num_ids": 115
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input. It checks if all values in the dictionary are the same.\n    If all values are the same, it returns True. Otherwise, it returns False.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are the same.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        print(f\"All values in the dictionary are the same: {values[0]}\")\n    else:\n        print(f\"All values in the dictionary are different.\")",
        "num_ids": 83
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function checks if all values in a dictionary are the same.\n\n    Args:\n        dictionary (dict): A dictionary containing values to be checked.\n        n (int): The value to be checked.\n\n    Returns:\n        bool: True if all values are same, False otherwise.\n    '''\n    for value in dictionary.values():\n        if value!= n:\n            return False\n    return True",
        "num_ids": 91
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        print(f'All values are the same in the dictionary.')\n    else:\n        print(f'There are {n-len(set(values))} different values in the dictionary.')",
        "num_ids": 89
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return len(set(values)) == 1 and values[0] == n",
        "num_ids": 56
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if dict.values().count(i) > n:\n            return False\n    return True",
        "num_ids": 56
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = list(dict.values())\n    return len(set(values)) == 1 or len(values) == n",
        "num_ids": 56
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function takes a dictionary and a value 'n' as input.\n    It checks if all the values in the dictionary are equal to 'n'.\n    If yes, it returns True. If not, it returns False.\n    '''\n    for value in dictionary.values():\n        if value!= n:\n            return False\n    return True",
        "num_ids": 80
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        print(\"All values are same in the dictionary.\")\n    else:\n        print(\"All values are not same in the dictionary.\")",
        "num_ids": 76
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function removes the empty items from the given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v!= \"\"}",
        "num_ids": 46
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v!= \"\"}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= \"\"}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Drop empty items from a dictionary.\n\n    Parameters:\n    dict1 (dict): A dictionary to be processed.\n\n    Returns:\n    dict: A new dictionary with empty items dropped.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 86
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes in a dictionary and drops all the empty items from the dictionary.\n    \"\"\"\n    for key, value in dict1.copy().items():\n        if value == \"\":\n            del dict1[key]\n    return dict1",
        "num_ids": 59
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}",
        "num_ids": 47
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n\n    if n == 1:\n        return arr[0]\n\n    dp = [0] * n\n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1], dp[i - 2] * arr[i], dp[i - 2])\n\n    return dp[n - 1]",
        "num_ids": 142
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    max_product = 0\n    min_product = 0\n    max_index = 0\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_index = i\n        if arr[i] < min_product:\n            min_product = arr[i]\n    return arr[max_index] * arr[max_index-1]",
        "num_ids": 102
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_product = float('-inf')\n    for i in range(len(arr)):\n        # We can form a subsequence of length i+1 from the current index i\n        # by starting with the current element and then adding the next element\n        # that is greater than the current element and multiplying all these elements together\n        # This gives us the maximum product that can be obtained from the subsequence of length i+1\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[i]:\n                product = arr[i]\n                for k in range(i+1, j+1):\n                    product *= arr[k]\n                if product > max_product:\n                    max_product = product\n    \n    return max_product",
        "num_ids": 205
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1], arr[0]*arr[1])\n    \n    dp = [0]*n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, n):\n        dp[i] = max(dp[i-1]*arr[i], arr[i])\n        if arr[i-1] > 0 and arr[i] > 0:\n            dp[i] = max(dp[i], arr[i-1]*arr[i])\n    \n    return dp[-1]",
        "num_ids": 206
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_so_far:\n            min_so_far = arr[i]\n        max_so_far = max(max_so_far, max_ending_here * min_so_far)\n    return max_so_far",
        "num_ids": 163
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] * arr[1], arr[0], arr[1])\n    else:\n        # Initialize the variables\n        max_product = float('-inf')\n        max_ending_here = 1\n        min_ending_here = 1\n        \n        # Traverse the array from left to right\n        for i in range(n):\n            # Update max_ending_here and min_ending_here\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n            # Update the maximum product seen so far\n            max_product = max(max_product, max_ending_here)\n        return max_product",
        "num_ids": 236
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0] * arr[1], arr[0], arr[1])\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] * arr[i])\n    return dp[n-1]",
        "num_ids": 144
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] * arr[1], arr[0], arr[1])\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        \n        for i in range(1, n):\n            curr = arr[i]\n            max_ending_here = max(curr, max_ending_here * curr, min_ending_here * curr)\n            min_ending_here = min(curr, max_ending_here * curr, min_ending_here * curr)\n            max_so_far = max(max_so_far, max_ending_here)\n            \n        return max_so_far",
        "num_ids": 202
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_product * arr[i]:\n            max_product = arr[i]\n        elif arr[i] > min_product * arr[i]:\n            min_product = arr[i]\n\n        result = max(result, max_product, min_product)\n\n    return result",
        "num_ids": 147
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    This function finds the maximum product formed by multiplying numbers of an increasing subsequence of the input array.\n    '''\n\n    # Initialize the maximum product and the maximum subsequence length\n    max_product = float('-inf')\n    max_subseq_len = 1\n\n    # Initialize the left and right pointers to start and end of the array\n    left, right = 0, 0\n\n    # Iterate through the array and update the maximum subsequence length and maximum product\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[right]:\n            right = i\n            max_subseq_len += 1\n        else:\n            max_subseq_len = 1\n            left = i\n            right = i\n\n        if max_subseq_len > 1 and arr[left]*arr[right] > max_product:\n            max_product = arr[left]*arr[right]\n\n    return max_product",
        "num_ids": 207
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[-2] + test_tup[-1])",
        "num_ids": 78
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    pairwise_sum = []\n    for i in range(n-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    return pairwise_sum",
        "num_ids": 91
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_list = []\n    for i in range(len(test_tup)-1):\n        result_list.append(test_tup[i] + test_tup[i+1])\n    return result_list",
        "num_ids": 83
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = []\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i]+test_tup[i+1])\n    return pairwise_sum",
        "num_ids": 85
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function finds the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sum(pair) for pair in zip(test_tup, test_tup[1:]))",
        "num_ids": 58
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the pairwise addition of the neighboring elements of the tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result",
        "num_ids": 79
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result",
        "num_ids": 60
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result",
        "num_ids": 54
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
        "num_ids": 54
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product = (product * arr[i]) % n \n    return product",
        "num_ids": 60
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num % n\n    return product % n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "num_ids": 50
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    # Multiply all the elements of the array together\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        \n    # Take the remainder of the product when divided by n\n    remainder = product % n\n    \n    return remainder",
        "num_ids": 63
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_product_modulo_n(arr, n):\n    # Initialize the product variable to 1\n    product = 1\n    \n    # Loop through the array and multiply each element by the product so far\n    for i in range(len(arr)):\n        product *= arr[i]\n        \n        # If the product exceeds n, return n\n        if product >= n:\n            return n\n    \n    # Return the product modulo n\n    return product % n",
        "num_ids": 91
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "num_ids": 30
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 64
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers, otherwise, it returns False.\n    \"\"\"\n    n = len(l)\n    for i in range(n-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False",
        "num_ids": 77
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list l as input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if abs(l[i]-l[i+1]) == 1:\n            return True\n    return False",
        "num_ids": 71
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 64
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False",
        "num_ids": 42
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as an input and returns True if the list contains consecutive numbers, otherwise False.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False",
        "num_ids": 68
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:  # if the list has less than 2 elements, it cannot contain consecutive numbers\n        return False\n    for i in range(len(l)-1):  # iterate over all the elements of the list except the last one\n        if l[i+1] - l[i] == 1:  # check if the difference between the current element and the next one is 1\n            return True\n    return False  # if no consecutive number is found, return False\n",
        "num_ids": 135
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples and returns the intersection of tuples.\n    \"\"\"\n    # Converting the lists to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Finding the intersection of the sets\n    intersection_set = set1.intersection(set2)\n\n    # Converting the set to a list of tuples\n    result_list = [(x,) for x in intersection_set]\n\n    return result_list",
        "num_ids": 118
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # initialize an empty set to store the tuples of common elements\n    common_tuples = set()\n\n    # loop through each tuple in the first list\n    for tpl in test_list1:\n        # check if the tuple is present in the second list\n        if tpl in test_list2:\n            # add the tuple to the common_tuples set\n            common_tuples.add(tpl)\n\n    # return the common_tuples set as a list\n    return list(common_tuples)",
        "num_ids": 142
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists of tuples as input and returns a list of tuples which are common in both the lists irrespective of their order.\n    '''\n    # Create two sets from the input lists to find their intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Create an empty list to store the common tuples\n    common_tuples = []\n    \n    # Loop through the intersection set and add common tuples to the common_tuples list\n    for tup in intersection:\n        if tup in test_list1 and tup in test_list2:\n            common_tuples.append(tup)\n    \n    # Return the list of common tuples\n    return common_tuples",
        "num_ids": 183
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert lists to sets for faster lookup\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the sets\n    intersection_set = set1.intersection(set2)\n    \n    # Convert the set back to a list of tuples\n    intersection_list = [(item, item) for item in intersection_set]\n    \n    return intersection_list",
        "num_ids": 128
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                if t1 not in result:\n                    result.append(t1)\n    \n    return result",
        "num_ids": 94
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples as input and returns the intersection of tuples in both lists irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    intersection_list = list(intersection_set)\n    return intersection_list",
        "num_ids": 97
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(tuple(sorted(test_list1)))\n    set2 = set(tuple(sorted(test_list2)))\n    return list(set1.intersection(set2))",
        "num_ids": 85
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    result_list = []\n    for elem in intersection_set:\n        for tup in test_list1 + test_list2:\n            if elem == tup:\n                result_list.append(tup)\n    return result_list",
        "num_ids": 126
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if set(tuple1) == set(tuple2):\n                intersection_list.append(tuple1)\n\n    return intersection_list",
        "num_ids": 97
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists as input and returns the tuple intersection of their elements irrespective of their order.\n    '''\n    intersection_list = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                intersection_list.append(tup1)\n    return intersection_list",
        "num_ids": 92
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "num_ids": 44
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n\n    :param str1: The input string.\n    :param ch: The character to be replaced.\n    :param newch: The new character to replace the old character with.\n    :return: The modified string with replaced characters.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 95
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    result = str1.replace(ch, newch)\n    return result",
        "num_ids": 51
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes a string, a character to be replaced, and a new character, and returns the new string with all occurrences of the character replaced with the new character.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 65
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a given string'str1' with a new character 'newch'.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 58
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace characters in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 41
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of the character 'ch' in the string'str1' with the character 'newch'.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 56
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of the character 'ch' in the string'str1' with 'newch'.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result",
        "num_ids": 74
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    result = ''\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result",
        "num_ids": 65
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to replace.\n    newch (str): The new character.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n\n    # Initialize an empty string to store the modified string.\n    result = \"\"\n\n    # Loop through each character in the input string.\n    for char in str1:\n        # If the character is the character to replace, replace it with the new character.\n        if char == ch:\n            result += newch\n        else:\n            result += char\n\n    return result",
        "num_ids": 149
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a sorted list of tuples.\n    The tuples consist of the key-value pairs in descending order of their values.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict",
        "num_ids": 82
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])",
        "num_ids": 48
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_dict = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)",
        "num_ids": 70
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 54
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))",
        "num_ids": 54
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))",
        "num_ids": 46
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))",
        "num_ids": 54
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    c = Counter(dict1)\n    sorted_dict = dict(sorted(c.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "num_ids": 69
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest",
        "num_ids": 51
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest",
        "num_ids": 51
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    return sum([max(nums), min(nums)])",
        "num_ids": 44
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest integer in the array.\n    '''\n    return sum([max(nums), min(nums)])",
        "num_ids": 48
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function finds the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num",
        "num_ids": 56
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    smallest = nums[0]\n    largest = nums[0]\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n            \n    return smallest + largest",
        "num_ids": 91
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    smallest = min(nums)\n    largest = max(nums)\n\n    # Calculate the sum of the largest and smallest values\n    total = smallest + largest\n\n    return total",
        "num_ids": 77
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([min(nums), max(nums)])",
        "num_ids": 44
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]",
        "num_ids": 48
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum((max(nums), min(nums)))",
        "num_ids": 44
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Converts the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()",
        "num_ids": 33
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are lowercase, False otherwise.\n    '''\n    return string.islower()",
        "num_ids": 43
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case, False otherwise.\n    '''\n    return string.islower()",
        "num_ids": 41
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()",
        "num_ids": 33
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()",
        "num_ids": 33
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    return string.islower()",
        "num_ids": 15
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lowercase,\n    otherwise it returns False.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns a lower case version of it.\n    '''\n    return string.lower()",
        "num_ids": 35
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 35
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)",
        "num_ids": 65
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'(?<!\\w)[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result",
        "num_ids": 62
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the given string\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n\n    # Replace all lowercase substrings with an empty string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1",
        "num_ids": 100
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = r'(?<![A-Z])\\b[a-z]+\\b(?![A-Z])'\n    return re.sub(pattern, '', string)",
        "num_ids": 51
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Use a regular expression to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    \n    # Use findall() to find all matches of the pattern in the string\n    matches = pattern.findall(str1)\n    \n    # Use a set to remove duplicates and convert back to a list\n    unique_matches = list(set(matches))\n    \n    # Use join() to convert the list of matches to a string with the substrings separated by spaces\n    result =''.join(unique_matches)\n    \n    # Return the modified string\n    return result",
        "num_ids": 151
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 35
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)",
        "num_ids": 34
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its first digit.\n    \"\"\"\n    return int(str(n)[0])",
        "num_ids": 36
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # get the first character of the string (which is the first digit)\n    first_digit = num_str[0]\n    # convert the first character back to an integer\n    first_digit_int = int(first_digit)\n    return first_digit_int",
        "num_ids": 101
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_digit(n):\n    '''\n    This function takes a number as an input and returns the first digit of that number.\n    '''\n    if n < 0:  # check if the number is negative\n        n = n * -1  # make the number positive for finding the first digit\n    while n >= 10:  # check if the number has more than one digit\n        n = n // 10  # remove the last digit of the number\n    return n",
        "num_ids": 102
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        n *= -1\n    return n // 10**(len(str(n))-1)",
        "num_ids": 56
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    digit = n // 10**(len(str(n))-1)\n    return digit",
        "num_ids": 64
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer n as input and returns the first digit of n.\n    '''\n    # check if n is negative\n    if n < 0:\n        # if n is negative, return '-' as the first digit\n        return '-'\n    \n    # if n is positive, convert n to string and return the first character\n    return str(n)[0]",
        "num_ids": 83
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return int(str(n)[0])",
        "num_ids": 39
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)",
        "num_ids": 46
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_digit(n):\n    '''\n    Returns the first digit of a given number.\n    '''\n    if n < 0:\n        return '-'\n    return str(n)[0]",
        "num_ids": 40
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return n // 10 ** (len(str(n)) - 1) % 10",
        "num_ids": 52
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns a list of odd integers from the list.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 59
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for i in list:\n        if i % 2!= 0:\n            result.append(i)\n    return result",
        "num_ids": 55
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "num_ids": 64
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_odd(numbers):\n    \"\"\"\n    This function takes a list of integers and returns only the odd numbers in a new list.\n    \"\"\"\n    odd_numbers = []\n    for num in numbers:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers",
        "num_ids": 67
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_odd(list):\n    \"\"\"\n    This function takes a list of integers and returns only the odd numbers.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]\n",
        "num_ids": 45
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers",
        "num_ids": 61
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_nums = []\n    for num in list:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 61
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_odd_numbers(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list with only the odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers",
        "num_ids": 68
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2!= 0:\n            result.append(i)\n    return result",
        "num_ids": 58
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list",
        "num_ids": 64
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n\n",
        "num_ids": 97
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = (n * (n+1) * (2*n+1)) // 6  # formula for sum of cubes of first n natural numbers\n    sum_of_n = n * (n+1) // 2  # formula for sum of first n natural numbers\n    return sum_of_cubes - sum_of_n",
        "num_ids": 126
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # initialize variables to 0\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the cube of i to the sum_of_cubes variable\n        sum_of_cubes += i**3\n        # add i to the sum_of_numbers variable\n        sum_of_numbers += i\n\n    # return the difference between the two sums\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 162
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    return (n * (n + 1) ** 2) ** 2 - sum([x**3 for x in range(1, n+1)])",
        "num_ids": 76
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # calculate the sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n    \n    # return the difference between the two sums\n    return sum_n**2 - sum_cubes",
        "num_ids": 119
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Finding the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    \n    # Finding the sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Finding the difference between sum of cubes and sum of numbers\n    diff = sum_of_cubes - sum_of_numbers\n    \n    return diff",
        "num_ids": 144
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes a positive integer 'n' as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize the variables to store the sum of cubes and sum of first n natural numbers\n    sum_cubes = 0\n    sum_n = 0\n    \n    # Loop through the first n natural numbers and add the cube of each number to the sum of cubes\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Loop through the first n natural numbers and add each number to the sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_n += i\n    \n    # Return the difference between the sum of cubes and sum of first n natural numbers\n    return sum_cubes - sum_n",
        "num_ids": 192
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 96
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers",
        "num_ids": 85
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes in a number n and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    return sum(range(1, n+1))**3 - sum(range(1, n+1))",
        "num_ids": 69
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] & 1!= 0:\n                count += 1\n    return count",
        "num_ids": 87
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1: # Check if XOR value is odd\n                count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string",
        "num_ids": 85
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the numbers to strings to easily extract individual digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize variables to keep track of the sum of differences\n    diff_sum = 0\n\n    # Loop through each digit of the two numbers and calculate the difference\n    for i in range(len(n1_str)):\n        diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n\n    return diff_sum",
        "num_ids": 148
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    \"\"\"\n    # Convert the integers to strings so that we can iterate over their digits\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Initialize a variable to store the sum of the per-digit differences\n    digit_distance_sum = 0\n\n    # Iterate over the digits of the two integers and add the absolute difference to the sum\n    for i in range(len(str1)):\n        digit_distance_sum += abs(int(str1[i]) - int(str2[i]))\n\n    return digit_distance_sum",
        "num_ids": 156
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff = abs(n1-n2)\n    digit_sum = 0\n    while digit_diff > 0:\n        digit_sum += digit_diff % 10\n        digit_diff //= 10\n    return digit_sum",
        "num_ids": 92
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    \"\"\"\n    # Convert the integers to strings and remove any leading zeros\n    n1 = str(n1).lstrip('0')\n    n2 = str(n2).lstrip('0')\n    \n    # Calculate the length of the smaller string\n    length = min(len(n1), len(n2))\n    \n    # Initialize the sum variable to zero\n    digit_distance_sum = 0\n    \n    # Iterate over the strings and add the absolute difference of corresponding digits to the sum\n    for i in range(length):\n        digit_distance_sum += abs(int(n1[i]) - int(n2[i]))\n    \n    return digit_distance_sum",
        "num_ids": 176
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = abs(int(n1))\n    num2 = abs(int(n2))\n    digit_diff_sum = 0\n    \n    # Find the digit difference for each number and add it to the sum\n    while num1 > 0:\n        digit_diff_sum += num1 % 10\n        num1 //= 10\n    while num2 > 0:\n        digit_diff_sum += num2 % 10\n        num2 //= 10\n        \n    return digit_diff_sum",
        "num_ids": 148
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff_sum = 0\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    for i in range(len(n1_digits)):\n        digit_diff_sum += abs(n1_digits[i] - n2_digits[i])\n\n    return digit_diff_sum",
        "num_ids": 128
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to be able to iterate over their digits\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    # Initialize the sum of the digit distances to 0\n    digit_distance_sum = 0\n    # Iterate over the digits of the two integers and add the absolute difference between them to the sum\n    for i in range(len(str_n1)):\n        digit_distance_sum += abs(int(str_n1[i]) - int(str_n2[i]))\n    return digit_distance_sum",
        "num_ids": 163
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to strings and extract their digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # find the sum of the differences between the corresponding digits\n    distance_sum = sum([abs(d1 - d2) for d1, d2 in zip(digits1, digits2)])\n    \n    return distance_sum",
        "num_ids": 129
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to strings and remove any leading zeros\n    n1 = str(n1).lstrip('0')\n    n2 = str(n2).lstrip('0')\n    # initialize the sum to zero\n    digit_diff_sum = 0\n    # loop over the digits in the strings\n    for i in range(max(len(n1), len(n2))):\n        # if there are digits left in the first string, use the current digit\n        if i < len(n1):\n            digit1 = int(n1[i])\n        # otherwise, use zero\n        else:\n            digit1 = 0\n        # if there are digits left in the second string, use the current digit\n        if i < len(n2):\n            digit2 = int(n2[i])\n        # otherwise, use zero\n        else:\n            digit2 = 0\n        # add the absolute difference between the two digits to the sum\n        digit_diff_sum += abs(digit1 - digit2)\n    # return the sum of the per-digit differences\n    return digit_diff_sum",
        "num_ids": 269
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function finds the sum of the per-digit difference between two integers.\n    \"\"\"\n    n1_digits = list(map(int, str(n1)))\n    n2_digits = list(map(int, str(n2)))\n    digit_diff_sum = 0\n    for i in range(len(n1_digits)):\n        digit_diff_sum += abs(n1_digits[i] - n2_digits[i])\n    return digit_diff_sum",
        "num_ids": 121
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far
        "num_ids": 1010
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 116
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = -float('inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum",
        "num_ids": 87
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    max_end_here = 0\n    for i in range(size):\n        max_end_here += a[i]\n        if max_end_here > max_sum:\n            max_sum = max_end_here\n        if max_end_here < 0:\n            max_end_here = 0\n    return max_sum",
        "num_ids": 98
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 131
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum",
        "num_ids": 109
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to sets to find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # Convert set back to tuple and sort it\n    result_tup = tuple(sorted(union_set))\n    \n    return result_tup",
        "num_ids": 115
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_tup = tuple(set(test_tup1).union(set(test_tup2)))\n    \n    # Sort the elements in the union tuple in ascending order\n    union_tup_sorted = sorted(union_tup)\n    \n    # Return the sorted union tuple\n    return union_tup_sorted",
        "num_ids": 113
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert both tuples to sets to find their union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # convert the union set back to a sorted tuple and return it\n    union_tup = tuple(sorted(union_set))\n    return union_tup",
        "num_ids": 120
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Find the union of the two tuples using set operations\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set back to a sorted tuple and return it\n    return tuple(sorted(union_set))",
        "num_ids": 71
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Creating a set to store the union elements\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Converting the set to a list and sorting it\n    union_list = sorted(list(union_set))\n    \n    # Printing the sorted list of union elements\n    print(union_list)",
        "num_ids": 115
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples\n    union_tup = test_tup1 + test_tup2\n    \n    # Remove duplicates from the concatenated tuple\n    union_tup = tuple(set(union_tup))\n    \n    # Sort the tuple in ascending order\n    union_tup = tuple(sorted(union_tup))\n    \n    return union_tup",
        "num_ids": 111
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the first tuple and another set from the second tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the union of the two sets and convert it back to a list\n    union_list = sorted(list(set1.union(set2)))\n\n    # Print the result\n    print(union_list)",
        "num_ids": 125
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # creating a set to store the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    # converting the set to a list and sorting it in ascending order\n    union_list = sorted(list(union_set))\n    # printing the sorted list\n    print(union_list)",
        "num_ids": 116
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Converting the tuples to sets to get the union of the elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # Converting the union set back to a tuple and sorting it\n    union_tup = tuple(sorted(union_set))\n    \n    # Printing the union tuple\n    print(\"The union of the two tuples is:\", union_tup)",
        "num_ids": 141
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union",
        "num_ids": 78
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len",
        "num_ids": 95
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    \n    for i in range(len(lst)):\n        sublist = lst[i:]\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n            \n    return max_length",
        "num_ids": 84
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length",
        "num_ids": 81
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length",
        "num_ids": 101
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len",
        "num_ids": 95
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    return max_length",
        "num_ids": 100
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max_length(lst):\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    max_length = max(max_length, current_length)\n    return max_length",
        "num_ids": 96
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_max_length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length",
        "num_ids": 95
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length",
        "num_ids": 95
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    # Find all matches of quotation marks surrounded by whitespace or non-word characters\n    matches = re.findall(r'\\b\"([^\"]*)\"\\b', text)\n    return matches",
        "num_ids": 52
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'  # pattern to match any text between quotation marks\n    matches = re.findall(pattern, text)  # find all matches of the pattern in the text\n    return matches",
        "num_ids": 76
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 54
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    # Find all occurrences of quotation marks\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    return matches",
        "num_ids": 39
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 56
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\\\"(.*?)\\\"'\n    values = re.findall(pattern, text)\n    return values",
        "num_ids": 54
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'  # matches any sequence of characters between quotes\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 44
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 35
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count ",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    # iterate through each element in the list\n    for i in range(n):\n        # iterate through the remaining elements in the list\n        for j in range(i+1, n):\n            # if the elements are unequal, increment the count\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    return count",
        "num_ids": 112
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count",
        "num_ids": 52
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count",
        "num_ids": 86
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)",
        "num_ids": 34
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return [char for char in word]",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    return list(word)",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)",
        "num_ids": 34
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum",
        "num_ids": 77
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 58
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Input must be non-negative.\"\n    else:\n        return sum([int(i) for i in str(n)])",
        "num_ids": 68
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return None\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    return sum",
        "num_ids": 71
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum",
        "num_ids": 60
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer 'n' as input and returns the sum of its digits.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 66
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum",
        "num_ids": 57
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    elif n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 76
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None # negative numbers don't have digits\n    elif n == 0:\n        return 0 # the sum of digits of 0 is 0\n    else:\n        # convert the integer to a string to iterate over its digits\n        digits = [int(d) for d in str(n)]\n        return sum(digits)",
        "num_ids": 106
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    return sum(int(digit) for digit in str(n))",
        "num_ids": 65
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a list is sorted in ascending order or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if list1 == sorted_list:\n        return True\n    else:\n        return False",
        "num_ids": 55
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order, else False.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 71
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
        "num_ids": 52
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as an argument and returns True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    sorted_lst = sorted(lst)\n    if lst == sorted_lst:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Returns True if the specified list is sorted, False otherwise.\n    \"\"\"\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        print(\"The list is sorted.\")\n    else:\n        print(\"The list is not sorted.\")",
        "num_ids": 68
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    This function creates a list of N empty dictionaries.\n\n    :param length: The length of the list.\n    :return: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]\n",
        "num_ids": 57
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list",
        "num_ids": 57
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list",
        "num_ids": 51
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "num_ids": 61
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(lst):\n    \"\"\"Sort each sublist of strings in a given list of lists.\"\"\"\n    for sublist in lst:\n        sublist.sort()\n    return lst",
        "num_ids": 40
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "num_ids": 61
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "num_ids": 61
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "num_ids": 61
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Sorts each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n    return unique_nums",
        "num_ids": 74
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)",
        "num_ids": 60
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists of integers and removes any duplicate numbers from each list.\n    Returns a list of two unique lists that have no duplicates.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Loop through each list in the input list of lists\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # Add the current number to the set of unique numbers\n            unique_nums.add(num)\n    \n    # Convert the set of unique numbers back to a list and split it into two equal-sized lists\n    unique_nums_list = list(unique_nums)\n    split_index = len(unique_nums_list) // 2\n    \n    # Return a list of two unique lists that have no duplicates\n    return [unique_nums_list[:split_index], unique_nums_list[split_index:]]",
        "num_ids": 208
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the input list of lists\n    for lst in nums:\n        # Loop through each number in the current list\n        for num in lst:\n            # Add the number to the set if it's not already in there\n            unique_nums.add(num)\n\n    # Convert the set to a list and return the first two unique numbers\n    return list(unique_nums)[:2]",
        "num_ids": 131
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)",
        "num_ids": 69
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(lst)\n    return list(unique_nums)",
        "num_ids": 55
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums",
        "num_ids": 71
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        if len(nums[i]) == 2:\n            unique_nums.append(nums[i])\n    return unique_nums",
        "num_ids": 74
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]!= nums[j]:\n                unique_nums.append(nums[i])\n                break\n    return unique_nums",
        "num_ids": 89
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums",
        "num_ids": 75
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "num_ids": 65
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes in a list of integers and returns the product of the unique numbers in the list.\n    '''\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product",
        "num_ids": 87
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Using set() to remove duplicates and then calculating the product of the unique numbers.\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product\n",
        "num_ids": 79
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))  # convert list to set to remove duplicates, then back to list\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 79
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product",
        "num_ids": 58
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns their product of unique numbers.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_nums = set()\n    product = 1\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            product *= num\n    return product",
        "num_ids": 55
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 67
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set()\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "num_ids": 85
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    return 2 * 3.14159 * r * (r + h)",
        "num_ids": 88
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs\n    and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 77
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Calculate the surface area of a cylinder given its radius and height.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area",
        "num_ids": 72
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns its surface area.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 72
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return area",
        "num_ids": 62
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as arguments and returns the surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area",
        "num_ids": 82
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 76
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 66
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area\n",
        "num_ids": 66
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area",
        "num_ids": 63
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if A is a sublist of B, and False otherwise.\n    \"\"\"\n    if A == []:  # If A is an empty list, it is always a sublist of B\n        return True\n    if A == B[:len(A)]:  # If A is a prefix of B, it is a sublist of B\n        return True\n    if B == []:  # If B is an empty list, A cannot be a sublist of B\n        return False\n    \n    # If A is not a prefix of B, check if A is a sublist of B by iterating through its elements and checking if they are in B\n    for i in range(len(A)):\n        if A[i]!= B[i]:  # If the current elements of A and B don't match, A cannot be a sublist of B\n            return False\n    \n    return True  # If all elements of A match corresponding elements of B, A is a sublist of B",
        "num_ids": 225
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether the list B is a sublist of A or not.\n\n    Args:\n    A (list): The main list to be checked.\n    B (list): The sublist to be checked.\n\n    Returns:\n    bool: True if B is a sublist of A, else False.\n\n    \"\"\"\n    if set(B).issubset(set(A)):\n        return True\n    else:\n        return False",
        "num_ids": 101
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    \n    temp_dict = {}\n    for i in range(len(B)):\n        if B[i] not in temp_dict:\n            temp_dict[B[i]] = 1\n        else:\n            temp_dict[B[i]] += 1\n    \n    for i in range(len(A) - len(B) + 1):\n        temp_dict_copy = temp_dict.copy()\n        for j in range(len(B)):\n            if A[i+j] not in temp_dict_copy:\n                break\n            else:\n                temp_dict_copy[A[i+j]] -= 1\n                if temp_dict_copy[A[i+j]] == 0:\n                    del temp_dict_copy[A[i+j]]\n        if not temp_dict_copy:\n            return True\n    \n    return False",
        "num_ids": 229
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    if A == B:\n        return True\n    \n    for i in range(len(B)):\n        if A == B[i:i+len(A)]:\n            return True\n    \n    return False",
        "num_ids": 52
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check if B is a sublist of A.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A) - len(B) + 1):\n        for j in range(len(B)):\n            if A[i+j]!= B[j]:\n                break\n        else:\n            return True\n    \n    return False",
        "num_ids": 94
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check whether A is a sublist of B.\n\n    :param A: list A\n    :param B: list B\n    :return: True if A is a sublist of B, False otherwise\n    \"\"\"\n    if not A:\n        return True\n    if not B:\n        return False\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n    return is_Sub_Array(A, B[1:])",
        "num_ids": 114
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if the first list is a sublist of the second list.\n    If the first list is not a sublist of the second list, it returns False.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B) - len(A) + 1):\n        for j in range(len(A)):\n            if B[i+j]!= A[j]:\n                break\n        else:\n            return True\n    return False",
        "num_ids": 126
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n    else:\n        for i in range(len(B)-len(A)+1):\n            if A == B[i:i+len(A)]:\n                return True\n        return False",
        "num_ids": 83
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    This function takes two lists as input and checks if the first list is a sublist of the second list or not.\n    \"\"\"\n    if set(A).issubset(B):\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if B is a sublist of A, else False.\n    \"\"\"\n\n    if len(B) > len(A):\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            j += 1\n        else:\n            i -= j\n            j = 0\n\n        if j == len(B):\n            return True\n\n    return False",
        "num_ids": 123
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    \n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    \n    return fact % 10",
        "num_ids": 72
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit",
        "num_ids": 69
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return int(str(fact)[-1])",
        "num_ids": 76
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    \n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    return fact % 10",
        "num_ids": 72
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1) % 10",
        "num_ids": 66
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact % 10",
        "num_ids": 63
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize factorial to 1\n    factorial = 1\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # multiply the current factorial with i\n        factorial *= i\n    # find the last digit of the factorial\n    last_digit = factorial % 10\n    return last_digit",
        "num_ids": 111
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of the factorial of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact % 10",
        "num_ids": 78
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    # define the factorial function\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    # compute the factorial of n\n    f = factorial(n)\n    \n    # extract the last digit from f and return it\n    return f % 10",
        "num_ids": 84
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit",
        "num_ids": 72
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 88
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 88
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('All lists must have the same length')\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result",
        "num_ids": 119
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists of the same length and returns a single flat list\n    which contains the elements of the three lists interleaved.\n    \"\"\"\n    # Ensure that all three lists are of the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        raise ValueError(\"All three lists must be of the same length\")\n\n    # Create an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # Loop through the three lists and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list",
        "num_ids": 199
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 88
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 88
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('All input lists must have the same length.')\n    \n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        \n    return flat_list",
        "num_ids": 130
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"The input lists must be of the same length.\")\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 135
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(i)\n    return result",
        "num_ids": 81
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements",
        "num_ids": 90
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Create an empty list to store the dissimilar elements.\n    dissimilar_elements = []\n    \n    # Check if both the tuples have the same length.\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return\n    \n    # Iterate through the tuples and compare each element.\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append((i, test_tup1[i], test_tup2[i]))\n    \n    # Print the dissimilar elements.\n    print(\"Dissimilar elements are: \")\n    for element in dissimilar_elements:\n        print(f\"Index {element[0]}: {element[1]} vs {element[2]}\")",
        "num_ids": 211
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Compare the element to all elements in the second tuple\n        for j in range(len(test_tup2)):\n            # If the elements are different, add it to the dissimilar elements list\n            if test_tup1[i]!= test_tup2[j]:\n                dissimilar_elements.append(test_tup1[i])\n                break\n    \n    return dissimilar_elements",
        "num_ids": 148
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested tuple and a function as arguments.\n    The function is used to check if an element is even or odd.\n    If an element is even, it is kept in the nested tuple.\n    If an element is odd, it is removed from the nested tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            new_tuple = even_ele(test_tuple[i], even_fnc)\n            result.append(new_tuple)\n        else:\n            if even_fnc(test_tuple[i]):\n                result.append(test_tuple[i])\n    return tuple(result)\n\ndef is_even(num):\n    '''\n    This is a helper function to check if a number is even or odd.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 215
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, int) or isinstance(elem, float):\n            if even_fnc(elem):\n                result.append(elem)\n        elif isinstance(elem, list) or isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        else:\n            result.append(elem)\n    return result\n\ndef is_even(num):\n    '''\n    A user-defined function to check if a number is even.\n    '''\n    return num % 2 == 0",
        "num_ids": 157
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = ()\n    for sub_tuple in test_tuple:\n        sub_tuple = tuple(filter(even_fnc, sub_tuple))\n        if sub_tuple:\n            result_tuple += (sub_tuple,)\n    return result_tuple",
        "num_ids": 89
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            result.append(element)\n    return tuple(result)",
        "num_ids": 92
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            new_element = even_fnc(element)\n        else:\n            new_element = element\n        new_tuple.append(new_element)\n    return tuple(new_tuple)",
        "num_ids": 97
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in range(len(test_tuple)):\n        for j in range(len(test_tuple[i])):\n            if even_fnc(test_tuple[i][j]):\n                even_list.append(test_tuple[i][j])\n    return even_list\n\ndef is_even(num):\n    '''\n    Helper function to determine if a number is even.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 145
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            new_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return tuple(new_tuple)",
        "num_ids": 101
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            even_ele(test_tuple[i], even_fnc)\n        else:\n            if not even_fnc(test_tuple[i]):\n                test_tuple[i] = None\n    return test_tuple",
        "num_ids": 105
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            new_elem = []\n            for subelem in elem:\n                if even_fnc(subelem):\n                    new_elem.append(subelem)\n            new_tuple.append(tuple(new_elem))\n        else:\n            if even_fnc(elem):\n                new_tuple.append(elem)\n    return tuple(new_tuple)",
        "num_ids": 131
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == int or type(i) == float:\n            if even_fnc(i):\n                result.append(i)\n        elif type(i) == tuple or type(i) == list:\n            result.append(even_ele(i, even_fnc))\n    return tuple(result)",
        "num_ids": 116
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in two parameters, base edge (b) and height (s). \n    It calculates and returns the surface area of a square pyramid with the given base edge and height.\n    '''\n    # calculate the area of the square base\n    base_area = 4 * b ** 2\n    \n    # calculate the area of the square face\n    face_area = 2 * b * s\n    \n    # calculate the area of the triangular face\n    tri_area = b * s / 2\n    \n    # calculate the total surface area\n    total_area = base_area + 4 * tri_area + face_area\n    \n    return total_area",
        "num_ids": 146
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*b*s + 2*b*b",
        "num_ids": 52
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(base, height):\n    # Calculate the area of the square base\n    area = base ** 2\n    \n    # Calculate the total surface area of the pyramid\n    total_area = 4 * area + 4 * (base * height)\n    \n    # Return the total surface area of the pyramid\n    return total_area",
        "num_ids": 71
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(base_edge, height):\n    \"\"\"\n    This function takes the base edge and height of a square pyramid as arguments and returns the surface area of the pyramid.\n    \"\"\"\n    # Calculate the surface area of each face of the pyramid\n    face_area = base_edge**2\n    # Calculate the surface area of the base\n    base_area = 4 * base_edge * height\n    # Calculate the total surface area of the pyramid\n    total_area = 5 * face_area + base_area\n    return total_area",
        "num_ids": 118
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 4 * b * s + 2 * b * b\n    return surface_area",
        "num_ids": 60
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (2 * b * s) + (2 * (b ** 2))\n    return area",
        "num_ids": 60
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the square base\n    area_base = 4 * b * s\n\n    # Calculate the area of the square sides\n    area_side = 4 * b**2\n\n    # Calculate the area of the triangle apex\n    area_apex = 0.5 * b * s\n\n    # Calculate the total surface area\n    total_area = area_base + area_side + area_apex\n\n    return total_area",
        "num_ids": 130
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each square face\n    area_of_square_face = 6 * s**2\n    \n    # Calculate the area of the base\n    area_of_base = 4 * b**2\n    \n    # Calculate the total surface area\n    total_surface_area = 2 * area_of_base + area_of_square_face\n    \n    return total_surface_area",
        "num_ids": 119
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes in two arguments, the base edge and the height of the square pyramid, \n    and returns the total surface area of the pyramid.\n    '''\n    # Calculate the area of each face of the pyramid\n    front_area = base * height\n    side_area = base * base\n    top_area = (base * base) / 2\n    \n    # Calculate the total surface area of the pyramid\n    total_area = 2 * front_area + 4 * side_area + top_area\n    \n    return total_area",
        "num_ids": 125
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes in two arguments:\n    base: The length of one of the square pyramid's sides.\n    height: The height of the pyramid.\n\n    It returns the surface area of the square pyramid.\n    '''\n\n    # Calculate the area of one of the square pyramid's sides.\n    side_area = base ** 2\n\n    # Calculate the area of the square pyramid.\n    pyramid_area = 4 * side_area\n\n    # Calculate the total surface area of the pyramid.\n    total_area = 2 * (base * height + side_area) + pyramid_area\n\n    # Return the total surface area of the pyramid.\n    return total_area",
        "num_ids": 157
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")",
        "num_ids": 48
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 40
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dictionary):\n    \"\"\"\n    Check if a dictionary is empty.\n    \"\"\"\n    if not dictionary:\n        return True\n    else:\n        return False",
        "num_ids": 34
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")",
        "num_ids": 48
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")",
        "num_ids": 55
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True",
        "num_ids": 38
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Check if a dictionary is empty.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 36
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")",
        "num_ids": 48
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty or not.\n    '''\n    if not bool(dict1):\n        return \"Dictionary is empty\"\n    else:\n        return \"Dictionary is not empty\"",
        "num_ids": 51
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        catalan_num = 1\n        for i in range(2, num+1):\n            catalan_num = (2*i - 1) * catalan_num / i\n        return catalan_num",
        "num_ids": 91
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result",
        "num_ids": 79
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        catalan_sum = 0\n        for i in range(num):\n            catalan_sum += catalan_number(i) * catalan_number(num - i - 1)\n        return catalan_sum",
        "num_ids": 93
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth catalan number.\n\n    Args:\n    num: An integer representing the position of the catalan number in the sequence.\n\n    Returns:\n    An integer representing the nth catalan number.\n\n    Raises:\n    ValueError: If num is less than 0 or greater than or equal to 100.\n    \"\"\"\n    if num < 0 or num >= 100:\n        raise ValueError(\"Number must be between 0 and 99\")\n\n    if num == 0:\n        return 1\n\n    catalan = [0] * 100\n    catalan[0] = 1\n\n    for i in range(1, num+1):\n        catalan[i] = (4*i-2) * catalan[i-1] // (i+1)\n\n    return catalan[num]",
        "num_ids": 195
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = []\n        for i in range(num+1):\n            catalan.append(catalan_number(i)*catalan_number(num-i))\n        return sum(catalan)",
        "num_ids": 96
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(num):\n            sum += catalan_number(i) * catalan_number(num - i - 1)\n        return sum",
        "num_ids": 92
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(num+1):\n            res += catalan_number(i)*catalan_number(num-i)\n        return res",
        "num_ids": 89
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        catalan = [0] * (num + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num + 1):\n            catalan[i] = (2 * i - 1) * catalan[i - 1] // i\n        return catalan[num]",
        "num_ids": 129
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
        "num_ids": 124
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 0:\n        return 1\n    else:\n        c = 1\n        for i in range(2, n+1):\n            c = (2*i)*catalan_number(i-1)/(i+1)\n        return int(c)\n",
        "num_ids": 103
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all occurrences of adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    \n    # If no adverbs ending with \"ly\" were found, return None\n    if not adverbs:\n        return None\n    \n    # Find the positions of the first adverb ending with \"ly\"\n    positions = [m.start() for m in re.finditer(r'\\b\\w*ly\\b', text)]\n    first_ly_pos = positions[0]\n    \n    # Return the first adverb ending with \"ly\" and its position in the text\n    return adverbs[0], first_ly_pos",
        "num_ids": 161
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all the adverbs ending with \"ly\"\n    pattern = r\"\\b\\w*ly\\b\"\n    adverbs = re.findall(pattern, text)\n    \n    # If no adverb is found, return None\n    if len(adverbs) == 0:\n        return None\n    \n    # Find the first adverb ending with \"ly\" and its positions in the string\n    for adverb in adverbs:\n        start = text.find(adverb)\n        end = start + len(adverb)\n        return adverb, start, end",
        "num_ids": 134
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group(0)\n        start = match.start()\n        end = match.end()\n        return (adverb, start, end)\n    else:\n        return None",
        "num_ids": 105
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all adverb phrases in the given text\n    pattern = r'\\b\\w+(ly)\\b'\n    adverbs = re.findall(pattern, text)\n\n    # Find the positions of the first adverb ending with ly\n    positions = []\n    for adverb in adverbs:\n        match = re.search(adverb, text)\n        positions.append(match.start())\n\n    return adverbs, positions",
        "num_ids": 105
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Regular expression to find adverbs ending with ly\n    pattern = r\"\\b[a-zA-Z]+ly\\b\"\n\n    # Find all the adverbs ending with ly\n    adverbs = re.findall(pattern, text)\n\n    # Check if any adverbs were found\n    if not adverbs:\n        print(\"No adverbs ending with 'ly' were found in the text.\")\n        return\n\n    # Find the first adverb ending with ly and its position\n    first_adv = adverbs[0]\n    first_pos = text.find(first_adv)\n\n    print(\"The first adverb ending with 'ly' is:\", first_adv)\n    print(\"Its position in the text is:\", first_pos)",
        "num_ids": 198
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    matches = re.finditer(pattern, text)\n    adverbs = [(match.group(), match.start()) for match in matches]\n    return adverbs",
        "num_ids": 63
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append(text[match.start():match.end()])\n    return adverbs",
        "num_ids": 73
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w*ly\\b\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb ending with 'ly': {match.group()}\")\n        print(f\"Position: {match.start()}\")\n        break",
        "num_ids": 78
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 70
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb ending with 'ly' found at index {match.start()} and length {len(match.group())}\")\n        return True\n    return False",
        "num_ids": 102
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap)[1] for i in range(len(heap))]",
        "num_ids": 86
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    for item in items:\n        heapq.heappush(heap, item)\n        \n    top_n = []\n    \n    for i in range(n):\n        top_n.append(heapq.heappop(heap))\n        \n    return top_n",
        "num_ids": 92
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, (item['price'], item['name']))\n\n    # Iterate through the rest of the items and update the heap if necessary\n    for item in items[n:]:\n        if item['price'] > heap[0][0]:\n            heapq.heapreplace(heap, (item['price'], item['name']))\n\n    # Return the n most expensive items\n    return [heapq.heappop(heap)[1] for _ in range(n)]",
        "num_ids": 160
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [name for price, name in heap]",
        "num_ids": 94
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): A list of dictionaries containing item information. Each dictionary should have keys 'name' and 'price'.\n    n (int): The number of items to return.\n\n    Returns:\n    list: A list of dictionaries containing the n most expensive items.\n    \"\"\"\n    # Create a list of tuples where each tuple contains the item's price and name\n    items_list = [(item['price'], item['name']) for item in items]\n\n    # Create a min heap of the items_list\n    heapq.heapify(items_list)\n\n    # Return a list of the n most expensive items\n    return [{'name': name, 'price': price} for price, name in heapq.nsmallest(n, items_list)]",
        "num_ids": 187
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items as input and returns the n most expensive items\n    in the list.\n    '''\n    # Create a max-heap using the heapify function from the heapq module\n    heap = items[:n]\n    heapq.heapify(heap)\n\n    # Loop through the remaining items in the list\n    for item in items[n:]:\n        # If the current item is more expensive than the smallest item in the heap,\n        # replace the smallest item with the current item and heapify the heap\n        if item > heap[0]:\n            heapq.heappushpop(heap, item)\n\n    # Return the n most expensive items in the list\n    return heapq.nlargest(n, heap)",
        "num_ids": 169
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n        \n    return result",
        "num_ids": 93
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    - items: a list of tuples (item, price) representing the items and their prices.\n    - n: the number of most expensive items to find.\n\n    Returns:\n    - a list of the n most expensive items, in descending order of price.\n    \"\"\"\n    heap = []\n    for item, price in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (price, item))\n        elif price > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (price, item))\n    return [item for price, item in sorted(heap, reverse=True)]",
        "num_ids": 175
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a list of items and returns a list of the n most expensive items.\n    '''\n    # Create a list of tuples where the first element is the item price and the second element is the item name.\n    item_prices = [(item[1], item[0]) for item in items]\n    # Sort the list of tuples in descending order by price.\n    heapq.heapify(item_prices)\n    # Return the top n items from the sorted list of tuples.\n    return [item[1] for item in heapq.nlargest(n, item_prices)]",
        "num_ids": 141
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result",
        "num_ids": 86
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list and an integer n as inputs and splits the list at the nth element and adds the first part to the end.\n    '''\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # add the first part to the end of the list\n    l = second_part + first_part\n    return l",
        "num_ids": 95
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Split a list at the nth element and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]",
        "num_ids": 42
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    This function splits the list at the nth element and adds the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 44
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n    l (list): The list to be split.\n    n (int): The index at which to split the list.\n\n    Returns:\n    list: The new list with the first part of the original list added to the end.\n    \"\"\"\n\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n\n    # Add the first part to the end\n    new_list = second_part + first_part\n\n    return new_list",
        "num_ids": 135
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 44
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    This function converts a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex",
        "num_ids": 36
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as an argument and returns a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 34
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)",
        "num_ids": 26
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 26
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 26
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    tpl = tuple(lst)\n    return tpl",
        "num_ids": 30
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(lst)",
        "num_ids": 31
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)\n",
        "num_ids": 43
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 43
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in ascending order\n    nums.sort()\n    # find the difference between largest and smallest value\n    diff = nums[-1] - nums[0]\n    return diff",
        "num_ids": 69
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            print(i)",
        "num_ids": 60
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers as input and returns a list of all the perfect squares\n    between the two numbers (inclusive).\n    '''\n    # create an empty list to store the perfect squares\n    squares = []\n    \n    # loop through all the numbers from a to b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            # add the perfect square to the list if it's between a and b\n            squares.append(num)\n    \n    # return the list of perfect squares\n    return squares",
        "num_ids": 140
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Find the perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num**0.5)\n        if root*root == num:\n            result.append(num)\n    return result",
        "num_ids": 69
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize the list of perfect squares\n    perfect_squares = []\n    # iterate over the range of numbers between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        root = num ** 0.5\n        if int(root + 0.5) ** 2 == num:\n            perfect_squares.append(num)\n    # return the list of perfect squares\n    return perfect_squares",
        "num_ids": 123
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b+1):\n        if i == 0:\n            continue\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                if j**2 == i:\n                    result.append(j)\n                elif j**2 < i < (j+1)**2:\n                    result.append(j)\n                    result.append(i//j)\n    return result",
        "num_ids": 142
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            result.append(i)\n    return result",
        "num_ids": 67
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of all perfect squares \n    between the given numbers (inclusive) in the form of a list.\n    '''\n    result = []\n    for i in range(a**2, b**2+1):\n        if i**0.5 == int(i**0.5):\n            result.append(i)\n    return result",
        "num_ids": 91
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    squares = []\n    \n    # Loop through the range of numbers between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = num ** 0.5\n        if root == int(root):\n            squares.append(num)\n    \n    # Return the list of perfect squares\n    return squares",
        "num_ids": 111
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Find the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n    \n    # Find the largest perfect square less than or equal to the smaller number\n    largest_square = int(smaller ** 0.5)\n    \n    # Initialize a list to store the perfect squares\n    squares = []\n    \n    # Loop through all the perfect squares less than or equal to the largest square\n    for i in range(1, largest_square + 1):\n        square = i ** 2\n        if square >= a and square <= b:\n            squares.append(square)\n    \n    # Return the list of perfect squares\n    return squares",
        "num_ids": 159
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of all perfect squares between the two numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == 0:\n            continue\n        root = i ** 0.5\n        if int(root)**2 == i:\n            result.append(i)\n    return result",
        "num_ids": 89
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Converts polar coordinates (rho, theta) to rectangular coordinates (x, y).\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "num_ids": 66
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x + y*1j",
        "num_ids": 40
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 56
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 57
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in polar coordinates as inputs and returns the rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 64
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.rect(1,y)",
        "num_ids": 44
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = x + y*1j\n    return z.real, z.imag",
        "num_ids": 50
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar to rectangular coordinates.\n\n    Args:\n        r (float): The distance from the origin.\n        theta (float): The angle in radians.\n\n    Returns:\n        (float, float): The rectangular coordinates (x, y).\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)",
        "num_ids": 100
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes in two parameters, r and theta, and returns the rectangular coordinates (x, y)\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 71
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)",
        "num_ids": 59
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    \"\"\"\n    This function takes a list as an argument and swaps the first and last elements in the list.\n    \"\"\"\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 78
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"The list should have at least 2 elements.\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"The new list after swapping is:\", newList)",
        "num_ids": 99
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Interchange the first and last elements of a list.\n    \"\"\"\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 62
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and returns the modified list after swapping the first and last elements.\n    '''\n    \n    # copying the first and last elements into new variables\n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    # deleting the first and last elements from the original list\n    del newList[0]\n    del newList[-1]\n    \n    # inserting the first element at the end of the list\n    newList.append(first_element)\n    \n    # inserting the last element at the beginning of the list\n    newList.insert(0, last_element)\n    \n    # returning the modified list\n    return newList",
        "num_ids": 148
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"List should have at least two elements\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList",
        "num_ids": 81
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 74
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 74
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_coeff(n, k):\n    \"\"\"\n    Computes the binomial coefficient (n choose k)\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    elif k == 1 or k == n-1:\n        return n\n    else:\n        return binomial_coeff(n-1, k-1) + binomial_coeff(n-1, k)\n\ndef sum_of_consecutive_binomial_coefficients(n):\n    \"\"\"\n    Computes the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    total = 0\n    for k in range(n):\n        total += binomial_coeff(n, k+1) * (n-k)\n    return total\n",
        "num_ids": 161
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nresult = 0\nfor i in range(k, n+1):\n    result += binomial_Coeff(i, k)\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", result)",
        "num_ids": 159
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n        \nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))",
        "num_ids": 138
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments, n and k, where n is the number of elements and k is the index of the first term. \n    It returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k, n+1): \n        result = result * i \n    return result \n\nn = int(input(\"Enter the value of n: \")) \nk = int(input(\"Enter the value of k: \")) \nsum = 0 \n\nfor i in range(k, n+1): \n    sum += binomial_Coeff(n, i) \n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum) ",
        "num_ids": 169
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
        "num_ids": 77
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k):\n        res *= (n-i)/(i+1)\n    return res\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum = 0\nfor i in range(k):\n    sum += binomial_Coeff(n,i)\n\nprint(\"Sum of the product of consecutive binomial co-efficients is:\", sum)",
        "num_ids": 139
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function takes two arguments, n and k, where n is the number of elements in a sequence and k is the index of the element we want to calculate the binomial coefficient for.\n    It returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        result = 1\n        for i in range(1,k+1):\n            result = result * (n-k+i)/i\n        return int(result)",
        "num_ids": 140
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\ndef sum_of_product_of_consecutive_binomial_coefficients(n):\n    sum = 0\n    for i in range(n+1):\n        sum += binomial_Coeff(n, i) * binomial_Coeff(n-i, 0)\n    return sum\n\nn = 5\nprint(\"Sum of product of consecutive binomial coefficients:\", sum_of_product_of_consecutive_binomial_coefficients(n))",
        "num_ids": 158
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments, n and k.\n    n is the total number of elements in the set, and k is the number of elements to be chosen from the set.\n    The function calculates and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result = result*(n-i)/(i+1)\n    return result\n",
        "num_ids": 102
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result = result * (n-i) // (i+1)\n    return result",
        "num_ids": 68
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Removes leading zeroes from an IP address.\n    \"\"\"\n    return re.sub(r'(\\d)\\.0+(\\d)', r'\\1.\\2', ip)",
        "num_ids": 52
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'0+(\\d)(?=(?:\\D*\\d){3})', r'\\1', ip)",
        "num_ids": 56
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Regular expression to match leading zeroes in an ip address\n    pattern = r'^0+(?=\\d)'\n    \n    # Check if the ip address has leading zeroes\n    match = re.match(pattern, ip)\n    \n    # If the ip address has leading zeroes, remove them\n    if match:\n        ip = re.sub(pattern, '', ip)\n    \n    return ip",
        "num_ids": 91
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    pattern = r'0*(?=\\d)'\n    return re.sub(pattern, '', ip)\n\nprint(removezero_ip('192.0.0.1'))\nprint(removezero_ip('10.0.0.001'))\nprint(removezero_ip('172.16.0.1'))\nprint(removezero_ip('192.168.1.1'))",
        "num_ids": 126
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = ''\n    for octet in ip_list:\n        if octet.startswith('0') and len(octet) > 1:\n            new_ip += octet[1:] + '.'\n        else:\n            new_ip += octet + '.'\n    return new_ip[:-1]",
        "num_ids": 105
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    # Split the ip address into octets\n    octets = ip.split('.')\n    # Remove leading zeroes from each octet\n    octets = [str(int(octet)) for octet in octets]\n    # Join the octets back together and return the result\n    return '.'.join(octets)",
        "num_ids": 93
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(\"^0+\", \"\", ip)",
        "num_ids": 42
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_parts = re.split(r'(\\d+)', ip)\n    new_ip = ''\n    for part in ip_parts:\n        if part.isdigit() and int(part) == 0:\n            new_ip += part\n        elif part.isdigit() and int(part) > 0:\n            new_ip += '0' + part\n        else:\n            new_ip += part\n    return new_ip",
        "num_ids": 122
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # regex to match the ip address pattern with leading zeroes\n    pattern = r'^0*(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+)$'\n    \n    # match the ip address with the pattern\n    match = re.match(pattern, ip)\n    \n    # if the ip address is matched\n    if match:\n        # return the ip address without leading zeroes\n        return match.group('ip')\n    else:\n        # return None if the ip address is not matched with the pattern\n        return None",
        "num_ids": 139
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\d)\\.0(\\d+)', r'\\1.\\2', ip)\n\nip_address = \"192.000.1.001\"\nnew_ip = removezero_ip(ip_address)\nprint(new_ip)",
        "num_ids": 98
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # loop through the list\n    for num in list1:\n        # check if the number is even or odd\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # return the difference between even and odd numbers\n    return even_num - odd_num",
        "num_ids": 127
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and the first odd number in the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)",
        "num_ids": 113
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    return abs(even_num - odd_num)",
        "num_ids": 112
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even, odd = None, None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return abs(even - num)\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return abs(odd - num)\n    return None  # no even or odd number found in the list\n",
        "num_ids": 115
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        print(\"List must have at least 2 elements.\")\n        return None\n    \n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    \n    if even_num is None:\n        print(\"List must have at least one even number.\")\n        return None\n    elif odd_num is None:\n        print(\"List must have at least one odd number.\")\n        return None\n    \n    return abs(even_num - odd_num)",
        "num_ids": 183
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even = None\n    odd = None\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even = list1[i]\n            break\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd = list1[i]\n            break\n    return even - odd",
        "num_ids": 122
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            \n    diff = even_num - odd_num\n    return diff",
        "num_ids": 98
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and the first odd number of the list.\n\n    Parameters:\n    list1 (list): A list of numbers.\n\n    Returns:\n    int: The difference between the first even and the first odd number of the list.\n    \"\"\"\n    # Initialize variables\n    even_num = -1\n    odd_num = -1\n    diff = 0\n\n    # Iterate through the list and find the first even and first odd number\n    for num in list1:\n        if num % 2 == 0:\n            if even_num == -1:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num == -1:\n                odd_num = num\n            else:\n                break\n\n    # Calculate the difference between the first even and first odd number\n    if even_num!= -1 and odd_num!= -1:\n        diff = even_num - odd_num\n\n    # Return the difference\n    return diff",
        "num_ids": 220
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    if len(list1) == 0:\n        print(\"List is empty\")\n    else:\n        for num in list1:\n            if num % 2 == 0:\n                even = num\n                break\n        for num in list1:\n            if num % 2!= 0:\n                odd = num\n                break\n        print(\"The difference between the first even and first odd number in the list is\", even - odd)",
        "num_ids": 135
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even = lst[0]\n    odd = lst[1]\n    \n    for num in lst[2:]:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n            \n    return abs(even - odd)",
        "num_ids": 90
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Check if the strings are of equal length\n    if len(str1)!= len(str2):\n        print(\"Strings should be of equal length\")\n        return\n\n    # Convert the strings into lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Initialize variables for swaps and the current index\n    swaps = 0\n    i = 0\n\n    # Traverse through the lists and compare characters at corresponding positions\n    while i < len(list1):\n        if list1[i]!= list2[i]:\n            # Swap the characters if they are different\n            temp = list1[i]\n            list1[i] = list2[i]\n            list2[i] = temp\n\n            # Increment the swaps counter\n            swaps += 1\n\n        # Move to the next position\n        i += 1\n\n    # Return the minimum number of swaps required to convert str1 to str2\n    return swaps",
        "num_ids": 214
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return -1  # Incompatible strings\n    \n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # If the digits at position i are different,\n            # we need to swap them and count the swap as one operation.\n            if str1[i] == '1':\n                str2 = str2[:i] + '0' + str2[i+1:]\n            else:\n                str2 = str2[:i] + '1' + str2[i+1:]\n            swaps += 1\n    \n    return swaps",
        "num_ids": 156
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings to lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n    \n    # initialize the count of swaps to zero\n    count = 0\n    \n    # loop through the lists simultaneously\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            # if the characters don't match, swap them and increment the count\n            list1[i], list1[list2.index(list1[i])] = list1[list2.index(list1[i])], list1[i]\n            count += 1\n            \n    return count",
        "num_ids": 148
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    # converting string to list of characters\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # initializing the count of swaps\n    count = 0\n\n    # iterating through the strings to find the number of swaps\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            j = i + 1\n            while j < len(str1) and str1[j] == str2[j]:\n                j += 1\n            if j == len(str1):\n                return \"Not Possible\"\n            count += 1\n            str1[i], str1[j] = str1[j], str1[i]\n\n    return count",
        "num_ids": 168
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    if n1!= n2:\n        return -1  # If lengths are not equal, return -1\n    count = 0\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count  # Return the minimum number of swaps required",
        "num_ids": 99
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings into lists of integers\n    a = [int(i) for i in str1]\n    b = [int(i) for i in str2]\n    \n    # Calculate the number of swaps required\n    n = len(a)\n    swaps = 0\n    for i in range(n):\n        if a[i]!= b[i]:\n            j = i + 1\n            while j < n and a[j]!= b[i]:\n                j += 1\n            if j == n:\n                return -1 # not possible to convert\n            else:\n                a[i], a[j] = a[j], a[i]\n                swaps += 1\n    \n    return swaps",
        "num_ids": 164
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "",
        "num_ids": 1
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    mapping = {}\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            if str1[i] in mapping and mapping[str1[i]]!= str2[i]:\n                count += 1\n            elif str2[i] in mapping and mapping[str2[i]]!= str1[i]:\n                count += 1\n            else:\n                mapping[str1[i]] = str2[i]\n                mapping[str2[i]] = str1[i]\n    return count",
        "num_ids": 136
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            j = i + 1\n            while j < len(str1) and str1[j] == str2[i]:\n                j += 1\n            if j == len(str1):\n                return \"No possible conversion possible\"\n            k = i + 1\n            while k < len(str1) and str1[k] == str2[i]:\n                k += 1\n            if k == len(str1):\n                return \"No possible conversion possible\"\n            count += 1\n            str1 = str1[:i] + str2[i] + str1[i+1:j] + str1[i] + str1[j:]\n            str2 = str2[:i] + str1[i] + str2[i+1:k] + str2[i] + str2[k:]\n    return count\n",
        "num_ids": 225
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of digits\n    digits1 = [int(d) for d in str1]\n    digits2 = [int(d) for d in str2]\n\n    # Initialize the count of swaps\n    count = 0\n\n    # Iterate over the digits and compare them\n    for i in range(len(digits1)):\n        if digits1[i]!= digits2[i]:\n            # Find the index of the next digit in str2 that matches digits1[i]\n            j = str2.index(str(digits1[i]), i)\n            # Swap the digits at indices i and j\n            digits1[i], digits1[j] = digits1[j], digits1[i]\n            digits2[i], digits2[j] = digits2[j], digits2[i]\n            count += 1\n\n    return count",
        "num_ids": 196
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the total size in bytes of the tuples in the list.\n    '''\n    total_size = 0\n    for tpl in tuple_list:\n        total_size += sys.getsizeof(tpl)\n    return total_size",
        "num_ids": 74
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size",
        "num_ids": 65
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print(f\"The size of the tuple is {size} bytes.\")",
        "num_ids": 61
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        size = sys.getsizeof(t)\n        total_size += size\n    return total_size",
        "num_ids": 69
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # find the length of both arrays\n    n1, n2 = len(arr1), len(arr2)\n\n    # initialize variables\n    i, j = 0, 0\n    count = 0\n\n    # loop until all elements are traversed\n    while i < n1 and j < n2:\n\n        # check which element is smaller and add it to the result array\n        if arr1[i] <= arr2[j]:\n            count += n1 - i\n            i += 1\n        else:\n            count += n2 - j\n            j += 1\n\n        # if k is reached, return the current element\n        if count == k:\n            return min(arr1[i-1], arr2[j-1])\n\n    # if k is greater than the total number of elements, return -1\n    if count < k:\n        return -1",
        "num_ids": 215
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    \n    if k > n + m:\n        return None\n    \n    if k <= n:\n        return arr1[k-1]\n    \n    if k > n and k <= n+m:\n        return arr2[k-n-1]",
        "num_ids": 100
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a number k, and returns the kth smallest element from the two arrays.\n    \"\"\"\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    return merged_arr[k-1]",
        "num_ids": 71
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n    \"\"\"\n    n1, n2 = len(arr1), len(arr2)\n    if k > n1 + n2:\n        return None\n\n    # Handle the case where one of the arrays is empty\n    if n1 == 0:\n        return arr2[k-1]\n    if n2 == 0:\n        return arr1[k-1]\n\n    # Handle the case where k is 1\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    # Handle the case where k is between 1 and n1 + n2\n    if k <= n1:\n        return find_kth_array(arr1, arr2[:n2], k)\n    else:\n        return find_kth_array(arr1[:n1], arr2, k-n1)\n\n\ndef find_kth_array(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from a single sorted array.\n    \"\"\"\n    n1, n2 = len(arr1), len(arr2)\n    if k > n1 + n2:\n        return None\n\n    # Handle the case where one of the arrays is empty\n    if n1 == 0:\n        return arr2[k-1]\n    if n2 == 0:\n        return arr1[k-1]\n\n    # Handle the case where k is 1\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    # Handle the case where k is between 1 and n1 + n2\n    if k <= n1:\n        return find_kth_array(arr1, arr2[:n2], k)\n    else:\n        return find_kth_array(arr1[:n1], arr2, k-n1)",
        "num_ids": 420
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds kth element from the given two sorted arrays.\n    :param arr1: A sorted array\n    :param arr2: A sorted array\n    :param k: An integer representing the kth element to be found\n    :return: An integer representing the kth element from the two sorted arrays\n    \"\"\"\n    # Find the length of the two arrays\n    len1 = len(arr1)\n    len2 = len(arr2)\n    \n    # If the length of the first array is less than or equal to k,\n    # then return the kth element from the second array\n    if len1 <= k:\n        return arr2[k]\n    \n    # If the length of the second array is less than or equal to k,\n    # then return the kth element from the first array\n    if len2 <= k:\n        return arr1[k]\n    \n    # Calculate the mid points of the two arrays\n    mid1 = len1 // 2\n    mid2 = len2 // 2\n    \n    # If the kth element is in the first half of arr1\n    if arr1[mid1] >= arr2[mid2]:\n        return find_kth(arr1[mid1:], arr2, k-mid1)\n    \n    # If the kth element is in the second half of arr1\n    else:\n        return find_kth(arr1, arr2[mid2:], k)",
        "num_ids": 310
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays and returns the kth smallest element\n    from the combined array.\n    '''\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n    return combined_arr[k-1]",
        "num_ids": 66
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element from the two sorted arrays.\n    \"\"\"\n\n    # Check if the arrays are valid or not.\n    if not arr1 or not arr2 or len(arr1) < k or len(arr2) < k:\n        return None\n\n    # Initialize the pointers.\n    i = 0\n    j = 0\n    count = 0\n\n    # Loop until one of the pointers reaches the end.\n    while i < len(arr1) and j < len(arr2):\n        # If the current element of the first array is smaller, increment i.\n        if arr1[i] < arr2[j]:\n            i += 1\n        # Otherwise, increment j.\n        else:\n            j += 1\n\n        # Increment the count.\n        count += 1\n\n        # If the count is equal to k, return the element.\n        if count == k:\n            return min(arr1[i-1], arr2[j-1])\n\n    # If the count is less than k, return None.\n    return None\n",
        "num_ids": 238
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) + len(arr2):\n        return None\n    \n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    if k <= len(arr1):\n        return arr1[k-1]\n    else:\n        return arr2[k-len(arr1)-1]",
        "num_ids": 141
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n = len(arr1)\n    m = len(arr2)\n    if n > m:\n        return find_kth(arr2, arr1, k)\n    if n == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k//2, n)\n    j = k - i\n    if arr1[i-1] > arr2[j-1]:\n        return find_kth(arr1[:i], arr2, k-i)\n    else:\n        return find_kth(arr1, arr2[:j], k-j)",
        "num_ids": 184
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # merge the two arrays and sort them\n    merged = sorted(arr1 + arr2)\n    return merged[k-1]",
        "num_ids": 63
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes a number as input and returns True if it is an Armstrong number, False otherwise.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n    # Calculate the length of the number\n    length = len(number_str)\n    # Calculate the sum of the cube of each digit\n    sum_of_cubes = sum([int(digit)**length for digit in number_str])\n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "num_ids": 134
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string to extract its digits\n    digits = str(number)\n    # Calculate the number of digits in the number\n    num_digits = len(digits)\n    # Calculate the sum of the power of each digit\n    sum_of_powers = sum([int(digit) ** num_digits for digit in digits])\n    # Check if the sum is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False",
        "num_ids": 133
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    order = len(str(number))\n    sum_of_cubes = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum_of_cubes += digit ** order\n        temp //= 10\n    if number == sum_of_cubes:\n        return True\n    else:\n        return False",
        "num_ids": 105
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string to get its length\n    num_str = str(number)\n    # Get the length of the number\n    length = len(num_str)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each digit of the number and calculate its power\n    for digit in num_str:\n        sum += int(digit) ** length\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False",
        "num_ids": 135
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = len(str(number))\n    sum_of_digits = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum_of_digits += digit ** n\n        temp //= 10\n    if number == sum_of_digits:\n        return True\n    else:\n        return False",
        "num_ids": 102
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Calculate the length of the number\n    length = len(number_str)\n\n    # Calculate the sum of the cubes of each digit\n    sum = 0\n    for digit in number_str:\n        sum += int(digit) ** length\n\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False",
        "num_ids": 124
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    order = len(str(number))\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes an integer as input and returns True if the number is an Armstrong number, else False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    '''\n    # Convert the input number to a string to count its digits\n    num = str(number)\n    # Get the number of digits in the input number\n    digit_count = len(num)\n    # Initialize a variable to store the sum of powers of digits\n    sum_of_powers = 0\n    # Iterate through each digit in the input number and add its power to the sum_of_powers variable\n    for digit in num:\n        sum_of_powers += int(digit) ** digit_count\n    # If the sum of powers is equal to the input number, then the number is an Armstrong number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False",
        "num_ids": 215
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_armstrong_number(number):\n    '''\n    A function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum\n\nprint(is_armstrong_number(153)) # Output: True",
        "num_ids": 92
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    # Get the length of the number\n    n = len(number_str)\n    # Calculate the sum of the nth power of each digit of the number\n    sum_of_powers = sum([int(digit)**n for digit in number_str])\n    # Check whether the sum of powers is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False",
        "num_ids": 132
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average",
        "num_ids": 66
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return sum, avg",
        "num_ids": 65
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    This function takes an integer as input and returns the sum and average of first n natural numbers.\n    '''\n    if not isinstance(number, int) or number < 1:\n        return 'Invalid input!'\n\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n\n    average = sum / number\n\n    return f'Sum of first {number} natural numbers: {sum}\\nAverage of first {number} natural numbers: {average}'\n\nprint(sum_average(5))",
        "num_ids": 119
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # Initialize sum and count variables\n    total = 0\n    count = 0\n\n    # Loop through first n natural numbers and add to total and increment count\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    # Calculate average\n    average = total / count\n\n    # Return sum and average as a tuple\n    return (total, average)",
        "num_ids": 106
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return sum, avg",
        "num_ids": 56
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        print(\"Invalid input. Please provide a positive integer.\")\n        return\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        average = sum/n\n        return sum, average",
        "num_ids": 91
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    avg = total / n\n    return total, avg",
        "num_ids": 57
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_even(n):\n    '''\n    Check if a number is even or not\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 40
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and checks whether it is even or odd.\n    If it is even, it returns True, otherwise it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if it is even,\n    otherwise it returns False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it's even,\n    False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether a given number is even or odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Checks whether a number is even or odd.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is even, False if it's odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None",
        "num_ids": 71
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as an argument and returns the first repeated character in the string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found.\"",
        "num_ids": 88
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None",
        "num_ids": 80
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
        "num_ids": 62
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None",
        "num_ids": 80
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
        "num_ids": 62
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return \"No repeated characters found in the string.\"",
        "num_ids": 78
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1",
        "num_ids": 67
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1",
        "num_ids": 68
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None  # if no repeated character is found",
        "num_ids": 88
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_ludic = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(i)\n    return ludics",
        "num_ids": 111
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            ludics.append(i)\n    return ludics",
        "num_ids": 85
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lucid(n):\n    '''\n    Check if a number is lucid or not.\n    A number is lucid if its reverse is a palindrome.\n    '''\n    return str(n) == str(n)[::-1]\n\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic",
        "num_ids": 128
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while i <= n:\n        # Check if i is a Lucas number\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            ludic.append(i)\n        i += 1\n    return ludic",
        "num_ids": 109
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(1, i):\n            if i % j == 0:\n                if not i/j in ludics:\n                    is_lucid = False\n                    break\n        if is_lucid:\n            ludics.append(i)\n    return ludics",
        "num_ids": 119
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for num in range(2, n+1):\n        is_lucid = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(num)\n    return ludics",
        "num_ids": 108
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        if i == 1:\n            continue\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            ludics.append(i)\n    return ludics",
        "num_ids": 99
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i > 1 and all(i % j!= 0 for j in range(2, int(i/2)+1)):\n            ludic.append(i)\n    return ludic",
        "num_ids": 96
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_lucid(n):\n    '''\n    A function to check if a given integer is a Lucid number.\n    '''\n    s = str(n)\n    if len(s) == 1:\n        return True\n    for i in range(1, len(s)):\n        if int(s[i])%2 == 0:\n            return False\n    return True",
        "num_ids": 162
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lucid(n):\n    '''\n    Check if a number is lucid.\n    '''\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic",
        "num_ids": 135
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence",
        "num_ids": 85
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]  # reverse each word\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)  # join the reversed words back into a sentence\n    return reversed_sentence",
        "num_ids": 107
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split string into words\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])  # reverse each word\n    return''.join(reversed_words)  # join reversed words into a string\n",
        "num_ids": 89
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    This function will reverse the order of words in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)",
        "num_ids": 53
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Split the string into individual words\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])  # Reverse each word and append it to a new list\n    reversed_s =''.join(reversed_words)  # Join the reversed words with spaces in between\n    return reversed_s  # Return the reversed string",
        "num_ids": 112
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Splitting the string into words\n    reversed_words = [] # Creating an empty list to store reversed words\n    for word in words:\n        reversed_words.append(word[::-1]) # Reversing each word and adding to list\n    return''.join(reversed_words) # Joining the reversed words and returning the string",
        "num_ids": 105
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    \n    # reverse each word and join them back into a string\n    reversed_words =''.join(word[::-1] for word in words)\n    \n    # return the reversed string\n    return reversed_words",
        "num_ids": 83
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]  # reverse each word\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)  # join the reversed words into a string",
        "num_ids": 99
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Splitting the string into words\n    reversed_words = []  # Creating an empty list to store reversed words\n    for word in words:\n        reversed_word = word[::-1]  # Reversing the word\n        reversed_words.append(reversed_word)  # Appending the reversed word to the list\n    return''.join(reversed_words)  # Joining the reversed words with spaces",
        "num_ids": 122
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)",
        "num_ids": 60
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if the number is prime, False otherwise.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True",
        "num_ids": 67
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))   # Output: True\nprint(is_prime(10))  # Output: False",
        "num_ids": 100
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is a prime number, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and checks if it is a prime number or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks whether the given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, and False otherwise.\n    '''\n    if num <= 1:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True",
        "num_ids": 69
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the equivalent angle in radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "num_ids": 45
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n\n    :param degree: degree value to convert\n    :type degree: float\n    :return: converted value in radians\n    :rtype: float\n    \"\"\"\n\n    return math.radians(degree)",
        "num_ids": 59
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians",
        "num_ids": 45
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "num_ids": 39
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian",
        "num_ids": 46
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns the corresponding\n    radian value.\n    '''\n    return degree * math.pi / 180",
        "num_ids": 47
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = (degree * math.pi) / 180\n    return radian",
        "num_ids": 47
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n\nprint(radian_degree(90)) # Output: 1.5707963267948966",
        "num_ids": 75
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    This function takes an angle in degrees as input and converts it to radians.\n    \"\"\"\n    radians = degree * (math.pi / 180)\n    return radians",
        "num_ids": 51
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 53
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        substring = text[start:end]\n        print(substring, start, end)",
        "num_ids": 92
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    results = []\n    for match in matches:\n        start_index = text.index(match)\n        end_index = start_index + len(match) - 1\n        results.append((match, start_index, end_index))\n    return results",
        "num_ids": 114
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        yield (match.group(), match.start(), match.end())",
        "num_ids": 81
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        yield match.group(), match.start(), match.end()",
        "num_ids": 80
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. \n    The function should return the matching substring, a start index, and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "num_ids": 85
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 89
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        yield match.group(), match.start(), match.end()",
        "num_ids": 80
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(map(lambda i: bell_Number(i), range(n)))",
        "num_ids": 59
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = [1]\n    for i in range(1, n+1):\n        bell_num.append(sum(bell_num[-i-1:]))\n    return bell_num[n]",
        "num_ids": 74
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        bell = [0] * (n + 1)\n        bell[0] = 1\n        for i in range(1, n + 1):\n            bell[i] = sum(bell[:i])\n        return bell[n]",
        "num_ids": 113
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[1]]\n    for i in range(1,n+1):\n        bell.append([1])\n        for j in range(1,i):\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        bell[i].append(1)\n    return bell[n]",
        "num_ids": 107
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Returns the nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [0, 1]\n        for i in range(2, n+1):\n            bell.append(bell[i-1] + bell[i-2])\n        return bell[n]",
        "num_ids": 95
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = sum(bell[:i])\n        return bell[n]",
        "num_ids": 102
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_arr = [0, 1]\n        for i in range(2, n+1):\n            bell_arr.append(sum(bell_arr[-2:]))\n        return bell_arr[-1]",
        "num_ids": 84
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes in an integer 'n' and returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell = [0, 1]\n        for i in range(2, n+1):\n            bell.append(bell[i-1] + bell[i-2])\n        return bell[n]",
        "num_ids": 105
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]",
        "num_ids": 61
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n-1) * (n)\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th Bell Number is: {bell_Number(n)}\")",
        "num_ids": 90
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "num_ids": 59
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(k-1)\n    return list1",
        "num_ids": 55
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "num_ids": 59
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "num_ids": 59
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Removes the k'th element from a given list.\n    \"\"\"\n    return list1[:k-1] + list1[k:]",
        "num_ids": 45
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input and returns a new list with the kth element removed.\n    '''\n    return list1[:k-1] + list1[k:]",
        "num_ids": 57
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k-th element from a list.\n\n    Args:\n        list1 (list): The input list.\n        k (int): The index of the element to remove.\n\n    Returns:\n        list: The list with the k-th element removed.\n    \"\"\"\n    return list1[:k] + list1[k+1:]",
        "num_ids": 86
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Returns a new list with the k'th element removed.\n    \"\"\"\n    lst = lst[:k-1] + lst[k:]\n    return lst",
        "num_ids": 47
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input, and returns a list with all the elements of the input list except the kth element.\n    '''\n    list1 = list1[:k-1] + list1[k:]\n    return list1",
        "num_ids": 70
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k'th element from a list.\n    \"\"\"\n    return list1[:k] + list1[k+1:]",
        "num_ids": 44
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value of the Nth column.\n    \"\"\"\n    max_val = float('-inf')  # initialize max_val to negative infinity\n    for row in test_list:\n        if len(row) > N:  # make sure there is a value in the Nth column\n            val = row[N]\n            if val > max_val:  # update max_val if the current value is greater\n                max_val = val\n    return max_val",
        "num_ids": 125
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column_list = []\n    for i in range(len(test_list)):\n        column_list.append(test_list[i][N-1])\n    return max(column_list)",
        "num_ids": 84
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the matrix\n    m = len(test_list)\n    n = len(test_list[0])\n    \n    # Initialize the maximum value\n    max_val = float('-inf')\n    \n    # Loop through the matrix and update the maximum value\n    for i in range(m):\n        max_val = max(max_val, test_list[i][N-1])\n        \n    # Return the maximum value\n    return max_val",
        "num_ids": 135
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, returns the maximum value of then'th column.\n    '''\n    column = []\n    for i in range(len(test_list)):\n        column.append(test_list[i][N-1])\n    return max(column)",
        "num_ids": 76
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, return the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        max_val = max(max_val, row[N-1])\n    return max_val",
        "num_ids": 77
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a list of lists as input and returns the maximum of the Nth column in the matrix.\n    '''\n    max_num = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num",
        "num_ids": 93
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function given a matrix represented as a list of lists, returns the max of then'th column.\n    '''\n    max_val = float('-inf')  # initialize the max value with negative infinity\n    for row in test_list:\n        if len(row) > N-1 and row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val",
        "num_ids": 104
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = None\n    for row in test_list:\n        if N < len(row):\n            if max_num is None or row[N] > max_num:\n                max_num = row[N]\n    return max_num",
        "num_ids": 94
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = -1000000000\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val",
        "num_ids": 94
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    max_num = float('-inf')\n    for row in test_list:\n        if len(row) > N-1 and row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num",
        "num_ids": 93
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, \n    and returns a list of two lists where the first list has the first element \n    of each sublist and the second one has the second.\n    \"\"\"\n    result = [[], []]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result",
        "num_ids": 97
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 82
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    # Initialize the output lists\n    result = [[], []]\n    # Iterate over the input list\n    for sublist in lst:\n        # Append the first element to the first output list\n        result[0].append(sublist[0])\n        # Append the second element to the second output list\n        result[1].append(sublist[1])\n    return result",
        "num_ids": 82
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Create two empty lists to hold the first and second elements of the sublists\n    first_list = []\n    second_list = []\n\n    # Iterate through each sublist in the input list and add its first and second elements to the respective lists\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n\n    # Return the two lists as a list of two lists\n    return [first_list, second_list]",
        "num_ids": 159
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Merges a list of sublists into two lists.\n    Each sublist has two elements, and the first list has the first element of each sublist,\n    and the second list has the second element of each sublist.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 85
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]",
        "num_ids": 83
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 82
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    # initialize an empty list for the first elements of the sublists\n    first = []\n    # initialize an empty list for the second elements of the sublists\n    second = []\n    # iterate over the sublists\n    for sublist in lst:\n        # add the first element of each sublist to the first list\n        first.append(sublist[0])\n        # add the second element of each sublist to the second list\n        second.append(sublist[1])\n    # create a list of two lists, where the first list has the first elements of the sublists\n    # and the second list has the second elements of the sublists\n    return [first, second]",
        "num_ids": 146
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 34
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # initialize two empty lists\n    first_list = []\n    second_list = []\n    # loop through each sublist in the input list\n    for sublist in lst:\n        # append the first element of the sublist to the first list\n        first_list.append(sublist[0])\n        # append the second element of the sublist to the second list\n        second_list.append(sublist[1])\n    # return the two lists as a tuple\n    return (first_list, second_list)",
        "num_ids": 162
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum",
        "num_ids": 75
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total = 0\n    for i in test_list:\n        total += i\n    return total",
        "num_ids": 58
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns a list containing the cumulative sum of all the values in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    cummulative_list = []\n    for element in test_list:\n        total_sum += element[1]\n        cummulative_list.append(total_sum)\n    return cummulative_list",
        "num_ids": 95
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total",
        "num_ids": 58
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total",
        "num_ids": 58
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum",
        "num_ids": 75
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total",
        "num_ids": 69
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list",
        "num_ids": 71
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        avg = sum(t)/len(t)\n        result.append(avg)\n    return result",
        "num_ids": 65
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    average_list = []\n    for num in nums:\n        total = 0\n        count = 0\n        for i in num:\n            total += i\n            count += 1\n        average = total/count\n        average_list.append(average)\n    return average_list",
        "num_ids": 89
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        avg = total / len(nums[i])\n        result.append(avg)\n    return result",
        "num_ids": 94
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        result.append(total/count)\n    return result",
        "num_ids": 81
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result",
        "num_ids": 70
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        sum_values = 0\n        count = 0\n        for value in num:\n            sum_values += value\n            count += 1\n        average = sum_values / count\n        averages.append(average)\n    return averages",
        "num_ids": 94
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        avg = total / count\n        result.append(avg)\n    return result",
        "num_ids": 85
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list",
        "num_ids": 72
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result",
        "num_ids": 68
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 89
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should be of the same length.\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)",
        "num_ids": 112
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)",
        "num_ids": 112
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] % test_tup2[i],)\n        return result\n    else:\n        print(\"Error: Tuples are not of the same length.\")\n        return None",
        "num_ids": 114
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    else:\n        return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
        "num_ids": 94
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i], )\n        \n    return result_tup",
        "num_ids": 118
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not of the same length.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup",
        "num_ids": 113
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes two arguments, steps and d, where steps is a list of tuples representing the co-ordinates of the points in a 2D plane and d is the length of the jump.\n    It returns the minimum number of jumps required to reach a point of form (d, 0) from the origin.\n    \"\"\"\n    if steps[0][0] == d or steps[0][1] == d:\n        return 1\n    \n    n = len(steps)\n    dp = [float('inf')] * n\n    \n    for i in range(n):\n        if steps[i][0] == d or steps[i][1] == d:\n            dp[i] = 1\n    \n    for i in range(n):\n        for j in range(i):\n            if abs(steps[i][0] - steps[j][0]) <= d or abs(steps[i][1] - steps[j][1]) <= d:\n                dp[i] = min(dp[i], dp[j]+1)\n    \n    return dp[-1]",
        "num_ids": 237
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0] * (d+1) for i in range(steps+1)]\n    dp[0][0] = 0\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if j == 1:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            if j == d and dp[i][j] > steps:\n                return -1\n    return dp[steps][d]",
        "num_ids": 147
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0 for i in range(steps+1)] for j in range(d+1)]\n    dp[0][0] = 0\n\n    for i in range(d+1):\n        for j in range(steps+1):\n            if i == 0 and j == 0:\n                continue\n            elif j == 0:\n                dp[i][j] = float('inf')\n            else:\n                dp[i][j] = dp[i-1][j] + 1\n                if j >= i:\n                    dp[i][j] = min(dp[i][j], dp[i][j-i] + 1)\n\n    return dp[d][steps]",
        "num_ids": 161
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    # initialize the maximum number of jumps and the current number of jumps as 0\n    max_jumps = 0\n    current_jumps = 0\n    \n    # initialize a list to keep track of the visited steps\n    visited = []\n    \n    # loop until all the steps are visited\n    while current_jumps < steps:\n        # check if the current step is the last step\n        if current_jumps == steps - 1:\n            max_jumps += 1\n            break\n        \n        # check if the current step is already visited\n        if current_jumps in visited:\n            break\n        \n        # add the current step to the visited list\n        visited.append(current_jumps)\n        \n        # check if the next step is within the range of steps and not visited\n        if current_jumps + d + 1 < steps and current_jumps + d + 1 not in visited:\n            # increment the current number of jumps\n            current_jumps += d + 1\n        else:\n            # increment the current number of jumps\n            current_jumps += 1\n        \n        # check if the current number of jumps is greater than the maximum number of jumps\n        if current_jumps > max_jumps:\n            max_jumps = current_jumps\n    \n    # return the maximum number of jumps required\n    return max_jumps",
        "num_ids": 286
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    # check if we can reach the destination point directly\n    if d <= steps:\n        return 1\n    \n    # initialize the maximum number of jumps and current number of jumps\n    max_jumps = 1\n    current_jumps = 1\n    \n    # loop through each step and calculate the number of jumps required to reach each step\n    for step in range(1, d):\n        if step <= steps:\n            # if we can reach the current step, add 1 to the current number of jumps\n            current_jumps += 1\n            \n            # if we reach the end of the steps, update the maximum number of jumps\n            if step == d - 1:\n                max_jumps = max(max_jumps, current_jumps)\n        else:\n            # if we can't reach the current step, reset the current number of jumps to 1\n            current_jumps = 1\n    \n    # return the maximum number of jumps required\n    return max_jumps",
        "num_ids": 211
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    dp = [float('inf') for i in range(d+1)] # create a dp array of size d+1 with initial values as infinity\n    dp[0] = 0 # base case, if we are at the origin, we don't need to jump, so dp[0] = 0\n    \n    for i in range(1, d+1):\n        for j in range(1, steps+1):\n            if i-j >= 0: # if we can reach the current index using j-steps from the previous index\n                dp[i] = min(dp[i], dp[i-j] + 1) # update dp[i] with minimum of the current dp[i] or dp[i-j] + 1\n    \n    return dp[d] # return the minimum number of jumps required to reach the destination point",
        "num_ids": 192
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the dp array with number of jumps to reach that point from origin\n    dp = [float('inf')] * (d+1)\n    dp[0] = 0\n    \n    # Loop through the steps array to calculate the number of jumps to reach each point\n    for i in range(1, d+1):\n        for j in range(1, steps+1):\n            if i-j >= 0:\n                dp[i] = min(dp[i], dp[i-j] + 1)\n                \n    # Return the number of jumps to reach the destination point from origin\n    return dp[d]",
        "num_ids": 142
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0 for x in range(d+1)] for y in range(steps+1)]\n\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if j == 1:\n                dp[i][j] = i\n            elif j > i:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-j][j-1] + 1\n\n    return dp[steps][d]",
        "num_ids": 128
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    dp = [[float('inf') for i in range(d)] for j in range(steps+1)]\n    dp[0][0] = 0\n    \n    for i in range(1, steps+1):\n        for j in range(d):\n            if j == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n                \n    return dp[steps][d-1]",
        "num_ids": 131
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    dp = [float('inf')] * (d+1)\n    dp[0] = 0\n    for i in range(1, d+1):\n        for j in range(i):\n            if j + steps[j] >= i:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return dp[d] if dp[d]!= float('inf') else -1",
        "num_ids": 103
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise and returns the result as a new list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 69
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists of numbers and returns a new list of their element-wise division.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 70
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 81
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n\n    Args:\n        nums1 (list): The first list to divide.\n        nums2 (list): The second list to divide.\n\n    Returns:\n        list: A new list containing the element-wise division of the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 110
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as inputs and returns a new list containing the element-wise division of the two input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 75
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize two empty lists\n    num_list = []\n    non_num_list = []\n    \n    # iterate through each character in the test string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, append it to the non_num_list\n        else:\n            non_num_list.append(char)\n    \n    # join the non_num_list and num_list into a single string\n    result = ''.join(non_num_list) + ''.join(num_list)\n    \n    # return the result string\n    return result",
        "num_ids": 179
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables to hold the digits and the non-digits\n    digits = ''\n    non_digits = ''\n\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it is, add it to the digits string\n            digits += char\n        else:\n            # If it is not, add it to the non-digits string\n            non_digits += char\n\n    # Join the non-digits and digits strings and return the result\n    return non_digits + digits",
        "num_ids": 147
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_str = \"\"\n    non_num_str = \"\"\n    \n    # Split the string into two parts - the numbers and the non-numbers\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    \n    # Concatenate the non-numbers and the numbers in the correct order\n    return non_num_str + num_str",
        "num_ids": 118
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into two parts - one containing only alphabetic characters and the other containing only numbers\n    alpha_part, num_part = \"\", \"\"\n    for char in test_str:\n        if char.isalpha():\n            alpha_part += char\n        else:\n            num_part += char\n    \n    # join the two parts to get the final string\n    return alpha_part + num_part",
        "num_ids": 113
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    alpha_str = \"\"\n\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            alpha_str += i\n\n    return alpha_str + num_str",
        "num_ids": 81
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += char\n    return result",
        "num_ids": 63
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Splitting the string into two parts\n    string_part1, string_part2 = '', ''\n    for char in test_str:\n        if char.isdigit():\n            string_part1 += char\n        else:\n            string_part2 += char\n    \n    # Reconstructing the string with numbers at the end\n    final_str = string_part2 + ''.join(sorted(string_part1, key=int))\n    return final_str",
        "num_ids": 125
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    char_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n    return ''.join(char_list + num_list)",
        "num_ids": 91
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    letter_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            letter_list.append(char)\n    return \"\".join(letter_list + num_list)",
        "num_ids": 91
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    num = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num += char\n        else:\n            test_str = test_str.replace(char, \"\", 1)\n    return test_str + num",
        "num_ids": 83
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n\n    return max(dp)",
        "num_ids": 122
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    a.sort()  # sort the list in ascending order\n    i = 0  # start from the first number\n    j = len(a) - 1  # start from the last number\n    while i < j:\n        if a[i] % a[j] == 0:  # if the two numbers are divisible\n            j -= 1  # move j to the left\n        else:\n            i += 1  # move i to the right\n    return j + 1  # return the size of the largest subset",
        "num_ids": 122
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    a.sort() # sort the list in ascending order\n    n = len(a)\n    dp = [0] * n # initialize the dp table with zeros\n    ans = 0\n    \n    for i in range(n):\n        if i == 0:\n            dp[i] = 1 # the first element always has a subset of size 1\n        elif a[i] % a[i-1] == 0 and dp[i-1] > 0:\n            dp[i] = dp[i-1] + 1 # if the current element is divisible by the previous one and the previous element has a subset of size greater than 0, then we add 1 to the subset size\n        ans = max(ans, dp[i]) # update the answer\n    \n    return ans",
        "num_ids": 177
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    a.sort()  # sort the list in ascending order\n    n = len(a)\n    max_size = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                size = j - i + 1\n                if size > max_size:\n                    max_size = size\n    return max_size",
        "num_ids": 112
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[i - 1] % a[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)",
        "num_ids": 99
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 2 if a[0] % 2 == 0 and a[1] % 2 == 0 else 1\n    for i in range(2, n):\n        if a[i] % 2 == 0 and dp[i-2] > 0:\n            dp[i] = dp[i-2] + 1\n        else:\n            dp[i] = 1\n    return max(dp)",
        "num_ids": 158
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * (n + 1)\n    dp[0] = True\n    dp[1] = True\n    for i in range(2, n + 1):\n        for j in range(i):\n            if a[i - 1] % a[j] == 0 and dp[j]:\n                dp[i] = True\n                break\n    for i in range(n, -1, -1):\n        if dp[i]:\n            return i\n    return 0",
        "num_ids": 150
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n    size = 1  # initialize the size of the largest subset\n    for i in range(len(a)):\n        if a[i] % a[i-1]!= 0:  # check if the current number is divisible by the previous number\n            size += 1  # increment the size of the subset if the current number is not divisible\n        else:\n            size = 1  # reset the size of the subset if the current number is divisible\n    return size",
        "num_ids": 152
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
        "num_ids": 82
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * n\n    max_size = 0\n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j]:\n                dp[i] = True\n\n        if dp[i]:\n            size = 1\n            while i + size < n and dp[i + size]:\n                size += 1\n            max_size = max(max_size, size)\n\n    return max_size",
        "num_ids": 149
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Finding the middle element of both the arrays\n    mid1 = n // 2\n    mid2 = n // 2\n    \n    # If the size of the array is even\n    if n % 2 == 0:\n        # If the middle elements of both the arrays are same\n        if arr1[mid1 - 1] == arr2[mid2 - 1]:\n            return arr1[mid1 - 1]\n        else:\n            # If the middle elements are different\n            return (max(arr1[mid1 - 1], arr2[mid2 - 1]) + min(arr1[mid1], arr2[mid2])) / 2\n    \n    # If the size of the array is odd\n    else:\n        # If the middle elements of both the arrays are same\n        if arr1[mid1 - 1] == arr2[mid2 - 1]:\n            return arr1[mid1 - 1]\n        else:\n            # If the middle elements are different\n            return max(arr1[mid1 - 1], arr2[mid2 - 1])",
        "num_ids": 265
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size and returns the median of the two lists.\n    \"\"\"\n    if n % 2 == 0:\n        # If n is even, the median is the average of the middle two elements\n        median = (arr1[n // 2] + arr1[(n // 2) - 1] + arr2[n // 2] + arr2[(n // 2) - 1]) / 2\n    else:\n        # If n is odd, the median is the middle element\n        median = (max(arr1[n // 2], arr2[n // 2]) + min(arr1[(n // 2) - 1], arr2[(n // 2) - 1])) / 2\n    \n    return median",
        "num_ids": 185
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of the same size and returns the median value of both lists.\n    \"\"\"\n\n    # merge the two lists and sort them\n    merged = sorted(arr1 + arr2)\n\n    # if the length of merged list is odd, return the middle element\n    if n % 2!= 0:\n        return merged[n//2]\n    # if the length of merged list is even, return the average of middle two elements\n    else:\n        return (merged[n//2] + merged[n//2 - 1])/2",
        "num_ids": 132
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n//2] + arr[n//2 - 1]) / 2\n    else:\n        median = arr[n//2]\n        \n    return median",
        "num_ids": 114
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of the same size as inputs and returns their median value.\n    \"\"\"\n    # Finding the middle index\n    mid = n // 2\n    \n    # Checking if the lists have odd or even length\n    if n % 2 == 0:\n        # If the length is even, finding the median\n        median = (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        # If the length is odd, finding the median\n        median = arr1[mid]\n    \n    return median",
        "num_ids": 129
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2!= 0:\n        mid = n // 2\n        return (max(arr1[mid-1], arr2[mid-1]) + min(arr1[mid], arr2[mid])) / 2\n    else:\n        mid = n // 2\n        return (max(arr1[mid-1], arr2[mid-1]) + min(arr1[mid], arr2[mid])) / 2",
        "num_ids": 131
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two sorted arrays into one\n    merged_arr = arr1 + arr2\n    # Find the median using the quicksort algorithm\n    return quickselect(merged_arr, n // 2)\n\ndef quickselect(arr, k):\n    # Base case: the array has only one element\n    if len(arr) == 1:\n        return arr[0]\n    # Choose a random pivot\n    pivot = arr[random.randint(0, len(arr)-1)]\n    # Partition the array around the pivot\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n    # Recurse on the partition that contains the kth element\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))",
        "num_ids": 249
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Initialize two pointers\n    i = 0\n    j = n - 1\n    \n    # Initialize the median variable to None\n    median = None\n    \n    # Loop until one of the pointers reaches the middle of the list\n    while i <= j:\n        # Calculate the middle index\n        middle = (i + j) // 2\n        \n        # Check if the middle element of both lists is the same\n        if arr1[middle] == arr2[middle]:\n            median = arr1[middle]\n            break\n        \n        # If the middle elements of both lists are different, we need to compare which one is smaller\n        elif arr1[middle] < arr2[middle]:\n            # If the middle element of the first list is smaller, we update the left pointer\n            i = middle + 1\n            \n        else:\n            # If the middle element of the second list is smaller, we update the right pointer\n            j = middle - 1\n            \n    # Return the median value\n    return median",
        "num_ids": 231
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists of size n and finds their median.\n    '''\n    i = 0\n    j = n - 1\n    while i < n and j >= 0:\n        if arr1[i] > arr2[j]:\n            i += 1\n        elif arr1[i] < arr2[j]:\n            j -= 1\n        else:\n            return arr1[i]\n    return arr1[i-1]\n",
        "num_ids": 112
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two sorted arrays\n    merged_arr = []\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    while i < n:\n        merged_arr.append(arr1[i])\n        i += 1\n\n    while j < n:\n        merged_arr.append(arr2[j])\n        j += 1\n\n    # Find the median\n    if n % 2 == 0:\n        return (merged_arr[n//2 - 1] + merged_arr[n//2])/2\n    else:\n        return merged_arr[n//2]\n",
        "num_ids": 196
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 52
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    This function takes a list of numbers and returns a list of their n-th power.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 55
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes in two arguments:\n    nums: a list of numbers\n    n: an integer representing the power to raise each number to\n    \n    The function returns a new list containing each number in nums raised to the nth power.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 82
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function computes the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "num_ids": 52
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and returns a new list with the n-th power of each number in the original list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 63
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "num_ids": 52
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, otherwise, it returns False.\n    '''\n    return string.isupper()",
        "num_ids": 46
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as an argument and returns True if all the characters in the string are uppercase,\n    otherwise it returns False.\n    \"\"\"\n    return string.isupper()",
        "num_ids": 47
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and returns the uppercase version of the string.\n    '''\n    return string.upper()",
        "num_ids": 36
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if the string is in uppercase, else False.\n    '''\n    return string.isupper()",
        "num_ids": 40
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Converts a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 26
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()",
        "num_ids": 35
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Convert the given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 26
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    return string.upper()",
        "num_ids": 14
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if it is all uppercase, False otherwise.\n    \"\"\"\n    return string.isupper()",
        "num_ids": 39
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and returns the list with the first and last element swapped.\n    \"\"\"\n    # Check if the input list is not empty\n    if len(newList) > 0:\n        # Get the first and last element of the list\n        first_element = newList[0]\n        last_element = newList[-1]\n        # Replace the first element with the last element and vice versa\n        newList[0] = last_element\n        newList[-1] = first_element\n    # Return the modified list\n    return newList",
        "num_ids": 130
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and returns the modified list with the first and last elements interchanged.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 61
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 36
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        print(\"The list after swapping the first and last element is:\", newList)\n    else:\n        print(\"The list should have at least two elements to swap.\")",
        "num_ids": 117
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and interchanges the first and last element in the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 60
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        print(\"Swapped List: \", newList)",
        "num_ids": 107
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least 2 elements\")\n        return\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList",
        "num_ids": 82
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and returns the list with the first and last element swapped.\n    '''\n    if len(newList) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList",
        "num_ids": 86
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * r ** 2 / 2\n    return area",
        "num_ids": 61
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * r ** 2 / 2\n    return area",
        "num_ids": 61
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    h = r * math.sqrt(3) / 2\n    a = r * math.sqrt(3) / 2\n    b = r\n    c = r * math.sqrt(3) / 2\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area",
        "num_ids": 129
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the diameter of the semicircle\n    diameter = r * 2\n\n    # Find the length of the hypotenuse of the triangle\n    hypotenuse = math.sqrt(math.pow(diameter, 2) - math.pow(r, 2))\n\n    # Find the area of the triangle\n    area = (math.pi * math.pow(r, 2)) / 2\n\n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    max_area = (2 * math.pi * r) / 3\n\n    # Calculate the difference between the max area and the area of the triangle\n    diff = max_area - area\n\n    # Return the difference as the area of the largest triangle\n    return diff\n",
        "num_ids": 204
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # The radius of the semicircle is r\n    # The radius of the inscribed triangle is r/2\n    # The length of the inscribed triangle is the length of the chord that connects the two points on the semicircle that are equidistant from the center\n    # This length can be found using the formula 2r * sin(pi/3) where pi/3 is the angle between two legs of a right triangle with legs of length 2r and hypotenuse of length r\n    # The area of the inscribed triangle can be found using the formula 0.5 * a * b where a and b are the legs of the right triangle\n    # We can use math.sin() and math.pi to calculate sin(pi/3) and pi\n    # We can use math.sqrt() to calculate the square root of the area of the triangle\n\n    length = 2 * r * math.sin(math.pi/3)\n    area = 0.5 * r * length\n\n    return area",
        "num_ids": 263
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (2/3) * math.pi * r**3\n    return area",
        "num_ids": 63
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the area of the semicircle\n    area_circle = math.pi * r**2 / 2\n    \n    # Calculate the length of the hypotenuse of the largest triangle\n    hypotenuse = 2*r*math.sin(math.pi/3)\n    \n    # Calculate the area of the largest triangle\n    area_triangle = 0.5 * hypotenuse**2\n    \n    # Return the area of the largest triangle\n    return area_triangle - area_circle",
        "num_ids": 116
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    # calculate the length of the two sides of the triangle\n    a = r / math.sqrt(3)\n    b = 2 * a\n    \n    # calculate the area of the triangle\n    s = (a + b) / 2  # semiperimeter\n    area = math.sqrt(s * (s - a) * (s - b) * (s - r))\n    \n    return area",
        "num_ids": 95
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the semicircle's diameter\n    d = 2*r\n    \n    # Calculate the length of the triangle's hypotenuse\n    h = math.sqrt(r**2 - (d/2)**2)\n    \n    # Calculate the area of the triangle\n    area = (math.sqrt(3)/2) * h**2\n    \n    return area",
        "num_ids": 116
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = math.sqrt(r**2 - (r/2)**2)\n    return 0.5 * r * h\n\nradius = float(input(\"Enter the radius of the semicircle: \"))\nprint(\"The area of the largest triangle that can be inscribed in the semicircle is:\", triangle_area(radius))",
        "num_ids": 117
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number from the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Initialize variables to keep track of the first and second missing numbers\n    first_missing = 0\n    second_missing = 0\n    \n    # Traverse the list and update the missing numbers\n    for i in range(start, end + 1):\n        # If the current number is less than the expected number, then it is the first missing number\n        if array[i] < i + 1:\n            first_missing = i + 1\n        \n        # If the current number is equal to the expected number, then move to the next number\n        elif array[i] == i + 1:\n            continue\n        \n        # If the current number is greater than the expected number, then it is the second missing number\n        else:\n            second_missing = i + 1\n            break\n    \n    # If both missing numbers are present, then there is no missing number in the list\n    if first_missing == 0 and second_missing == 0:\n        return None\n    \n    # If there is only one missing number, then it is the first missing number\n    elif first_missing == 0 and second_missing!= 0:\n        return second_missing\n    \n    # If both missing numbers are present, then the second missing number is the smallest missing number\n    elif first_missing!= 0 and second_missing!= 0:\n        return second_missing\n    \n    # If only the first missing number is present, then it is the smallest missing number\n    else:\n        return first_missing",
        "num_ids": 361
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array: A sorted list of natural numbers.\n    start: The starting index of the subarray.\n    end: The ending index of the subarray.\n\n    Returns:\n    The smallest missing number from the given subarray.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Check if the subarray is sorted\n    for i in range(start, end):\n        if array[i] > array[i+1]:\n            return None\n\n    # Find the first missing number\n    i = start\n    while i <= end:\n        j = array[i] - start\n        if j < 0 or j > end - start or array[i]!= i+start:\n            return i+start\n        i += 1\n\n    # All numbers are present\n    return end+1+start",
        "num_ids": 209
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] < 0 or array[i] > end:\n            raise ValueError(\"Input array contains negative or out of range values.\")\n\n    if array[start] > 0:\n        return 0\n\n    for i in range(start+1, end+1):\n        if array[i-1] + 1!= array[i]:\n            return array[i-1] + 1\n\n    return array[end] + 1",
        "num_ids": 164
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n        \n    # Iterate over the array and mark the missing numbers\n    for i in range(start, end+1):\n        if array[i] == i+start:\n            continue\n        elif array[i] == array[array[i]-start]:\n            array[array[i]-start] = -1*array[array[i]-start]\n        else:\n            return i+start\n    \n    # Find the first missing number\n    for i in range(start, end+1):\n        if array[i] > 0:\n            return i+start\n    \n    # If all numbers are present, return the next integer\n    return end+2",
        "num_ids": 165
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers using binary search.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    if end < start:\n        return end + 1\n\n    mid = (start + end) // 2\n\n    if mid == 0 and array[mid]!= mid + 1:\n        return 1\n\n    if mid == len(array) - 1 and array[mid]!= mid + 1:\n        return mid + 2\n\n    if array[mid] == mid + 1:\n        return find_First_Missing(array, start, mid - 1)\n\n    return find_First_Missing(array, mid + 1, end)",
        "num_ids": 173
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function will find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array: A sorted list of natural numbers.\n    start: An integer representing the starting index of the array (default is 0).\n    end: An integer representing the ending index of the array (default is None).\n\n    Returns:\n    The smallest missing number from the given array.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] == i+1 or array[i] == array[array[i]-1]:\n            continue\n        else:\n            if i+1 == array[i]:\n                array[i], array[array[i]-1] = array[array[i]-1], array[i]\n            else:\n                array[i], array[array[i]-1] = array[array[i]-1], array[i]\n                i -= 1\n\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n\n    return end+2",
        "num_ids": 260
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    missing_num = start\n    for i in range(start, end + 1):\n        if array[i] > start and array[i] - array[start] < end - start + 1:\n            missing_num = array[i]\n    return missing_num",
        "num_ids": 93
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    :param array: A sorted list of natural numbers.\n    :param start: Optional parameter for specifying the starting index of the search. Default is 0.\n    :param end: Optional parameter for specifying the ending index of the search. Default is the last index of the array.\n    :return: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    n = end - start + 1\n\n    for i in range(n):\n        if array[start + i] > end:\n            return end + 1\n\n        if array[start + i] == i + start:\n            continue\n\n        temp = array[start + i]\n        array[start + i] = -1\n\n        while array[temp - start]!= -1:\n            next_index = array[temp - start]\n            array[temp - start] = -1\n            temp = next_index\n\n        array[temp - start] = temp\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n\n    return end + 1",
        "num_ids": 273
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number from the list.\n\n    :param array: A list of natural numbers sorted in ascending order.\n    :param start: The starting index of the list (default is 0).\n    :param end: The ending index of the list (default is the last index of the list).\n    :return: The smallest missing number from the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the count of missing numbers to 0\n    missing_count = 0\n\n    # Iterate through the list and count the number of missing numbers\n    for i in range(start, end + 1):\n        if array[i] > end:\n            missing_count += end - i + 1\n        else:\n            missing_count += 1\n\n    return missing_count\n",
        "num_ids": 204
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers as input and returns the smallest missing number from the array.\n    \"\"\"\n    # If the end index is not provided, set it to the length of the array\n    if end is None:\n        end = len(array) - 1\n    \n    # Create a dictionary to keep track of the number of occurrences of each number in the array\n    occurrence = {}\n    for i in range(start, end + 1):\n        if array[i] not in occurrence:\n            occurrence[array[i]] = 1\n        else:\n            occurrence[array[i]] += 1\n            \n    # Traverse the array again and find the smallest missing number\n    for i in range(start, end + 1):\n        if array[i]!= i + start and array[i] in occurrence:\n            return i + start\n    \n    # If all numbers are present, the function returns the last index + 1\n    return end + 1",
        "num_ids": 218
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 36
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    new_string = string.replace(\" \", \"%20\")\n    return new_string",
        "num_ids": 46
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')",
        "num_ids": 36
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(numbers):\n    \"\"\"\n    Splits a list of numbers into two lists, one with even numbers and one with odd numbers.\n    \"\"\"\n    even_numbers = []\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n        else:\n            odd_numbers.append(number)\n    return even_numbers, odd_numbers",
        "num_ids": 89
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the even numbers from the original list.\n    \"\"\"\n    even_numbers = []\n    for number in lst:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "num_ids": 69
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_even(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 69
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_even(numbers):\n    \"\"\"\n    Returns a list of even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 60
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 73
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns a list containing all the even numbers from the input list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "num_ids": 70
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_even(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the even numbers from the original list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "num_ids": 71
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in [-1, 0, 1]:\n        for j in [-1, 0, 1]:\n            if i == 0 and j == 0:\n                continue\n            else:\n                adj.append((ele[0]+i, ele[1]+j))\n    return adj",
        "num_ids": 97
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    rows, cols = ele\n    result = []\n    if rows > 0:  # check if there is a cell above\n        result.append((rows-1, cols))\n    if rows < 2:  # check if there is a cell below\n        result.append((rows+1, cols))\n    if cols > 0:  # check if there is a cell to the left\n        result.append((rows, cols-1))\n    if cols < 2:  # check if there is a cell to the right\n        result.append((rows, cols+1))\n    if sub:  # check if sublist is given\n        if ele in sub:  # check if the given coordinate is already in the sublist\n            return result\n        else:\n            return [sub + [ele] + [result]]  # add the given coordinate to the sublist and return a list of sublists\n    else:\n        return [result]",
        "num_ids": 226
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = [(ele[0]+i, ele[1]+j) for i in range(-1, 2) for j in range(-1, 2) if (i,j)!=(0,0) and (ele[0]+i, ele[1]+j) not in sub]\n    return adjacent",
        "num_ids": 99
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    This function takes two arguments:\n    ele - tuple of integers representing the coordinate\n    sub - a list of tuples, where each tuple represents a sub-coordinate of the given coordinate\n    \n    This function returns a list of tuples, where each tuple represents the adjacent coordinate to the given coordinate.\n    '''\n\n    # Initialize an empty list to store the adjacent coordinates\n    adj = []\n\n    # Check the four adjacent directions of the given coordinate\n    if ele[0]-1 >= 0:\n        adj.append((ele[0]-1, ele[1]))\n    if ele[1]-1 >= 0:\n        adj.append((ele[0], ele[1]-1))\n    if ele[0]+1 < 10:\n        adj.append((ele[0]+1, ele[1]))\n    if ele[1]+1 < 10:\n        adj.append((ele[0], ele[1]+1))\n\n    # Check the given sub-coordinates and append them to the list of adjacent coordinates if they are adjacent to the given coordinate\n    for s in sub:\n        if (s[0] == ele[0]-1 and s[1] == ele[1]) or (s[0] == ele[0] and s[1] == ele[1]-1) or (s[0] == ele[0]+1 and s[1] == ele[1]) or (s[0] == ele[0] and s[1] == ele[1]+1):\n            adj.append(s)\n    \n    # Return the list of adjacent coordinates\n    return adj",
        "num_ids": 344
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+1, y), (x, y+1), (x-1, y), (x, y-1)] + sub",
        "num_ids": 68
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(coord, sub=[]):\n    '''\n    Extracts all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = coord\n    adj = [(x+1, y), (x, y-1), (x-1, y), (x, y+1)]\n    return [c for c in adj if c not in sub]",
        "num_ids": 78
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Extract all the adjacent coordinates of the given coordinate tuple.\n\n    :param ele: tuple of the form (x, y) representing the coordinates to check\n    :param sub: optional list of tuples representing the coordinates to exclude from the search (default: [])\n    :return: list of tuples representing the adjacent coordinates to the given element\n    '''\n    x, y = ele\n    adj = []\n    if (x+1, y) not in sub:\n        adj.append((x+1, y))\n    if (x-1, y) not in sub:\n        adj.append((x-1, y))\n    if (x, y+1) not in sub:\n        adj.append((x, y+1))\n    if (x, y-1) not in sub:\n        adj.append((x, y-1))\n    return adj",
        "num_ids": 190
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x, y+1), (x-1, y), (x, y-1)]\n    for i in sub:\n        if i in adj:\n            adj.remove(i)\n    return adj",
        "num_ids": 89
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    dx, dy = [-1, 0, 1], [-1, 1] # directions to check\n    result = []\n    for i in dx:\n        for j in dy:\n            if (i, j)!= (0, 0): # exclude the current element\n                result.append((x+i, y+j))\n    return result",
        "num_ids": 106
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    \n    :param coord: The coordinate tuple (x, y)\n    :param sub: Optional. A list of coordinates to exclude from the result\n    :return: A list of adjacent coordinates (tuples)\n    \"\"\"\n    x, y = coord\n    result = []\n    for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        if (x+dx, y+dy) not in sub:\n            result.append((x+dx, y+dy))\n    return result",
        "num_ids": 139
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "num_ids": 46
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    if'' in text:\n        # Replace spaces with underscores\n        text = text.replace(' ', '_')\n    elif '_' in text:\n        # Replace underscores with spaces\n        text = text.replace('_','')\n    return text",
        "num_ids": 82
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \") if \" \" in text else text",
        "num_ids": 55
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    This function takes a string as input and replaces whitespaces with an underscore and vice versa.\n    '''\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 47
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "num_ids": 60
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    elif '_' in text:\n        return text.replace('_','')\n    else:\n        return text",
        "num_ids": 69
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "num_ids": 60
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('_','')\n    return text",
        "num_ids": 65
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if the string is empty or None\n    if text is None or text.strip() == '':\n        return ''\n    \n    # Replace whitespaces with underscores\n    new_text = text.replace(' ', '_')\n    \n    # Replace underscores with whitespaces\n    new_text = new_text.replace('_','')\n    \n    return new_text",
        "num_ids": 109
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        return new_text\n    else:\n        new_text = text.replace('_','')\n        return new_text",
        "num_ids": 76
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n    return non_zeroes + zeroes",
        "num_ids": 89
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    # create two lists to store zeros and non-zeros\n    zeros = []\n    non_zeros = []\n    \n    # iterate through the input list\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n    \n    # concatenate the two lists to get the final list\n    result = non_zeros + zeros\n    \n    return result",
        "num_ids": 95
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two lists\n    zero_list = []\n    non_zero_list = []\n\n    # Iterate through the original list and separate the zeroes and non-zeroes into two different lists\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n\n    # Concatenate the two lists to get the final list with zeroes at the end\n    final_list = non_zero_list + zero_list\n\n    return final_list",
        "num_ids": 147
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = [x for x in num_list if x == 0]\n    non_zeros = [x for x in num_list if x!= 0]\n    return zeros + non_zeros",
        "num_ids": 75
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zeroes.append(num_list.pop(i))\n    return num_list + zeroes",
        "num_ids": 83
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-count-1] = num_list[len(num_list)-count-1], num_list[i]\n            count += 1\n    return num_list",
        "num_ids": 113
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    num_list.clear()\n    num_list.extend(non_zeroes)\n    num_list.extend(zeroes)\n\n    return num_list",
        "num_ids": 114
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all the zeros to the end of the list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    num_list.clear()\n    num_list += non_zeroes + zeroes",
        "num_ids": 103
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = []\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_indices.append(i)\n    for i in reversed(zero_indices):\n        num_list.pop(i)\n    return num_list",
        "num_ids": 90
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    num_list = non_zeroes + zeroes\n    return num_list",
        "num_ids": 92
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum",
        "num_ids": 83
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of numbers and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result",
        "num_ids": 80
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor",
        "num_ids": 83
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Returns the sum of XOR of all pairs of numbers in the given list.\n    \"\"\"\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result",
        "num_ids": 72
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and its length as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 82
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "num_ids": 85
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of integers in the list.\n    '''\n\n    # Initialize the sum variable to zero\n    xor_sum = 0\n\n    # Iterate through the list and calculate the xor of every pair of integers and add it to the sum variable\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n\n    # Return the final sum\n    return xor_sum",
        "num_ids": 121
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 79
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    This function takes a list as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "num_ids": 87
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    \n    return xor_sum",
        "num_ids": 83
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    heapq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list",
        "num_ids": 74
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: x)",
        "num_ids": 35
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    heap_size = len(heap)\n    \n    for i in range(heap_size//2 - 1, -1, -1):\n        hq.heapify(heap, i)\n        \n    for i in range(heap_size-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap, 0, i)\n    \n    return heap",
        "num_ids": 128
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using heap sort algorithm.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    \n    # Build a max-heap from the list\n    hq.heapify(lst)\n    \n    # Extract elements from the heap one by one and append them to a new list\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(hq.heappop(lst))\n    \n    # Return the sorted list\n    return sorted_lst",
        "num_ids": 117
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable[:]\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 64
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 52
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 62
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n    '''\n\n    # Convert the iterable to a heap\n    heap = iterable.copy()\n    hq.heapify(heap)\n\n    # Extract the sorted elements one by one\n    sorted_list = []\n    while len(heap) > 0:\n        sorted_list.append(hq.heappop(heap))\n\n    # Reverse the sorted list to get the original order\n    sorted_list.reverse()\n\n    return sorted_list",
        "num_ids": 117
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 77
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using heap sort.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 65
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss.\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        return True\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 68
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 35
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print(\"The sale amount has a profit\")\n    elif sale_amount < actual_cost:\n        print(\"The sale amount has a loss\")\n    else:\n        print(\"The sale amount has no profit and no loss\")",
        "num_ids": 92
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments: actual_cost and sale_amount.\n    It checks whether the sale_amount has no profit and no loss.\n    If sale_amount is greater than actual_cost, it prints \"Profit!\"\n    If sale_amount is less than or equal to actual_cost, it prints \"Loss!\"\n    If sale_amount is equal to actual_cost, it prints \"No profit and no loss.\"\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"Profit!\")\n    elif sale_amount < actual_cost:\n        print(\"Loss!\")\n    else:\n        print(\"No profit and no loss.\")",
        "num_ids": 150
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount: \n        return True\n    else: \n        return False",
        "num_ids": 55
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments: actual_cost and sale_amount.\n    It checks whether the given sale amount has no profit and no loss.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given sale amount has no profit and no loss.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        print(f\"The sale amount {sale_amount} has no profit and no loss.\")\n    else:\n        print(f\"The sale amount {sale_amount} has profit and/or loss.\")",
        "num_ids": 87
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given sale amount has no profit and no loss.\n    \"\"\"\n    if sale_amount <= actual_cost:\n        print(\"No profit or loss\")\n    else:\n        profit = sale_amount - actual_cost\n        print(\"Profit: \", profit)",
        "num_ids": 75
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    This function checks whether the given amount has no profit and no loss.\n    '''\n    if sale_amount <= actual_cost: \n        return \"There is no profit or loss.\"\n    else: \n        profit = sale_amount - actual_cost\n        if profit > 0: \n            return \"There is no profit.\"\n        else: \n            return \"There is no loss.\"",
        "num_ids": 94
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215*t - 11.37*math.pow(v,0.16) + 0.3965*t*math.pow(v,0.16)\n    return round(wind_chill_index)",
        "num_ids": 127
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n\n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in Celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n    \"\"\"\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return round(wind_chill_index)",
        "num_ids": 146
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    v: float, wind velocity in km/h\n    t: float, temperature in celsius\n\n    Returns:\n    int, wind chill index rounded to the next integer\n    \"\"\"\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n\n    # Round the wind chill index to the next integer\n    wind_chill_index = math.ceil(wind_chill_index)\n\n    return wind_chill_index",
        "num_ids": 194
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the Wind Chill Index rounded to the next integer.\n\n    Parameters:\n        v (float): Wind velocity in km/h.\n        t (float): Temperature in celsius.\n\n    Returns:\n        int: Wind Chill Index rounded to the next integer.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wind_chill_index)",
        "num_ids": 152
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert velocity and temperature to SI units\n    v = v * 1000 / 3600  # m/s\n    t = t + 273.15  # K\n\n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the next integer\n    wc = round(wc)\n\n    return wc",
        "num_ids": 184
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert the wind velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # convert the temperature from celsius to kelvin\n    t_k = t + 273.15\n    \n    # calculate the wind chill index\n    wc_index = 13.12 + 0.6215 * t_k - 11.37 * math.pow(v_ms,0.16) + 0.3965 * t_k * math.pow(v_ms,0.16)\n    \n    # round the wind chill index to the next integer\n    wc_index = round(wc_index)\n    \n    return wc_index",
        "num_ids": 209
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # convert temperature to fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # calculate wind chill index\n    wind_chill_index = 35.74 + (0.6215 * t_f) - (35.75 * (v ** 0.16)) + (0.4275 * t_f * (v ** 0.16))\n\n    # round to the nearest integer\n    return round(wind_chill_index)",
        "num_ids": 131
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to kelvin\n    tk = t + 273.15\n    \n    # Calculate the wind chill index\n    wci = 13.12 + 0.6215*tk - 11.37*math.pow(v, 0.16) + 0.3965*tk*math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wci = round(wci)\n    \n    return wci",
        "num_ids": 167
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215*t - 11.37*math.pow(v_ms,0.16) + 0.3965*t*math.pow(v_ms,0.16)\n    \n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "num_ids": 180
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the Wind Chill Index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v < 3:\n        return \"Wind Chill cannot be calculated as the wind speed is less than 3 km/h.\"\n    else:\n        a = 35.74 + (0.6215 * t) - (35.75 * (v ** 0.16)) + (0.4275 * t * (v ** 0.16))\n        b = math.log(v)\n        c = b * (a - t)\n        return round(c)",
        "num_ids": 161
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # initialize a variable to store the total length of names\n    total_length = 0\n\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, remove it from the list\n            sample_names.remove(name)\n        else:\n            # if it doesn't, add its length to the total_length variable\n            total_length += len(name)\n\n    # return the total_length after removing the lowercase names\n    return total_length",
        "num_ids": 163
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total += len(name)\n    return total",
        "num_ids": 74
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through the sample_names\n    for name in sample_names:\n        # check if the first letter of the name is lowercase\n        if name[0].islower():\n            # remove the name from the list\n            sample_names.remove(name)\n        else:\n            # add the length of the name to the sum\n            sum += len(name)\n    # return the sum of lengths of the remaining names\n    return sum",
        "num_ids": 143
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names that start with an uppercase letter.\n    \"\"\"\n    # Initializing a variable to store the sum of lengths of names starting with uppercase letters.\n    total_length = 0\n    # Iterating through each name in the list.\n    for name in sample_names:\n        # Checking if the name starts with an uppercase letter.\n        if name[0].isupper():\n            # If yes, adding the length of the name to the total_length variable.\n            total_length += len(name)\n    # Returning the total_length variable.\n    return total_length",
        "num_ids": 149
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_len = 0\n    for name in sample_names:\n        if not name[0].islower():  # check if the first character of the name is lowercase\n            sum_len += len(name)  # add the length of the name to the sum if it starts with an uppercase letter\n    return sum_len",
        "num_ids": 111
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    lower_names = []\n    \n    # loop through each name in the sample_names list\n    for name in sample_names:\n        # check if the first letter of the name is lowercase\n        if name[0].islower():\n            # if it is, append the name to the lower_names list\n            lower_names.append(name)\n    \n    # calculate the sum of the lengths of the names in the sample_names list\n    total_length = sum(len(name) for name in sample_names)\n    \n    # subtract the lengths of the names in the lower_names list from the total_length\n    total_length -= sum(len(name) for name in lower_names)\n    \n    # return the final total_length value\n    return total_length",
        "num_ids": 215
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length",
        "num_ids": 81
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)') # pattern to match parenthesis and what is inside them\n    return re.sub(pattern, '', items) # remove the matched pattern from the original string\n",
        "num_ids": 82
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    items = re.sub(pattern, '', items)\n    return items",
        "num_ids": 61
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as an argument and removes all the text between parenthesis from it.\n    '''\n    # Using regular expression to remove parenthesis and text between them\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result",
        "num_ids": 75
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)\n",
        "num_ids": 58
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 56
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove parenthesis and text in between from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)\n\nitems = 'The price of the (product) is ($10.99).'\nprint(remove_parenthesis(items))",
        "num_ids": 81
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result",
        "num_ids": 61
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 53
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 57
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string or a list of strings as input and removes any text inside parenthesis from it.\n    '''\n    if isinstance(items, str):\n        # If input is a string, convert it into a list of strings\n        items = [items]\n\n    # Initialize an empty list to store the output\n    output = []\n\n    # Loop through each string in the input list\n    for item in items:\n        # Use regular expression to find all occurrences of parenthesis and their contents\n        matches = re.findall('\\([^()]+\\)', item)\n\n        # Loop through each match and replace it with an empty string\n        for match in matches:\n            item = item.replace(match, '')\n\n        # Add the modified string to the output list\n        output.append(item)\n\n    # If input was a string, return the modified string\n    if len(items) == 1:\n        return output[0]\n    # Otherwise, return the modified list of strings\n    else:\n        return output",
        "num_ids": 218
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    num = 1\n    count = 1\n    while count < n:\n        num += 1 + 2*i\n        i += 1\n        count += 1\n    return num",
        "num_ids": 71
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    result = 0\n    while count < n:\n        result += num\n        count += 1\n        num += count\n    return result",
        "num_ids": 64
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Returns the nth nonagonal number.\n    \"\"\"\n    num = n * (3 * n - 1) // 2\n    return num",
        "num_ids": 42
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(3*n-1)//2",
        "num_ids": 38
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the first two nonagonals\n    a = 1\n    b = 1\n    # Loop through the desired number of terms\n    for i in range(n):\n        # Calculate the next nonagonal number\n        c = a + b\n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n    # Return the nth nonagonal number\n    return a",
        "num_ids": 111
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    # Initialize the first nonagonal number\n    nonagonal = 1\n    \n    # Iterate from 1 to n and calculate the nonagonal numbers\n    for i in range(1, n+1):\n        nonagonal += i * (i+1)\n        \n    # Return the nth nonagonal number\n    return nonagonal",
        "num_ids": 101
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    num = 1\n    den = 1\n    # calculate the nth nonagonal number\n    for i in range(2, n+1):\n        num += den\n        den += 1\n    return num",
        "num_ids": 74
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n and returns the nth nonagonal number.\n    '''\n    count = 1\n    num = 1\n    for i in range(1, n+1):\n        yield num\n        count += 1\n        num += count",
        "num_ids": 64
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (3 * n - 1) / 2",
        "num_ids": 56
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n and returns the nth nonagonal number.\n    '''\n    num = (n * (3 * n - 1)) // 2  # formula for nth nonagonal number\n    return num",
        "num_ids": 59
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz\\b'\n    result = re.findall(pattern, text)\n    return len(result) > 0",
        "num_ids": 46
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?!.*\\b)(?=.*[zZ])[^zZ]*[zZ].*?\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 100
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regex to match any word that contains 'z' except at the start and end of the word\n    pattern = r'\\b(?<!\\w)z(?!\\w)\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 105
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*z)\\w*z\\w*\\b'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"\\b(?!.*\\b)z(?!.*\\b)\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 89
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\bz(?!\\w)([\\w]*)(?<!\\w)z\\b', re.IGNORECASE)\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 93
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = re.compile(r'(?<![a-zA-Z])z(?![a-zA-Z])')\n    match = pattern.search(text)\n    return bool(match)",
        "num_ids": 87
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a pattern that matches a word character (i.e., any letter) followed by 'z',\n    # except at the start and end of the word.\n    pattern = r'\\b(?![^ ])z(?![^ ])\\b'\n    # Use the re.search() function to search for a match in the text.\n    match = re.search(pattern, text)\n    # If a match is found, return True. Otherwise, return False.\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 128
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\w(?!.*\\w)z\\w*(?<!\\w)'\n    return bool(re.search(pattern, text))",
        "num_ids": 77
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*(?:^|\\W)z(?=\\W|$))(?!.*(?:^|\\W)z(?=\\W|$)).*z.*(?!.*(?:^|\\W)z(?=\\W|$))(?!.*(?:^|\\W)z(?=\\W|$))\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 109
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function reverses an array upto a given position k.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    return input[:k][::-1] + input[k:]",
        "num_ids": 29
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverses the array upto the given position k and returns the reversed array.\n\n    Args:\n    input: A list of integers\n    k: An integer which is the position up to which the array should be reversed.\n\n    Returns:\n    A list of integers which is the reversed array upto position k.\n    \"\"\"\n    return input[::-1][:k]",
        "num_ids": 92
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an input array and a position k as input and returns the array in reverse order up to the kth position.\n    \"\"\"\n    return input[::-1][:k]",
        "num_ids": 55
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    return input[:k][::-1] + input[k:]",
        "num_ids": 29
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position as inputs and returns the array reversed up to the given position.\n    '''\n\n    # initialize variables\n    start = 0\n    end = k - 1\n\n    # reverse the array from start to end\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input",
        "num_ids": 103
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes in two arguments:\n    input: a list of integers\n    k: an integer which specifies the position up to which the input list needs to be reversed.\n    \n    It returns a list of integers which is the reverse of the input list upto the kth position.\n    \n    \"\"\"\n    return input[:k][::-1] + input[k:]",
        "num_ids": 90
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function will reverse an array upto the given position k.\n\n    :param input: list of integers\n    :param k: integer\n    :return: list of integers\n    \"\"\"\n    n = len(input)\n    start = 0\n    end = k - 1\n\n    # reverse the first k elements\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    # reverse the remaining elements\n    start = k\n    end = n - 1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input",
        "num_ids": 168
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an input array and reverses it upto the kth position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    result_tup = test_tup + (test_dict,)\n    return result_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)] # create a dp table to store the maximum average of each path\n\n    # filling the top row of dp table\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n\n    # filling the first column of dp table\n    for i in range(1, n):\n        dp[i][0] = cost[i][0]\n\n    # filling the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # finding the maximum average over all paths\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                temp_avg = dp[i][j-1]/(j-1)\n            elif j == 0:\n                temp_avg = dp[i-1][j]/(i-1)\n            else:\n                temp_avg = (dp[i-1][j] + dp[i][j-1] - cost[i][j])/(i+j-2)\n            max_avg = max(max_avg, temp_avg)\n\n    return max_avg",
        "num_ids": 418
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Define a function to compute average of a path\n    def path_avg(path):\n        total_cost = sum(cost[cell[0]][cell[1]] for cell in path)\n        num_cells = len(path)\n        return total_cost/num_cells\n\n    # Initialize a dictionary to store maximum average and corresponding path\n    max_avg = {'avg': 0, 'path': []}\n\n    # Define recursive function to find paths and compute averages\n    def find_paths(cell, path):\n        # Base case: if cell is bottom right, add path to dictionary and return\n        if cell == (len(cost)-1, len(cost[0])-1):\n            avg = path_avg(path)\n            if avg > max_avg['avg']:\n                max_avg['avg'] = avg\n                max_avg['path'] = path\n            return\n        # Recursive case: add current cell to path and recursively find paths from right and down cells\n        path.append(cell)\n        find_paths((cell[0]+1, cell[1]), path)\n        find_paths((cell[0], cell[1]+1), path)\n\n    # Find paths from top-left cell to bottom-right cell\n    find_paths((0,0), [])\n\n    # Print maximum average and corresponding path\n    print(\"Maximum average: {:.2f}\".format(max_avg['avg']))\n    print(\"Corresponding path: \", max_avg['path'])",
        "num_ids": 411
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_average = dp[n-1][n-1] / 2\n\n    for i in range(n):\n        for j in range(n):\n            curr_average = dp[i][j] / (2 * (i + j - dp[i][j] + 1))\n            if curr_average > max_average:\n                max_average = curr_average\n\n    return max_average",
        "num_ids": 304
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # Initialize a table to store the maximum averages of paths for all possible paths of length n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n):\n        for j in range(n):\n            # If we are at the top-left cell, then the maximum average is the cost of that cell itself\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            # If we are at any other cell, then we have two choices:\n            # 1. We can either move right from the current cell or move down from the current cell\n            # 2. We can ignore the current cell and move down or move right from the previous cell\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # The maximum average of all possible paths of length n is stored in the bottom-right corner of the table\n    return dp[n-1][n-1] / (n * n)\n",
        "num_ids": 266
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    # base case: one cell in the path\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n\n    # fill the rest of the table\n    for L in range(2, N+1):\n        for i in range(N-L+1):\n            j = i + L - 1\n            dp[i][j] = float('-inf')\n            for k in range(i, j):\n                # take the maximum of the three choices:\n                # (1) include the cell in the path and move right\n                # (2) include the cell in the path and move down\n                # (3) exclude the cell from the path\n                include_cell_and_move_right = dp[i][k] + dp[k+1][j] + cost[i][j]\n                include_cell_and_move_down = dp[i][k] + dp[i+1][j] + cost[i][j]\n                exclude_cell = dp[i][k] + dp[k+1][j]\n                dp[i][j] = max(dp[i][j], include_cell_and_move_right, include_cell_and_move_down, exclude_cell)\n\n    # find the maximum average path\n    max_average = 0\n    for i in range(N):\n        for j in range(N):\n            path_cost = dp[0][i] + dp[j][N-1] - dp[0][j] - dp[i][N-1] + dp[i][j]\n            num_cells = i+j+1\n            if num_cells > 0:\n                path_average = path_cost / num_cells\n                max_average = max(max_average, path_average)\n\n    return max_average",
        "num_ids": 522
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    max_path = []\n\n    # Initialize a list of lists to store the path taken to reach each cell\n    path_taken = [[0] * n for _ in range(n)]\n\n    # Helper function to compute the maximum average path\n    def compute_max_avg(row, col, path_cost):\n        nonlocal max_avg, max_path\n        # Base case: we have reached the bottom right cell\n        if row == n-1 and col == n-1:\n            # Compute the average path cost\n            avg_cost = path_cost / (n * n)\n            # Update the maximum average path\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = path_taken[row][col]\n            return\n\n        # Try moving down\n        if row < n-1:\n            # Compute the cost of moving down from the current cell\n            down_cost = cost[row][col] + path_taken[row+1][col]\n            # Update the path taken to include moving down\n            path_taken[row][col] = 1\n            # Recursively compute the maximum average path for moving down\n            compute_max_avg(row+1, col, path_cost + down_cost)\n            # Undo the path taken for moving down\n            path_taken[row][col] = 0\n\n        # Try moving right\n        if col < n-1:\n            # Compute the cost of moving right from the current cell\n            right_cost = cost[row][col] + path_taken[row][col+1]\n            # Update the path taken to include moving right\n            path_taken[row][col] = 2\n            # Recursively compute the maximum average path for moving right\n            compute_max_avg(row, col+1, path_cost + right_cost)\n            # Undo the path taken for moving right\n            path_taken[row][col] = 0\n\n    # Call the helper function to compute the maximum average path\n    compute_max_avg(0, 0, cost[0][0])\n\n    # Print the maximum average path and its average cost\n    path_str = \"\"\n    for i in range(len(max_path)):\n        if max_path[i] == 0:\n            path_str += \"D\"\n        elif max_path[i] == 1:\n            path_str += \"R\"\n    print(\"Maximum average path:\", path_str)\n    print(\"Average cost:\", max_avg)",
        "num_ids": 648
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    n = len(cost)\n    if n == 1:\n        return cost[0][0]\n\n    # Create a memoization matrix to store the maximum average path cost for all possible subpaths\n    memo = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize the first row and first column of the memoization matrix\n    for i in range(n):\n        memo[i][0] = cost[i][0]\n        memo[0][i] = cost[0][i]\n\n    # Fill the rest of the memoization matrix using the recurrence relation\n    for i in range(1, n):\n        for j in range(1, n):\n            memo[i][j] = cost[i][j] + max(memo[i-1][j], memo[i][j-1])\n\n    # Find the maximum average path cost by iterating over all possible paths\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == j == 0:\n                continue\n            # Compute the average cost of all possible paths starting from (i,j)\n            avg_cost = (memo[i][j] - cost[i][j]) / (n - max(i, j) + 1)\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n\n    return max_avg",
        "num_ids": 404
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1] / (2*n)",
        "num_ids": 243
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]  # dp[i][j] stores the maximum average of the path ending at (i, j)\n    for i in range(n):\n        dp[i][0] = cost[i][0] / 2\n    for j in range(n):\n        dp[0][j] = cost[0][j] / 2\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j] / 2\n    return dp[n-1][n-1]",
        "num_ids": 264
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables to keep track of the maximum average and the path with the maximum average\n    max_average = 0\n    max_path = []\n\n    # Traverse through each cell of the matrix and compute the average of the path ending at that cell\n    for i in range(len(cost)):\n        for j in range(len(cost)):\n            # Check if the current cell is not the bottom-right cell\n            if i!= len(cost) - 1 or j!= len(cost) - 1:\n                # Compute the average of the path ending at the current cell\n                path_cost = cost[i][j]\n                path_count = 1\n                if i < len(cost) - 1:\n                    path_cost += cost[i+1][j]\n                    path_count += 1\n                if j < len(cost) - 1:\n                    path_cost += cost[i][j+1]\n                    path_count += 1\n                if i < len(cost) - 1 and j < len(cost) - 1:\n                    path_cost += cost[i+1][j+1]\n                    path_count += 1\n                path_average = path_cost / path_count\n\n                # Update the maximum average and the path with the maximum average if necessary\n                if path_average > max_average:\n                    max_average = path_average\n                    max_path = [(i,j)]\n                elif path_average == max_average:\n                    max_path.append((i,j))\n\n    return max_average, max_path",
        "num_ids": 434
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key in students:\n        if students[key][0] > h and students[key][1] > w:\n            filtered_students[key] = students[key]\n    return filtered_students",
        "num_ids": 122
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result",
        "num_ids": 115
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n\n    filtered_students = {}\n\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    result = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            result[key] = value\n    return result",
        "num_ids": 113
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    This function takes a dictionary'students' with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    and two float values 'h' and 'w' as minimum height and weight, respectively. The function returns a new dictionary containing only those students whose height and weight are greater than or equal to the minimum values.\n    \"\"\"\n    result_students = {}\n    for student, values in students.items():\n        if values[0] >= h and values[1] >= w:\n            result_students[student] = values\n    return result_students",
        "num_ids": 142
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        if details[0] > h and details[1] > w:\n            filtered_students[student] = details\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 90
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 90
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "num_ids": 51
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    \n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n            \n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base**power):\n        sum += int(digit)\n    return sum",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += int(str(base)[i])\n    return result",
        "num_ids": 69
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum",
        "num_ids": 73
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += int(base)\n        base *= 10\n    return result",
        "num_ids": 71
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base):\n        result += int(digit) ** power\n    return result",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp = base\n    while power > 0:\n        digit = temp % 10\n        result += digit\n        temp //= 10\n        power -= 1\n    return result",
        "num_ids": 85
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base ** power):\n        result += int(digit)\n    return result",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    temp = base\n    while power > 0:\n        digit = temp % 10\n        sum += digit\n        temp = temp // 10\n        power -= 1\n    return sum",
        "num_ids": 84
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base**power):\n        result += int(digit)\n    return result",
        "num_ids": 67
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # regular expression to match quotes\n    pattern = re.compile(r'\"(.*?)\"')\n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text1)\n    # return a list of matches\n    return matches",
        "num_ids": 66
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    return match",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 60
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'  # pattern to match any string inside double quotes\n    matches = re.findall(pattern, text1)  # find all occurrences of the pattern in the text\n    return matches",
        "num_ids": 58
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function takes a string as input and extracts all the values between quotation marks.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 60
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    return match",
        "num_ids": 59
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    res_tup = ()\n    for i in range(N):\n        res_tup += (test_tup[i] * test_tup[i+1],)\n    return res_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 108
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Takes a tuple of numbers as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 104
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "num_ids": 114
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "num_ids": 114
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "num_ids": 106
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers (t_1,...,t_{N+1}) as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 118
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1  # number of elements in the tuple\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 128
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their element-wise sum.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 66
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a list of their element-wise sum.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        print(\"Error: lists have different lengths.\")\n        return None\n    else:\n        result = []\n        for i in range(len(lst1)):\n            result.append(lst1[i] + lst2[i])\n        return result",
        "num_ids": 97
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their sum.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 63
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum as a new list.\n    \"\"\"\n    # Initialize an empty list to store the sum of elements of lst1 and lst2\n    result = []\n\n    # Iterate through the two lists using a for loop and add the corresponding elements of the two lists\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    return result",
        "num_ids": 108
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists and returns a new list containing the sums of corresponding elements from both input lists.\n    '''\n    # Check if both input lists have the same length\n    if len(lst1)!= len(lst2):\n        return \"Error: Lists have different lengths!\"\n    \n    # Create a new list to store the sums\n    result = []\n    \n    # Iterate through both lists and add corresponding elements\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result",
        "num_ids": 127
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # check if the lengths of the lists are the same\n    if len(lst1)!= len(lst2):\n        return \"The lengths of the lists are not the same.\"\n    \n    # create an empty list to store the sum of the corresponding elements in the two lists\n    result = []\n    \n    # iterate over the two lists and add the corresponding elements\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result",
        "num_ids": 166
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Takes two lists and returns their element-wise sum.\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    return [a + b for a, b in zip(lst1, lst2)]",
        "num_ids": 71
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the sum of corresponding elements of both lists.\n\n    Args:\n    lst1: A list of integers\n    lst2: A list of integers with the same length as lst1\n\n    Returns:\n    A new list containing the sum of corresponding elements of lst1 and lst2\n\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The lists should have the same length\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 142
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(nums)]",
        "num_ids": 49
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if len(list(g)) > 1]",
        "num_ids": 53
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # groupby function returns a group of consecutive duplicate items\n    groups = [(k, list(g)) for k, g in groupby(nums)]\n    # filter groups that have only one item (no consecutive duplicates)\n    groups = [group for group in groups if len(group[1]) > 1]\n    # concatenate the remaining groups to get the result list\n    result = [item for group in groups for item in group[1]]\n    return result",
        "num_ids": 128
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # groupby returns a list of tuples, where the first element of each tuple is the same and the second element is a list of all the elements that match the first element\n    groups = groupby(nums)\n    # filter out tuples where the first element is not None (i.e. there are no consecutive duplicates)\n    filtered_groups = [group for group in groups if group[0] is not None]\n    # flatten the filtered groups to get a single list of unique elements\n    unique_nums = [num for group in filtered_groups for num in group[1]]\n    return unique_nums",
        "num_ids": 158
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group consecutive duplicates together using itertools.groupby\n    groups = [(k, len(list(g))) for k, g in groupby(nums)]\n    \n    # remove duplicates by summing up the lengths of the groups\n    result = []\n    for k, count in groups:\n        if count > 1:\n            result.append(k)\n        else:\n            result[-1] = k\n    \n    return result",
        "num_ids": 116
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "num_ids": 42
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "num_ids": 42
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result += list(g)[:1]\n        else:\n            result += list(g)\n    return result",
        "num_ids": 82
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list of numbers.\n    '''\n    return [k for k, g in groupby(nums)]",
        "num_ids": 43
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area\n    lateral_area = math.pi * r * (r + math.sqrt(h**2 + r**2))\n    return lateral_area",
        "num_ids": 84
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes radius r and height h as input and returns the lateral surface area of a cone.\n    '''\n    return math.pi * r * h",
        "num_ids": 52
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * r + math.pi * r * math.sqrt(r**2 - h**2)",
        "num_ids": 71
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))",
        "num_ids": 62
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n    # Calculate the slant height of the cone\n    s = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area of the cone using the formula\n    A = math.pi * r**2 + math.pi * r * s\n    return A",
        "num_ids": 101
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input parameters and returns the lateral surface area of the cone.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return surface_area",
        "num_ids": 78
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Returns the lateral surface area of a cone with radius r and height h.\n    '''\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))",
        "num_ids": 61
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2 + math.pi*r*math.sqrt(r**2 + h**2)",
        "num_ids": 71
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateral_area\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nlateral_area = lateralsurface_cone(radius, height)\nprint(\"The lateral surface area of the cone is:\", lateral_area)",
        "num_ids": 145
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nlateral_surface_area = lateralsurface_cone(radius, height)\nprint(\"The lateral surface area of the cone is:\", lateral_surface_area)",
        "num_ids": 138
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)",
        "num_ids": 53
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)",
        "num_ids": 46
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[., ]\", \":\", text)",
        "num_ids": 49
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 52
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colon\n    text = re.sub(r'\\s+', ':', text)\n    # Replace commas with colon\n    text = re.sub(r',', ':', text)\n    # Replace dots with colon\n    text = re.sub(r'\\.', ':', text)\n    return text",
        "num_ids": 96
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace spaces, commas, or dots with a colon in a given string.\n    '''\n    return re.sub(r'[,.]', ':', text)",
        "num_ids": 47
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 48
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # replace spaces with colon\n    text = re.sub(' ', ':', text)\n    \n    # replace commas with colon\n    text = re.sub(',', ':', text)\n    \n    # replace dots with colon\n    text = re.sub('\\.', ':', text)\n    \n    return text",
        "num_ids": 69
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 52
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[\\s,.]+') # regex pattern to match any occurrence of spaces, commas, or dots\n    return pattern.sub(':', text) # substitute with a colon\n\ntext = \"This is a sample text with spaces, commas, and dots.\"\nprint(replace_specialchar(text)) # Output: This:is:a:sample:text:with:spaces::commas::and:dots.",
        "num_ids": 107
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 136
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
        "num_ids": 124
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 135
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "num_ids": 64
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "num_ids": 139
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize variables\n    left = 0\n    right = len(A) - 1\n    result = -1\n\n    # Binary search to find the first occurrence of x\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
        "num_ids": 139
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the result variable\n    result = -1\n\n    # loop through the array and check if the current element is equal to the given number\n    for i in range(len(A)):\n        if A[i] == x:\n            # if the element is found, update the result variable and break out of the loop\n            result = i\n            break\n\n    # return the result variable\n    return result",
        "num_ids": 119
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "num_ids": 64
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    prefix_prod = [1] * n\n    suffix_prod = [1] * n\n    result = 0\n\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n\n    for i in range(n - 2, -1, -1):\n        suffix_prod[i] = suffix_prod[i + 1] * arr[i + 1]\n\n    for i in range(n):\n        result += prefix_prod[i] * suffix_prod[i]\n\n    return result",
        "num_ids": 160
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # initialize variables\n    sum_prod = 0\n    curr_prod = 1\n    # loop through all possible sublists of arr\n    for i in range(n):\n        for j in range(i, n):\n            curr_prod *= arr[j]\n            sum_prod += curr_prod\n            curr_prod //= arr[i]\n    return sum_prod",
        "num_ids": 98
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function will return the sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    # initialize sum of all products of all possible sublists\n    total = 0\n    # initialize product of first sublist\n    product = 1\n    # loop through all sublists of the list\n    for i in range(n):\n        # multiply the current element with previous product\n        product *= arr[i]\n        # add the product to the total\n        total += product\n        # if the sublist is of odd length, divide the product by the first element to get sum of products of all possible sublists\n        if i!= 0 and i!= n-1 and (i+1) % 2!= 0:\n            total -= arr[i-1] * arr[i]\n    return total\n",
        "num_ids": 190
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n\n    # Initialize the variable to store product of array elements\n    prod = 1\n\n    # Initialize a list to store cumulative product of array elements\n    cum_prod = [1] * n\n\n    # Calculate the cumulative product of array elements\n    for i in range(n):\n        cum_prod[i] = prod\n        prod *= arr[i]\n\n    # Calculate the sum of products of all possible sublists\n    for i in range(n):\n        for j in range(i, n):\n            sum_prod += cum_prod[j]\n\n    return sum_prod",
        "num_ids": 144
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            res += prod\n\n    return res",
        "num_ids": 112
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            res += prod\n    return res",
        "num_ids": 74
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    \n    # Iterate through all possible sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Multiply all elements in the sublist and add to res\n            res += arr[i-1]*arr[i-2]*arr[i-3]*...*arr[j-1]\n            \n    return res",
        "num_ids": 100
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sublist = arr[i:j+1]\n            prod = 1\n            for k in sublist:\n                prod *= k\n            sum += prod\n    return sum\n\narr = [1, 2, 3, 4, 5]\nprint(sum_Of_Subarray_Prod(arr)) # Output: 30",
        "num_ids": 117
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function returns the sum of products of all possible sublists of a given list. \n    '''\n    n = len(arr)\n    # Initialize the result\n    res = 0\n    # Traverse through all sublists\n    for i in range(n):\n        # Initialize the product of current sublist\n        prod = 1\n        for j in range(i, n):\n            # Multiply all the elements of current sublist\n            prod *= arr[j]\n            # Add product of current sublist to result\n            res += prod\n    return res",
        "num_ids": 126
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # Initialize the variables\n        ans = 0\n        p = 1\n        temp = 1\n        # Traverse the array and calculate the product of the sublist\n        for i in range(n):\n            temp *= arr[i]\n            ans += temp\n            # Update the product of the previous sublist\n            p *= arr[i]\n        # Return the answer\n        return ans - (p ** 2)",
        "num_ids": 132
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    # XOR the number with 0xAAAAAAAA (which has all even bits set to 1 and all odd bits set to 0)\n    n = n ^ 0xAAAAAAAA\n    # AND the result with 0x55555555 (which has all even bits set to 0 and all odd bits set to 1)\n    n = n & 0x55555555\n    # XOR the result with 0xAAAAAAAA (which has all even bits set to 1 and all odd bits set to 0)\n    n = n ^ 0xAAAAAAAA\n    return n",
        "num_ids": 159
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Create a mask that toggles all bits except the first and the last\n    mask = ((1 << n.bit_length()) - 2) << 1\n    \n    # Apply the mask to the number\n    return n ^ mask",
        "num_ids": 58
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes an integer as an input and toggles the bits of the number except the first and the last bit.\n    \"\"\"\n    # To toggle the bits, we first XOR all the bits with a mask. The mask is created by setting all the bits except the first and last bit to 1.\n    mask = (1 << n.bit_length()) - 2\n    \n    # Now, we XOR the original number with the mask to get the toggled number.\n    toggled_num = n ^ mask\n    \n    return toggled_num",
        "num_ids": 124
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # convert the number to binary\n    binary = bin(n)[2:]\n    # initialize a string to store the modified binary\n    modified_binary = \"\"\n    # loop through each bit in the binary string\n    for bit in binary:\n        # toggle the bit if it's not the first or last bit\n        if bit == \"0\":\n            modified_binary += \"1\"\n        else:\n            modified_binary += \"0\"\n    # convert the modified binary back to an integer and return it\n    return int(modified_binary, 2)",
        "num_ids": 145
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # Toggle all bits except the first and the last\n    toggled_bits = (~((1 << n.bit_length() - 2) - 1)) & ((1 << n.bit_length()) - 1)\n    \n    # Set the middle bits\n    middle_bits = n & toggled_bits\n    \n    # Toggle the middle bits\n    result = n ^ middle_bits\n    \n    return result",
        "num_ids": 93
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # toggle bits of the number except the first and the last bit\n    n = n ^ ((n >> 1) & ~((1 << (len(bin(n)) - 2)) - 1))\n    return n",
        "num_ids": 58
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    # Initialize the mask to toggle all bits except the first and last bit\n    mask = (1 << (n.bit_length() - 2)) - 1\n\n    # Toggle the bits using XOR with the mask\n    return n ^ mask",
        "num_ids": 60
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    This function toggles the bits of a given number n, except the first and the last bit.\n    '''\n    n &= ~(1 << n.bit_length()-2)\n    n &= ~(1 << n.bit_length()-1)\n    return n",
        "num_ids": 66
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # Finding the number of bits in the given number\n    num_bits = len(bin(n)) - 2\n\n    # Finding the mask for all bits except the first and last bits\n    mask = ((1 << (num_bits - 2)) - 1) << 1\n\n    # Toggling the middle bits of the number\n    return n ^ mask",
        "num_ids": 88
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # To toggle the bits of a number except the first and last bit, we can use bitwise XOR operator.\n    # We can XOR the number with its binary representation shifted right by 1 position (which effectively toggles all the bits except the first and the last).\n    # We can then XOR the result with its binary representation shifted right by 2 positions (which toggles all the bits except the first two and the last two).\n    # Finally, we can XOR the result with its binary representation shifted right by 1 position (which toggles all the bits except the first and the last bit).\n    # We can then convert the result back to an integer.\n    # Here's the Python code for this algorithm:\n    toggled_bits = n ^ (n >> 1) ^ (n >> 2) ^ (n >> 1)\n    return toggled_bits",
        "num_ids": 215
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 85
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 85
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # use bisect_left to find the index where x should be inserted\n    index = bisect.bisect_left(a, x)\n    \n    # if x is already in the array, return its index\n    if index < len(a) and a[index] == x:\n        return index\n    \n    # if x is not in the array, return the index where it would be inserted\n    return index\n",
        "num_ids": 156
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 90
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    # Find the insertion point using bisect_left\n    i = bisect.bisect_left(a, x)\n\n    # If the insertion point is at the beginning of the array, return 0\n    if i == 0:\n        return 0\n\n    # Otherwise, return the index of the previous value\n    return i - 1",
        "num_ids": 143
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return -1",
        "num_ids": 78
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 51
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "num_ids": 81
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    return pattern.match(string) is not None",
        "num_ids": 75
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    This function takes a string as input and checks whether it starts with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 80
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    return match is not None and match.group(0) == string",
        "num_ids": 86
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 / (2 ** (n-1)) + geometric_sum(n-1)",
        "num_ids": 65
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) + geometric_sum(n-1)",
        "num_ids": 62
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * geometric_sum(n - 1)",
        "num_ids": 95
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n * geometric_sum(n-1))",
        "num_ids": 87
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - 0.5**(n-1)) / (1 - 0.5) + geometric_sum(n-1)",
        "num_ids": 56
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the geometric sum of (1 + 1/2 + 1/4 +... + 1/n^n)\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)",
        "num_ids": 81
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)",
        "num_ids": 67
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * geometric_sum(n - 1)\n\nprint(geometric_sum(5)) # Output: 15.0\nprint(geometric_sum(10)) # Output: 3608.0",
        "num_ids": 135
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + geometric_sum(n-1)",
        "num_ids": 93
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + geometric_sum(n-1)",
        "num_ids": 40
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    return math.floor(n * (1 + math.sqrt(1 + 8 * n)) / 2)",
        "num_ids": 38
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    for i in range(n+1):\n        count += math.comb(i+1, 2)\n    \n    return count",
        "num_ids": 95
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef find_index(n):\n    \"\"\"\n    Finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    triangular_number = (n * (n + 1)) // 2\n    index = int(math.log10(triangular_number)) + 1\n    return index",
        "num_ids": 70
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find the sum of first n natural numbers\n    sum = 0\n    for i in range(1, n+1): \n        sum += i \n\n    # Find the index of the first triangular number with n digits\n    index = int((math.sqrt(1+8*sum)-1)/2) \n    return index ",
        "num_ids": 102
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize the starting value of the triangular number\n    start = 1\n    # Initialize the count of digits in the smallest triangular number\n    count = 0\n    \n    # Loop until we find the smallest triangular number with n digits\n    while count < n:\n        # Calculate the next triangular number\n        next_triangular = (start * (start + 1)) // 2\n        # Count the number of digits in the triangular number\n        num_digits = len(str(next_triangular))\n        # If the number of digits is less than n, update the start value and count of digits\n        if num_digits < n:\n            start = next_triangular\n            count = num_digits\n        # If the number of digits is equal to n, return the index of the triangular number\n        elif num_digits == n:\n            return start\n        # If the number of digits is greater than n, return -1 to indicate failure\n        else:\n            return -1",
        "num_ids": 215
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Returns the index of smallest triangular number with n digits.\n    \"\"\"\n    # convert n to integer\n    n = int(n)\n    # calculate the smallest triangular number with n digits\n    triangular_number = n*(n+1)//2\n    # calculate the log10 of the triangular number\n    log10_triangular_number = math.log10(triangular_number)\n    # return the index of the triangular number\n    return math.ceil(log10_triangular_number)",
        "num_ids": 124
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    # Finding the maximum value of n digits triangular number \n    max_num = int(math.pow(10, n)) * (int(math.pow(10, n-1)) + 1) \n    # Finding the smallest triangular number with n digits \n    smallest_num = n * (n+1) // 2 \n    # Finding the index of smallest triangular number with n digits \n    return max_num // smallest_num - 1\n",
        "num_ids": 114
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    while True:\n        if count * (count+1) // 2 >= 10**n:\n            return count\n        count += 1\n\nn = int(input(\"Enter number of digits: \"))\nprint(find_Index(n))",
        "num_ids": 122
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the largest triangular number with n digits\n    t = math.pow(10, n) * (math.pow(10, n) + 1) // 2\n    \n    # Initialize the smallest triangular number with n digits\n    s = math.pow(10, n-1) * (math.pow(10, n-1) + 1) // 2\n    \n    # Find the index of smallest triangular number with n digits\n    index = math.ceil(math.log10(t)) - math.floor(math.log10(s))\n    \n    return index",
        "num_ids": 193
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    count = 0\n    while True:\n        triangular_number = (count * (count + 1)) // 2\n        if len(str(triangular_number)) == n:\n            return count\n        count += 1",
        "num_ids": 83
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary with adjacent elements as keys and their corresponding values.\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 91
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj",
        "num_ids": 113
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a dictionary with adjacent elements of the tuple as key-value pairs.\n\n    Args:\n        test_tup (tuple): A tuple of n elements\n\n    Returns:\n        dict: A dictionary with adjacent elements of the tuple as key-value pairs\n    \"\"\"\n\n    # Initialize an empty dictionary\n    dict_tup = {}\n\n    # Iterate through the tuple using a for loop\n    for i in range(len(test_tup)-1):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n\n    return dict_tup",
        "num_ids": 135
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The length of the tuple must be even\")\n\n    dict_ = {}\n    for i in range(0, len(test_tup), 2):\n        dict_[test_tup[i]] = test_tup[i+1]\n\n    return dict_",
        "num_ids": 132
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert a tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create an empty dictionary\n    result_dict = {}\n    \n    # iterate over the tuple\n    for i in range(0, len(test_tup), 2):\n        # assign the ith and i+1th elements as key-value pairs in the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n        \n    return result_dict",
        "num_ids": 110
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary where the keys are the adjacent elements of the tuple and the values are the elements after the key.\n    '''\n    # initialize an empty dictionary\n    dict_tup = {}\n    \n    # iterate over the tuple using a for loop and use adjacent elements as keys and elements after the key as values\n    for i in range(len(test_tup)-1):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    \n    # return the dictionary\n    return dict_tup",
        "num_ids": 127
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup)):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj",
        "num_ids": 103
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 113
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 83
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}",
        "num_ids": 93
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are the same, and False otherwise.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all characters are same, else False.\n    '''\n    if len(s) == 0:\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True",
        "num_ids": 77
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all characters in a string are the same.\n    :param s: a string\n    :return: True if all characters are the same, False otherwise\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same, else False.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])",
        "num_ids": 73
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same, else False.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Check whether all the characters in a given string are the same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are same, otherwise False.\n    \"\"\"\n    return len(set(s)) == 1",
        "num_ids": 49
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True",
        "num_ids": 88
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 31
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * 3) ** 0.5\n    area = (1/4) * math.sqrt(6) * side * s\n    return area",
        "num_ids": 71
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6) / 4) * (side ** 2)\n    return area\n",
        "num_ids": 60
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    return (math.sqrt(6)/4) * side**2",
        "num_ids": 45
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3**0.5)/2 * side**2",
        "num_ids": 49
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (6 * math.sqrt(6) * side**2) / 4",
        "num_ids": 54
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (3 * math.sqrt(3)) / (4 * math.tan(math.pi / 6)) * side ** 2\n    return area",
        "num_ids": 63
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    # Use Heron's formula to calculate the area\n    s = (side * math.sqrt(3)) / 2\n    area = math.sqrt(s * (s - side) * (s - side) * (s - side))\n    return area",
        "num_ids": 83
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    return (6 * math.sqrt(2)) / (4 * math.tan(math.pi / 6)) * side ** 2",
        "num_ids": 59
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(3) * side**2)) / (4 * math.sqrt(2))\n    return area",
        "num_ids": 63
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * math.sqrt(2)) / (4 + math.sqrt(2)) * side ** 2\n    return area",
        "num_ids": 65
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function takes a list as input and rotates it by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    # If m is greater than or equal to n, return the list as it is.\n    if m >= n:\n        return lst\n    # If m is negative, return the list in reverse order.\n    elif m < 0:\n        return lst[::-1]\n    # If m is positive, rotate the list to right direction.\n    else:\n        return lst[n-m:] + lst[:n-m]",
        "num_ids": 131
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m > n:\n        m = m % n\n    return list[n-m:] + list[:n-m]",
        "num_ids": 66
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    return list[n-m:] + list[:n-m]",
        "num_ids": 38
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list",
        "num_ids": 88
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Parameters:\n    list (list): The list to be rotated.\n    m (int): The number of items to be rotated to the right direction.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        return list[n-m:] + list[:n-m]",
        "num_ids": 111
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    lst = lst[m:] + lst[:m]\n    return lst",
        "num_ids": 44
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n positions.\n    \"\"\"\n    return lst[-n:] + lst[:-n]",
        "num_ids": 36
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(lst, n):\n    '''\n    This function rotates a given list to the right by n positions.\n\n    Args:\n    lst: A list to be rotated.\n    n: An integer indicating the number of positions to rotate the list to the right.\n\n    Returns:\n    The rotated list.\n    '''\n    return lst[-n:] + lst[:-n]",
        "num_ids": 78
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Parameters:\n    lst (list): The list to be rotated.\n    n (int): The number of items to be rotated to the right.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    return lst[-n:] + lst[:-n]",
        "num_ids": 80
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n  # handle the case where m > n\n    return lst[-m:] + lst[:-m]",
        "num_ids": 62
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return False\n    return True",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if the tuple has any None value, and False otherwise.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 57
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as an argument and returns True if any value in the tuple is None, else returns False.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    num_range = range(startnum, endnum+1)\n    divisible_list = []\n\n    for num in num_range:\n        digits = [int(d) for d in str(num)]\n        divisible = True\n        \n        for digit in digits:\n            if num % digit!= 0:\n                divisible = False\n                break\n        \n        if divisible:\n            divisible_list.append(num)\n    \n    return divisible_list",
        "num_ids": 167
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by its digits\n    is_divisible = lambda num: all(int(digit) % num == 0 for digit in str(num))\n    # Check if each number in the range is divisible by its digits\n    return all(is_divisible(num) for num in range(startnum, endnum+1))",
        "num_ids": 98
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Returns a list of numbers between startnum and endnum, where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers",
        "num_ids": 111
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d)!= 0 and x % int(d) == 0 for d in str(x)), range(startnum, endnum+1)))",
        "num_ids": 92
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        digits = list(map(int, str(num)))\n        if all(num % digit == 0 for digit in digits):\n            divisible_numbers.append(num)\n    return divisible_numbers",
        "num_ids": 140
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(i) % x == 0 for i in str(x)), range(startnum, endnum+1)))",
        "num_ids": 85
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    return list(filter(lambda x: all(int(i) % x == 0 for i in str(x)), range(startnum, endnum+1)))",
        "num_ids": 111
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # We'll use a lambda function to check if a number is divisible by every digit in it\n    is_divisible = lambda num: all(num % int(digit) == 0 for digit in str(num))\n    \n    # We'll iterate over all the numbers in the given range and check if each one is divisible by every digit\n    for num in range(startnum, endnum+1):\n        if is_divisible(num):\n            print(num)",
        "num_ids": 174
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function finds numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    for i in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(i)]\n        if all(i % digit == 0 for digit in digits):\n            print(i)",
        "num_ids": 95
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes in two arguments, startnum and endnum, and returns a list of all numbers within the given range where every number is divisible by every digit it contains.\n    '''\n    divisible_list = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible_list.append(num)\n    return divisible_list",
        "num_ids": 124
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Calculates the area of a sector with the given radius and angle.\n    If the angle is larger than 360 degrees, returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a / 360)",
        "num_ids": 83
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a/360) * math.pi",
        "num_ids": 48
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a/360) * (math.sin(math.radians(a/2)))",
        "num_ids": 99
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r ** 2) * (a / 360) * math.pi",
        "num_ids": 91
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        sector_area = (0.5 * r ** 2) * a / 360\n        return sector_area",
        "num_ids": 97
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (0.5*math.pi*r**2)*a/360",
        "num_ids": 49
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r ** 2) * (a / 360)",
        "num_ids": 50
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi",
        "num_ids": 86
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector.\n    If the angle is greater than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r**2 * a / 360",
        "num_ids": 89
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5 * math.pi * r ** 2 * a / 360",
        "num_ids": 92
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # iterate through all possible lengths of LCS\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                # if the characters match, add 1 to the LCS length\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                # otherwise, take the maximum of the LCS lengths for the three substrings\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    \n    # return the LCS\n    return lcs[m][n][o]",
        "num_ids": 256
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # Create a 3D table to store the lengths of LCSs\n    table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    \n    # Find the LCS\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] > table[i][j-1][k]:\n            i -= 1\n        elif table[i-1][j][k] > table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs",
        "num_ids": 390
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Find the length of the three strings\n    m, n, o = len(X), len(Y), len(Z)\n\n    # Create a 3D table to store lengths of LCSs\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the LCS\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "num_ids": 449
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    max_len = 0\n    end_x = 0\n    end_y = 0\n    end_z = 0\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                    if L[i][j][k] > max_len:\n                        max_len = L[i][j][k]\n                        end_x = i-1\n                        end_y = j-1\n                        end_z = k-1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return max_len, X[end_x:end_x+max_len], Y[end_y:end_y+max_len], Z[end_z:end_z+max_len]",
        "num_ids": 358
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    lcs[i][j][k] = 1 + lcs[i - 1][j - 1][k - 1]\n                else:\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], lcs[i][j - 1][k], lcs[i][j][k - 1])\n    return lcs[m][n][o]",
        "num_ids": 242
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k]:\n            i -= 1\n        elif dp[i-1][j][k] > dp[i][j][k-1]:\n            k -= 1\n        else:\n            j -= 1\n    return lcs",
        "num_ids": 356
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    lcs = [[[None for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]",
        "num_ids": 231
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Initialize the matrix with zeros\n    lcs_mat = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the matrix using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs_mat[i][j][k] = lcs_mat[i-1][j-1][k-1] + 1\n                else:\n                    lcs_mat[i][j][k] = max(lcs_mat[i-1][j][k], lcs_mat[i][j-1][k], lcs_mat[i][j][k-1])\n\n    # Backtrack to find the longest common subsequence\n    lcs_len = lcs_mat[m][n][o]\n    lcs = [\"\"] * lcs_len\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs[lcs_len-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            lcs_len -= 1\n        elif lcs_mat[i-1][j][k] > lcs_mat[i][j-1][k]:\n            i -= 1\n        elif lcs_mat[i-1][j][k] > lcs_mat[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(lcs)",
        "num_ids": 431
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 2D table to store the lengths of the longest common subsequences\n    table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Find the length of the longest common subsequence\n    length = table[m][n][o]\n\n    # Create a sequence of the longest common subsequence\n    seq = ''\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            seq = X[i-1] + seq\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] > table[i][j-1][k]:\n            i -= 1\n        elif table[i][j-1][k] > table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return length, seq",
        "num_ids": 421
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0] * (o+1) for i in range(n+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs",
        "num_ids": 433
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Use a list comprehension to add spaces between each capitalized word\n    result =''.join([''+ word if word.isupper() else word for word in words])\n    return result",
        "num_ids": 112
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Join the words with spaces in between\n    result =''.join(words)\n\n    return result",
        "num_ids": 92
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words using regex\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Checking if the first word starts with a capital letter\n    if words[0][0].isupper():\n        # Adding a space before the first word\n        words[0] ='' + words[0]\n    # Reconstructing the string with spaces between words\n    result = ''.join(words)\n    return result",
        "num_ids": 131
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Regular expression to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    # Splitting the string into words using regular expression\n    words = re.findall(pattern, str1)\n    # Joining the words with spaces\n    result =''.join(words)\n    return result",
        "num_ids": 112
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Use regular expression to identify capital words\n    capital_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Replace capital words with spaces\n    str1 = re.sub(r'\\b[A-Z][a-z]*\\b', r' \\g<0> ', str1)\n    return str1",
        "num_ids": 96
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(\\b[A-Z][^\\s]+\\b)')\n    return pattern.sub(r'\\1 ', str1)",
        "num_ids": 72
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r\"(?<=[^A-Z])([A-Z])\", r\" \\1\", str1)\n    return str1",
        "num_ids": 73
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    return re.sub(pattern, r'\\1 ', str1)",
        "num_ids": 49
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^a-zA-Z0-9]','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Loop over the words and add spaces between capitalized words\n    result = []\n    for i in range(len(words)):\n        word = words[i]\n        if word[0].isupper() and i > 0 and not words[i-1][-1].isspace():\n            word ='' + word\n        result.append(word)\n    # Join the words back into a string\n    return ''.join(result)",
        "num_ids": 156
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Splitting the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Joining the words with spaces in between\n    result =''.join(words)\n\n    return result",
        "num_ids": 69
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))",
        "num_ids": 74
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str",
        "num_ids": 78
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        num = int(num_str)\n        nums.append(num)\n    nums.sort()\n    result = []\n    for num in nums:\n        result.append(str(num))\n    return result",
        "num_ids": 89
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sorts a list of strings of numbers numerically.\n    '''\n    # Convert all strings to integers using map()\n    nums_int = list(map(int, nums_str))\n    # Sort the integers using sorted()\n    nums_int_sorted = sorted(nums_int)\n    # Convert the sorted integers back to strings using map()\n    nums_str_sorted = list(map(str, nums_int_sorted))\n    # Return the sorted list of strings\n    return nums_str_sorted",
        "num_ids": 120
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "num_ids": 53
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        if num.isdigit():\n            nums.append(int(num))\n    nums.sort()\n    sorted_nums_str = []\n    for num in nums:\n        sorted_nums_str.append(str(num))\n    return sorted_nums_str",
        "num_ids": 123
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))",
        "num_ids": 74
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: float(x))",
        "num_ids": 74
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings that contain numbers and sorts them in ascending order.\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    result = []\n    for num in nums:\n        result.append(str(num))\n    return result",
        "num_ids": 86
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function will take a list of strings as input and sort the strings that contain numbers in numerically.\n    '''\n    num_list = []\n    str_list = []\n    for i in nums_str:\n        if i.isdigit():\n            num_list.append(int(i))\n        else:\n            str_list.append(i)\n    num_list.sort()\n    sorted_list = [str(i) for i in num_list] + str_list\n    return sorted_list",
        "num_ids": 120
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function takes two parameters:\n    test_list: a list of numbers\n    test_tup: a tuple of numbers\n\n    It adds the tuple to the list and returns the modified list.\n    '''\n    for num in test_tup:\n        test_list.append(num)\n    return test_list",
        "num_ids": 79
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list",
        "num_ids": 45
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function adds the given tuple to the given list and returns the new list.\n    '''\n    new_list = test_list + list(test_tup)\n    return new_list",
        "num_ids": 55
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    # base case: if i is less than or equal to half of the length of the array, it is a valid index\n    if i <= len(arr) // 2:\n        # left child index\n        left_child_index = 2 * i + 1\n\n        # right child index\n        right_child_index = 2 * i + 2\n\n        # if left child exists and is greater than the current node, return False\n        if left_child_index < len(arr) and arr[i] > arr[left_child_index]:\n            return False\n\n        # if right child exists and is greater than the current node, return False\n        if right_child_index < len(arr) and arr[i] > arr[right_child_index]:\n            return False\n\n        # recursively check if left and right children are valid min heaps\n        return check_min_heap_helper(arr, left_child_index) and check_min_heap_helper(arr, right_child_index)\n\n    # if i is greater than half of the length of the array, the array represents a valid min heap\n    else:\n        return True",
        "num_ids": 257
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        if arr[2*i + 1] > arr[i]:\n            return False\n        if arr[2*i + 2] > arr[i]:\n            return False\n        return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap.\n    '''\n    if len(arr) <= 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 174
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base case\n    if 2 * i + 1 >= len(arr) and 2 * i + 2 >= len(arr):\n        return True\n    \n    # Check if left child is less than parent\n    if 2 * i + 1 < len(arr) and arr[2 * i + 1] < arr[i]:\n        return False\n    \n    # Check if right child is less than parent\n    if 2 * i + 2 < len(arr) and arr[2 * i + 2] < arr[i]:\n        return False\n    \n    # Recursively check the left and right sub-heaps\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    # Check if the root is less than both its children\n    if arr[0] > arr[1] or arr[0] > arr[-1]:\n        return False\n    \n    # Recursively check the left and right sub-heaps\n    return check_min_heap_helper(arr, 1)",
        "num_ids": 259
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    \n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    \n    if left_child < len(arr) or right_child < len(arr):\n        return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n    \n    return True\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 203
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base case: if root is leaf node, it's a valid min heap\n    if 2*i + 1 > len(arr) - 1:\n        return True\n    \n    # If left child is smaller than root, return False\n    if arr[2*i + 1] < arr[i]:\n        return False\n    \n    # If right child is smaller than root, return False\n    if arr[2*i + 2] < arr[i]:\n        return False\n    \n    # Recursively call check_min_heap_helper on left and right sub-trees\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n\ndef check_min_heap(arr):\n    # Check if the first element is root of min heap\n    if arr[0] > arr[1]:\n        return False\n    \n    # Recursively call check_min_heap_helper on left and right sub-trees\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 243
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 144
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0 or i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)",
        "num_ids": 119
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n",
        "num_ids": 135
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        if arr[2 * i] < arr[i]:\n            return False\n        return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)\n    return True\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 107
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap(arr):\n    n = len(arr)\n    # A min heap has the property that the value of the parent node is less than or equal to the value of its child nodes.\n    for i in range(n//2 - 1, -1, -1):\n        if arr[i] > arr[2*i + 1]:\n            return False\n        if (2*i + 2 < n) and (arr[i] > arr[2*i + 2]):\n            return False\n    return True",
        "num_ids": 117
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 63
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 78
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)",
        "num_ids": 84
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Jacobsthal number is:\", jacobsthal_num(n))",
        "num_ids": 101
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "num_ids": 166
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) - jacobsthal_num(n-2)",
        "num_ids": 166
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 78
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    heap = []\n    for i in range(K):\n        heapq.heappush(heap, test_list[i])\n    for i in range(K, len(test_list)):\n        if test_list[i][0] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, test_list[i])\n    return heap",
        "num_ids": 117
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "num_ids": 53
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[:K]",
        "num_ids": 49
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    return sorted(test_list, key=lambda x: x[0])[0:K]",
        "num_ids": 50
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    This function finds the minimum K records from a list of tuples.\n    :param test_list: a list of tuples where each tuple is a record with the first element being the key and the second element being the value\n    :param K: the number of records to return\n    :return: a list of tuples containing the K minimum records\n    '''\n\n    # create a min heap with the first K elements of the list\n    min_heap = [test_list[i] for i in range(K)]\n    heapq.heapify(min_heap)\n\n    # iterate over the remaining elements in the list and compare each one to the root of the heap\n    for i in range(K, len(test_list)):\n        if test_list[i] < min_heap[0]:\n            # if the current element is smaller than the root of the heap, replace the root with the current element\n            heapq.heapreplace(min_heap, test_list[i])\n\n    # return the list of K minimum records\n    return min_heap",
        "num_ids": 231
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order of the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Return the first K elements from the sorted list\n    return test_list[:K]",
        "num_ids": 79
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum K records from the list.\n    The function sorts the list of tuples based on the second element of the tuple (the age), and then returns the first K records from the sorted list.\n    '''\n\n    # Sort the list of tuples based on the age\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Return the first K records from the sorted list\n    return sorted_list[:K]",
        "num_ids": 116
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples as input and returns a list of minimum K tuples.\n    '''\n    # Sort the list of tuples in ascending order based on the second element of each tuple.\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize a list to store the minimum K tuples.\n    result = []\n    \n    # Iterate over the sorted list of tuples and append the first K tuples to the result list.\n    for i in range(K):\n        result.append(test_list[i])\n    \n    return result",
        "num_ids": 128
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if K > len(test_list):\n        return \"K should be less than or equal to the length of the list.\"\n    \n    return sorted(test_list, key=lambda x: x[1])[:K]",
        "num_ids": 76
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list of tuples based on the second element in each tuple\n    test_list.sort(key=lambda x: x[1])\n    # return the first K tuples from the sorted list\n    return test_list[:K]",
        "num_ids": 79
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 123
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 122
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 128
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 122
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 122
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common",
        "num_ids": 116
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 124
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 122
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]",
        "num_ids": 38
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    This function finds the second smallest number in a list of numbers.\n    '''\n    numbers.sort() # sort the list in ascending order\n    return numbers[1] # return the second smallest number",
        "num_ids": 51
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list of numbers.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The second smallest number in the list.\n    \"\"\"\n\n    # Sort the list in ascending order\n    numbers = sorted(numbers)\n\n    # Return the second smallest number\n    return numbers[1]",
        "num_ids": 82
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 88
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = None\n    \n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif second_smallest is None or numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n    \n    return second_smallest",
        "num_ids": 124
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]",
        "num_ids": 44
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest",
        "num_ids": 58
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest",
        "num_ids": 58
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest",
        "num_ids": 93
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # Return the second smallest number in the sorted list\n    return sorted_numbers[1]",
        "num_ids": 63
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = 'a[b]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a[b]*\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    result = re.findall(pattern, text)\n    return result",
        "num_ids": 92
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input and returns the count of pairs of reverse strings present in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function counts the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 90
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 124
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 74
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 121
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function counts the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count",
        "num_ids": 108
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 72
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 121
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts",
        "num_ids": 136
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as an input and returns a dictionary with the counts of unique sublists.\n    \"\"\"\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in count_dict:\n                count_dict[sublist] = 1\n            else:\n                count_dict[sublist] += 1\n    return count_dict",
        "num_ids": 118
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    sublist_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in sublist_dict:\n                sublist_dict[sublist] = 1\n            else:\n                sublist_dict[sublist] += 1\n    return sublist_dict",
        "num_ids": 98
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    unique = {}\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = tuple(lst[i:j+1])\n            if sublist in unique:\n                unique[sublist] += 1\n            else:\n                unique[sublist] = 1\n    return unique",
        "num_ids": 80
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for sublist in list1:\n        if tuple(sublist) not in result:\n            result[tuple(sublist)] = 1\n        else:\n            result[tuple(sublist)] += 1\n    return result",
        "num_ids": 110
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists",
        "num_ids": 92
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n\n    # Iterate through each sublist of the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple is not in the dictionary, add it and set the value to 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment its value by 1\n        else:\n            count_dict[sublist_tuple] += 1\n\n    # Return the dictionary of counts\n    return count_dict",
        "num_ids": 200
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sub_list = tuple(list1[i:j])\n            if sub_list not in result_dict:\n                result_dict[sub_list] = 1\n            else:\n                result_dict[sub_list] += 1\n    return result_dict",
        "num_ids": 150
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublst = tuple(lst[i:j])\n            if sublst in counts:\n                counts[sublst] += 1\n            else:\n                counts[sublst] = 1\n    return counts",
        "num_ids": 82
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    # Convert list to a tuple to make it hashable\n    lst = tuple(lst)\n    count = {}\n    # Iterate through all possible sublists of lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            # Check if sublist is already in count dictionary\n            if sublist not in count:\n                # If not, count the number of occurrences of the sublist\n                count[sublist] = lst.count(sublist)\n    return count",
        "num_ids": 130
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if \".\" not in num:\n        return False\n    nums = num.split(\".\")\n    if len(nums)!= 2:\n        return False\n    if len(nums[0]) > 1 and nums[0][0] == \"0\":\n        return False\n    if len(nums[1]) > 2:\n        return False\n    return True",
        "num_ids": 105
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if '.' not in str(num):\n            return False\n        if abs(num - round(num, 2)) <= 1e-06:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 92
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if round(float(num), 2) == float(num):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 68
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) < 0.01\n    except ValueError:\n        return False",
        "num_ids": 50
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n    except ValueError:\n        return False\n\n    if \".\" in num:\n        split_num = num.split(\".\")\n        if len(split_num) == 2 and len(split_num[1]) <= 2:\n            return True\n        else:\n            return False\n    else:\n        return True",
        "num_ids": 102
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return abs(round(float_num,2) - float_num) < 0.01\n    except ValueError:\n        return False",
        "num_ids": 75
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False",
        "num_ids": 83
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check if a given string represents a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n    \n    return float_num.is_integer() or float_num % 1 == 0 and abs(float_num - round(float_num, 2)) < 1e-5",
        "num_ids": 90
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == \"\":\n        return False\n    if \".\" in num:\n        num = num.split(\".\")[0] + num.split(\".\")[1][:2]\n        if num.isdigit():\n            return True\n        else:\n            return False\n    else:\n        if num.isdigit():\n            return True\n        else:\n            return False",
        "num_ids": 100
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if float_num == int(float_num):\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False",
        "num_ids": 85
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list to set to remove duplicates\n    set_arr = set(arr)\n    # check if the length of the set is 1 or not\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains more than one distinct element\")",
        "num_ids": 70
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_element(arr):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    :param arr: A list of numbers.\n    :return: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1",
        "num_ids": 43
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list as an input and returns True if the list contains only one distinct element else False.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    This function will check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list does not contain only one distinct element.\")",
        "num_ids": 71
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    else:\n        return \"Invalid month number\"",
        "num_ids": 140
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    else:\n        return \"Invalid month number\"",
        "num_ids": 82
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month has 30 days, and False otherwise.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return 'Invalid month number'\n\nprint(check_monthnumber_number(1)) # False\nprint(check_monthnumber_number(2)) # True\nprint(check_monthnumber_number(3)) # False\nprint(check_monthnumber_number(4)) # True\nprint(check_monthnumber_number(5)) # False\nprint(check_monthnumber_number(6)) # True\nprint(check_monthnumber_number(7)) # False\nprint(check_monthnumber_number(8)) # False\nprint(check_monthnumber_number(9)) # True\nprint(check_monthnumber_number(10)) # False\nprint(check_monthnumber_number(11)) # True\nprint(check_monthnumber_number(12)) # False",
        "num_ids": 286
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number\"\n\nprint(check_monthnumber_number(2)) # Output: True\nprint(check_monthnumber_number(6)) # Output: True\nprint(check_monthnumber_number(13)) # Output: Invalid month number",
        "num_ids": 174
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"The given month number contains 30 days.\")\n    elif monthnum == 2:\n        print(\"February has 28 or 29 days based on the year.\")\n    else:\n        print(\"The given month number contains 31 days.\")",
        "num_ids": 131
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number\"",
        "num_ids": 122
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True",
        "num_ids": 84
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n): \n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Args:\n    arr: A list of integers.\n    n: An integer denoting the length of the list.\n\n    Returns:\n    An integer representing the minimum difference between any two elements in the list.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference and result\n    min_diff = float('inf')\n    res = 0\n\n    # Iterate through all pairs of elements and find the minimum difference\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n            res = arr[i]\n\n    return min_diff",
        "num_ids": 173
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "num_ids": 95
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i+1]-arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 70
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 74
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 111
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff",
        "num_ids": 80
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function finds the minimum difference between any two elements in a given array. \n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n): \n        diff = arr[i] - arr[i-1]\n        if diff < min_diff: \n            min_diff = diff \n    return min_diff",
        "num_ids": 94
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in it.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 1\n    i = 2\n    while count < n:\n        flag = True\n        j = 2\n        while j <= int(math.sqrt(i)):\n            if i % j == 0:\n                flag = False\n                break\n            j += 1\n        if flag:\n            count += 1\n        i += 1\n    return i - 1",
        "num_ids": 121
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        if is_polite_number(i):\n            count += 1\n    return i\n\ndef is_polite_number(num):\n    \"\"\"\n    Helper function to check if a number is polite or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 159
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    count = 1\n    while count < n:\n        i += 1\n        if is_prime(i) and is_prime(int(math.log(i, 10))):\n            count += 1\n    return i\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "num_ids": 153
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    num = 1\n    count = 1\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n    return num\n\ndef is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 152
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n    \"\"\"\n    count = 1\n    i = 1\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(n):\n    \"\"\"\n    This function checks whether a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 138
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 2\n    \n    # Initialize variables\n    p, count = 2, 1\n    \n    # Loop until the nth polite number is found\n    while count < n:\n        # Find the next polite number\n        p += 1\n        while not is_prime(p):\n            p += 1\n        \n        # Increment count if the next polite number is found\n        count += 1\n    \n    return p\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 199
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    # Find the nth prime number\n    prime_count = 0\n    num = 2\n    while prime_count < n:\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n        num += 1\n    return num - 1",
        "num_ids": 107
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(i) and is_prime(2*i):\n            count += 1\n    return i\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_polite(10))",
        "num_ids": 154
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    \n    # Find the previous polite number\n    prev_polite = is_polite(n-1)\n    \n    # Generate the current polite number\n    curr_polite = prev_polite + 1\n    \n    # Check if the current polite number is polite\n    while True:\n        is_polite = True\n        for i in range(2, int(math.sqrt(curr_polite))+1):\n            if curr_polite % i == 0:\n                is_polite = False\n                break\n        \n        if is_polite:\n            return curr_polite\n        \n        curr_polite += 1",
        "num_ids": 196
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    # Initialize variables\n    count = 1 # Counts the number of polite numbers found so far\n    i = 1 # The current number being checked\n    \n    # Loop until we have found the nth polite number\n    while count < n:\n        i += 1\n        is_polite = True\n        \n        # Check if the number is polite\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite = False\n                break\n        \n        # If the number is polite, increment the count\n        if is_polite:\n            count += 1\n    \n    # Return the nth polite number\n    return i",
        "num_ids": 187
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 71
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 72
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 71
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "num_ids": 71
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i],l1[i+1]))\n    return pair_list",
        "num_ids": 78
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    return list(zip(l1[:-1], l1[1:]))",
        "num_ids": 49
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    arr_len = len(arr)\n    for i in range(arr_len):\n        for j in range(i+1, arr_len):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "num_ids": 117
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    # Sort the array in ascending order\n    arr.sort()\n    # Use two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            pairs_count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return pairs_count",
        "num_ids": 136
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort() # sort the list in ascending order\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return count",
        "num_ids": 148
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a target sum and returns the number of pairs of numbers in the list whose sum is equal to the target sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    \"\"\"\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "num_ids": 101
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 105
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "num_ids": 56
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function will return a new list containing the elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list",
        "num_ids": 74
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing all elements that are present in the first list but not present in the second list.\n    \"\"\"\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result",
        "num_ids": 74
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff(li1, li2):\n    '''\n    Returns the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "num_ids": 51
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists as a new list.\n    \"\"\"\n    # Create a new empty list to store the difference\n    diff = []\n    # Iterate over each element in li1\n    for elem in li1:\n        # If the element is not in li2, append it to the diff list\n        if elem not in li2:\n            diff.append(elem)\n    # Return the diff list\n    return diff",
        "num_ids": 98
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing all the elements that are present in the first list but not in the second list.\n    '''\n\n    # Initialize an empty list to store the difference between the two lists\n    diff_list = []\n\n    # Iterate over the elements of the first list\n    for elem in li1:\n        # If the element is not in the second list, add it to the difference list\n        if elem not in li2:\n            diff_list.append(elem)\n\n    return diff_list",
        "num_ids": 122
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Return the difference between two lists.\n\n    Parameters:\n    li1 (list): First list\n    li2 (list): Second list\n\n    Returns:\n    list: The difference between the two input lists\n    '''\n\n    # Create an empty list to store the difference\n    diff = []\n\n    # Iterate through the first list and check if each element is present in the second list\n    for element in li1:\n        if element not in li2:\n            diff.append(element)\n\n    # Return the difference list\n    return diff",
        "num_ids": 117
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = list(set(li1) - set(li2))\n    return diff",
        "num_ids": 48
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Get the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff",
        "num_ids": 51
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "num_ids": 44
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of current odd natural number to sum\n        sum += i**4\n        \n    # Return the sum of fourth power of first n odd natural numbers\n    return sum",
        "num_ids": 110
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum\n\nprint(odd_num_sum(5)) # output: 523",
        "num_ids": 81
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    # Initialize the sum variable to 0\n    total = 0\n    # Iterate over the first n odd numbers\n    for i in range(1, 2*n+1, 2):\n        # Add the fourth power of the current odd number to the sum\n        total += i ** 4\n    # Return the final sum\n    return total",
        "num_ids": 81
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer 'n' as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1:\n        return \"Invalid input. 'n' should be greater than or equal to 1.\"\n\n    odd_numbers = [x for x in range(1, n*2, 2)]  # create a list of first n odd numbers\n\n    odd_sum = sum([x**4 for x in odd_numbers])  # calculate the sum of fourth power of odd numbers\n\n    return odd_sum",
        "num_ids": 129
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum",
        "num_ids": 42
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    This function will check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True",
        "num_ids": 152
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "num_ids": 71
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "num_ids": 61
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False",
        "num_ids": 137
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False",
        "num_ids": 155
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            if char == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif char == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif char == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    if not stack:\n        return True\n    else:\n        return False",
        "num_ids": 157
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)",
        "num_ids": 66
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the test_str into a list of words\n    words = test_str.split()\n    \n    # create a new list of words that have length greater than K\n    filtered_words = [word for word in words if len(word) > K]\n    \n    # join the words in the filtered list back into a string and return it\n    return''.join(filtered_words)",
        "num_ids": 113
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    return''.join([word for word in words if len(word)!= K])",
        "num_ids": 60
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)",
        "num_ids": 66
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)",
        "num_ids": 81
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Splitting the given string into a list of words\n    words = test_str.split()\n\n    # Removing the words with length equal to K\n    words = [word for word in words if len(word)!= K]\n\n    # Joining the list of remaining words into a string\n    result =''.join(words)\n\n    return result",
        "num_ids": 103
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n    # Creating a new list to store words with length less than K\n    new_words = []\n    # Looping through all the words in the list\n    for word in words:\n        # Checking if the length of the word is less than K\n        if len(word) < K:\n            # If yes, then appending it to the new list\n            new_words.append(word)\n    # Joining the words in the new list with a space separator\n    new_string =''.join(new_words)\n    # Returning the new string\n    return new_string",
        "num_ids": 169
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into a list of words\n    new_words = [] # create an empty list to store the words with length!= K\n    for word in words:\n        if len(word)!= K: # if the length of the word is not equal to K\n            new_words.append(word) # add the word to the new list\n    new_str =''.join(new_words) # join the words in the new list with a space in between\n    return new_str # return the new string without the words with length == K",
        "num_ids": 155
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)",
        "num_ids": 66
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)",
        "num_ids": 70
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n    else:\n        return None\n",
        "num_ids": 83
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if len(result) == 0:\n        return None\n    else:\n        return result",
        "num_ids": 95
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match_list = []\n    match_object = re.finditer(pattern, text)\n    for match in match_object:\n        match_list.append((match.group(), match.start()))\n    return match_list if match_list else None",
        "num_ids": 99
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments, text and pattern, and returns a list of tuples containing the\n    occurrence and position of the substring within the string. If there is no match, it returns None.\n    '''\n    match = re.findall(pattern, text)\n    if not match:\n        return None\n    result = []\n    for i in match:\n        result.append((text.find(i), i))\n    return result",
        "num_ids": 104
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function finds the occurrence and position of the substrings within a string.\n    It returns None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.start(), match.end()-1))\n    return result",
        "num_ids": 85
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if len(result) == 0:\n        return None\n    else:\n        return result",
        "num_ids": 75
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        result.append((start, end))\n    if result:\n        return result\n    else:\n        return None",
        "num_ids": 103
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if matches:\n        return matches\n    else:\n        return None",
        "num_ids": 69
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    if matches:\n        return [(match.group(), match.start()) for match in matches]\n    else:\n        return None",
        "num_ids": 90
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return {\"occurrence\": match.group(), \"position\": match.span()}\n    else:\n        return None",
        "num_ids": 83
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and checks whether every odd index contains odd numbers of the list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 69
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n\n    Args:\n    nums: a list of integers\n\n    Returns:\n    A boolean value indicating whether every odd index contains odd numbers of the given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 95
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0 or test_str[i-1] not in vowels:\n                if i == len(test_str)-1 or test_str[i+1] not in vowels:\n                    count += 1\n                    \n    return count",
        "num_ids": 118
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Counts those characters in the given string that have vowels as their neighbors.\n\n    Args:\n        test_str (str): The input string to analyze.\n\n    Returns:\n        int: The number of neighbors with vowels.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1].lower() in vowels:\n            if i < len(test_str) - 1 and test_str[i+1].lower() in vowels:\n                count += 1\n    return count",
        "num_ids": 162
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    \n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    This function takes a string as input and counts those characters which have vowels as their neighbors.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    # Loop through the string and check for vowel neighbors\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n            \n    return count",
        "num_ids": 126
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count",
        "num_ids": 105
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "num_ids": 110
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            sum += arr[i]\n    return sum",
        "num_ids": 70
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_non_repeated = sum(unique_elements)\n    return sum_non_repeated",
        "num_ids": 60
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty dictionary to keep track of non-repeated elements\n    non_repeated_dict = {}\n\n    # iterate through the list and add non-repeated elements to the dictionary\n    for element in arr:\n        if element not in non_repeated_dict:\n            non_repeated_dict[element] = 1\n\n    # calculate the sum of non-repeated elements\n    non_repeated_sum = sum(non_repeated_dict.keys())\n\n    return non_repeated_sum",
        "num_ids": 131
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements.\n    \"\"\"\n    unique_elements = set(arr)\n    non_repeated_sum = 0\n    for element in unique_elements:\n        non_repeated_sum += element\n    return non_repeated_sum",
        "num_ids": 71
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum = 0\n    for element in unique_elements:\n        sum += element\n    return sum",
        "num_ids": 60
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    # Loop through the list and update the frequency of each element\n    for i in arr:\n        freq[i] = freq.get(i, 0) + 1\n    # Loop through the dictionary and sum the elements that have frequency 1\n    result = 0\n    for i in freq:\n        if freq[i] == 1:\n            result += i\n    return result",
        "num_ids": 108
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # initialize the sum variable to 0\n    sum_of_unique = 0\n    # iterate through the unique set and add the elements to the sum variable\n    for element in unique_set:\n        sum_of_unique += element\n    return sum_of_unique",
        "num_ids": 108
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    freq_dict = {}\n\n    for num in arr:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n\n    sum_non_repeated = 0\n    for num in freq_dict:\n        if freq_dict[num] == 1:\n            sum_non_repeated += num\n\n    return sum_non_repeated",
        "num_ids": 119
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    This function will return the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the count of each element in the list.\n    count_dict = {}\n\n    # Iterate over the elements in the list and count the occurrences of each element.\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Create a new list to store the non-repeated elements.\n    non_repeated_list = []\n\n    # Iterate over the keys in the count_dict and append the keys to the non_repeated_list with count 1.\n    for key in count_dict.keys():\n        if count_dict[key] == 1:\n            non_repeated_list.append(key)\n    \n    # Calculate the sum of the non-repeated elements and return it.\n    return sum(non_repeated_list)",
        "num_ids": 212
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Returns the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_non_repeated = sum(unique_elements)\n    return sum_non_repeated",
        "num_ids": 55
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        result.append([elem[1] for elem in g])\n    return result",
        "num_ids": 87
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(list1)\n\n    # Create a generator object to group consecutive duplicates\n    grouped_list = groupby(sorted_list)\n\n    # Create a list of sublists with consecutive duplicates packed into sublists\n    packed_list = [list(group) for key, group in grouped_list]\n\n    return packed_list",
        "num_ids": 119
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for key, group in groupby(lst):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result",
        "num_ids": 72
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0]-x[1]):\n        result.append([elem for elem, _ in g])\n    return result",
        "num_ids": 85
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group consecutive duplicates using itertools.groupby()\n    grouped_list = [(k, len(list(g))) for k, g in groupby(list1)]\n    # iterate over grouped list to create sublists\n    result = []\n    sublist = []\n    for item in grouped_list:\n        if item[1] == 1:\n            sublist.append(item[0])\n        else:\n            sublist.extend([item[0]]*item[1])\n            result.append(sublist)\n            sublist = []\n    # append any remaining sublist to result list\n    if sublist:\n        result.append(sublist)\n    return result",
        "num_ids": 179
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as an argument and packs consecutive duplicates into sublists.\n    \"\"\"\n    result = []\n    for k, g in groupby(lst):\n        sublist = list(g)\n        if len(sublist) > 1:\n            result.append(sublist)\n        else:\n            result.append(sublist[0])\n    return result",
        "num_ids": 98
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as an input and returns a new list with consecutive duplicates\n    of a given list elements packed into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(lst):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(key)\n    return result",
        "num_ids": 102
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], group))\n        if len(group) > 1:\n            result.append(group)\n    return result",
        "num_ids": 101
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result",
        "num_ids": 95
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(enumerate(list1), lambda x: x[0] - x[1])\n    result = [list(map(lambda x: x[1], group)) for _, group in groups]\n    return result",
        "num_ids": 89
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. \n    The function should return a dictionary, where every list is turned to a tuple, \n    and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists",
        "num_ids": 140
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1) + 1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists.append(sublist)\n    counts = {}\n    for sublist in sublists:\n        counts[sublist] = list1.count(sublist)\n    return counts",
        "num_ids": 107
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    This function takes a list as input and returns a dictionary containing all the unique sublists and their count in the list.\n    \"\"\"\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Loop through all the sublists of length i to n\n    for i in range(len(list1)+1):\n        for j in range(len(list1)-i+1):\n            sublist = tuple(list1[j:j+i])\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n    \n    return sublist_count",
        "num_ids": 151
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    # convert the list to a set of tuples to remove duplicates\n    unique_tuples = set(tuple(sublst) for sublst in lst)\n    \n    # count the occurrences of each tuple\n    count = {t: lst.count(list(t)) for t in unique_tuples}\n    \n    return count",
        "num_ids": 72
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        else:\n            count_dict[sublist_tuple] += 1\n    return count_dict",
        "num_ids": 128
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            count_dict[sublist] = count_dict.get(sublist, 0) + 1\n    return count_dict",
        "num_ids": 82
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    '''\n    This function returns a dictionary, where every sublist is converted to a tuple and the value of the tuple is the number of its occurrences in the given list.\n    '''\n    d = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = tuple(lst[i:j])\n            if sub_lst not in d:\n                d[sub_lst] = 1\n            else:\n                d[sub_lst] += 1\n    return d",
        "num_ids": 124
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for sublist in lst:\n        counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    return counts",
        "num_ids": 47
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    unique_lists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = 1\n            else:\n                unique_lists[sublist] += 1\n    return unique_lists",
        "num_ids": 93
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            count[sublist] = count.get(sublist, 0) + 1\n    return count",
        "num_ids": 74
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                result.append(combo)\n    return result",
        "num_ids": 123
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum([t[1] for t in test_list])\n    comb_list = []\n    for i in range(1, total_sum+1):\n        for comb in combinations(test_list, i):\n            if sum([t[1] for t in comb]) == i:\n                comb_list.append(comb)\n    return comb_list",
        "num_ids": 154
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for tup in combinations(test_list, i):\n            if sum(tup) == 15:\n                print(tup)",
        "num_ids": 113
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sum_dict[(test_list[i][0] + test_list[j][0])] = (test_list[i][1], test_list[j][1])\n    print(sum_dict)\n    result = []\n    for i in sum_dict:\n        result.append(sum_dict[i])\n    print(result)\n    for i in range(len(result)):\n        for j in range(i+1, len(result)):\n            if result[i][0] < result[j][0]:\n                result[i], result[j] = result[j], result[i]\n            elif result[i][0] == result[j][0]:\n                if result[i][1] > result[j][1]:\n                    result[i], result[j] = result[j], result[i]\n    return result",
        "num_ids": 286
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n    \n    # Loop through each tuple in the given tuple list\n    for tup in test_list:\n        # Calculate the sum of the tuple\n        sum_of_tup = sum(tup)\n        \n        # Calculate all possible combinations of tuples with the given sum\n        combinations_of_tup = combinations(test_list, sum_of_tup)\n        \n        # Loop through each combination and append it to the combinations_list\n        for comb in combinations_of_tup:\n            combinations_list.append(comb)\n    \n    # Return the combinations_list\n    return combinations_list",
        "num_ids": 200
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function finds the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result",
        "num_ids": 89
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(2, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result",
        "num_ids": 91
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function finds the combinations of sums with tuples in the given tuple list.\n    '''\n    # Find all possible combinations of sums with tuples in the given tuple list\n    all_combinations = []\n    for i in range(1, len(test_list)+1):\n        all_combinations += combinations(test_list, i)\n    \n    # Find all unique combinations of sums with tuples in the given tuple list\n    unique_combinations = []\n    for combination in all_combinations:\n        if sum(combination) == 0:\n            unique_combinations.append(combination)\n    \n    return unique_combinations",
        "num_ids": 148
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in combinations(test_list[i] + test_list[j], 2):\n                print(k)",
        "num_ids": 94
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for c in combinations(test_list, i):\n            if sum(c) == 0:\n                result.append(c)\n    return result",
        "num_ids": 91
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1\n            if n//i!= i: \n                count += 1\n    return count \n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0: \n    print(\"The number of divisors is even.\") \nelse: \n    print(\"The number of divisors is odd.\")",
        "num_ids": 126
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nif count_divisors(5) % 2 == 0:\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")",
        "num_ids": 93
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            count += 2\n    if n**0.5 == int(n**0.5): \n        count -= 1\n    return count",
        "num_ids": 127
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")",
        "num_ids": 132
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n\ndef is_even_divisor(n):\n    if count_divisors(n) % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    This function takes an integer as input and returns the count of its divisors.\n    '''\n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    return count",
        "num_ids": 72
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n    if n**0.5 == int(n**0.5) and n%int(n**0.5) == 0: \n        count -= 1 \n    return count % 2 == 0",
        "num_ids": 146
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count += 1\n    if n**0.5 == int(n**0.5) : \n        count -= 1\n    return count ",
        "num_ids": 128
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(f\"{n} has even number of divisors\")\n    else:\n        print(f\"{n} has odd number of divisors\")",
        "num_ids": 89
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(f\"{n} has an even number of divisors.\")\n    else:\n        print(f\"{n} has an odd number of divisors.\")",
        "num_ids": 90
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum += sum(arr[i:j])\n    return sum",
        "num_ids": 79
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i) % 2!= 0:\n                subarray = arr[i:j+1]\n                result += sum(subarray)\n    \n    return result",
        "num_ids": 118
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays of the input array.\n    \"\"\"\n    # Initialize sum to zero\n    sum = 0\n    # Iterate over all possible odd length subarrays\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            # Check if subarray length is odd\n            if (j-i) % 2 == 1:\n                # If length is odd, add the subarray sum to the total sum\n                sum += sum(arr[i:j])\n    # Return the total sum of odd length subarrays\n    return sum",
        "num_ids": 145
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            total_sum += sum(arr[i:j])\n    return total_sum",
        "num_ids": 111
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    ans = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            ans += sum(arr[i:j])\n\n    return ans",
        "num_ids": 61
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Given an array of integers, find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    res = 0\n    \n    # Iterate over all possible subarray lengths\n    for i in range(1, n, 2):\n        # Iterate over all possible starting positions of subarrays of length i\n        for j in range(n - i + 1):\n            # Compute the sum of the subarray and add it to the result\n            subarr_sum = sum(arr[j:j+i])\n            res += subarr_sum\n    \n    return res",
        "num_ids": 133
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Finds the sum of all odd length subarrays in an array.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n    return sum",
        "num_ids": 79
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function will return the sum of all odd length subarrays in the given array.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    \n    # Loop through all possible odd length subarrays\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            sum += sum(arr[j:j+i])\n    \n    return sum",
        "num_ids": 97
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n\n    Args:\n    arr: A list of integers\n\n    Returns:\n    An integer which represents the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            temp_sum = 0\n            for k in range(i, j):\n                temp_sum += arr[k]\n            if (j - i) % 2!= 0:\n                sum += temp_sum\n    return sum",
        "num_ids": 146
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if (j - i) % 2!= 0: # checking if the subarray length is odd\n                total_sum += sum(arr[i:j+1]) # adding the sum of the subarray to the total sum\n    \n    return total_sum",
        "num_ids": 120
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "num_ids": 201
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value",
        "num_ids": 250
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "num_ids": 218
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    \"\"\"\n    # Normalize rgb values\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find the maximum and minimum values of rgb\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values of rgb\n    delta = cmax - cmin\n    \n    # Calculate the hue\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    # Calculate the saturation\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    \n    saturation = round(saturation * 100, 2)\n    \n    # Calculate the value\n    value = round(cmax * 100, 2)\n    \n    return hue, saturation, value",
        "num_ids": 283
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    :param r: Red value.\n    :param g: Green value.\n    :param b: Blue value.\n    :return: HSV color code.\n    \"\"\"\n\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else round(delta / cmax * 100)\n    value = round(cmax * 100)\n\n    return hue, saturation, value",
        "num_ids": 263
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        hue = (60 * ((b - r) / diff) + 120) % 360\n    elif cmax == b:\n        hue = (60 * ((r - g) / diff) + 240) % 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = (diff / cmax) * 100\n\n    value = cmax * 100\n\n    return round(hue, 2), round(saturation, 2), round(value, 2)",
        "num_ids": 300
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # normalize input values\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # get the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # get the difference between the max and min values\n    diff = max_val - min_val\n\n    # get the value of hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / diff) + 120) % 360\n    elif max_val == b:\n        hue = (60 * ((r - g) / diff) + 240) % 360\n\n    # get the value of saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (diff / max_val) * 100\n\n    # get the value of value (brightness)\n    value = max_val * 100\n\n    return hue, saturation, value",
        "num_ids": 317
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n\n    return hue, saturation, value",
        "num_ids": 213
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Normalize the rgb values\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Calculate minimum and maximum rgb values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Calculate the difference between max and min values\n    delta = max_val - min_val\n    \n    # Calculate the hue\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    saturation = round(saturation * 100, 1)\n    \n    # Calculate the value\n    value = round(max_val * 100, 1)\n    \n    # Return the hsv values as a tuple\n    return (hue, saturation, value)",
        "num_ids": 329
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else (delta / cmax) * 100\n\n    value = cmax * 100\n\n    return (hue, saturation, value)",
        "num_ids": 215
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    evens = [num for num in list1 if num % 2 == 0]\n    odds = [num for num in list1 if num % 2 == 1]\n    if len(evens) > 0 and len(odds) > 0:\n        product = evens[0] * odds[0]\n        return product\n    else:\n        return \"There are no even and odd numbers in the list\"",
        "num_ids": 128
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function returns the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    if even == 0:\n        return \"There are no even numbers in the list\"\n    elif odd == 0:\n        return \"There are no odd numbers in the list\"\n    else:\n        return list1[0] * list1[even - 1] * list1[-1]",
        "num_ids": 135
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    count = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_prod *= i\n            count += 1\n            if count == 2:\n                break\n        else:\n            odd_prod *= i\n            count += 1\n            if count == 2:\n                break\n    \n    return even_prod * odd_prod",
        "num_ids": 122
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return even_num * odd_num",
        "num_ids": 130
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even = list1[i]\n            break\n    \n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd = list1[i]\n            break\n    \n    if even == None or odd == None:\n        return None\n    \n    return even * odd",
        "num_ids": 130
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    even_num = 1\n    odd_num = 1\n    even_found = False\n    for num in lst:\n        if num % 2 == 0:\n            even_num *= num\n            even_found = True\n        else:\n            if even_found:\n                break\n            else:\n                odd_num *= num\n    return even_num * odd_num",
        "num_ids": 87
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return even * num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return odd * num\n    return None # If the list is empty or all numbers are even",
        "num_ids": 112
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst[::-1]:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    if even_num and odd_num:\n        return even_num * odd_num\n    else:\n        return None",
        "num_ids": 98
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even = odd = float('inf')\n    for num in list1:\n        if num % 2 == 0 and num < even:\n            even = num\n        elif num % 2 == 1 and num < odd:\n            odd = num\n    if even == float('inf') or odd == float('inf'):\n        return None\n    else:\n        return even * odd",
        "num_ids": 116
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[even_count - 1] * list1[odd_count - 1]\n    else:\n        return \"List should have at least one even and one odd number\"",
        "num_ids": 145
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes in a string of a tuple and returns the integer tuple.\n    '''\n    # Split the string into a list of strings\n    lst = test_str.strip('()').split(',')\n    \n    # Convert the list of strings to a list of integers\n    int_lst = [int(i.strip()) for i in lst]\n    \n    # Convert the list of integers to a tuple of integers\n    int_tup = tuple(int_lst)\n    \n    return int_tup",
        "num_ids": 112
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    str_list = test_str[1:-1].split(',')\n    \n    # Convert the strings to integers and create a new tuple with the integers\n    int_tuple = tuple(int(s.strip()) for s in str_list)\n    \n    # Return the integer tuple\n    return int_tuple",
        "num_ids": 99
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string at the commas\n    tuple_str_list = test_str.split(',')\n\n    # Convert each string element to an integer and store it in a new list\n    int_list = []\n    for element in tuple_str_list:\n        int_list.append(int(element))\n\n    # Convert the list to a tuple and return it\n    return tuple(int_list)",
        "num_ids": 111
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to tuple\n    tuple_str = tuple(map(int, test_str[1:-1].split(',')))\n    return tuple_str",
        "num_ids": 61
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    # Split the string at each comma\n    parts = test_str.split(',')\n    # Convert the parts to integers and return as a tuple\n    return tuple(int(part.strip()) for part in parts)",
        "num_ids": 68
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")\n    int_tuple = tuple(map(int, tuple_str))\n    return int_tuple",
        "num_ids": 67
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    test_list = test_str.split(\", \")\n    # Convert the string elements to integer\n    integer_list = [int(i) for i in test_list]\n    # Convert the list to tuple\n    integer_tuple = tuple(integer_list)\n    # Return the tuple\n    return integer_tuple",
        "num_ids": 102
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by comma and strip white space\n    str_list = [x.strip() for x in test_str.split(',')]\n    \n    # Convert the string list to integer tuple\n    int_tuple = tuple(int(x) for x in str_list)\n    \n    return int_tuple",
        "num_ids": 91
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    # Convert the strings to integers and store them in a list\n    int_list = [int(num) for num in str_list]\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)",
        "num_ids": 100
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by comma and convert each element to integer\n    int_tuple = tuple(int(i) for i in test_str.split(','))\n    return int_tuple",
        "num_ids": 68
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where x should be inserted in a\n    i = bisect.bisect_right(a, x)\n    \n    # If x is already in a, return the index where it was found\n    if i < len(a) and a[i] == x:\n        return i\n    \n    # If x is greater than all elements in a, return the length of a\n    elif i == len(a):\n        return len(a)\n    \n    # Otherwise, return the index where x should be inserted\n    else:\n        return i",
        "num_ids": 148
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    if a[i] == x:\n        return i\n    return i + 1",
        "num_ids": 81
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb{3}'\n    return bool(re.search(pattern, text))",
        "num_ids": 37
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function takes a string as input and matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\bb{3}')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 80
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(bb){2}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a.*b.*b.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b{3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 66
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an 'a' followed by three 'b'.\n    '''\n    pattern = r'a\\bb{3}'\n    return re.search(pattern, text)",
        "num_ids": 57
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function creates a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 43
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, tuple(test_list))",
        "num_ids": 47
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple",
        "num_ids": 54
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple",
        "num_ids": 54
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every even index contains even numbers.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 67
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every even index contains an even number, otherwise False.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 71
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Check whether every even index contains even numbers in a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n    :param nums: A list of integers.\n    :return: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 88
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)",
        "num_ids": 70
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function removes tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            result.append(item)\n        else:\n            result.extend(item)\n    return tuple(result)",
        "num_ids": 69
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function removes tuples from the given tuple.\n    \"\"\"\n    result_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            result_tup.append(i)\n        else:\n            result_tup.extend(i)\n    return tuple(result_tup)",
        "num_ids": 75
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return tuple(result)",
        "num_ids": 59
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            new_tup += remove_nested(elem)\n        else:\n            new_tup += (elem,)\n    return new_tup",
        "num_ids": 75
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            new_tup += remove_nested(elem)\n        else:\n            new_tup += (elem,)\n    return new_tup",
        "num_ids": 75
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            result.append(elem)\n        else:\n            for subelem in elem:\n                if not isinstance(subelem, tuple):\n                    result.append(subelem)\n    return tuple(result)",
        "num_ids": 88
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            result.append(i)\n        else:\n            result.extend(remove_nested(i))\n    return tuple(result)",
        "num_ids": 74
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)",
        "num_ids": 62
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = ()\n    for i in test_tup:\n        if type(i) is tuple:\n            i = remove_nested(i)\n        result_tup += (i,)\n    return result_tup",
        "num_ids": 71
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_lists(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list: \n        if type(element) == list: \n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the total number of lists present in the input list.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 67
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    x (int): The element whose last position is to be found.\n\n    Returns:\n    int: The last position of the element in the array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    if arr[low] == x:\n        return low\n    else:\n        return -1",
        "num_ids": 180
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the index of the last occurrence of the element x in the sorted array arr, or -1 if x is not in arr.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Look for the last occurrence to the right\n        elif arr[mid] < x:\n            left = mid + 1\n        else:  # arr[mid] > x\n            right = mid - 1\n            \n    return result",
        "num_ids": 144
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function will return the last position of an element x in a sorted array arr.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result",
        "num_ids": 116
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Returns the last position of an element in a sorted array.\n    If the element is not found, it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "num_ids": 144
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if left == len(arr) or arr[left]!= x:\n        return -1\n    else:\n        return left",
        "num_ids": 109
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 131
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
        "num_ids": 116
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Returns the last position of an element in a sorted array.\n    If the element is not in the array, returns -1.\n    '''\n    if x in arr:\n        return arr.index(x) + len(arr) - 1\n    else:\n        return -1",
        "num_ids": 68
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the last position of the element x in the sorted array arr.\n    If the element x is not present in the array, it returns -1.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 140
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n        x (int): The element to search for.\n\n    Returns:\n        int: The last position of x in the list.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "num_ids": 164
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a\\w*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 54
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'  # pattern to match string with 'a' followed by anything and ending in 'b'\n    match = re.search(pattern, text)  # search for pattern in text\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 103
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\Aa.*b\\Z' # pattern to match the string with 'a' followed by anything and ending in 'b'\n    match = re.search(pattern, text) # search for pattern in the text\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 102
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 52
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"^a.*b$\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum",
        "num_ids": 48
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum",
        "num_ids": 47
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes in a dictionary as an argument and returns the sum of all items in the dictionary.\n    \"\"\"\n    sum = 0\n    for key in dictionary.keys():\n        sum += dictionary[key]\n    return sum",
        "num_ids": 56
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum",
        "num_ids": 47
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "num_ids": 48
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n",
        "num_ids": 49
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum",
        "num_ids": 47
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum",
        "num_ids": 47
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as an input and returns the sum of all items in the dictionary.\n    '''\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum",
        "num_ids": 54
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())",
        "num_ids": 35
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "num_ids": 60
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum",
        "num_ids": 67
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "num_ids": 60
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1, n+1, 2))",
        "num_ids": 48
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum",
        "num_ids": 71
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two arguments, l and r, and returns the sum of all odd natural numbers within the range l to r.\n    '''\n    total_sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            total_sum += i\n    return total_sum",
        "num_ids": 81
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    \n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    \n    return sum",
        "num_ids": 69
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum",
        "num_ids": 67
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)//2\n\nprint(\"The sum of all odd natural numbers within the range 1 to\", n, \"is:\", sum_odd(n))",
        "num_ids": 71
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through range from 1 to n, incrementing by 2 each time\n    for i in range(1, n, 2):\n        # add i to sum\n        sum += i\n        \n    # return sum\n    return sum",
        "num_ids": 94
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes in an array as an argument and returns the sum of the elements in the array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "num_ids": 50
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "num_ids": 42
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function returns the sum of an array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 27
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all its elements.\n    '''\n    return sum(arr)",
        "num_ids": 34
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 36
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(arr):\n    \"\"\"\n    This function takes an array as input and returns its sum.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 29
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "num_ids": 42
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total",
        "num_ids": 49
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 36
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # Create a bit mask to extract the d rightmost bits of n\n    mask = (2**d - 1) << (32 - d)\n\n    # Extract the d rightmost bits of n using the bit mask\n    right_bits = n & mask\n\n    # Shift the d rightmost bits of n to the left by d bits\n    left_bits = n >> d\n\n    # Return the bits shifted to the left and the d rightmost bits extracted earlier\n    return left_bits | right_bits",
        "num_ids": 115
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments: n (the number to be rotated) and d (the number of bits to rotate).\n    It returns the rotated number.\n    '''\n    mask = (1 << d) - 1  # creates a mask with d 1s\n    n = ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF  # left shift n by d bits and then right shift by (32 - d) bits\n    return n & mask  # applies the mask to the rotated number\n",
        "num_ids": 124
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    # Convert the number to binary and add leading zeros if necessary\n    binary_num = bin(n)[2:].zfill(32)\n    \n    # Split the binary number into two halves\n    left_half = binary_num[:d]\n    right_half = binary_num[d:]\n    \n    # Combine the right half with the left half and reverse the string\n    rotated_num = right_half + left_half[::-1]\n    \n    # Convert the rotated binary number back to an integer\n    rotated_num = int(rotated_num, 2)\n    \n    return rotated_num",
        "num_ids": 134
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments:\n    n: a 32-bit integer to be rotated\n    d: an integer denoting the number of bits to rotate\n    \n    The function returns the rotated number as an integer.\n    '''\n\n    # Convert n to binary string\n    n_bin = bin(n)[2:]\n\n    # Pad n_bin with leading zeros if necessary\n    n_bin = n_bin.zfill(32)\n\n    # Slice the string to obtain the rightmost d bits\n    right_d_bits = n_bin[-d:]\n\n    # Pad the string with leading zeros if necessary\n    right_d_bits = right_d_bits.zfill(32)\n\n    # Slice the string to obtain the remaining bits\n    left_bits = n_bin[:-d]\n\n    # Concatenate the two slices and convert back to an integer\n    rotated_n = int(left_bits + right_d_bits, 2)\n\n    return rotated_n",
        "num_ids": 215
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary string\n    binary_str = bin(n)[2:]\n    \n    # Pad the string with zeros to make it 32 bits long\n    padded_str = binary_str.zfill(32)\n    \n    # Convert the string to a list of bits\n    bits = [int(i) for i in padded_str]\n    \n    # Rotate left by d bits\n    rotated_bits = bits[d:] + bits[:d]\n    \n    # Convert the list of bits back to a string\n    rotated_str = ''.join([str(i) for i in rotated_bits])\n    \n    # Convert the string to an integer\n    rotated_n = int(rotated_str, 2)\n    \n    return rotated_n",
        "num_ids": 193
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments: n and d. n is the 32 bit number that we want to rotate left by d bits.\n    The function returns the rotated number.\n    '''\n    # First, we extract the d least significant bits from the number\n    mask = (1 << d) - 1\n    shifted = n & mask\n    # Next, we shift the remaining bits to the right by d bits\n    rotated = (n >> d) | (shifted << (32 - d))\n    return rotated",
        "num_ids": 119
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates the bits of a number n to the left by d bits.\n    '''\n    # convert n to binary and get the length of the binary string\n    n_bin = bin(n)[2:]\n    n_len = len(n_bin)\n\n    # pad the binary string with zeros if necessary\n    if n_len < 32:\n        n_bin = '0' * (32 - n_len) + n_bin\n\n    # rotate the binary string d bits to the left\n    rotated_bin = n_bin[d:] + n_bin[:d]\n\n    # convert the rotated binary string back to an integer\n    rotated_int = int(rotated_bin, 2)\n\n    return rotated_int",
        "num_ids": 169
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    mask = (1 << 32) - 1\n    n = n & mask  # masking the upper bits\n    d = d & 31  # only 5 least significant bits are used as offset\n    if d == 0:\n        return n\n    return ((n << d) | (n >> (32 - d))) & mask  # rotate left d bits using bitwise operators",
        "num_ids": 95
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # left rotate d bits\n    n = (n << d) | (n >> (32 - d))\n    \n    # return the rotated number\n    return n",
        "num_ids": 74
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    # We want to get the bits d to 31, so we need to get all the bits except the first d bits\n    shift = (32 - d)\n    # We need to shift the first d bits to the right by d bits, so we can rotate them to the left\n    shifted_mask = mask >> shift\n    # We need to get all the bits from the first d bits to the end of the number, so we can add them back to the rotated bits\n    shifted_n = n << shift\n    # We need to add the rotated bits back to the original number\n    result = shifted_n | shifted_mask\n    return result",
        "num_ids": 189
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function removes all whitespaces from a string.\n\n    Parameters:\n        text (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 72
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all spaces from a given string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 42
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 42
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 42
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the count of the numbers that are equal.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 72
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes in three integer values as input and returns the count of the number of equal numbers in the input.\n    '''\n    count = 0\n    \n    if x == y == z:\n        count += 1\n        \n    if x == y and y == z:\n        count += 1\n    \n    if x == z and y == z:\n        count += 1\n    \n    if x == y and x!= z:\n        count += 1\n    \n    if x == z and x!= y:\n        count += 1\n    \n    if y == z and y!= x:\n        count += 1\n    \n    if x == y and y == z and x!= z:\n        count += 1\n    \n    if x == z and y == z and x!= y:\n        count += 1\n    \n    if x == y and y == z and x == z:\n        count += 1\n    \n    return count",
        "num_ids": 195
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y and y!= z:\n        count += 1\n    elif x == z and y!= z:\n        count += 1\n    elif y == z and x!= y:\n        count += 1\n    elif x!= y and y!= z:\n        count += 1\n    else:\n        count += 3\n\n    return count",
        "num_ids": 126
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    else:\n        pass\n    return count",
        "num_ids": 89
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif y == z:\n        return 2\n    elif x == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 86
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count = 3\n    elif x == y or y == z or z == x:\n        count = 2\n    elif x == y and y!= z:\n        count = 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    elif x!= y and y!= z and z!= x:\n        return 0\n    else:\n        return 1",
        "num_ids": 90
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            continue\n        else:\n            return i+1",
        "num_ids": 46
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    start, end = 0, n-1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n    return end\n",
        "num_ids": 72
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    \n    # Find the pivot element\n    pivot = arr[0]\n    start = 1\n    end = n - 1\n    \n    while start <= end:\n        if arr[start] < pivot:\n            start += 1\n        elif arr[end] > pivot:\n            end -= 1\n        else:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n            \n    # After the above loop, pivot is at its correct position\n    # Let's move it to the start of the array\n    arr[0], arr[end] = arr[end], arr[0]\n    \n    # Now, arr[0:end+1] is sorted. \n    # Let's check if arr[end+1:] is sorted or not\n    sorted_flag = True\n    for i in range(end):\n        if arr[i] > arr[i+1]:\n            sorted_flag = False\n            break\n            \n    if sorted_flag:\n        return end\n    else:\n        return end + 1 + count_rotation(arr[end+1:])",
        "num_ids": 259
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    arr = arr + arr   # Concatenate the array with itself\n    l, r = 0, n-1\n    count = 0\n    \n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] >= arr[l]:   # Left half is sorted\n            l = mid + 1\n        else:   # Right half is sorted\n            r = mid - 1\n            count += n - mid   # Add the number of elements in the unsorted right half\n    \n    return count % n   # Return the number of rotations",
        "num_ids": 134
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # if array is sorted, return 0\n    if all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return 0\n    \n    # Find the point of rotation\n    left, right = 0, n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    # Now, arr[left...right] contains sorted elements\n    # We need to find the number of rotations required to sort the entire array\n    cnt = 0\n    while arr[left] > arr[0]:\n        left += 1\n        cnt += 1\n        \n    return cnt",
        "num_ids": 172
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        if i == n-1 or arr[i] < arr[i+1]:\n            continue\n        \n        temp = arr[i]\n        j = i\n        \n        while j > 0 and arr[j-1] > temp:\n            arr[j] = arr[j-1]\n            j -= 1\n            \n        arr[j] = temp\n        count += 1\n        \n    return count",
        "num_ids": 108
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n            \n        count += 1\n        \n    return count",
        "num_ids": 78
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    mid = n // 2\n    if arr[0] <= arr[mid]:\n        return count_rotation(arr[mid:])\n    else:\n        return mid + count_rotation(arr[:mid]) + 1\n        \n",
        "num_ids": 74
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                # print(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]!= i+1:\n            break\n        count += 1\n    return count",
        "num_ids": 110
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    \n    # Find the rotation point\n    for i in range(n):\n        if i < n-1 and arr[i] > arr[i+1]:\n            break\n    \n    # If all elements are in order, no rotation is needed\n    if i == n-1:\n        return 0\n    \n    # Count the number of swaps needed to rotate the array\n    count = 0\n    j = 0\n    \n    while arr[i]!= arr[j]:\n        j = 0\n        while arr[i] > arr[j]:\n            j += 1\n        count += 1\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    return count",
        "num_ids": 156
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n) :\n    '''\n    This function takes a number as input and returns True if the number is a perfect square, else False.\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        i = 1\n        while i*i <= n:\n            i += 1\n        return i*i == n",
        "num_ids": 58
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    x = n // 2\n    y = (x + n // x) // 2\n    while (y - x) > 1:\n        x = y\n        y = (x + n // x) // 2\n    return y * y == n\n",
        "num_ids": 83
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is a perfect square, else False.\n    \"\"\"\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n",
        "num_ids": 65
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. \n    \"\"\"\n    return math.sqrt(n) == int(math.sqrt(n))",
        "num_ids": 52
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    root = math.sqrt(n)\n    return root == int(root)",
        "num_ids": 31
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n*sqrt_n == n",
        "num_ids": 59
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    A function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Calculate the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    \n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer as input and returns True if it is a perfect square, and False otherwise.\n    '''\n    if n < 0:\n        return False\n    else:\n        x = n // 2\n        y = n\n\n        while y > x:\n            x = (x + y) // 2\n            y = n - x * x\n\n        return x * x == n",
        "num_ids": 92
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 53
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the product of all numbers in the list is even, otherwise it returns False.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 78
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "num_ids": 56
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = float('-inf')\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_list = [lst]\n            max_sum = lst_sum\n        elif lst_sum == max_sum:\n            max_list.append(lst)\n    return max_list",
        "num_ids": 115
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 85
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n\n    return max_list",
        "num_ids": 92
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    for i in range(1, len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list",
        "num_ids": 110
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n\n    return max_list",
        "num_ids": 92
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    \n    return max_list",
        "num_ids": 92
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = [l]\n        elif sum(l) == max_sum:\n            max_list.append(l)\n    return max_list",
        "num_ids": 107
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return [max_list]",
        "num_ids": 87
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "num_ids": 88
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list",
        "num_ids": 92
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    max_count = 0\n    \n    # Loop through the string\n    for i in range(len(test_str)):\n        # Check if current character is uppercase\n        if test_str[i].isupper():\n            # If it is, increment count\n            count += 1\n        else:\n            # If it isn't, check if count is greater than max_count\n            if count > max_count:\n                # If it is, update max_count\n                max_count = count\n            # Reset count to 0\n            count = 0\n    \n    # Check if there is a run of uppercase characters at the end of the string\n    if count > max_count:\n        max_count = count\n    \n    # Return the maximum run of uppercase characters\n    return max_count",
        "num_ids": 197
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run",
        "num_ids": 105
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Find maximum run of uppercase characters in the given string.\n\n    :param test_str: The input string.\n    :return: The maximum run of uppercase characters.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run",
        "num_ids": 139
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        max_run = max(max_run, current_run)\n    return max_run",
        "num_ids": 106
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, increment the current run count\n            curr_run += 1\n        else:\n            # If it isn't, check if the current run count is greater than the maximum run count\n            if curr_run > max_run:\n                # If it is, update the maximum run count\n                max_run = curr_run\n            # Reset the current run count to 0\n            curr_run = 0\n    \n    # Check if the last run count is greater than the maximum run count\n    if curr_run > max_run:\n        max_run = curr_run\n    \n    return max_run",
        "num_ids": 216
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run",
        "num_ids": 98
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, increment the current run\n        if test_str[i].isupper():\n            current_run += 1\n        # If the character is lowercase or not a letter, reset the current run\n        else:\n            current_run = 0\n        \n        # If the current run is greater than the maximum run, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run",
        "num_ids": 176
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    max_count = 0\n    prev_is_uppercase = False\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if not prev_is_uppercase:\n                count = 1\n            else:\n                count += 1\n            prev_is_uppercase = True\n        else:\n            prev_is_uppercase = False\n\n        if count > max_count:\n            max_count = count\n\n    return max_count",
        "num_ids": 135
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run",
        "num_ids": 109
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 54
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a list of numbers.\n\n    Args:\n        nums: A list of numbers.\n\n    Returns:\n        The first odd number in the list, or None if there are no odd numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "num_ids": 78
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "num_ids": 66
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return \"No odd number found in the list.\"",
        "num_ids": 60
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list, or None if no odd number was found.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 83
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 48
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two arguments - a tuple of tuples and a value K.\n    It returns True if the given tuple of tuples contains the value K, else False.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 70
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False",
        "num_ids": 48
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 48
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            result = False\n            break\n    return result",
        "num_ids": 86
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the lengths of the tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Check if each element of the second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True",
        "num_ids": 130
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                print(\"The element at index\", i, \"of the second tuple is not smaller than its corresponding element in the first tuple.\")\n                return False\n        print(\"All the elements of the second tuple are smaller than their corresponding elements in the first tuple.\")\n        return True",
        "num_ids": 158
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True",
        "num_ids": 98
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                return False\n        return True",
        "num_ids": 101
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                return False\n        return True",
        "num_ids": 101
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 98
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    }
]