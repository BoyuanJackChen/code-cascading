[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple containing all elements that are present in both tuples.\n    \"\"\"\n    # Convert the tuples to sets to find the common elements\n    common_set = set(test_tup1) & set(test_tup2)\n    \n    # Convert the set back to tuple and return\n    return tuple(common_set)",
        "num_ids": 92
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a set of common elements.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    return common_elements",
        "num_ids": 61
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of common elements.\n    \"\"\"\n    # Convert tuples to sets to find common elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find common elements\n    common_elements = set1.intersection(set2)\n    return list(common_elements)",
        "num_ids": 94
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))",
        "num_ids": 54
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as inputs, and returns the common elements\n    between the two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    return set1.intersection(set2)",
        "num_ids": 72
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = set(test_tup1).intersection(test_tup2)\n    return common_elements",
        "num_ids": 59
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared_elements:\n            shared_elements.append(elem)\n    return shared_elements",
        "num_ids": 80
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            result.append(elem)\n    return result",
        "num_ids": 67
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the number is not prime,\n    otherwise it returns False.\n    '''\n\n    # Check if n is less than 2\n    if n < 2:\n        return True\n\n    # Check if n is 2 or 3\n    if n == 2 or n == 3:\n        return False\n\n    # Check if n is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n\n    # Check for all numbers from 5 to sqrt(n)\n    i = 5\n    while i <= math.sqrt(n):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n        i += 6\n\n    # If the number is not divisible by any number from 2 to sqrt(n), it is prime\n    return False",
        "num_ids": 206
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, False otherwise.\n    '''\n    if n == 1:\n        return False\n    \n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If n is not divisible by any number from 2 to the square root of n, it is a prime number\n    return False",
        "num_ids": 129
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not prime, otherwise False.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 83
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False",
        "num_ids": 86
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, False otherwise.\n    '''\n    if n <= 1: # if n is less than or equal to 1, it is not a prime number\n        return False\n    elif n == 2: # if n is equal to 2, it is a prime number\n        return True\n    elif n % 2 == 0: # if n is even, it is not a prime number\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2): # check for factors of n up to sqrt(n)\n            if n % i == 0:\n                return False\n        return True",
        "num_ids": 168
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "num_ids": 116
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as an input and returns True if the number is not prime, False otherwise.\n    \"\"\"\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Check if n is divisible by any integer from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n\n    # If n is not divisible by any integer from 2 to n-1, it is a prime number\n    return False",
        "num_ids": 127
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n        return False",
        "num_ids": 72
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    largest = [-num for num in heap]\n    return largest[::-1]",
        "num_ids": 79
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]",
        "num_ids": 87
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # Convert list into a heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums)) # Pop the largest element from heap and append to list\n    return largest_nums\n",
        "num_ids": 107
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums",
        "num_ids": 89
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for i in range(len(heap))]\n\nnums = [10, 2, 3, 1, 4, 5, 6, 7, 8, 9]\nn = 3\nprint(heap_queue_largest(nums, n))",
        "num_ids": 161
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result",
        "num_ids": 57
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 97
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 97
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Use a max heap to keep track of the n largest integers\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    \n    # Return the n largest integers in descending order\n    return sorted(heap, reverse=True)",
        "num_ids": 115
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]\n",
        "num_ids": 98
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x /= 2\n    return True",
        "num_ids": 74
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x <= 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        return (x & (x - 1)) == 0",
        "num_ids": 73
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer as an input and returns True if it is a power of two,\n    and False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x //= 2\n    return x == 1",
        "num_ids": 73
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check if the number is a power of two\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is a power of two. Otherwise, it returns False.\n    \"\"\"\n    if x <= 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True",
        "num_ids": 82
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Check whether x is a power of two or not.\n    '''\n    # check if x is a positive integer\n    if type(x)!= int or x < 0:\n        return False\n\n    # check if x is a power of two\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x //= 2\n\n    return True",
        "num_ids": 92
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer as input and returns True if it is a power of 2, False otherwise.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True",
        "num_ids": 79
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x = x // 2\n    return x == 1 or x == 0",
        "num_ids": 74
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if x is a power of 2\n    if (x & (x-1)) == 0:\n        # check if x is the leftmost bit set\n        if bin(x).count('1') == 1:\n            return True\n    return False",
        "num_ids": 92
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words that are at least 4 characters long in the text\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches",
        "num_ids": 69
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    # Find all words in the text that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return a list of these words\n    return words",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    # Find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    # Return the matches as a list\n    return matches",
        "num_ids": 63
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'  # pattern for finding words with 4 or more characters\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 78
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 68
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    # Find all words in the string\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words that are at least 4 characters long\n    return [word for word in words if len(word) >= 4]",
        "num_ids": 74
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')  # Regular expression to match words with at least 4 characters\n    return pattern.findall(text)",
        "num_ids": 81
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)  # find all words with 4 or more characters\n    return [word for word in words if len(word) >= 4]  # filter out short words",
        "num_ids": 68
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog barks at the moon. The moon is full.\"\nprint(find_char_long(text))",
        "num_ids": 102
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums",
        "num_ids": 55
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing the squares of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 60
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    elif str == str[::-1]:\n        return 0\n    else:\n        return min(find_Rotations(str[1:]), find_Rotations(str[:-1])) + 1",
        "num_ids": 99
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    #convert string to lowercase\n    str = str.lower()\n\n    #find the length of the string\n    n = len(str)\n\n    #initialize variables\n    rotations = 0\n    temp = str\n    \n    #loop through the string and rotate each character\n    for i in range(n):\n        #rotate the character\n        if str[i] == 'a':\n            str = str[i:n] + 'a' + str[0:i]\n        elif str[i] == 'b':\n            str = str[i:n] + 'b' + str[0:i]\n        elif str[i] == 'c':\n            str = str[i:n] + 'c' + str[0:i]\n        elif str[i] == 'd':\n            str = str[i:n] + 'd' + str[0:i]\n        elif str[i] == 'e':\n            str = str[i:n] + 'e' + str[0:i]\n        elif str[i] == 'f':\n            str = str[i:n] + 'f' + str[0:i]\n        elif str[i] == 'g':\n            str = str[i:n] + 'g' + str[0:i]\n        elif str[i] == 'h':\n            str = str[i:n] + 'h' + str[0:i]\n        elif str[i] == 'i':\n            str = str[i:n] + 'i' + str[0:i]\n        elif str[i] == 'j':\n            str = str[i:n] + 'j' + str[0:i]\n        elif str[i] == 'k':\n            str = str[i:n] + 'k' + str[0:i]\n        elif str[i] == 'l':\n            str = str[i:n] + 'l' + str[0:i]\n        elif str[i] =='m':\n            str = str[i:n] +'m' + str[0:i]\n        elif str[i] == 'n':\n            str = str[i:n] + 'n' + str[0:i]\n        elif str[i] == 'o':\n            str = str[i:n] + 'o' + str[0:i]\n        elif str[i] == 'p':\n            str = str[i:n] + 'p' + str[0:i]\n        elif str[i] == 'q':\n            str = str[i:n] + 'q' + str[0:i]\n        elif str[i] == 'r':\n            str = str[i:n] + 'r' + str[0:i]\n        elif str[i] =='s':\n            str = str[i:n] +'s' + str[0:i]\n        elif str[i] == 't':\n            str = str[i:n] + 't' + str[0:i]\n        elif str[i] == 'u':\n            str = str[i:n] + 'u' + str[0:i]\n        elif str[i] == 'v':\n            str = str[i:n] + 'v' + str[0:i]\n        elif str[i] == 'w':\n            str = str[i:n] + 'w' + str[0:i]\n        elif str[i] == 'x':\n            str = str[i:n] + 'x' + str[0:i]\n        elif str[i] == 'y':\n            str = str[i:n] + 'y' + str[0:i]\n        elif str[i] == 'z':\n            str = str[i:n] + 'z' + str[0:i]\n        \n        #check if the rotated string is equal to the original string\n        if str == temp:\n            #increment the number of rotations\n            rotations += 1\n        #if the rotated string is not equal to the original string, reset the string to the original string\n        else:\n            str = temp\n    \n    return rotations",
        "num_ids": 919
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(s):\n    # convert the string to a list of characters\n    chars = list(s)\n    # calculate the length of the string\n    n = len(chars)\n    # initialize the count of rotations as 0\n    count = 0\n    # iterate through the string\n    for i in range(n):\n        # if the current character is not equal to the first character, swap them\n        if chars[i]!= chars[0]:\n            # swap the current character with the first character\n            chars[i], chars[0] = chars[0], chars[i]\n            # increment the count of rotations\n            count += 1\n    # return the count of rotations\n    return count",
        "num_ids": 150
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    else:\n        # Check if the string has all the same characters\n        if str.count(str[0]) == n:\n            return -1\n    # Initialize variables\n    start = 0\n    end = n-1\n    min_rotations = n\n    # Find the minimum number of rotations\n    while start <= end:\n        if str[start] == str[end]:\n            start += 1\n            end -= 1\n        else:\n            # Swap the characters\n            str = str[:start] + str[end] + str[start+1:end+1] + str[start] + str[end+1:]\n            min_rotations += 1\n            start += 1\n            end -= 1\n    return min_rotations",
        "num_ids": 196
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n):\n        if str == str[i:] + str[:i]:\n            return i\n    return n",
        "num_ids": 43
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n < 2:\n        return 0\n    else:\n        count = 0\n        temp = str\n        while temp!= temp[n-1:]+temp[:n-1]:\n            temp = temp[1:]+temp[0]\n            count += 1\n        return count",
        "num_ids": 106
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    i = 0\n    j = n - 1\n    count = 0\n    while i <= j:\n        if str[i]!= str[j]:\n            break\n        i += 1\n        j -= 1\n        if i > j:\n            return 0\n    while i <= j:\n        if str[i] == str[j]:\n            count += 1\n            i += 1\n            j -= 1\n    return count",
        "num_ids": 123
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    count = 0\n    n = len(str)\n    while str!= str[n-1:]+str[:n-1]:\n        str = str[1:]+str[0]\n        count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    # Convert the string to a list of characters\n    s_list = list(str)\n    \n    # Find the length of the string\n    n = len(str)\n    \n    # Find the index of the first character of the string\n    index = s_list.index(min(s_list))\n    \n    # Rotate the string by the index and compare it with the original string\n    rotated = s_list[index:] + s_list[:index]\n    if rotated == s_list:\n        return 0\n    else:\n        return 1 + find_Rotations(''.join(rotated))",
        "num_ids": 159
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    if len(str) <= 1:\n        return 0\n    \n    # Get the middle character of the string and append it at the end.\n    mid = str[len(str)//2]\n    new_str = str + mid\n    \n    # Find the index of the first occurrence of the mid character in the new string.\n    start_index = new_str.find(mid)\n    \n    # If the mid character is not present in the string, then all rotations will be required.\n    if start_index == -1:\n        return len(str)\n    \n    # Find the minimum number of rotations required.\n    rotations = len(str) - start_index\n    \n    return rotations",
        "num_ids": 179
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function removes the first and last occurrence of the given character from the string.\n    '''\n    if s.count(ch) < 2: \n        return s  # If the character is not present in the string or is present only once, return the original string.\n    else: \n        return s.replace(ch,'',1).replace(ch,'',-1)  # Replace the first and last occurrences of the character with empty strings.",
        "num_ids": 105
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two arguments:\n    s (str): The string from which the character needs to be removed.\n    ch (str): The character that needs to be removed from the string.\n    \n    This function removes the first and last occurrence of the given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, \"\", 1)[1:-1]",
        "num_ids": 99
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    if ch not in s:\n        return s\n    else:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == last_occ:\n            return s[:first_occ] + s[first_occ+1:]\n        else:\n            return s[:first_occ] + s[last_occ+1:]",
        "num_ids": 93
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    if ch not in s:\n        return s\n    else:\n        return s[s.find(ch)+1:s.rfind(ch)]",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two parameters - a string and a character. \n    It removes the first and last occurrence of the given character from the string and returns the modified string.\n    '''\n    if s.count(ch) > 1:\n        s = s[:s.index(ch)] + s[s.index(ch)+1:]\n        s = s[:-len(ch)-1] + s[-len(ch):]\n    elif s.count(ch) == 1:\n        s = s[:s.index(ch)] + s[s.index(ch)+1:]\n    else:\n        s = s\n    return s",
        "num_ids": 145
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s  # If the character is not found or not found twice, return the original string\n    else:\n        return s[:s.find(ch)] + s[s.rfind(ch)+1:]",
        "num_ids": 86
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes in a string and a character as input and removes the first and last occurrence of the given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        if s[0] == ch:\n            s = s[1:]\n        if s[-1] == ch:\n            s = s[:-1]\n        return s",
        "num_ids": 89
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s  # if the character is not present in the string, return the original string\n    \n    # remove the first occurrence of the character\n    if s.startswith(ch):\n        s = s[s.index(ch) + 1:]\n    \n    # remove the last occurrence of the character\n    if s.endswith(ch):\n        s = s[:s.rindex(ch)]\n    \n    return s",
        "num_ids": 126
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of the given character from the given string.\n    \"\"\"\n    if ch in s:\n        if s.count(ch) > 1:\n            s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', 1)\n    return s",
        "num_ids": 79
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) >= 2:\n        # If the character occurs at least twice in the string\n        first_occurrence = s.find(ch)\n        last_occurrence = s.rfind(ch)\n        if first_occurrence == last_occurrence:\n            # If the first and last occurrence are the same, remove only one occurrence\n            s = s[:first_occurrence] + s[first_occurrence+1:]\n        else:\n            # If the first and last occurrence are different, remove both occurrences\n            s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    elif s.count(ch) == 1:\n        # If the character occurs only once in the string, remove both occurrences\n        first_occurrence = s.find(ch)\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n    else:\n        # If the character does not occur in the string, return the original string\n        s = s\n    return s",
        "num_ids": 267
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Get the number of rows and columns\n    rows, cols = len(M), len(M[0])\n\n    # Create a list of tuples, where each tuple contains the sum of a row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n\n    # Sort the list of tuples in ascending order based on the sum of the rows\n    row_sums.sort(key=lambda x: x[0])\n\n    # Extract the sorted rows from the list of tuples\n    sorted_rows = [row[1] for row in row_sums]\n\n    # Create a new matrix with the sorted rows\n    sorted_matrix = []\n    for row in sorted_rows:\n        sorted_matrix.append(row)\n\n    return sorted_matrix",
        "num_ids": 189
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples with each tuple containing a row and its sum\n    row_sums = [(row, sum(row)) for row in M]\n    \n    # Sort the list of tuples by the sum of the rows in ascending order\n    row_sums.sort(key=lambda x: x[1])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_rows = [row[0] for row in row_sums]\n    \n    return sorted_rows",
        "num_ids": 131
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Create a list of tuples where each tuple contains the sum of each row and its index\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n    \n    # Sort the list of tuples in ascending order based on the sum of each row\n    row_sums.sort()\n    \n    # Create a new matrix with the sorted rows based on their sum\n    sorted_matrix = []\n    for i in range(rows):\n        sorted_matrix.append(M[row_sums[i][1]])\n    \n    return sorted_matrix",
        "num_ids": 174
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n    - M (list of lists): The matrix to be sorted.\n\n    Returns:\n    - list of lists: The sorted matrix.\n    '''\n    # Create a list of tuples, where each tuple contains the sum of a row and the row itself\n    sums = [(sum(row), row) for row in M]\n\n    # Sort the list of tuples by the sum of the rows\n    sums.sort()\n\n    # Extract the rows from the sorted tuples and return them as a new matrix\n    return [t[1] for t in sums]",
        "num_ids": 141
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    \n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    \n    return M",
        "num_ids": 101
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted(M, key=sum)\n    return sorted_M",
        "num_ids": 50
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    sorted_matrix = [row for row in M]\n    sorted_matrix.sort(key=lambda row: sum(row))\n    return sorted_matrix",
        "num_ids": 81
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M",
        "num_ids": 101
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort the rows by sum in ascending order\n    M.sort(key=sum)\n    return M",
        "num_ids": 54
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input, and returns the volume of the prism.\n    '''\n    volume = (l * b * h) / 3\n    print(\"The volume of the triangular prism is:\", volume)",
        "num_ids": 74
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism and returns its volume.\n    '''\n    volume = (1/2)*l*b*h\n    return volume",
        "num_ids": 49
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, width and height of a triangular prism as inputs and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 56
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 49
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume\n",
        "num_ids": 50
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as inputs and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 62
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as arguments and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume",
        "num_ids": 57
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as input and returns the volume of the prism.\n    \"\"\"\n    volume = (l * b * h) / 3\n    return volume",
        "num_ids": 61
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 49
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 50
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'^[a-z]+(_[a-z]+)*$', text):\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'(?<!\\w)[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 55
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return bool(match)",
        "num_ids": 75
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))",
        "num_ids": 41
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore and returns True if it does and False otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"^[a-z]+(_[a-z]+)*$\"\n    return bool(re.match(pattern, text))",
        "num_ids": 44
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"([a-z])_([a-z])\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False",
        "num_ids": 55
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "num_ids": 44
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    This function returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "num_ids": 36
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes a side length of a square as input and returns its perimeter.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "num_ids": 43
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for char in string:\n        if char not in char_list:\n            char_list.append(char)\n    return char_list\n\ndef remove_chars(string, char_list):\n    '''\n    This function removes all the characters from the first string which are present in the second list.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in char_list:\n            new_string += char\n    return new_string",
        "num_ids": 134
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Removes all occurrences of the characters in remove_chars from the first string and returns the resulting list.\n    '''\n    # Create a boolean list of length NO_OF_CHARS, where each element is True if the character is in remove_chars\n    remove_flags = [char in remove_chars for char in range(NO_OF_CHARS)]\n    \n    # Convert the string to a list of characters\n    string_list = list(string)\n    \n    # Use a list comprehension to remove all characters that are flagged for removal\n    result_list = [char for i, char in enumerate(string_list) if not remove_flags[ord(char)]]\n    \n    return result_list",
        "num_ids": 158
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_list = [char for char in string if char not in chars_to_remove]\n    return str_list",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert remove_chars to a set for faster lookup\n    remove_set = set(remove_chars)\n    # Convert string to a list of characters\n    string_list = list(string)\n    # Iterate over the list and remove characters from the remove_set\n    for i in range(len(string_list)):\n        if string_list[i] in remove_set:\n            string_list[i] = ''\n    # Join the list of characters back into a string and return it\n    return ''.join(string_list)",
        "num_ids": 145
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string, chars_to_remove):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    # convert the string to a list of characters\n    string_list = list(string)\n    \n    # convert the chars to remove to a set for faster lookups\n    chars_to_remove_set = set(chars_to_remove)\n    \n    # remove characters from the list\n    for i in range(len(string_list)-1, -1, -1):\n        if string_list[i] in chars_to_remove_set:\n            string_list.pop(i)\n    \n    # convert the list back to a string and return\n    return \"\".join(string_list)\n",
        "num_ids": 159
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Removes characters in remove_chars from the string and returns the resulting list.\n    '''\n    char_set = set(remove_chars)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return result",
        "num_ids": 74
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_chars(string, chars):\n    '''\n    This function removes all the characters present in the second string from the first string.\n    '''\n    # convert the string to a list of characters\n    string_list = list(string)\n    \n    # create a boolean list to store the presence of each character in the second string\n    present = [False] * NO_OF_CHARS\n    for char in chars:\n        present[ord(char)] = True\n    \n    # remove all characters from the first string which are present in the second string\n    i = 0\n    while i < len(string_list):\n        if present[ord(string_list[i])]:\n            string_list.pop(i)\n        else:\n            i += 1\n    \n    # convert the list back to a string and return it\n    return ''.join(string_list)",
        "num_ids": 176
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_chars(s1, s2):\n    '''\n    This function takes two strings as input and removes the characters present in the second string from the first string.\n    '''\n\n    # create a boolean array to mark characters to be removed\n    to_remove = [False] * NO_OF_CHARS\n\n    # mark characters to be removed in the second string\n    for char in s2:\n        to_remove[ord(char)] = True\n\n    # create a new string with characters from the first string that are not to be removed\n    new_string = ''\n    for char in s1:\n        if not to_remove[ord(char)]:\n            new_string += char\n\n    return new_string",
        "num_ids": 147
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_chars = input(\"Enter the characters to remove: \")\n    result = []\n    for char in string:\n        if char not in remove_chars:\n            result.append(char)\n    return result",
        "num_ids": 76
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    # Create a boolean list of size NO_OF_CHARS to keep track of characters in the string\n    present = [False] * NO_OF_CHARS\n\n    # Traverse the second string and mark all its characters as present in the boolean list\n    for char in string:\n        present[ord(char)] = True\n\n    # Traverse the first string and remove all characters that are present in the boolean list\n    new_string = \"\"\n    for char in string:\n        if not present[ord(char)]:\n            new_string += char\n\n    return new_string",
        "num_ids": 127
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(unique_nums)!= len(arraynums):\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the count of each element in the array.\n    count_dict = {}\n    \n    # Loop through each element in the array and increment its count in the dictionary.\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Check if any element has a count greater than 1, which means it is a duplicate.\n    for num in count_dict:\n        if count_dict[num] > 1:\n            return True\n    \n    # If no duplicates were found, return False.\n    return False",
        "num_ids": 166
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True",
        "num_ids": 54
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                duplicate = True\n                break\n        if duplicate:\n            break\n    return duplicate",
        "num_ids": 88
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(set(arraynums)) == len(arraynums):\n        return False\n    else:\n        return True",
        "num_ids": 54
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                duplicate = True\n                break\n        if duplicate:\n            break\n    return duplicate",
        "num_ids": 88
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes a number as input and returns True if the number is Woodall's number, else False.\n    Woodall's number is a positive integer that can be expressed as 2^a * 3^b * 5^c for some positive integers a, b, and c.\n    \"\"\"\n    a = 0\n    b = 0\n    c = 0\n    while x > 0:\n        if x % 2 == 0:\n            a += 1\n            x //= 2\n        elif x % 3 == 0:\n            b += 1\n            x //= 3\n        elif x % 5 == 0:\n            c += 1\n            x //= 5\n        else:\n            return False\n    if a == b and b == c:\n        return True\n    else:\n        return False",
        "num_ids": 187
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 4 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the given number is woodball, False otherwise.\n    Woodall numbers are defined as numbers that are divisible by 7 and 9 but not by 10.\n    \"\"\"\n    if x % 7 == 0 and x % 9 == 0 and x % 10!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 97
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x == 4 or x == 6 or x == 9:\n        return True\n    else:\n        return False",
        "num_ids": 65
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes an integer as input and checks if it is a woodall or not.\n    \"\"\"\n\n    # Define the condition to check for woodall\n    if x % 17 == 0 and x % 19 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    This function checks if the given number is woodball or not.\n    '''\n    if x < 1 or x > 1000000:\n        return \"Number should be between 1 and 1,000,000\"\n    else:\n        # Check if x is divisible by 5, 7, or 11\n        if x % 5 == 0 or x % 7 == 0 or x % 11 == 0:\n            return \"Woodall number\"\n        else:\n            return \"Not a Woodall number\"",
        "num_ids": 136
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and (x // 10) % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 3 == 0 and x % 5 == 0:\n        return True\n    elif x % 3 == 0 or x % 5 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0:\n        if x % 2 == 0:\n            if (x/2) % 3 == 0:\n                if (x/2) % 5 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 101
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(n):\n    \"\"\"\n    Check if a given number is Woodall number or not.\n    \"\"\"\n    # Base cases\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n\n    # Check if n is divisible by any odd number from 3 to sqrt(n)\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n\n    # If n is not divisible by any odd number from 3 to sqrt(n),\n    # it is a Woodall number\n    return True",
        "num_ids": 136
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    This function checks if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    str_num = str(num)\n    rev_num = str_num[::-1]\n\n    # Check if the number is one less than twice the reverse\n    if int(rev_num) == num - 2:\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_num)\n    # Check if the number is one less than twice the reversed number\n    if num + 1 == rev_num * 2:\n        return True\n    else:\n        return False",
        "num_ids": 110
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n\n    # calculate the number obtained by adding 1 to the reverse of the number\n    add_one = int(rev_num) + 1\n\n    # calculate the number obtained by multiplying the original number by 2\n    double = num * 2\n\n    # return True if add_one equals double, otherwise False\n    return add_one == double",
        "num_ids": 121
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if a given number is one less than twice its reverse.\n    \"\"\"\n    # reverse the number\n    rev_num = int(str(num)[::-1])\n    # check if the number is one less than twice the reverse\n    if rev_num == num+1:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == int(str(num)[::-1]) - 1",
        "num_ids": 45
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    # convert the number to a string and reverse it\n    reverse = int(str(num)[::-1])\n\n    # check if the number is one less than twice the reverse\n    if num == reverse + 1 and str(num).count('0') == len(str(num)):\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    if num == 0:\n        return False\n    \n    # Convert the number to a string, reverse it, and then convert it back to an integer\n    reverse = int(str(num)[::-1])\n    \n    # Check if the original number plus one is equal to twice the reversed number\n    if num + 1 == 2*reverse:\n        return True\n    else:\n        return False",
        "num_ids": 108
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1]) # reverse the given number and convert it back to integer\n    if num == rev_num + 1: # check if the original number and the reversed number are one less than twice the reversed number\n        return True\n    else:\n        return False",
        "num_ids": 92
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    original = num\n    while num > 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num = num // 10\n    if reverse == original - 2:\n        return True\n    else:\n        return False",
        "num_ids": 89
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num + int(str(num)[::-1])) == 2*num",
        "num_ids": 48
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Initialize the maximum number to be the first digit of the list\n    max_num = arr[0]\n    \n    # Iterate over the remaining digits and update the maximum number if a larger number is found\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    \n    return max_num",
        "num_ids": 113
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    num = 0\n    for i in arr:\n        num = num*10 + i\n    return num",
        "num_ids": 64
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    arr.sort()\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] > 0:\n            break\n        max_num = max_num * 10 + arr[i]\n    return max_num",
        "num_ids": 74
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    num = 0\n    while num < len(arr):\n        temp_num = int(''.join(map(str, arr[:num+1])))\n        if temp_num > max_num:\n            max_num = temp_num\n        num += 1\n    return max_num",
        "num_ids": 103
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        current_product = 1\n        for j in range(len(arr)):\n            if i!= j:\n                current_product *= int(arr[j])\n        if current_product > max_num:\n            max_num = current_product\n    return max_num",
        "num_ids": 84
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as an argument and returns the largest number that can be formed with these digits.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_num = arr[0]\n        for i in range(1, len(arr)):\n            current_num = arr[i]\n            if current_num > max_num:\n                max_num = current_num\n        return max_num",
        "num_ids": 123
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with the digits.\n    \"\"\"\n    arr.sort(reverse=True)  # Sorting the list in descending order\n    max_num = 0  # Initializing max_num to zero\n\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i)  # Multiplying each digit by 10 raised to its position in the list and adding it to max_num\n\n    return max_num",
        "num_ids": 124
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(len(arr)):\n            if i!= j:\n                temp = temp * 10 + arr[j]\n        if temp > max_num:\n            max_num = temp\n    return max_num",
        "num_ids": 80
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Given a list of integers, return the largest number that can be formed with those digits.\n    \"\"\"\n    def _find_Max_Num_helper(arr, i, cur_num):\n        \"\"\"\n        Helper function to recursively find the maximum number.\n        \"\"\"\n        if i == len(arr):\n            return cur_num\n\n        # Try adding the current digit to the current number\n        new_num = cur_num * 10 + arr[i]\n\n        # If the new number is greater than the current number, update the result\n        if new_num > cur_num:\n            cur_num = new_num\n\n        # Recursively try adding the next digit\n        return _find_Max_Num_helper(arr, i+1, cur_num)\n\n    # Call the helper function with the initial parameters\n    return _find_Max_Num_helper(arr, 0, arr[0])",
        "num_ids": 201
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # initialize variables\n    max_num = 0\n    power = 1\n    \n    # loop through the list of digits and calculate each number\n    for digit in arr[::-1]:\n        max_num += digit * power\n        power *= 10\n        \n    return max_num",
        "num_ids": 91
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers x and y as input and returns True if they have opposite signs\n    and False otherwise.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, otherwise False.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if ((x > 0 and y < 0) or (x < 0 and y > 0)):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, False otherwise.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if they have opposite signs, otherwise, it returns False.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, False otherwise.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is an octagonal number, otherwise, it returns False.\n\n    An octagonal number is a number that is equal to the sum of the nth row of the octagonal number triangle. The first row of the octagonal number triangle is 1, 1, 2, 3, 5, 7, 9, 11, 13, 15,... and each subsequent row is the sum of the previous two rows.\n\n    Example:\n    is_octagonal(5) -> True\n    is_octagonal(15) -> True\n    is_octagonal(21) -> False\n    \"\"\"\n\n    # Initialize the first and second rows of the octagonal number triangle\n    row1 = [1]\n    row2 = [1, 2]\n\n    # Loop through the rows of the octagonal number triangle\n    for i in range(2, n+1):\n        # Calculate the next row by summing the previous two rows\n        row3 = [row2[j] + row2[j+1] for j in range(len(row2)-1)]\n        # Add the first element of the next row to the end of the previous row to get the nth row of the octagonal number triangle\n        row3.append(row2[0] + row3[-1])\n        # Update the rows\n        row1 = row2\n        row2 = row3\n\n    # Check if n is equal to the sum of the nth row of the octagonal number triangle\n    return n == row2[-1]",
        "num_ids": 356
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal_num = n * (3*n - 2)\n    return octagonal_num",
        "num_ids": 51
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    :param n: the index of the octagonal number to find (1-based)\n    :return: the nth octagonal number\n    \"\"\"\n    octagonal = 0\n    count = 0\n    while count < n:\n        octagonal += 8 * count + 1\n        count += 1\n    return octagonal",
        "num_ids": 97
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        octagonal = i*(3*i-2)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1",
        "num_ids": 76
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    octagonal = 0\n    \n    while count < n:\n        octagonal += 1\n        if octagonal**2 % 1 == 0:\n            count += 1\n    \n    return octagonal",
        "num_ids": 76
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, else False.\n    '''\n    # Calculate the nth octagonal number\n    octagonal_number = (3 * n**2 - n) // 2\n\n    # Check if the nth octagonal number is equal to the given number\n    if octagonal_number == n:\n        return True\n    else:\n        return False",
        "num_ids": 101
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function checks if the given number is an octagonal number or not.\n    An octagonal number is a number that can be expressed in the form of 8k+1 or 8k-1 for some integer k.\n    \"\"\"\n    num = n * (3 * n - 1) // 2  # calculate the nth octagonal number\n    if num % 2 == 0:  # check if the octagonal number is even\n        return False\n    else:\n        return num\n",
        "num_ids": 120
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer as input and returns True if it is an octagonal number,\n    otherwise False.\n    '''\n    octagonal = (3*n**2 - n)/2\n    return octagonal.is_integer()",
        "num_ids": 63
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal_numbers = []\n    i = 1\n    while True:\n        octagonal_number = i * (3 * i - 1) // 2\n        octagonal_numbers.append(octagonal_number)\n        if len(octagonal_numbers) == n:\n            return octagonal_numbers[-1]\n        i += 1",
        "num_ids": 107
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    while True:\n        octagonal = i * (2*i - 1)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1",
        "num_ids": 78
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(d) for d in sub) == len(sub):\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits_sum = sum(int(c) for c in substring)\n            if digits_sum == len(substring):\n                counts[substring] += 1\n    return counts",
        "num_ids": 94
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    freq = defaultdict(int)\n    freq[0] = 1 # Initialize frequency count for sum 0\n    for i in range(n):\n        freq[int(s[i])] += 1\n        freq[int(s[i]) + freq[int(s[i-1])]] += 1\n        count += freq[int(s[i]) + freq[int(s[i-1])]]\n    return count",
        "num_ids": 120
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n\n    for i in range(len(s)):\n        d[s[i]] += 1\n\n        j = i - 1\n        while j >= 0 and sum(d.values()) == len(d):\n            count += 1\n            d[s[j]] += 1\n            j -= 1\n\n        d[s[i]] -= 1\n\n    return count",
        "num_ids": 131
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    # Using a defaultdict to store the count of substrings for each digit length\n    digit_count = defaultdict(int)\n    # Looping through all the substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Finding the sum of digits of each substring and storing in a defaultdict\n            digit_count[sum([int(d) for d in s[i:j]])] += 1\n    # Looping through all the substrings of the string again to count the number of substrings with sum of digits equal to their length\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum([int(d) for d in s[i:j]]) == j-i:\n                count += digit_count[j-i]\n    return count",
        "num_ids": 213
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the counts of substrings with a certain sum of digits\n    counts = defaultdict(int)\n\n    # Iterate over all substrings of the input string s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n\n            # Calculate the sum of digits in the substring\n            digit_sum = sum(int(digit) for digit in substring)\n\n            # Add the count of the substring to the dictionary\n            counts[digit_sum] += 1\n\n    # Count the number of substrings with a sum of digits equal to their length\n    count = sum(1 for digit_sum in counts if digit_sum == len(s))\n\n    return count",
        "num_ids": 201
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                count += 1\n    return count",
        "num_ids": 70
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n        if sum(int(digit) for digit in str(sum(int(digit) for digit in d.keys()))) == len(s):\n            count += 1\n        d[s[i]] -= 1\n    return count",
        "num_ids": 122
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(digit) for digit in sub) == len(sub):\n                count += 1\n    return count",
        "num_ids": 110
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n        for j in range(i+1, len(s)+1):\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count += 1\n            d[s[i]] -= 1\n    return count",
        "num_ids": 103
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]  # assume the first number is the smallest\n    for num in xs:\n        if num < smallest:\n            smallest = num  # update the smallest if a smaller number is found\n    return smallest",
        "num_ids": 77
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]  # assuming the first element is the smallest\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 66
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 57
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Returns the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 61
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)",
        "num_ids": 42
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] - test_list[i][1] > max_diff:\n                max_diff = test_list[j][0] - test_list[i][1]\n    return max_diff",
        "num_ids": 118
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[j][0] - test_list[i][0])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples by the second element (i.e., the values)\n    test_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize the maximum difference to be zero\n    max_diff = 0\n    # Loop over all pairs of tuples in the sorted list\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i][1] - test_list[i+1][1])\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum difference\n    return max_diff",
        "num_ids": 170
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return 0\n    max_diff = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 121
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to hold minimum and maximum values in the list\n    min_value = test_list[0][0]\n    max_value = test_list[0][1]\n    \n    # Loop through each tuple in the list\n    for pair in test_list:\n        # Update minimum and maximum values if necessary\n        if pair[0] < min_value:\n            min_value = pair[0]\n        if pair[1] > max_value:\n            max_value = pair[1]\n    \n    # Calculate the maximum difference between available pairs\n    max_diff = max_value - min_value\n    \n    # Return the maximum difference\n    return max_diff",
        "num_ids": 169
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order of the first element\n    test_list = sorted(test_list)\n    # Initialize the maximum difference to zero\n    max_diff = 0\n    # Loop through the list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current tuple and the next tuple\n        diff = test_list[i+1][0] - test_list[i][0]\n        # Check if the difference is greater than the current maximum difference\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 163
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 44
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subject_marks_list):\n    '''\n    This function takes a list of tuples and sorts it based on the second value of each tuple.\n    '''\n    # sort the list based on the second value of each tuple\n    sorted_list = sorted(subject_marks_list, key=lambda x: x[1])\n    return sorted_list",
        "num_ids": 76
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts them based on the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "num_ids": 59
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 66
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        total_sum = 0\n        for item in data_list:\n            total_sum += recursive_list_sum(item)\n        return total_sum",
        "num_ids": 83
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 75
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return sum(recursive_list_sum(item) for item in data_list)",
        "num_ids": 69
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes a list as an input and recursively flattens the list and \n    then calculates the sum of all its elements.\n    \"\"\"\n    if len(data_list) == 0:  # Base case\n        return 0\n    elif isinstance(data_list[0], list):  # Recursive case\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # Leaf case\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 134
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 53
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(i) for i in data_list)\n    else:\n        return data_list",
        "num_ids": 68
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    \n    sum_list = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum_list += recursive_list_sum(item)\n        else:\n            sum_list += item\n    \n    return sum_list",
        "num_ids": 97
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(item) for item in data_list)\n    elif isinstance(data_list, int):\n        return data_list\n    else:\n        return 0",
        "num_ids": 82
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers present in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 51
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers present in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell_numbers = [0, 1]\n        for i in range(2, n+1):\n            bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n        return bell_numbers[n]",
        "num_ids": 116
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of ways to partition a set of Bell numbers up to n.\n    \"\"\"\n    bell = [0] * (n+1)\n    bell[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n    return bell[n]",
        "num_ids": 111
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    This function takes an integer n and returns the number of ways to partition a set of Bell numbers.\n    '''\n    b = [1]\n    for i in range(1, n+1):\n        b.append(b[i-1] * (i+1))\n    return b[n]",
        "num_ids": 76
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function calculates the number of ways to partition a set of Bell numbers.\n    \n    :param n: The number of elements to partition.\n    :type n: int\n    :return: The number of ways to partition a set of Bell numbers.\n    :rtype: int\n    \"\"\"\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]",
        "num_ids": 106
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_number(i) for i in range(n)])",
        "num_ids": 63
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        bell = [0] * (n + 1)\n        bell[1] = 1\n        bell[2] = 2\n        for i in range(3, n + 1):\n            bell[i] = bell[i - 1] + bell[i - 2]\n        return bell[n]",
        "num_ids": 133
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): The number of elements in the partition.\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [0] * (n+1)\n    bell[0] = 1\n    bell[1] = 1\n\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n\n    return bell[n]",
        "num_ids": 139
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function calculates the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [0] * (n+1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = sum(bell[:i])\n    return bell[n]",
        "num_ids": 93
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = 1\n        for i in range(2, n+1):\n            bell = (bell * i) // (i-1)\n        return bell",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): the number of partitions to find\n    \n    Returns:\n    int: the number of ways to partition a set of Bell numbers\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)",
        "num_ids": 104
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    if len(A) < 2:\n        return True\n    if A[1] > A[0]:\n        return is_Monotonic(A[1:])\n    elif A[1] < A[0]:\n        return is_Monotonic(A[1:])\n    else:\n        return True",
        "num_ids": 72
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] <= A[1]\n    else:\n        for i in range(1, n):\n            if A[i] < A[i-1]:\n                return False\n        return True",
        "num_ids": 97
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_increasing = True\n    is_decreasing = True\n    n = len(A)\n\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing",
        "num_ids": 112
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    This function takes in an array A and checks whether it is monotonic or not.\n    A monotonic array is an array that is either strictly increasing or strictly decreasing.\n    \"\"\"\n\n    # Checking whether the array is strictly increasing\n    is_increasing = True\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            is_increasing = False\n            break\n\n    # Checking whether the array is strictly decreasing\n    is_decreasing = True\n    for i in range(len(A)-1):\n        if A[i] <= A[i+1]:\n            is_decreasing = False\n            break\n\n    # Checking if the array is monotonic\n    if is_increasing or is_decreasing:\n        return True\n    else:\n        return False",
        "num_ids": 180
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    direction = 0 if A[1] > A[0] else 1\n    for i in range(2, len(A)):\n        if (A[i] > A[i-1] and direction == 0) or (A[i] < A[i-1] and direction == 1):\n            continue\n        else:\n            return False\n    \n    return True",
        "num_ids": 123
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    for i in range(1, n): \n        if A[i] < A[i-1]: \n            return False\n    return True",
        "num_ids": 45
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    \n    # Checking for increasing sequence\n    if all(A[i] < A[i+1] for i in range(n-1)):\n        return True\n    \n    # Checking for decreasing sequence\n    elif all(A[i] > A[i+1] for i in range(n-1)):\n        return True\n    \n    # Checking for neither increasing nor decreasing sequence\n    else:\n        return False",
        "num_ids": 120
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    This function will return True if the given array is monotonic, else False.\n    A is an array which contains numbers.\n    \"\"\"\n    \n    n = len(A)\n    \n    # If the array has only one element, then it is monotonic.\n    if n <= 1:\n        return True\n    \n    # Check if the array is increasing.\n    if all(A[i] < A[i+1] for i in range(n-1)):\n        return True\n    \n    # Check if the array is decreasing.\n    if all(A[i] > A[i+1] for i in range(n-1)):\n        return True\n    \n    # If the array is neither increasing nor decreasing, then it is not monotonic.\n    return False",
        "num_ids": 167
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    # Check if array is increasing\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    \n    # Check if array is decreasing\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n    \n    # If none of the above conditions are satisfied, the array is monotonic\n    return True",
        "num_ids": 133
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if s == l[:len(s)]:\n        return True\n    if len(l) < len(s):\n        return False\n    return is_sublist(l[1:], s)",
        "num_ids": 82
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 92
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False",
        "num_ids": 83
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two arguments, a list `l` and a sublist `s`. \n    The function checks whether the sublist `s` is present in the list `l` or not.\n    '''\n    if s == []:\n        return True\n    \n    if s == l:\n        return True\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False",
        "num_ids": 111
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Checks whether the list `l` contains the sublist `s`.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 84
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list 'l' contains the given sublist's' or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 95
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    :param l: the list to search in\n    :param s: the sublist to search for\n    :return: True if l contains s, False otherwise\n    \"\"\"\n    return s == [] or any(is_sublist(l[i:], s[1:]) for i in range(len(l) - len(s) + 1))",
        "num_ids": 100
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 72
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False",
        "num_ids": 83
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    :param l: the list to search in\n    :param s: the sublist to search for\n    :return: True if s is a sublist of l, False otherwise\n    \"\"\"\n    if not s:\n        return True  # empty sublist is always a sublist\n    if not l:\n        return False  # if l is empty, s cannot be a sublist\n    if len(l) < len(s):\n        return False  # s cannot be a sublist if it's longer than l\n\n    # try sliding the window of s over l\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 183
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set()\n    for tup in Input:\n        lengths.add(len(tup))\n    if len(lengths) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have the same length, and False otherwise.\n    '''\n    # Convert the input list into a set to remove duplicates\n    set_of_tuples = set(Input)\n    \n    # Check if the length of the tuples in the set is equal to 1, i.e., they are all of equal length\n    if len(set_of_tuples) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 114
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, otherwise it returns False.\n    '''\n    # Check if the input is a list or not\n    if not isinstance(Input, list):\n        return False\n\n    # Check if the list contains any tuple or not\n    if not Input:\n        return True\n\n    # Check if all the tuples have equal length or not\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n\n    return True",
        "num_ids": 123
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, else False.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 67
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 121
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Implementation of Comb Sort algorithm\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    # If shrink factor is 1, then comb sort becomes bubble sort\n    while gap!= 1 or shrink!= 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        # Compare and swap adjacent elements\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n        \n        # Shrink the gap for next iteration\n        shrink = 1.3\n    \n    return nums",
        "num_ids": 166
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n            \n        for i in range(n - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n                \n    return nums",
        "num_ids": 136
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            sorted = False\n            i = 0\n            while i + gap < n:\n                if nums[i] > nums[i+gap]:\n                    nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                    sorted = False\n                i += 1\n        else:\n            gap = 1\n            sorted = True\n    return nums",
        "num_ids": 149
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    This function implements the Comb Sort algorithm to sort a list of elements.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        else:\n            sorted = False\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 146
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Implementation of comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums",
        "num_ids": 140
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i+gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 148
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n        \n    return nums",
        "num_ids": 146
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Set the gap size to the length of the list\n    gap = len(nums)\n\n    # Initialize the swaps variable to 1\n    swaps = 1\n\n    # While there are swaps to be made\n    while swaps!= 0:\n        # Set the swaps variable to 0\n        swaps = 0\n\n        # Loop through the list, starting from the gap size\n        for i in range(gap):\n            # If the current element is greater than the next element\n            if nums[i] > nums[i + gap]:\n                # Swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # Increment the swaps variable\n                swaps += 1\n\n        # Decrease the gap size by half\n        gap //= 1.25\n\n    # Return the sorted list\n    return nums",
        "num_ids": 209
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square root of n\n    root = int(n**0.5)\n    \n    # check if the difference of the square root of n and the square root of n-1 is a square\n    return (root**2 == n-root**2) or (root**2 == n+root**2) or (root+1)**2 == n",
        "num_ids": 111
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_square(num):\n    \"\"\"\n    Helper function to check if a number is a perfect square.\n    \"\"\"\n    sqrt_num = int(num**0.5)\n    return sqrt_num**2 == num\n\ndef is_difference_of_squares(num):\n    \"\"\"\n    Check if a number can be represented as the difference of two squares.\n    \"\"\"\n    for i in range(2, int(num**0.5)+1):\n        if is_square(i) and is_square(num-i):\n            return True\n    return False\n\ndef dif_Square(n):\n    \"\"\"\n    Main function to check if a number can be represented as the difference of two squares.\n    \"\"\"\n    if is_difference_of_squares(n):\n        return True\n    else:\n        return False",
        "num_ids": 172
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_square(n):\n    \"\"\"\n    Check if a number is a perfect square.\n\n    :param n: int\n    :return: bool\n    \"\"\"\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n\ndef dif_Square(n): \n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    :param n: int\n    :return: bool\n    \"\"\"\n    if is_square(n) or is_square(n+2) or is_square(n-2):\n        return True\n    else:\n        return False",
        "num_ids": 133
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    # Check if n is a perfect square\n    if int(n ** 0.5) ** 2 == n:\n        return True\n    # Check if n can be written as the difference of two squares\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and (i ** 2 + n // i ** 2) == n:\n            return True\n    return False",
        "num_ids": 103
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # To check whether the given number can be represented as the difference of two squares or not.\n    for i in range(2, int(n**(1/2))+1):\n        if n == i**2 - (i-1)**2:\n            print(n, \"can be represented as the difference of two squares.\")\n            return True\n    print(n, \"can not be represented as the difference of two squares.\")\n    return False",
        "num_ids": 127
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n*sqrt_n == n:\n        return False\n    else:\n        for i in range(2, sqrt_n+1):\n            if n == i*i - (i-1)*(i-1):\n                return True\n        return False",
        "num_ids": 106
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_square(n):\n    \"\"\"\n    Check if a number is a square.\n    \"\"\"\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n\ndef dif_square(n):\n    \"\"\"\n    Check if a number can be represented as the difference of two squares.\n    \"\"\"\n    for i in range(1, n+1):\n        if is_square(i) and is_square(n-i):\n            return True\n    return False",
        "num_ids": 107
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the given number to a string so we can split it into two parts\n    n_str = str(n)\n    # Split the string into two parts and convert them to integers\n    n1 = int(n_str.split('+')[0])\n    n2 = int(n_str.split('+')[1])\n    # Check if both parts are squares\n    if n1**0.5 == int(n1**0.5) and n2**0.5 == int(n2**0.5):\n        return True\n    else:\n        return False",
        "num_ids": 156
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Returns True if n can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    # Convert n to a string to use the isqrt function\n    n_str = str(n)\n\n    # Check if n is a square number\n    if isqrt(int(n_str**0.5))**2 == int(n_str**0.5):\n        return True\n\n    # Check if n can be written as the difference of two squares\n    for i in range(2, len(n_str)):\n        if int(n_str[:i])**2 + int(n_str[i:])**2 == n:\n            return True\n\n    return False\n\ndef isqrt(n):\n    \"\"\"\n    Returns the integer square root of n using binary search.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n\n    # Initialize left and right boundaries\n    left, right = 1, n\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid**2 <= n < (mid + 1)**2:\n            return mid\n\n        elif mid**2 > n:\n            right = mid - 1\n\n        else:\n            left = mid + 1",
        "num_ids": 270
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_dif_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number can be represented as the difference of two squares, otherwise False.\n    \"\"\"\n    for i in range(2, int(n**(0.5))+1):\n        if n == i**2 - (i-1)**2:\n            return True\n    return False\n\nn = int(input(\"Enter a number: \"))\nif is_dif_square(n):\n    print(f\"{n} can be represented as the difference of two squares.\")\nelse:\n    print(f\"{n} cannot be represented as the difference of two squares.\")",
        "num_ids": 140
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for i in range(len(colors)):\n        if colors[i] == patterns[count]:\n            count += 1\n            if count == len(patterns):\n                return True\n    return False",
        "num_ids": 77
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if i == 0:\n            if colors[i]!= patterns[i][0]:\n                return False\n        elif i == len(colors) - 1:\n            if colors[i]!= patterns[i][-1]:\n                return False\n        else:\n            if colors[i]!= patterns[i][-1] and colors[i-1]!= patterns[i][-2]:\n                return False\n    \n    return True",
        "num_ids": 145
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'R' and colors[i]!= 'R':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'G':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'B':\n            return False\n    return True",
        "num_ids": 103
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i % len(patterns)]:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the length of the colors array is equal to the length of the patterns array\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Iterate over the patterns array and check if the color at each index matches the corresponding color in the colors array\n    for i in range(len(patterns)):\n        if patterns[i] == \"R\" and colors[i]!= \"Red\":\n            return False\n        elif patterns[i] == \"G\" and colors[i]!= \"Green\":\n            return False\n        elif patterns[i] == \"B\" and colors[i]!= \"Blue\":\n            return False\n    \n    # If all colors match the corresponding patterns, return True\n    return True",
        "num_ids": 178
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'R' and colors[i]!= 'R':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'G':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'B':\n            return False\n    return True",
        "num_ids": 124
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check whether the colors follow the given pattern sequence.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True",
        "num_ids": 58
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True",
        "num_ids": 43
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if i == 0:\n            if patterns[i]!= '*' and colors[i]!= patterns[i]:\n                return False\n        else:\n            if patterns[i] == '*' or colors[i] == patterns[i] or colors[i] == patterns[i-1]:\n                continue\n            else:\n                return False\n    return True",
        "num_ids": 127
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-len(patterns)+1):\n        if all(colors[i+j] == patterns[j] for j in range(len(patterns))):\n            return True\n    return False",
        "num_ids": 79
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a value K as input and returns a list of tuples which have all elements divisible by K.\n    '''\n    result_list = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result_list.append(tup)\n    return result_list",
        "num_ids": 88
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(num % K == 0 for num in tpl):\n            result.append(tpl)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes in a list of tuples and a number K and returns a list of tuples\n    that have all elements divisible by K.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(elem % K == 0 for elem in t):\n            result.append(t)\n    return result",
        "num_ids": 82
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(t[0], t[1]) for t in test_list if all(x % K == 0 for x in t)]",
        "num_ids": 69
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer as input and returns True if the number is divisible by 11, and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and returns True if the number is divisible by 11, otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False ",
        "num_ids": 51
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, otherwise False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, and False if it is even.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Length of the word is even.\"\n    else:\n        return \"Length of the word is odd.\"",
        "num_ids": 66
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(s, \"length is even\")\n    else:\n        print(s, \"length is odd\")",
        "num_ids": 63
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} has an even length\")\n    else:\n        print(f\"{s} has an odd length\")",
        "num_ids": 70
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n    :param s: string, the word to be checked\n    :return: boolean, True if the length of s is odd, False otherwise\n    \"\"\"\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 76
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"",
        "num_ids": 68
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and checks whether the length of the word is odd or even.\n    If the length of the word is odd, it returns True. Otherwise, it returns False.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 75
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 4\n        count += 1\n    return num",
        "num_ids": 63
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = (n * (n + 1) * (n + 2)) // 6\n    return tetrahedral_num",
        "num_ids": 64
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0: \n        return \"Invalid input\"\n    else: \n        return int(n*(n+1)*(n+2)*(n+3)/24)",
        "num_ids": 66
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1)*(n+2))/6)",
        "num_ids": 45
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function calculates the nth tetrahedral number.\n    \"\"\"\n    return int(n * (n + 1) * (n + 2) / 6)",
        "num_ids": 50
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 47
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 54
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(1, n+1):\n        t += i\n    return t",
        "num_ids": 53
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6",
        "num_ids": 49
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "num_ids": 52
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))",
        "num_ids": 82
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol",
        "num_ids": 47
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Returns the volume of a sphere with radius r.\n    '''\n    return (4/3) * math.pi * r**3",
        "num_ids": 42
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculate the volume of a sphere with radius r.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 46
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function finds the volume of a sphere given its radius.\n    '''\n    return (4/3) * math.pi * (r**3)",
        "num_ids": 46
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with radius r.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 48
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculates the volume of a sphere with radius r.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 46
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Function to calculate the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V",
        "num_ids": 45
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 51
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the string modulo 26.\n    \"\"\"\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    \n    # Finding the character by taking the sum modulo 26 and adding ASCII value of 'a'\n    char = chr((sum % 26) + ord('a'))\n    \n    return char",
        "num_ids": 103
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values to zero\n    sum_of_ASCII = 0\n    # Loop through each character in the string and add its ASCII value to the sum_of_ASCII variable\n    for char in strr:\n        sum_of_ASCII += ord(char)\n    # Return the character made by adding the sum_of_ASCII modulo 26\n    return chr((sum_of_ASCII % 26) + 65)",
        "num_ids": 105
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26 + 65) # adding 65 to get the ASCII value of 'A' in uppercase",
        "num_ids": 64
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # initialize a variable to store the sum of ASCII values of characters\n    sum_ASCII = 0\n    \n    # iterate over each character in the string\n    for char in strr:\n        # add the ASCII value of each character to the sum\n        sum_ASCII += ord(char)\n    \n    # return the character made by sum_ASCII modulo 26\n    return chr(sum_ASCII % 26 + 65)",
        "num_ids": 97
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # iterate through each character of the string\n    for char in strr:\n        # add the ASCII value of the character to the sum\n        sum += ord(char)\n    # return the character whose ASCII value is equal to the sum modulo 26\n    return chr(sum % 26)",
        "num_ids": 115
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # Convert the string to uppercase\n    strr = strr.upper()\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum variable\n        sum += ord(char)\n    # Return the character made by adding the sum modulo 26\n    return chr((sum % 26) + 65)",
        "num_ids": 104
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char) - 64\n    return chr(char_sum % 26 + 65)",
        "num_ids": 84
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # initialize the variable to store the sum of ASCII values of characters\n    sum = 0\n    \n    # loop through each character of the string and add its ASCII value to the sum variable\n    for char in strr:\n        sum += ord(char)\n    \n    # return the character made by adding the sum modulo 26\n    return chr((sum % 26) + 97)",
        "num_ids": 89
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = sum([ord(char) - 96 for char in strr])\n    return chr(sum_ascii % 26 + 97)",
        "num_ids": 78
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through each character in the string\n    for char in strr:\n        # convert the character to its ASCII value and add it to the sum\n        sum += ord(char)\n        \n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(sum % 26 + 65)",
        "num_ids": 98
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        sequence = [1, 1]\n        for i in range(2, n):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n-1]",
        "num_ids": 107
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))",
        "num_ids": 75
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    if n < 0:\n        return \"n should be a positive integer\"\n    elif n == 0:\n        return \"The first number in the Newman Conway sequence is 1\"\n    elif n == 1:\n        return \"The second number in the Newman Conway sequence is 1\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return \"The {}th number in the Newman Conway sequence is {}\".format(n, sequence[n])\n",
        "num_ids": 147
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))",
        "num_ids": 75
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "num_ids": 103
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]",
        "num_ids": 116
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev_term = 1\n        prev_term = 1\n        current_term = 1\n        for i in range(3, n+1):\n            current_term = prev_prev_term + prev_term\n            prev_prev_term = prev_term\n            prev_term = current_term\n        return current_term",
        "num_ids": 124
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    This function returns the nth number in the Newman Conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[-1]",
        "num_ids": 113
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    This function returns the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input. Please enter a positive integer greater than or equal to 1.\"\n    elif n == 1:\n        return \"The first number in the Newman Conway sequence is 1.\"\n    elif n == 2:\n        return \"The second number in the Newman Conway sequence is 1.\"\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return \"The {}th number in the Newman Conway sequence is {}.\".format(n, seq[n])",
        "num_ids": 175
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1]\n        for i in range(2, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]",
        "num_ids": 103
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The surface area of the sphere is:\", surfacearea_sphere(radius))",
        "num_ids": 84
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The surface area of the sphere is:\", surfacearea_sphere(radius))",
        "num_ids": 84
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 55
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(radius)\nprint(f\"The surface area of the sphere with radius {radius} is {surface_area:.2f}.\")",
        "num_ids": 105
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the surface area of the sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 57
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i * (2 * i - 1)\n        count += hex_num\n        i += 1\n    return hex_num",
        "num_ids": 76
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = (2*n - 1)*n\n    return hexagonal_number",
        "num_ids": 52
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    \"\"\"\n    h = n*(2*n - 1)\n    return h",
        "num_ids": 50
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = n + 1\n    hex_num = 2 * k**2 - k\n    return hex_num",
        "num_ids": 54
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    sum = 0\n    while sum <= n:\n        sum += i * (2*i - 1)\n        i += 1\n    return sum - (2*i - 1)",
        "num_ids": 75
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function finds the nth centered hexagonal number.\n    \"\"\"\n    num = n * (2*n - 1)\n    return num\n\nn = int(input(\"Enter the value of n: \"))\n\nprint(\"The\", n, \"th centered hexagonal number is:\", centered_hexagonal_number(n))",
        "num_ids": 86
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = 1\n    while True:\n        hex_num = 6*k*(k+1)\n        if hex_num >= 2*n:\n            return hex_num - 2*n\n        k += 1",
        "num_ids": 78
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonal_numbers = [i * (2*i - 1) for i in range(1, n+1)]\n    return hexagonal_numbers[n-1]",
        "num_ids": 70
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = n // 2 # calculate the number of rows in the hexagon\n    c = n - 2*k # calculate the number of hexagons in the last row\n    h = k + 1 # calculate the height of the hexagon\n    num = 2*k*h # calculate the first centered hexagonal number\n    if c == 0:\n        return num\n    else:\n        for i in range(1, c+1):\n            num += 2*(k-i+1) # add the next centered hexagonal number\n        return num",
        "num_ids": 149
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    '''\n\n    # Create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # Merge the dictionaries using the update() method\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict",
        "num_ids": 107
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key in merged_dict:\n            merged_dict[key] += dict2[key]\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key in merged_dict:\n            merged_dict[key] += dict3[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict",
        "num_ids": 160
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result",
        "num_ids": 68
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a merged dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict",
        "num_ids": 77
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    '''\n    \n    # Create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n    \n    # Merge the three dictionaries into the merged_dict\n    for dictionary in [dict1, dict2, dict3]:\n        merged_dict.update(dictionary)\n    \n    return merged_dict",
        "num_ids": 101
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for d in [dict1,dict2,dict3]:\n        for key, value in d.items():\n            if key in merged_dict:\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [value]\n    return merged_dict",
        "num_ids": 109
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()  # make a copy of the first dictionary\n    merged_dict.update(dict2)  # add the second dictionary to the merged one\n    merged_dict.update(dict3)  # add the third dictionary to the merged one\n    return merged_dict",
        "num_ids": 105
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n\n    freq_dict = {}\n\n    # Iterate through the list and count the frequency of each element using collections.Counter() method.\n    for element in list1:\n        freq_dict[element] = list1.count(element)\n\n    return freq_dict",
        "num_ids": 93
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency count of all elements in the list.\n    '''\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq",
        "num_ids": 77
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq",
        "num_ids": 77
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)",
        "num_ids": 54
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(N-1, -1, -1):\n        if i < N:\n            closest = i\n            break\n    return closest",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(n):\n    \"\"\"\n    Returns the closest smaller number than n.\n    \"\"\"\n    # check if n is already the smallest number\n    if n == 1:\n        return n\n    \n    # create a list of smaller numbers\n    smaller_nums = [i for i in range(1, n) if i < n]\n    \n    # return the closest smaller number\n    return min(smaller_nums, key=lambda x: abs(x - n))",
        "num_ids": 96
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # create an empty list to store smaller numbers\n    smaller_nums = []\n    # loop through each number between 1 and N\n    for i in range(1, N):\n        # if the current number is smaller than N and the difference between the current number and N is smaller than the difference between the closest smaller number and N\n        if i < N and abs(i - N) < abs(N - smaller_nums[-1]):\n            # append the current number to the list of smaller numbers\n            smaller_nums.append(i)\n    # if there are no smaller numbers than N, return None\n    if len(smaller_nums) == 0:\n        return None\n    # else, return the last number in the list of smaller numbers\n    else:\n        return smaller_nums[-1]",
        "num_ids": 190
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1,0,-1):\n        if i < N:\n            return i\n    return None",
        "num_ids": 51
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_nums = [num for num in range(N) if num < N]\n    if smaller_nums:\n        return smaller_nums[-1]\n    else:\n        return None",
        "num_ids": 64
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(n):\n    \"\"\"\n    This function takes an integer as input and returns the closest smaller number.\n    \"\"\"\n    smaller_num = n - 1\n    while n % smaller_num!= 0:\n        smaller_num -= 1\n    return smaller_num",
        "num_ids": 59
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = None\n    for i in range(N-1, 0, -1):\n        if i < N and (smaller_num is None or abs(i-N) < abs(smaller_num-N)):\n            smaller_num = i\n    return smaller_num",
        "num_ids": 86
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    else:\n        return N - (N % 1)",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    closest = float('inf')\n    for i in range(1, n):\n        if abs(i - n) < abs(closest - n):\n            closest = i\n    return closest",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(N-1, -1, -1):\n        if i < N:\n            closest = i\n            break\n    return closest",
        "num_ids": 60
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word_length = 0\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length",
        "num_ids": 74
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest",
        "num_ids": 58
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word_length = 0\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length",
        "num_ids": 74
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found\")\n    else:\n        print(\"Substring not found\")",
        "num_ids": 64
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n    str1 (list): List of string values.\n    sub_str (str): String to search for.\n\n    Returns:\n    bool: True if sub_str is found as a substring of str1, False otherwise.\n    \"\"\"\n\n    for s in str1:\n        if sub_str in s:\n            return True\n\n    return False",
        "num_ids": 105
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two parameters:\n    - str1: A string which is to be searched for a substring.\n    - sub_str: A string which is to be checked if it is present as a substring in str1.\n    \n    The function returns a boolean value indicating whether sub_str is present as a substring in str1 or not.\n    '''\n\n    # Splitting the string into individual words\n    words = str1.split()\n\n    # Looping through each word in the list\n    for word in words:\n\n        # Checking if the substring is present in the current word\n        if sub_str in word:\n            return True\n\n    # If the loop completes without finding the substring, return False\n    return False",
        "num_ids": 159
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in sub_str:\n        if str1 in s:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer n as input and returns True if n is an undulating number, else it returns False.\n    An undulating number is a positive integer whose digits have a constant difference between them. \n    For example, 123456789 is an undulating number as the difference between each digit is 1.\n    '''\n    # Convert the number to a string and store it in a list\n    num_list = list(str(n))\n\n    # Calculate the difference between each digit and store it in a list\n    diff_list = [int(num_list[i+1]) - int(num_list[i]) for i in range(len(num_list)-1)]\n\n    # Check if the difference list contains only one value or not\n    if len(set(diff_list)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 198
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is divisible by 6 or not\n    if n % 6!= 0:\n        return False\n\n    # Check if the number is divisible by 9 or not\n    if n % 9 == 0:\n        return True\n\n    # Check if the number is divisible by 15 or not\n    if n % 15 == 0:\n        return True\n\n    # Check if the number is divisible by 21 or not\n    if n % 21 == 0:\n        return True\n\n    # If none of the above conditions are true, the number is not undulating\n    return False",
        "num_ids": 161
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number into a string to get the digits\n    num_str = str(n)\n    # Initialize variables to keep track of the previous and current digits\n    prev_digit = int(num_str[0])\n    curr_digit = prev_digit\n    # Iterate through the digits and check if the digits are in descending or ascending order\n    for i in range(1, len(num_str)):\n        curr_digit = int(num_str[i])\n        if prev_digit > curr_digit:\n            return False\n        prev_digit = curr_digit\n    return True",
        "num_ids": 152
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if n is a prime number\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    # Check if n has a repeating digit\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] == digits[j]:\n                return True\n    return False",
        "num_ids": 136
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize variables\n    count = 0\n    prev_digit = -1\n    \n    # Iterate through each digit of the number\n    while n > 0:\n        digit = n % 10\n        \n        # Check if digit has increased or decreased\n        if digit < prev_digit:\n            return False\n        \n        # Increment count of increasing digits\n        if digit > prev_digit:\n            count += 1\n        \n        # Update previous digit\n        prev_digit = digit\n        \n        # Divide the number by 10 to remove the last digit\n        n //= 10\n        \n    # Check if the count is at least 2\n    return count >= 2",
        "num_ids": 160
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    \"\"\"\n    This function takes an integer as input and checks if it is undulating or not.\n    An undulating number is a positive integer whose digits are in an increasing order or \n    decreasing order. For example, 123, 456, 789 are undulating numbers as the digits are increasing \n    from left to right or vice versa, while 1357, 2468, 3579 are not undulating numbers.\n\n    :param n: An integer.\n    :return: True if the number is undulating, False otherwise.\n    \"\"\"\n\n    # Convert the number to a string to check its digits.\n    num_str = str(n)\n\n    # Check if the number is decreasing or increasing.\n    increasing = False\n    decreasing = False\n\n    for i in range(len(num_str)-1):\n        if int(num_str[i]) < int(num_str[i+1]):\n            increasing = True\n        elif int(num_str[i]) > int(num_str[i+1]):\n            decreasing = True\n\n    # If the number is decreasing, then return False.\n    if decreasing:\n        return False\n    # If the number is increasing, then return True.\n    elif increasing:\n        return True\n    # If the number is neither increasing nor decreasing, then it is not undulating.\n    else:\n        return False",
        "num_ids": 309
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    An undulating number is a number whose digits alternate in a way that\n    repeats every second digit starting from the second-last digit.\n    For example, 1234567890, 9876543210, and 1234560987 are all undulating\n    numbers, while 12321 or 123456789 are not.\n\n    :param n: A positive integer.\n    :return: True if n is undulating, False otherwise.\n    \"\"\"\n    s = str(n)\n    if len(s) < 2:\n        return False\n    for i in range(1, len(s)):\n        if (i % 2 == 1 and s[i-1] > s[i]) or (i % 2 == 0 and s[i-1] < s[i]):\n            return False\n    return True",
        "num_ids": 226
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if n is a prime number\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 or n == 17 or n == 19:\n        return True\n    # check if n is divisible by any of the numbers 2, 3, 5, 7, 11, 13, 17, 19\n    for i in [2, 3, 5, 7, 11, 13, 17, 19]:\n        if n % i == 0:\n            return False\n    # check if n is divisible by any of the numbers 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20\n    for i in [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]:\n        if n % i == 0:\n            return True\n    # if none of the above conditions are true, then n is not undulating\n    return False",
        "num_ids": 299
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Check whether the given number is undulating or not.\n    '''\n    # Calculate the sum of the digits of n\n    total = sum(int(digit) for digit in str(n))\n    # Check whether the total is divisible by n\n    return total % n == 0",
        "num_ids": 70
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is a multiple of 2 or 5\n    if n % 2 == 0 or n % 5 == 0:\n        return False\n    \n    # Convert the number to a string and split it into a list of digits\n    digits = list(str(n))\n    \n    # Initialize variables to keep track of the current number and its previous digit\n    current = 0\n    prev_digit = None\n    \n    # Iterate over the digits of the number and check if the sequence of digits is undulating\n    for digit in digits:\n        current = current * 10 + int(digit)\n        if prev_digit is not None and current < prev_digit:\n            return False\n        prev_digit = current\n    \n    # If we get to this point, the number is undulating\n    return True",
        "num_ids": 195
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 50
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 50
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 50
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments, a and b, and returns their power.\n    \"\"\"\n    return a ** b\n",
        "num_ids": 34
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]",
        "num_ids": 64
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]",
        "num_ids": 64
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return test_list.index(min(test_list, key=itemgetter(1)))",
        "num_ids": 65
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sort the list in ascending order based on the second value of the tuple\n    return sorted_list[0][0] # return the first value of the tuple with the smallest second value",
        "num_ids": 101
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Get the index of the first tuple with the smallest second value\n    min_index = sorted_list.index(min(sorted_list, key=itemgetter(1)))\n    \n    # Get the first value of the tuple with the smallest second value\n    min_value = sorted_list[min_index][0]\n    \n    return min_value",
        "num_ids": 148
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = len(lst[0])  # initialize the minimum length as the length of the first list in the list of lists\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)  # update the minimum length if a smaller list is encountered\n    return min_len",
        "num_ids": 108
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
        "num_ids": 76
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length",
        "num_ids": 52
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length",
        "num_ids": 79
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length",
        "num_ids": 73
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 55
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    This function finds the number of divisors of a given integer n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    div = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            div += 1\n    return div",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of the given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 93
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 93
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n\n    # Flattening the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Finding frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict",
        "num_ids": 122
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 93
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq",
        "num_ids": 83
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for lst in list1:\n        for elem in lst:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict",
        "num_ids": 64
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for i in item:\n                if i in freq:\n                    freq[i] += 1\n                else:\n                    freq[i] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq",
        "num_ids": 117
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten(lst):\n    \"\"\"\n    Flattens a list of lists\n    \"\"\"\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\ndef frequency_lists(lst):\n    \"\"\"\n    Returns a dictionary of frequency of each element in the flattened list of lists\n    \"\"\"\n    flat_list = flatten(lst)\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 140
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    flattened_list = [item for sublist in list1 for item in sublist]\n    for item in flattened_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
        "num_ids": 97
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in lst:\n        for element in sublist:\n            flattened_list.append(element)\n    return flattened_list\n\ndef frequency_lists(list1):\n    \"\"\"\n    This function takes a list as input and returns a dictionary containing the frequency of each element in the flattened list of lists.\n    \"\"\"\n    flattened_list = flatten_list(list1)\n    frequency_dict = {}\n    for element in flattened_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict",
        "num_ids": 170
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    This function multiplies all the numbers in a list and divides with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and returns the product of all the numbers in the list divided by the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 64
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)\n\nprint(multiply_num([1, 2, 3])) # Output: 3.0\nprint(multiply_num([4, 5, 6])) # Output: 15.0",
        "num_ids": 102
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:]\n    return binary",
        "num_ids": 50
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary.lstrip('0') or '0'",
        "num_ids": 81
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n //= 2\n        return binary",
        "num_ids": 61
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
        "num_ids": 71
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # convert decimal to binary\n    binary = bin(n)[2:]  # remove prefix '0b'\n    return binary",
        "num_ids": 64
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary_num = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n = n // 2\n    return binary_num",
        "num_ids": 95
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize an empty binary string\n    binary = \"\"\n    \n    # Loop through the decimal number, starting from the least significant bit (rightmost)\n    while n > 0:\n        # Check if the remainder of n divided by 2 is 0 or 1\n        if n % 2 == 0:\n            binary = \"0\" + binary\n        else:\n            binary = \"1\" + binary\n        # Divide n by 2 to shift it one bit to the right\n        n //= 2\n    \n    # Return the binary string with no leading zeros\n    return binary.lstrip(\"0\") or \"0\"",
        "num_ids": 166
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary.lstrip(\"0\")\n",
        "num_ids": 97
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary",
        "num_ids": 85
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
        "num_ids": 71
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 0:\n        return None\n    # Convert the number to a string and find its length\n    num_str = str(num)\n    num_len = len(num_str)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Increment the last digit and add a zero at the end\n        new_num_str = num_str[:-1] + str((int(num_str[-1]) + 1) % 10) + '0' * (num_len - 1)\n        new_num = int(new_num_str)\n    else:\n        # Increment the last digit and add a zero at the end\n        new_num_str = num_str[:-1] + str((int(num_str[-1]) + 1) % 10) + '0' * (num_len - 1)\n        new_num = int(new_num_str)\n        # Find the next smallest palindrome\n        while True:\n            new_num_str = str(new_num)\n            new_num_str = new_num_str[::-1]\n            if new_num_str!= new_num_str[::-1]:\n                break\n            new_num += 1\n        new_num = int(new_num_str)\n    return new_num",
        "num_ids": 339
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Function to check if a number is palindrome or not\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    while not is_palindrome(num):\n        num += 1\n    return num\n\nif __name__ == '__main__':\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))",
        "num_ids": 131
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n\nif __name__ == '__main__':\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))",
        "num_ids": 125
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = num + 1\n    while not str(palindrome) == str(palindrome)[::-1]:\n        palindrome += 1\n    return palindrome",
        "num_ids": 76
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the integer to a string\n    num_str = str(num)\n    \n    # check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # find the next number by adding 1 to the current number\n        next_num = num + 1\n        # convert the next number to a string and check if it is a palindrome\n        next_num_str = str(next_num)\n        while next_num_str!= next_num_str[::-1]:\n            # find the next number by adding 1 to the current number\n            next_num = next_num + 1\n            # convert the next number to a string\n            next_num_str = str(next_num)\n        return next_num\n    else:\n        # find the next number by adding 1 to the current number\n        next_num = num + 1\n        # convert the next number to a string\n        next_num_str = str(next_num)\n        # check if the next number is a palindrome\n        while next_num_str!= next_num_str[::-1]:\n            # find the next number by adding 1 to the current number\n            next_num = next_num + 1\n            # convert the next number to a string\n            next_num_str = str(next_num)\n        return next_num",
        "num_ids": 332
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert integer to string\n    num_str = str(num)\n    # reverse the string\n    reversed_str = num_str[::-1]\n    # check if the number is already a palindrome\n    if num_str == reversed_str:\n        # add 1 to the number and return as an integer\n        return int(num_str + '1')\n    # check if the reversed number is less than the original number\n    if int(reversed_str) < int(num_str):\n        # add 1 to the number and return as an integer\n        return int(num_str + '1')\n    # find the length of the number\n    length = len(num_str)\n    # create a list to hold the digits of the number\n    digits = [int(digit) for digit in num_str]\n    # iterate over the digits from the end to the beginning\n    for i in range(length-1, -1, -1):\n        # if the digit is even, increment it by 1 and return as an integer\n        if digits[i] % 2 == 0:\n            digits[i] += 1\n            return int(''.join([str(digit) for digit in digits]))\n        # if the digit is odd, increment it by 1 and set all later digits to 0 and return as an integer\n        else:\n            digits[i] += 1\n            digits[i+1:] = [0] * (length-i-1)\n            return int(''.join([str(digit) for digit in digits]))",
        "num_ids": 369
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # Check if the number is odd or even\n    if num % 2 == 0:\n        left = int(num/2)\n        right = left - 1\n    else:\n        left = int((num+1)/2)\n        right = left\n    \n    # Find the next smallest palindrome\n    while True:\n        mid = (left + right) // 2\n        palindrome = int(str(mid) + str(mid)[::-1])\n        if palindrome == num + 1:\n            return palindrome\n        elif palindrome > num + 1:\n            right = mid - 1\n        else:\n            left = mid + 1",
        "num_ids": 208
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # If the input number is already a palindrome, return the next smallest palindrome\n    if is_palindrome(num):\n        return num + 1\n    \n    # Increment the input number until it becomes a palindrome\n    while not is_palindrome(num):\n        num += 1\n    \n    # Return the next smallest palindrome\n    return num + 1",
        "num_ids": 156
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the given number to a string to check for palindrome\n    str_num = str(num)\n\n    # Check if the number is already a palindrome\n    if str_num == str_num[::-1]:\n        # If the number is already a palindrome, then return the next number by adding 1\n        return num + 1\n\n    # If the number is not already a palindrome, then we need to find the next smallest palindrome\n\n    # Find the midpoint of the number\n    midpoint = len(str_num) // 2\n\n    # Check if the left half of the number is a palindrome\n    left_half = str_num[:midpoint]\n    if left_half == left_half[::-1]:\n        # If the left half is a palindrome, then we need to check the right half of the number\n        right_half = str_num[midpoint:]\n        if right_half == right_half[::-1]:\n            # If the right half is also a palindrome, then we need to return the next palindrome by adding 1 to the original number\n            return num + 1\n        else:\n            # If the right half is not a palindrome, then we need to remove the middle digit from the right half and return it\n            right_half = right_half[:-1]\n            return int(left_half + right_half[::-1])\n    else:\n        # If the left half is not a palindrome, then we need to remove the middle digit from the left half and return it\n        left_half = left_half[:-1]\n        return int(right_half + left_half[::-1])\n",
        "num_ids": 392
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Find the length of the number\n    length = len(num_str)\n    \n    # Find the middle index of the number\n    mid = length // 2\n    \n    # Create a list to store the digits of the number\n    digits = []\n    \n    # Iterate through the number and add its digits to the list\n    for digit in num_str:\n        digits.append(int(digit))\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, add 1 to the last digit and return the new number as an integer\n        digits[mid] += 1\n        return int(''.join(str(digit) for digit in digits))\n    else:\n        # If it is not, iterate through the digits from right to left and find the first digit that needs to be incremented\n        for i in range(mid, -1, -1):\n            # If the digit needs to be incremented, add 1 to it and return the new number as an integer\n            if digits[i]!= 9:\n                digits[i] += 1\n                for j in range(i + 1, length):\n                    digits[j] = 0\n                return int(''.join(str(digit) for digit in digits))\n        \n        # If all digits need to be incremented, add 1 to the first digit and return the new number as an integer\n        digits[0] += 1\n        for i in range(1, length):\n            digits[i] = 0\n        return int(''.join(str(digit) for digit in digits))",
        "num_ids": 396
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]",
        "num_ids": 60
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n    k -= 1  # convert to 0-based indexing\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None",
        "num_ids": 134
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]",
        "num_ids": 60
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    return arr[k-1]",
        "num_ids": 60
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be a positive integer less than or equal to the length of the array.\")\n    return arr[k - 1]",
        "num_ids": 79
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    camel_case_string = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case_string += word[i].lower()\n        elif word[i] == '_':\n            camel_case_string += word[i+1].upper()\n        else:\n            camel_case_string += word[i]\n    return camel_case_string",
        "num_ids": 108
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([w.capitalize() for w in word.split('_')])",
        "num_ids": 46
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    This function takes a snake case string and converts it to camel case.\n    '''\n    words = word.split('_')\n    first_word = words[0]\n    camel_case_word = ''.join([first_word.capitalize(), *words[1:]])\n    return camel_case_word",
        "num_ids": 75
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.capitalize() if i else word for i, word in enumerate(word.split('_')))",
        "num_ids": 54
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 41
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join([word.capitalize() for word in word.split('_')])",
        "num_ids": 42
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    :param word: string in snake case\n    :return: string in camel case\n    \"\"\"\n    parts = word.split('_')\n    return parts[0] + ''.join(part.capitalize() for part in parts[1:])",
        "num_ids": 71
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case",
        "num_ids": 76
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Calculate the Eulerian number a(n, m)\n    result = 0\n    for i in range(1, m+1):\n        result += n*i\n    # Return the result\n    return result",
        "num_ids": 78
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n < 1 or m < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif m == 1:\n        return 1\n    else:\n        return 2 ** (m - 1) * 2 ** (n - 1) + 1",
        "num_ids": 100
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)",
        "num_ids": 79
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize an empty dictionary to store the values of a(n, m) for each possible combination of n and m\n    eulerian_dict = {}\n    # Loop through each possible combination of n and m\n    for i in range(n+1):\n        for j in range(m+1):\n            # Calculate the value of a(n, m) for the current combination of n and m\n            a = (i+j)**2\n            # Store the value of a(n, m) for the current combination of n and m in the dictionary\n            eulerian_dict[(i, j)] = a\n    # Return the value of a(n, m) for the current combination of n and m\n    return eulerian_dict[(n, m)]",
        "num_ids": 194
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the product of n and m\n    product = n * m\n    \n    # Initialize the Eulerian number to 0\n    eulerian = 0\n    \n    # Check if the product is even or odd\n    if product % 2 == 0:\n        # If it's even, we need to add n and m together\n        eulerian = n + m\n    else:\n        # If it's odd, we need to subtract n and m from the product\n        eulerian = product - n - m\n    \n    # Return the Eulerian number\n    return eulerian",
        "num_ids": 152
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*m",
        "num_ids": 38
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n < 2 or m < 2:\n        return \"Invalid input\"\n    elif m == 2 and n >= 2:\n        return (n*(n-1)) // 2\n    elif m > 2:\n        return eulerian_num(n, 2) * eulerian_num(m//2, 2) + eulerian_num(n, m//2)**2",
        "num_ids": 123
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1: \n        return n + m - 1\n    else: \n        return (eulerian_num(n-1, m) + eulerian_num(n, m-1)) % (10**9+7)",
        "num_ids": 92
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1 or m < 1:\n        return None\n    \n    # Initialize a list to store the even numbers from 2 to 2*m+1\n    even_nums = [i for i in range(2, 2*m+1, 2)]\n    \n    # Initialize a list to store the odd numbers from 3 to 2*m+1\n    odd_nums = [i for i in range(3, 2*m+1, 2)]\n    \n    # Check if the number of even numbers and odd numbers is equal\n    if len(even_nums)!= len(odd_nums):\n        return None\n    \n    # Combine the even and odd numbers into a single list\n    nums = even_nums + odd_nums\n    \n    # Calculate the Eulerian number a(n, m)\n    a = 1\n    for i in range(n):\n        a *= nums[i]\n    \n    return a",
        "num_ids": 226
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n <= 0 or m <= 0:\n        return None\n\n    a = [[0 for _ in range(m)] for _ in range(n)]\n\n    # Row 1\n    for j in range(m):\n        a[0][j] = j + 1\n\n    # Column 1\n    for i in range(1, n):\n        a[i][0] = i + 1\n\n    # Remaining cells\n    for i in range(1, n):\n        for j in range(1, m):\n            a[i][j] = a[i-1][j] + a[i][j-1]\n\n    return a[n-1][m-1]",
        "num_ids": 181
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 62
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n\n    Args:\n    - input_list: a list of lists of strings\n\n    Returns:\n    - a new list of lists with each sublist sorted\n    \"\"\"\n    result = []\n    for sublist in input_list:\n        result.append(sorted(sublist))\n    return result",
        "num_ids": 85
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of true boolean values in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_true_booleans(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of true boolean values in the list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean is True:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup",
        "num_ids": 53
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    return test_tup + tuple(test_list)",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes a list and a tuple as input and appends the list to the tuple.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "num_ids": 54
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "num_ids": 48
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function takes two arguments, a list and a tuple.\n    It appends the list to the tuple and returns the modified tuple.\n    \"\"\"\n    test_tup += test_list  # This is the operation that appends the list to the tuple\n    return test_tup",
        "num_ids": 73
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new tuple by appending the list to the tuple\n    new_tup = test_tup + tuple(test_list)\n    # Return the new tuple\n    return new_tup",
        "num_ids": 72
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list",
        "num_ids": 96
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a heap with the first element of each list\n    heap = []\n    for lst in [num1, num2, num3]:\n        if lst:\n            heapq.heappush(heap, lst[0])\n\n    # Merge the heap with the remaining elements of each list\n    while heap:\n        merged_lst = []\n        for lst in [num1, num2, num3]:\n            if lst and lst[0] == heap[0]:\n                merged_lst.append(lst.pop(0))\n                if lst:\n                    heapq.heappush(heap, lst[0])\n        yield merged_lst",
        "num_ids": 173
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 or num2 or num3:\n        if num1 and num2 and num3:\n            if num1[0] <= num2[0] and num1[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num1 and num2:\n            if num1[0] <= num2[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num2))\n        elif num1 and num3:\n            if num1[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num2 and num3:\n            if num2[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        elif num1:\n            merged_list.append(heapq.heappop(num1))\n        elif num2:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    return merged_list",
        "num_ids": 445
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 or num2 or num3:\n        if num1 and num2 and num3:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        elif num1 and num2:\n            if num1[0] < num2[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            else:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n        elif num1 and num3:\n            if num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        elif num2 and num3:\n            if num2[0] < num3[0]:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        else:\n            if num1:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            elif num2:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n    return merged_list",
        "num_ids": 502
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heappush(merged_list, num1)\n    heapq.heappush(merged_list, num2)\n    heapq.heappush(merged_list, num3)\n    \n    return sorted(merged_list)",
        "num_ids": 99
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Create a min heap from the three lists\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    # Merge the three lists using the min heap\n    merged_list = []\n    while heap:\n        smallest = heapq.heappop(heap)\n        merged_list.append(smallest)\n\n        # Add the next element from the corresponding list to the heap\n        if smallest == num1[0]:\n            heapq.heappush(heap, num1[1])\n            num1.remove(num1[0])\n        elif smallest == num2[0]:\n            heapq.heappush(heap, num2[1])\n            num2.remove(num2[0])\n        else:\n            heapq.heappush(heap, num3[1])\n            num3.remove(num3[0])\n\n    return merged_list",
        "num_ids": 258
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 or num2 or num3:\n        if not num1:\n            merged_list.append(num2.pop())\n        elif not num2:\n            merged_list.append(num1.pop())\n        elif num1[0] < num2[0]:\n            merged_list.append(num1.pop())\n        else:\n            merged_list.append(num2.pop())\n\n        if num1 and not num1[0] < num2[0]:\n            heapq.heappush(num1, heapq.heappop(num2))\n        if num2 and not num1[0] < num2[0]:\n            heapq.heappush(num2, heapq.heappop(num1))\n\n    return merged_list",
        "num_ids": 244
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap) # create an empty heap\n    \n    # add the first two lists to the heap\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    \n    # add the remaining list to the heap\n    for num in num3:\n        heapq.heappush(heap, num)\n    \n    # extract all the numbers from the heap and put them into a list\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    \n    return merged_list",
        "num_ids": 180
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list",
        "num_ids": 244
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while len(merged_list) < len(num1) + len(num2) + len(num3):\n        if len(num1) > 0 and len(num2) > 0 and num1[0] < num2[0]:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif len(num1) > 0 and len(num3) > 0 and num1[0] < num3[0]:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif len(num2) > 0 and len(num3) > 0 and num2[0] < num3[0]:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        elif len(num1) > 0:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif len(num2) > 0:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        elif len(num3) > 0:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n\n    return merged_list",
        "num_ids": 362
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes a binary string s and a number n as input.\n    It rotates the binary string s n times to the right and then calculates the number of odd values in the result.\n    \"\"\"\n    # Convert binary string to list of characters\n    s = list(s)\n\n    # Rotate the binary string n times to the right\n    for i in range(n):\n        temp = s[-1]\n        for j in range(len(s)-1):\n            s[j] = s[j+1]\n        s[len(s)-1] = temp\n\n    # Count the number of odd values in the result\n    count = 0\n    for digit in s:\n        if digit == '1':\n            count += 1\n\n    return count",
        "num_ids": 168
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes two arguments:\n    - s: a binary string of length n\n    - n: the number of times to rotate the string\n    \n    It returns the number of numbers with an odd value when the binary string is rotated n times.\n    '''\n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in s]\n    \n    # Rotate the list n times\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n    \n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for num in rotated_list:\n        if num % 2 == 1:\n            count += 1\n    \n    # Return the count of odd numbers\n    return count",
        "num_ids": 165
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert binary string to integer\n    num = int(s,2)\n    \n    # Rotate the binary string n times\n    num = num << n\n    \n    # Convert the rotated integer back to binary string\n    s = bin(num)[2:]\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Iterate over the rotated binary string\n    for digit in s:\n        # If the digit is odd, increment the count variable\n        if int(digit)%2 == 1:\n            count += 1\n    \n    # Return the count variable\n    return count",
        "num_ids": 155
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize a variable to count the number of odd numbers\n    odd_count = 0\n    \n    # Rotate the binary string n times\n    rotated_s = s*n\n    \n    # Loop through each character in the rotated string\n    for i in range(len(rotated_s)):\n        # If the character is '1', increment the odd count\n        if rotated_s[i] == '1':\n            odd_count += 1\n    \n    # Return the count of odd numbers\n    return odd_count",
        "num_ids": 113
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the string into a list of digits\n    s_list = [int(x) for x in s]\n    \n    # Rotate the list n times\n    for i in range(n):\n        s_list.append(s_list.pop(0))\n        \n    # Count the number of odd digits\n    count = sum(1 for x in s_list if x%2!=0)\n    \n    return count",
        "num_ids": 126
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to integer\n    s = int(s, 2)\n    \n    # Rotate the binary string n times\n    s = format(s, '0{}b'.format(len(bin(s))))\n    s = int(s, 2)\n    \n    # Count the number of odd numbers\n    count = 0\n    for i in range(len(bin(s))):\n        if s & 1:\n            count += 1\n        s = s >> 1\n    \n    return count",
        "num_ids": 113
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes a binary string's' and the number of rotations 'n' as input and returns the number of numbers with an odd value when rotating the binary string the given number of times.\n    '''\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    \n    # Rotate the list 'n' times\n    for i in range(n):\n        s.insert(0, s.pop())\n    \n    # Count the number of odd values in the list and return it\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n    return count",
        "num_ids": 151
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #convert the binary string to a list of integers\n    binary = list(map(int, s))\n    #initialize a variable to count the odd numbers\n    count = 0\n    #iterate over the string n times\n    for i in range(n):\n        #check if the leftmost digit is odd, and increment count if it is\n        if binary[0] % 2 == 1:\n            count += 1\n        #rotate the binary string to the right by 1 position\n        binary = binary[-1:] + binary[:-1]\n    #return the count of odd numbers\n    return count",
        "num_ids": 165
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the string to a list of integers\n    s = [int(x) for x in s]\n    # Initialize variables for counting the number of odd values\n    odds = 0\n    # Iterate over the string n times\n    for i in range(n):\n        # Rotate the string by one position\n        rotated = s[-1] + s[:-1]\n        # Count the number of odd values in the rotated string\n        odds += sum(x % 2 for x in rotated)\n        # Update the string for the next iteration\n        s = rotated\n    return odds",
        "num_ids": 130
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = str(s)  # convert input to string if not already\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]  # rotate the string\n        for j in range(len(rotated)):\n            if rotated[j] == '1':  # check if the rotated number has an odd value\n                count += 1\n                break\n    return count",
        "num_ids": 129
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst1 in nestedlist:\n        for lst2 in nestedlist:\n            if lst1!= lst2:\n                for element in lst1:\n                    if element in lst2 and element not in common_elements:\n                        common_elements.append(element)\n    return common_elements",
        "num_ids": 96
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if len(set(nestedlist[i]).intersection(set(nestedlist[j]))) > 0:\n                common_elements.append(set(nestedlist[i]).intersection(set(nestedlist[j])))\n    return common_elements",
        "num_ids": 115
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    common = []\n    for lst in nestedlist:\n        if len(common) == 0:\n            common = lst\n        else:\n            common = list(set(common).intersection(lst))\n    return common",
        "num_ids": 57
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set(nestedlist[0])  # set of elements in the first list\n    for lst in nestedlist[1:]:\n        common_set = common_set.intersection(lst)  # find common elements with current list\n    return list(common_set)  # convert set back to list\n",
        "num_ids": 99
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]).intersection(nestedlist[j]):\n                common_list.append(set(nestedlist[i]).intersection(nestedlist[j]))\n    return common_list",
        "num_ids": 105
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_list = []\n    if len(nestedlist) == 0:\n        return []\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        common_list = set(nestedlist[0]).intersection(nestedlist[1])\n        return common_list.union(common_in_nested_lists(nestedlist[1:]))",
        "num_ids": 95
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(i+1, len(nestedlist)):\n                for l in range(len(nestedlist[k])):\n                    if nestedlist[i][j] == nestedlist[k][l]:\n                        common.add(nestedlist[i][j])\n    return common",
        "num_ids": 122
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return list(common_elements)",
        "num_ids": 58
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                for k in nestedlist[i]:\n                    if k in nestedlist[j] and k not in common_elements:\n                        common_elements.append(k)\n    return common_elements",
        "num_ids": 105
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i + 1, len(nestedlist)):\n            common_elements += [value for value in nestedlist[i] if value in nestedlist[j]]\n    return common_elements",
        "num_ids": 92
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a given string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 44
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks whether a given string represents an integer or not.\n\n    Args:\n        text (str): A string representing an integer.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 75
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pattern = re.compile(r'^-?\\d+$')\n    return pattern.match(text) is not None",
        "num_ids": 56
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dict_list(dict_list):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n\n    :param dict_list: A list of dictionaries\n    :return: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for dict_item in dict_list:\n        if dict_item:\n            return False\n    return True",
        "num_ids": 76
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    This function takes a list of dictionaries as an input and returns True if all the dictionaries are empty.\n    If at least one dictionary is not empty, it returns False.\n    '''\n    for dic in list1:\n        if dic!= {}:\n            return False\n    return True",
        "num_ids": 67
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    This function takes a list as an argument and checks whether all dictionaries in the list are empty or not.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 52
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 43
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    \n    result = 0\n    for num in nums:\n        if not isinstance(num, int) or num <= 0:\n            raise ValueError(\"Tuple elements must be positive integers\")\n        result = result * 10 + num\n        \n    return result",
        "num_ids": 95
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 50
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers and converts it into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result = result * 10 + i\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for digit in nums:\n        result = result * 10 + digit\n    return result",
        "num_ids": 50
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as input and converts all possible convertible elements to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 97
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 96
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, (int, float)):\n            result.append(float(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 101
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list",
        "num_ids": 110
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    continue\n    return test_list",
        "num_ids": 110
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, inner_list in enumerate(test_list):\n        for j, item in enumerate(inner_list):\n            try:\n                test_list[i][j] = float(item)\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 89
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 96
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 96
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], int) or isinstance(test_list[i][j], float):\n                continue\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 125
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as input and converts all the elements in it to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 97
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    list: A list of strings.\n    \"\"\"\n    return string.split()",
        "num_ids": 58
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as input and returns a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    :param string: The input string to convert.\n    :type string: str\n    :return: A list of strings.\n    :rtype: list of str\n    \"\"\"\n    return string.split()",
        "num_ids": 68
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n    # Loop through the array and update the frequency of each element\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    # Loop through the frequency dictionary and find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num",
        "num_ids": 106
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[low] and arr[mid] == arr[high]:\n            return None\n        if arr[mid] <= arr[low]:\n            if arr[mid] < arr[low]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            if arr[mid] > arr[high]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return arr[low]",
        "num_ids": 160
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n <= 0:\n        return None\n    \n    # If the length of the array is odd, then the only element that appears only once is the middle element\n    if n % 2!= 0:\n        return arr[n//2]\n    \n    # If the length of the array is even, then the only element that appears only once is the one that is not common to both ends\n    first_half = arr[:n//2]\n    second_half = arr[n//2:]\n    \n    # Find the common element in both halves\n    common = set(first_half) & set(second_half)\n    \n    # Return the only element that is not in the common set\n    for element in arr:\n        if element not in common:\n            return element\n    \n    # If no element is found, return None\n    return None",
        "num_ids": 205
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize variables to keep track of the count of elements and the current element being checked\n    count = 0\n    curr = None\n\n    # Loop through the array and count the number of elements that appear only once\n    for num in arr:\n        # If the current element being checked is the same as the previous element, increment the count of elements that appear only once\n        if num == curr:\n            count += 1\n        # If the current element being checked is different than the previous element, set the count of elements that appear only once to 1 and update the current element being checked\n        else:\n            count = 1\n            curr = num\n\n    # Loop through the array again and find the element that appears only once\n    for num in arr:\n        if arr.count(num) == 1:\n            return num\n\n    # If no element appears only once in the array, return None\n    return None",
        "num_ids": 212
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    # Initialize variables for the first and second elements\n    first = arr[0]\n    second = arr[1]\n    \n    # If the first element appears only once, return it\n    if arr.count(first) == 1:\n        return first\n    \n    # If the second element appears only once, return it\n    elif arr.count(second) == 1:\n        return second\n    \n    # If neither of the first two elements appear only once, search for the element in the rest of the array\n    else:\n        for i in range(2, len(arr)):\n            if arr.count(arr[i]) == 1:\n                return arr[i]",
        "num_ids": 142
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0] if arr[0]!= arr[1] else arr[1]\n    \n    # initialize variables\n    count = 1\n    prev = arr[0]\n    \n    # iterate through the array and count the number of occurrences of each element\n    for i in range(1, n):\n        if arr[i] == prev:\n            count += 1\n        else:\n            count -= 1\n        prev = arr[i]\n    \n    # iterate through the array again and find the element that appears only once\n    for i in range(n):\n        if arr[i] == prev:\n            return prev\n    \n    return None",
        "num_ids": 211
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    xor = 0\n    \n    # Find XOR of all elements in array\n    for i in range(n):\n        xor ^= arr[i]\n        \n    # Find rightmost set bit\n    rightmost_set_bit = xor & ~(xor-1)\n    \n    # Traverse array again and search for element that appears only once\n    for i in range(n):\n        if arr[i] & rightmost_set_bit:\n            return arr[i]\n            \n    # If no such element is found, return -1\n    return -1",
        "num_ids": 144
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None  # Array has less than 2 elements, no solution\n    elif n == 2:\n        return arr[0] if arr[0]!= arr[1] else None  # Array has only 2 elements, the other one is the duplicate\n    else:\n        # Binary search for the smallest element that appears only once\n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == arr[mid - 1] == arr[mid + 1]:\n                right = mid - 1  # Smallest element found\n            elif arr[mid] == arr[mid - 1]:\n                left = mid + 1  # Search in the right half of the array\n            else:\n                right = mid - 1  # Search in the left half of the array\n        return arr[left]  # Smallest element that appears only once",
        "num_ids": 242
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables for counting the occurrences of each element\n    count = 0\n    prev_elem = None\n    \n    # Traverse the array and count the occurrences of each element\n    for elem in arr:\n        if elem == prev_elem:\n            count += 1\n        else:\n            count = 1\n        prev_elem = elem\n    \n    # Traverse the array again to find the element that appears only once\n    for elem in arr:\n        if arr.count(elem) == 1:\n            return elem\n    \n    # If no such element exists, return None\n    return None",
        "num_ids": 145
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        return arr[0]\n    for i in range(n):\n        if arr[i]!= arr[0]:\n            break\n    j = i + 1\n    while j < n:\n        if arr[j] == arr[i]:\n            j += 1\n        else:\n            return arr[i]\n    return None",
        "num_ids": 134
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 128
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    max_product = -float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]) * abs(list1[j][0]) * abs(list1[i][1]) * abs(list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product",
        "num_ids": 108
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]) * abs(list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1]) * abs(lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 94
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1] * list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 99
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 99
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 99
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 99
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 105
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 122
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list of all numbers from 1 to the specified limit\n    numbers = list(range(1, limit+1))\n    \n    # Create a dictionary to store the sum of divisors for each number\n    sums = {}\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Calculate the sum of divisors for the current number\n        div_sum = sum(div for div in range(1, num) if num % div == 0)\n        \n        # Add the current number and its sum of divisors to the dictionary\n        sums[num] = div_sum\n    \n    # Create a list of amicable pairs\n    amicable_pairs = []\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Check if the current number has a corresponding amicable pair\n        if num in sums and sums[num]!= num and sums[num] in sums and sums[num]!= num and num == sums[sums[num]]:\n            # Add the amicable pair to the list\n            amicable_pairs.append((num, sums[num]))\n    \n    # Sum the amicable numbers and return the result\n    return sum(pair[0] for pair in amicable_pairs) + sum(pair[1] for pair in amicable_pairs)",
        "num_ids": 314
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        sum_divisors = sum(x for x in range(1, num) if num % x == 0)\n        if sum_divisors > num and num == sum(x for x in range(1, sum_divisors) if sum_divisors % x == 0):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)",
        "num_ids": 141
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        sum_factors = sum(get_factors(num))\n        if sum_factors!= num and sum_factors < limit and num == sum(get_factors(sum_factors)):\n            amicable_sum += num + sum_factors\n    return amicable_sum\n\ndef get_factors(n):\n    '''\n    Get all factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n//i:\n                factors.append(n//i)\n    return factors",
        "num_ids": 191
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisors(n):\n    return [i for i in range(1, n+1) if n%i == 0]\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for i in range(1, limit+1):\n        # Check for divisors of i\n        divisor_sum = sum(divisors(i))\n        if divisor_sum > i and i == sum(divisors(divisor_sum)):\n            amicable_sum += i + divisor_sum\n            \n    return amicable_sum",
        "num_ids": 150
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_amicable_number(num):\n    \"\"\"\n    A function to check if a number is amicable or not.\n    \"\"\"\n    divisors = [i for i in range(1, num) if num % i == 0]\n    sum_divisors = sum(divisors)\n    if sum_divisors == num:\n        return True\n    elif sum_divisors!= num and num == sum([i for i in range(1, sum_divisors) if sum_divisors % i == 0]):\n        return True\n    else:\n        return False\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    A function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            amicable_sum += i\n    return amicable_sum",
        "num_ids": 211
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_amicable(num):\n    '''\n    Returns True if a number is amicable, False otherwise.\n    '''\n    div = sum([i for i in range(1, num) if num % i == 0])\n    return num!= div and num == sum([i for i in range(1, div) if div % i == 0])\n\ndef amicable_numbers_sum(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    '''\n    amicables = [num for num in range(1, limit) if is_amicable(num)]\n    return sum(amicables)",
        "num_ids": 147
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisors(n):\n    '''\n    Return a set of all the divisors of n.\n    '''\n    divs = set([1])\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divs.add(i)\n            divs.add(n//i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(2, limit):\n        divs_i = divisors(i)\n        sum_divs_i = sum(divs_i)\n        if i!= sum_divs_i and i == sum(divisors(sum_divs_i)):\n            total += i + sum_divs_i\n    return total",
        "num_ids": 200
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisors(n):\n    divs = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divs.extend([i, n // i])\n    return divs\n\ndef amicable_numbers_sum(limit):\n    sum_amicable_numbers = 0\n    for i in range(2, limit):\n        if i in divisors(i):\n            j = sum(divisors(i)) - i\n            if j < limit and j in divisors(j) and i!= j:\n                sum_amicable_numbers += i + j\n    return sum_amicable_numbers",
        "num_ids": 156
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisors(n):\n    \"\"\"\n    Returns a list of divisors of a given number n.\n    \"\"\"\n    divs = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(2, limit+1):\n        div_sum = sum(divisors(i))\n        if div_sum!= i and sum(divisors(div_sum)) == i:\n            amicable_sum += i\n    return amicable_sum",
        "num_ids": 194
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum += i\n    return sum\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    div1 = sum_proper_divisors(num)\n    div2 = sum_proper_divisors(div1)\n    return num == div2 and num!= div1\n\ndef sum_proper_divisors(num):\n    '''\n    Calculate the sum of proper divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum",
        "num_ids": 195
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Returns the angle of the complex number a+bi.\n    \"\"\"\n    return cmath.phase(a + b * 1j)",
        "num_ids": 46
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return angle",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))",
        "num_ids": 45
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b)",
        "num_ids": 43
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Get the phase of the complex number\n    phase = cmath.phase(a)\n    # Convert the phase to degrees and return\n    return round(phase * 180 / cmath.pi, 2)",
        "num_ids": 77
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the absolute value of the complex number\n    abs_complex = abs(complex(a, b))\n    \n    # Calculate the angle in degrees\n    angle_degrees = round(cmath.phase(complex(a, b)), 2)\n    \n    # Print the angle in degrees\n    print(\"The angle of complex number ({0}, {1}) is {2} degrees.\".format(a, b, angle_degrees))",
        "num_ids": 119
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the phase angle of the complex number\n    phase_angle = cmath.phase(complex(a, b))\n\n    # convert the phase angle to degrees\n    angle = round(phase_angle * 180 / cmath.pi)\n\n    # return the angle in degrees\n    return angle",
        "num_ids": 95
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a/b)\n    return angle",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b*1j)",
        "num_ids": 46
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Returns the angle of a complex number in degrees.\n    '''\n    return cmath.phase(a)*180/cmath.pi\n    ",
        "num_ids": 45
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_str = string[i:j]\n            diff = abs(sub_str.count('0') - sub_str.count('1'))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 96
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_length:\n                max_length = diff\n    return max_length",
        "num_ids": 107
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 147
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    # Initialize variables for storing the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    # Loop through all possible substrings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Count the number of 0s and 1s in the current substring\n            count_0 = string[i:j].count('0')\n            count_1 = string[i:j].count('1')\n            # Update the current difference based on the current substring\n            curr_diff = abs(count_0 - count_1)\n            # Update the maximum difference if the current difference is greater\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n    # Return the maximum difference\n    return max_diff",
        "num_ids": 186
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            count_0s = sub_str.count('0')\n            count_1s = sub_str.count('1')\n            diff = abs(count_0s - count_1s)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 114
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    This function takes a binary string as input and returns the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_len = 0\n    curr_len = 0\n    prev_bit = string[0]\n\n    for bit in string:\n        if bit == prev_bit:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n            prev_bit = bit\n\n    max_len = max(max_len, curr_len)\n\n    return max_len",
        "num_ids": 145
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            temp_str = string[i:j]\n            if len(temp_str) > max_length and temp_str.count('0') == temp_str.count('1'):\n                max_length = len(temp_str)\n    return max_length",
        "num_ids": 98
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            # count number of zeros and ones in current substring\n            count_0 = string[i:j].count('0')\n            count_1 = string[i:j].count('1')\n            \n            # find maximum difference between count_0 and count_1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff",
        "num_ids": 131
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            count_0s = substring.count('0')\n            count_1s = substring.count('1')\n            diff = abs(count_0s - count_1s)\n            if diff > max_length:\n                max_length = diff\n    return max_length",
        "num_ids": 108
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_length = 0\n    current_length = 0\n    current_bit = string[0]\n    for bit in string:\n        if bit == current_bit:\n            current_length += 1\n        else:\n            current_length = 1\n            current_bit = bit\n        max_length = max(max_length, current_length)\n    return max_length",
        "num_ids": 88
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_sum = 0\n    # Find the list of common divisors\n    divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n    # Sum the common divisors\n    for i in divisors:\n        divisor_sum += i\n    return divisor_sum",
        "num_ids": 114
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding the maximum of the two numbers\n    max_num = max(a,b)\n    \n    # Finding the minimum of the two numbers\n    min_num = min(a,b)\n    \n    # Finding the common divisors between the two numbers\n    common_divisors = []\n    for i in range(1,min_num+1):\n        if(a%i==0 and b%i==0):\n            common_divisors.append(i)\n            \n    # Finding the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n    \n    # Returning the sum of common divisors\n    return sum_common_divisors\n",
        "num_ids": 183
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    # Find the set of common factors of num1 and num2\n    factors = set(range(1, min(num1, num2) + 1))\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            factors.add(i)\n    # Calculate the sum of the common factors\n    return sum(factors)",
        "num_ids": 133
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Finding the common divisors of a and b using a set intersection\n    common_divisors = set(range(1, min(a, b) + 1)) & set(range(1, max(a, b) + 1))\n    # Summing up the common divisors\n    result = sum(common_divisors)\n    return result",
        "num_ids": 112
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the maximum number between a and b\n    max_num = max(a, b)\n\n    # Initialize the sum of common divisors to 0\n    sum_common_divisors = 0\n\n    # Loop through all numbers from 1 to max_num\n    for i in range(1, max_num + 1):\n        # Check if both a and b are divisible by i\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum of common divisors\n            sum_common_divisors += i\n\n    # Return the sum of common divisors\n    return sum_common_divisors",
        "num_ids": 174
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding the maximum number among the given numbers\n    max_num = num1 if num1 > num2 else num2\n\n    # Finding the common divisors of the two numbers\n    common_divisors = []\n    for i in range(1, max_num + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n\n    # Finding the sum of common divisors\n    return sum(common_divisors)",
        "num_ids": 151
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors.\n    \"\"\"\n\n    # Get the prime factorization of a and b\n    a_factors = prime_factors(a)\n    b_factors = prime_factors(b)\n\n    # Find the common prime factors\n    common_factors = set(a_factors) & set(b_factors)\n\n    # Calculate the product of the common prime factors\n    product = 1\n    for factor in common_factors:\n        product *= factor ** min(a_factors.count(factor), b_factors.count(factor))\n\n    return product\n\ndef prime_factors(n):\n    \"\"\"\n    This function returns a list of prime factors of a given number.\n\n    Parameters:\n    n (int): The number.\n\n    Returns:\n    list: A list of prime factors of the number.\n    \"\"\"\n\n    # Initialize a list of factors\n    factors = []\n\n    # Loop through all numbers from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # If i is a factor of n, add it to the list and divide n by i\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    # If n is greater than 1, it is a prime factor\n    if n > 1:\n        factors.append(n)\n\n    return factors\n",
        "num_ids": 350
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Finding the sum of common divisors\n    sum_of_divisors = 0\n    for i in range(1, smaller + 1):\n        if a % i == 0 and b % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors",
        "num_ids": 122
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Initialize the sum\n    result = 0\n\n    # Iterate through all the numbers from 1 to the smaller number\n    for i in range(1, smaller + 1):\n        # Check if the first number is a divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            result += i\n\n    # Return the sum of common divisors\n    return result",
        "num_ids": 137
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers a and b as input and returns the sum of their common divisors.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        This function takes two integers a and b as input and returns their greatest common divisor.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def get_common_divisors(a, b):\n        \"\"\"\n        This function takes two integers a and b as input and returns a list of their common divisors.\n        \"\"\"\n        divisors = []\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    return sum(get_common_divisors(a, b))",
        "num_ids": 197
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n\n    Parameters:\n    x (int): First integer to be multiplied.\n    y (int): Second integer to be multiplied.\n\n    Returns:\n    int: The product of x and y.\n    \"\"\"\n    result = x * y\n    return result",
        "num_ids": 72
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n\nprint(multiply_int(4, 5))  # Output: 20",
        "num_ids": 48
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes two arguments:\n    n: an integer representing the maximum number of characters that a word can have\n    words: a list of words\n    \n    It returns a list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 93
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    \"\"\"\n    This function takes two arguments, n and str. n represents the maximum length of words to be considered for finding long words.\n    str represents a list of words. The function will return a list of words that are longer than n characters from the given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "num_ids": 110
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 77
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    This function takes a list of words and returns a list of words that are longer than n characters.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list",
        "num_ids": 83
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two parameters - n (an integer) and str (a list of strings).\n    It returns a list of strings containing words that are longer than n characters.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 79
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Return a list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]",
        "num_ids": 43
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments, n and str.\n    n is the maximum length of the words that we want to find.\n    str is a list of words.\n    The function finds the words in the list that are longer than n characters and returns them.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 96
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 69
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments:\n    n: An integer representing the maximum number of characters a word can have.\n    str: A string containing words separated by spaces.\n\n    The function returns a list of words that are longer than n characters.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 105
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    expected_sum = size * (size * size + 1) // 2\n\n    # Calculate the sum of the rows, columns, and diagonals\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(size)) for j in range(size)]\n    diag_sum_left = sum(my_matrix[i][i] for i in range(size))\n    diag_sum_right = sum(my_matrix[i][size-1-i] for i in range(size))\n\n    # Check if all sums are equal to the expected sum\n    if all(s == expected_sum for s in row_sums + col_sums + [diag_sum_left, diag_sum_right]):\n        return True\n    else:\n        return False",
        "num_ids": 225
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the size of the matrix\n    size = len(my_matrix)\n\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n\n    # Check if the sum of the first row is equal to the sum of the magic number\n    if row_sum!= size * (size * size + 1) / 2:\n        return False\n\n    # Calculate the sum of each column\n    col_sums = [0] * size\n\n    for j in range(size):\n        col_sum = sum([my_matrix[i][j] for i in range(size)])\n        col_sums[j] = col_sum\n\n        if col_sum!= size * (size * size + 1) / 2:\n            return False\n\n    # Calculate the sum of the diagonal\n    diag_sum1 = sum([my_matrix[i][i] for i in range(size)])\n    diag_sum2 = sum([my_matrix[i][size - i - 1] for i in range(size)])\n\n    if diag_sum1!= size * (size * size + 1) / 2 or diag_sum2!= size * (size * size + 1) / 2:\n        return False\n\n    # If all the checks pass, return True\n    return True",
        "num_ids": 308
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function will test whether the given matrix is a magic square or not.\n\n    A magic square is a square grid of numbers, where each row, column, and both diagonals add up to the same sum.\n    The magic square must be a square matrix of size n x n, where n is an odd number.\n\n    Args:\n    my_matrix (list): A list of lists representing a square matrix.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n\n    n = len(my_matrix)\n    magic_sum = (n * (n * n + 1)) // 2  # calculate the sum of all elements in a magic square\n\n    # check if the matrix is square and odd-sized\n    if n!= len(my_matrix[0]) or n % 2 == 0:\n        return False\n\n    # check if the matrix is a magic square\n    row_sums = [0] * n\n    col_sums = [0] * n\n    diag_sum1 = 0\n    diag_sum2 = 0\n\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] < 1 or my_matrix[i][j] > n * n:  # check if the element is within the range of the matrix\n                return False\n            row_sums[i] += my_matrix[i][j]\n            col_sums[j] += my_matrix[i][j]\n            if i == j:\n                diag_sum1 += my_matrix[i][j]\n            if i + j == n - 1:\n                diag_sum2 += my_matrix[i][j]\n\n    if row_sums!= [magic_sum] * n or col_sums!= [magic_sum] * n or diag_sum1!= magic_sum or diag_sum2!= magic_sum:\n        return False\n\n    return True",
        "num_ids": 428
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if the sum of each row and column is equal to the magic number\n    if len(set(row_sums)) == 1 and len(set(col_sums)) == 1:\n        # Check if the sum of the diagonal elements is equal to the magic number\n        diagonal_sum = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n        if diagonal_sum == row_sums[0]:\n            # Check if the sum of the anti-diagonal elements is equal to the magic number\n            anti_diagonal_sum = sum([my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))])\n            if anti_diagonal_sum == row_sums[0]:\n                return True\n    \n    return False",
        "num_ids": 249
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_row = [sum(my_matrix[i]) for i in range(n)]\n    sum_col = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    diag1 = sum(my_matrix[i][i] for i in range(n))\n    diag2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    return sum_row == sum_col == [i*n for i in range(1, n*n+1)] and diag1 == diag2 == (n*(n*n+1))//2",
        "num_ids": 181
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in my_matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if all rows and columns have the same sum\n    if row_sums!= col_sums:\n        return False\n    \n    # Calculate the sum of the diagonals\n    diag_sum_left = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum_right = sum([my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))])\n    \n    # Check if the diags have the same sum\n    if diag_sum_left!= diag_sum_right:\n        return False\n    \n    # If all checks pass, return True\n    return True",
        "num_ids": 251
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n\n    for i in range(1, n):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= magic_sum:\n            return False\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if col_sum!= magic_sum:\n            return False\n\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag_sum!= magic_sum:\n        return False\n\n    diag_sum = sum(my_matrix[i][n - i - 1] for i in range(n))\n    if diag_sum!= magic_sum:\n        return False\n\n    return True",
        "num_ids": 201
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = 0\n    magic_sum_add = 0\n\n    # Calculate the sum of the diagonals\n    for i in range(len(my_matrix)):\n        magic_sum += my_matrix[i][i]\n        magic_sum_add += my_matrix[i][len(my_matrix)-1-i]\n\n    # Check if the sum of the diagonals is equal to the magic number 15\n    if magic_sum!= 15 or magic_sum_add!= 15:\n        return False\n\n    # Calculate the sum of the rows and columns\n    row_sums = [0] * len(my_matrix)\n    col_sums = [0] * len(my_matrix)\n\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            row_sums[i] += my_matrix[i][j]\n            col_sums[j] += my_matrix[i][j]\n\n    # Check if all row sums are equal to the magic number 15\n    for i in range(len(my_matrix)):\n        if row_sums[i]!= 15:\n            return False\n\n    # Check if all column sums are equal to the magic number 15\n    for i in range(len(my_matrix)):\n        if col_sums[i]!= 15:\n            return False\n\n    # Check if all sub-squares are equal to the magic number 15\n    for i in range(0, len(my_matrix), 3):\n        for j in range(0, len(my_matrix), 3):\n            sub_sum = my_matrix[i][j] + my_matrix[i][j+1] + my_matrix[i][j+2] + \\\n                      my_matrix[i+1][j] + my_matrix[i+1][j+1] + my_matrix[i+1][j+2] + \\\n                      my_matrix[i+2][j] + my_matrix[i+2][j+1] + my_matrix[i+2][j+2]\n            if sub_sum!= 15:\n                return False\n\n    # If all the checks pass, the matrix is a magic square\n    return True",
        "num_ids": 525
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n    \n    # Calculate the sum of the elements across the rows\n    row_sum = [sum(my_matrix[i][j] for j in range(n)) for i in range(n)]\n    \n    # Calculate the sum of the elements across the columns\n    col_sum = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    \n    # Check if all sums are equal\n    return all(sum(row) == diagonal_sum == sum(col) for row, col in zip(my_matrix, col_sum))",
        "num_ids": 215
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # check if the sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n    \n    # calculate the sum of the main diagonal\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    # calculate the sum of the secondary diagonal\n    sec_diag_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # check if the sum of the diagonals is the same\n    if diag_sum!= sec_diag_sum:\n        return False\n    \n    return True",
        "num_ids": 241
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n\n    for num, count in freq.items():\n        if count == max_freq:\n            return num\n",
        "num_ids": 89
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num",
        "num_ids": 88
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function finds the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency count of each item in the list\n    freq_count = defaultdict(int)\n    for num in nums:\n        freq_count[num] += 1\n\n    # find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_count.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item",
        "num_ids": 132
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item",
        "num_ids": 133
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Count the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with maximum frequency\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item",
        "num_ids": 115
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store item frequencies\n    freq = defaultdict(int)\n    \n    # Iterate over the list of numbers and update frequencies\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in freq.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    \n    return max_item",
        "num_ids": 112
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num",
        "num_ids": 104
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num",
        "num_ids": 84
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the maximum frequency and its corresponding item\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    \n    return max_item",
        "num_ids": 109
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num",
        "num_ids": 88
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n\n    vowel_indices.reverse()\n    new_str = ''\n    for i in range(len(str1)):\n        if i in vowel_indices:\n            new_str += str1[i]\n        else:\n            new_str += str1[i]\n    return new_str",
        "num_ids": 148
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_index = []\n\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_index.append(i)\n\n    for i in range(len(vowels_index)//2):\n        j = len(vowels_index)-i-1\n        str1 = str1[:vowels_index[i]] + str1[vowels_index[j]:vowels_index[i]][::-1] + str1[vowels_index[j]+1:]\n\n    return str1",
        "num_ids": 151
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as input and returns a new string with only the vowels in reverse order.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        elif char.isalpha():\n            new_str += char\n    return new_str.replace(\"AEIOUaeiou\", \"\")",
        "num_ids": 109
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_indices.reverse()\n    reversed_str = [char for i, char in enumerate(str1) if i not in vowel_indices]\n    return ''.join(reversed_str)",
        "num_ids": 114
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiou'\n    vowel_indices = [i for i, char in enumerate(str1) if char.lower() in vowels and char.lower()!= 'y']\n    reversed_str = list(str1)\n    \n    for i in vowel_indices[::-1]:\n        reversed_str[i] = str1[i]\n        \n    return ''.join(reversed_str)",
        "num_ids": 99
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i] in vowels and str1[j] in vowels:\n            if str1[i].islower():\n                str1[i], str1[j] = str1[j], str1[i]\n            else:\n                str1[i], str1[j] = str1[j].upper(), str1[i].upper()\n            i += 1\n            j -= 1\n        elif str1[i] in vowels:\n            j -= 1\n        elif str1[j] in vowels:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return \"\".join(str1)",
        "num_ids": 202
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for i in str1:\n        if i in vowels:\n            vowels_list.append(i)\n    vowels_list.reverse()\n    vowels_str = \"\".join(vowels_list)\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            result += vowels_str[vowels.index(str1[i])]\n        else:\n            result += str1[i]\n    return result",
        "num_ids": 143
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = str1[vowels_indices[::-1]]\n    for i, char in enumerate(reversed_vowels):\n        if char not in vowels:\n            reversed_vowels = reversed_vowels[:i] + char + reversed_vowels[i+1:]\n    return reversed_vowels",
        "num_ids": 149
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    for i in range(len(vowel_indices) // 2):\n        j = len(vowel_indices) - i - 1\n        str1[vowel_indices[i]], str1[vowel_indices[j]] = str1[vowel_indices[j]], str1[vowel_indices[i]]\n    return \"\".join(str1)",
        "num_ids": 143
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    start = 0\n    end = len(str1) - 1\n    \n    while start < end:\n        if str1[start].lower() in vowels and str1[end].lower() in vowels:\n            str1[start], str1[end] = str1[end], str1[start]\n            start += 1\n            end -= 1\n        elif str1[start].lower() not in vowels:\n            start += 1\n        elif str1[end].lower() not in vowels:\n            end -= 1\n    \n    return ''.join(str1)",
        "num_ids": 168
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))",
        "num_ids": 37
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns a string.\n    '''\n    return str(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns a string.\n    '''\n    str1 = ''.join(tup1)\n    return str1",
        "num_ids": 40
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as an argument and returns the string representation of the tuple.\n    \"\"\"\n    return str(tup1)",
        "num_ids": 38
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    return ', '.join(map(str, tup1))",
        "num_ids": 34
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and calculates the sum of all the negative numbers in the list.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "num_ids": 69
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum",
        "num_ids": 69
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of negative numbers in the list.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "num_ids": 67
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n            \n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of negative numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 64
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    hex_num = n * (2*n - 1)\n    return hex_num",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2*n - 1)\n    return hex_num",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i*(2*i - 1)\n        count += 1\n        if count == n:\n            return hex_num\n        i += 1",
        "num_ids": 78
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 1\n    hexagonal = 1\n    while count <= n:\n        hexagonal += count\n        count += 1\n    return hexagonal",
        "num_ids": 61
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        hex_num = num * (2 * num - 1)\n        count += 1\n        num += 1\n    return hex_num",
        "num_ids": 73
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    This function takes an integer n as input and returns the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    \n    while count < n:\n        count += 1\n        num += 6*count - 3\n    \n    return num\n",
        "num_ids": 67
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function returns the nth hexagonal number.\n    \"\"\"\n    hex_num = (n * (2 * n - 1))\n    return hex_num",
        "num_ids": 46
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2*n - 1)\n    return hex_num",
        "num_ids": 47
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes",
        "num_ids": 93
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 45
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    if count_non_zeroes == 0:\n        return \"No non-zeroes found in array.\"\n    else:\n        ratio = count_zeroes / count_non_zeroes\n        return f\"Ratio of zeroes to non-zeroes is {ratio:.2f}.\"",
        "num_ids": 154
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    if count_non_zero == 0:\n        return 0\n    else:\n        return count_zero / count_non_zero",
        "num_ids": 117
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zeros = 0\n    count_non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    \n    return count_zeros / count_non_zeros if count_non_zeros > 0 else 0",
        "num_ids": 85
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count",
        "num_ids": 99
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)",
        "num_ids": 74
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n\n    return count_zero / count_non_zero",
        "num_ids": 99
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    # Count the number of zeroes and non-zeroes\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    # Calculate the ratio\n    ratio = count_zeroes / count_non_zeroes\n    \n    return ratio",
        "num_ids": 101
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if non_zeroes == 0:\n        return None\n    \n    return zeroes / non_zeroes",
        "num_ids": 106
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True",
        "num_ids": 86
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    power = 0\n    while 2**power <= n: \n        power += 1\n    if power == 0: \n        return False\n    elif n == 2**power - 1: \n        return True\n    else: \n        return False",
        "num_ids": 95
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    while n & (n - 1) == 0:\n        n >>= 1\n    return n == 1",
        "num_ids": 52
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Loop through all powers of 2 starting from 1 and add them to the power_sum\n    for i in range(1, n+1):\n        power_sum += 2**i\n        \n        # Check if the power_sum is equal to the given number\n        if power_sum == n:\n            return True\n        \n        # If the power_sum becomes greater than the given number, the given number cannot be represented as sum of non-zero powers of 2\n        if power_sum > n:\n            return False\n        \n    # If the loop completes without returning, the given number can be represented as sum of non-zero powers of 2\n    return True",
        "num_ids": 205
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        sum = 0\n        power = 1\n        \n        while sum < n:\n            sum += pow(2, power)\n            power += 1\n            \n        if sum == n:\n            return True\n        else:\n            return False",
        "num_ids": 116
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize the list to store the powers of 2\n    power_of_two = [1]\n\n    # Find the maximum power of 2 that is less than or equal to n\n    max_power_of_two = 2 ** (len(bin(n)) - 3)\n\n    # Calculate the powers of 2 less than or equal to max_power_of_two\n    for i in range(2, max_power_of_two+1):\n        power_of_two.append(power_of_two[-1] * 2)\n\n    # Check if n can be represented as sum of powers of 2\n    for i in range(len(power_of_two)):\n        if n == 0:\n            return True\n        if power_of_two[i] <= n:\n            n -= power_of_two[i]\n        else:\n            return False\n\n    # If n is still greater than 0, it can't be represented as sum of powers of 2\n    return n == 0",
        "num_ids": 267
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 1\n    sum_of_powers_of_two = 0\n\n    while n > 0:\n        remainder = n % 2\n        if remainder == 1:\n            sum_of_powers_of_two += power_of_two\n        power_of_two *= 2\n        n //= 2\n\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False",
        "num_ids": 148
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes an integer as input and returns True if the number can be represented as sum of non-zero powers of 2,\n    otherwise False.\n    '''\n    if n == 0:\n        return True\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n //= i\n    if n == 1:\n        return True\n    else:\n        return False",
        "num_ids": 130
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a variable to store the remainder obtained while dividing n by 2\n    remainder = 0\n    # While n is greater than 0, divide it by 2 and store the remainder in the variable remainder\n    while n > 0:\n        remainder = n % 2\n        # If remainder is not zero, then the given number cannot be represented as sum of non-zero powers of 2\n        if remainder!= 0:\n            return False\n        # Divide n by 2 to get the next power of 2\n        n = n // 2\n    # If we have reached here, then the given number can be represented as sum of non-zero powers of 2\n    return True",
        "num_ids": 193
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check whether a given number can be represented as a sum of non-zero powers of 2 or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n can be represented as a sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    # Convert n to binary string and remove the '0b' prefix\n    binary = bin(n)[2:]\n\n    # Iterate over each character in the binary string\n    for i in range(len(binary)):\n        # Check if the current character is a '1'\n        if binary[i] == '1':\n            # Check if the previous characters are all '0's\n            if i > 0 and binary[:i].count('1') == 0:\n                return True\n\n    # If no such sum exists, return False\n    return False",
        "num_ids": 197
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "num_ids": 48
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "num_ids": 48
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n\n    :param r: The radius of the circle.\n    :return: The circumference of the circle.\n    \"\"\"\n    return 2 * 3.14159 * r",
        "num_ids": 64
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)",
        "num_ids": 60
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function extracts all the numbers from the list of lists and returns a single set of numbers.\n    \"\"\"\n    result = set()\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            for num in sublist:\n                result.add(num)\n        else:\n            result.add(sublist)\n    return result",
        "num_ids": 87
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists as input and flattens it into a single set of numbers.\n    \"\"\"\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    return result",
        "num_ids": 68
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for i in test_list:\n        if type(i) == list:\n            result += extract_singly(i)\n        else:\n            result.append(i)\n    return result",
        "num_ids": 76
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 90
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list += item\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 82
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sublist in test_list:\n        singly_list.extend(sublist)\n    return singly_list",
        "num_ids": 65
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return flat_list",
        "num_ids": 57
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 85
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            result.extend(sublist)\n        else:\n            result.append(sublist)\n    return result",
        "num_ids": 77
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Implementation of Pancake Sort algorithm in Python.\n    '''\n\n    n = len(nums)\n\n    # Start from the largest value and move it to the end of the list\n    for i in range(n - 1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Move the maximum value to the end of the list\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n            # Reverse the list from 0 to max_index\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n\n    return nums",
        "num_ids": 178
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using pancake sort.\n    \"\"\"\n    n = len(nums)\n\n    # Reverse the entire list\n    for i in range(n // 2):\n        nums = reverse(nums, i)\n\n    # Sort the list in descending order\n    for i in range(n):\n        max_index = i\n        for j in range(i + 1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = reverse(nums, max_index)\n\n    return nums\n\n\ndef reverse(nums, k):\n    \"\"\"\n    Reverses the elements in the list from index 0 to k.\n    \"\"\"\n    left, right = 0, k\n\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n\n    return nums",
        "num_ids": 203
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the index of the largest element in the unsorted part of the list\n        max_index = i + nums[i:].index(max(nums[i:]))\n        # Reverse the sublist from 0 to max_index\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # Reverse the whole list\n        nums = nums[::-1]\n    return nums",
        "num_ids": 114
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    # Reverse the array from 0 to n-1\n    for i in range(n//2):\n        nums = reverse(nums, i)\n    \n    # Reverse the array from n-1 to 0\n    for i in range(n-1, 0, -1):\n        nums = reverse(nums, i)\n    \n    # Find the maximum element and its index\n    max_index = 0\n    for i in range(1, n):\n        if nums[i] > nums[max_index]:\n            max_index = i\n    \n    # Reverse the array from 0 to max_index\n    nums = reverse(nums, max_index)\n    \n    return nums\n\ndef reverse(nums, k):\n    \"\"\"\n    Reverse the elements of the array from 0 to k.\n    \"\"\"\n    left = 0\n    right = k\n    \n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n    \n    return nums",
        "num_ids": 250
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # flip the maximum element to the end of the unsorted part of the list\n        if max_index!= i:\n            nums = flip(nums, max_index, i)\n            # flip the maximum element to the beginning of the sorted part of the list\n            nums = flip(nums, 0, i)\n    return nums\n\ndef flip(nums, start, end):\n    '''\n    Helper function to flip a sub-list of a list.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    return nums",
        "num_ids": 231
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Start from the complete list and one by one reduce the size\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the list\n        max_idx = nums.index(max(nums[:i+1]))\n        # Move the maximum element to the beginning of the list\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        # Move the maximum element to its correct position at the end of the list\n        nums[max_idx+1:] = nums[max_idx+1:][::-1]\n    return nums",
        "num_ids": 165
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # find index of maximum element in unsorted portion of list\n        max_idx = nums.index(max(nums[:n-i]))\n        # reverse this maximum element\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        # reverse the entire list\n        nums = nums[::-1]\n    return nums",
        "num_ids": 118
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n    # Find the maximum element in the list and its index\n    max_idx = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_idx]:\n            max_idx = i\n    \n    # Reverse the list up to the maximum element\n    for i in range(max_idx+1):\n        nums[i], nums[max_idx-i] = nums[max_idx-i], nums[i]\n    \n    # Reverse the entire list again\n    for i in range(max_idx+1):\n        nums[i], nums[max_idx-i] = nums[max_idx-i], nums[i]\n    \n    return nums",
        "num_ids": 172
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes in a list of integers and sorts it using the pancake sort algorithm.\n    '''\n    # Find the maximum element in the list and its index\n    max_index = nums.index(max(nums))\n    \n    # Reverse the first k elements of the list, where k is the index of the maximum element\n    nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n    \n    # Find the maximum element in the list and its index\n    max_index = nums.index(max(nums))\n    \n    # Reverse the first k elements of the list, where k is the index of the maximum element\n    nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n    \n    # Continue this process until the list is sorted\n    while nums!= sorted(nums):\n        # Find the maximum element in the list and its index\n        max_index = nums.index(max(nums))\n        \n        # Reverse the first k elements of the list, where k is the index of the maximum element\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        \n        # Find the maximum element in the list and its index\n        max_index = nums.index(max(nums))\n        \n        # Reverse the first k elements of the list, where k is the index of the maximum element\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n    \n    return nums",
        "num_ids": 327
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Iterate through each layer of the pancake\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = nums.index(max(nums[:n-i]))\n        # Reverse the sublist from the start to the maximum index\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        # Reverse the entire list\n        nums = nums[::-1]\n    return nums",
        "num_ids": 140
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position of the three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n            \n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position of the three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count",
        "num_ids": 36
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for elem in Input:\n        if isinstance(elem, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function finds the number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function will take a tuple as input and will return the number of lists present in the tuple.\n    \"\"\"\n    count = 0\n    \n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    \n    return count",
        "num_ids": 60
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 97
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 98
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least two elements\"\n    else:\n        max_diff = abs(arr[1] - arr[0])\n        for i in range(2, len(arr)):\n            diff = abs(arr[i] - arr[i-1])\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff",
        "num_ids": 120
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 96
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and finds the maximum difference between any two elements in the array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    \n    arr.sort()\n    \n    max_diff = arr[1] - arr[0]\n    \n    for i in range(2, n):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff",
        "num_ids": 115
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the maximum difference to be the first element of the sorted array\n    max_diff = arr[0] - arr[1]\n    # Loop through the sorted array and find the maximum absolute difference between any two elements\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 141
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff",
        "num_ids": 103
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff",
        "num_ids": 102
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 87
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Find the maximum absolute difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 92
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if b == 0:\n        if n % a == 0:\n            return (0, n // a)\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return (n // b, 0)\n        else:\n            return None\n    else:\n        x = (n - b) // a\n        y = n - a * x\n        return (x, y)",
        "num_ids": 136
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 87
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if (n - b * x) % a == 0:\n            y = (n - b * x) // a\n            return (x, y)\n    return None",
        "num_ids": 93
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (n-b*x) % a == 0:\n            return (x, (n-b*x) // a)\n    return None",
        "num_ids": 88
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n+1):\n        if n % i == 0:\n            if (a*i) % b == 0:\n                return (n//i, a*i//b)\n    return None",
        "num_ids": 93
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Step 1: check if ax + by = n has a solution\n    if n % (a * b)!= 0:\n        return None\n\n    # Step 2: find the value of x and y\n    x = n // b\n    y = n // a\n\n    return x, y",
        "num_ids": 106
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    elif a == 0:\n        x = n // b\n        y = 0\n        if x * b == n:\n            return (x, y)\n        else:\n            return None\n    elif b == 0:\n        x = 0\n        y = n // a\n        if y * a == n:\n            return (x, y)\n        else:\n            return None\n    else:\n        for x in range(n // a + 1):\n            y = (n - x * a) // b\n            if y * b == n - x * a:\n                return (x, y)\n        return None",
        "num_ids": 206
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    for x in range(n + 1):\n        if a * x % b == n:\n            return (x, n // a)\n    return None",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i * a + j * b == n:\n                return (i, j)\n    return None",
        "num_ids": 83
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if n % x == 0:\n            y = n // x\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 92
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input, list1 and list2, and returns a new list that contains all the elements of list1 that are not present in list2.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list",
        "num_ids": 87
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and removes all elements present in the second list from the first list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 64
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are present in list2.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1",
        "num_ids": 56
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are also present in list2.\n    '''\n    for elem in list2:\n        while elem in list1:\n            list1.remove(elem)\n    return list1",
        "num_ids": 57
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using the list comprehension to create a new list that contains all the elements from list1\n    # that are not in list2\n    new_list = [elem for elem in list1 if elem not in list2]\n    # Returning the new list\n    return new_list",
        "num_ids": 92
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from list1 that are present in list2.\n    \"\"\"\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1",
        "num_ids": 56
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements present in the list2 from the list1.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 58
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate over the elements in list2\n    for element in list2:\n        # If an element in list2 is present in list1, remove it from list1\n        if element in list1:\n            list1.remove(element)\n    # Return the updated list1\n    return list1",
        "num_ids": 94
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n + sum_series(n-2)\n    else:\n        return n + sum_series(n-1)",
        "num_ids": 110
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total",
        "num_ids": 96
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of (n-2i) for i=0 to n/2.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Iterate over all values of i from 0 to n/2\n    for i in range(n//2 + 1):\n        # Add (n-2i) to the sum\n        sum += (n - 2*i)\n        \n    # Return the sum\n    return sum",
        "num_ids": 112
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    return sum(range((n + 1) // 2))\n\nprint(sum_series(10)) # Output: 30\nprint(sum_series(20)) # Output: 105",
        "num_ids": 57
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2!= 0:\n        n -= 1\n    return sum(range(n//2 + 1))\n",
        "num_ids": 92
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of the series n + (n-2) + (n-4) +... (n-x) where x is the largest multiple of 2\n    that is less than or equal to n.\n    \"\"\"\n    result = 0\n    x = n // 2\n    while x >= 0:\n        result += n - 2 * x\n        x -= 2\n    return result",
        "num_ids": 94
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total",
        "num_ids": 68
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function returns the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2 * i\n    return total_sum",
        "num_ids": 76
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum",
        "num_ids": 94
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i <= n // 2:\n        sum += n - 2 * i\n        i += 1\n    return sum",
        "num_ids": 99
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    apothem = l / (2 * tan(pi / s))\n    return 0.5 * s * apothem ** 2",
        "num_ids": 70
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l / tan(pi / s)",
        "num_ids": 60
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l) / tan(pi/s)\n    return area\n",
        "num_ids": 67
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function calculates the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l * s ** 2) / tan(pi / s)\n    return area\n",
        "num_ids": 68
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)",
        "num_ids": 60
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function calculates the area of a regular polygon given the length and number of its sides.\n    Parameters:\n    s (int): The number of sides of the polygon.\n    l (float): The length of each side of the polygon.\n    '''\n    a = l / 2 / tan(pi/s)\n    area = s * a ** 2\n    return area",
        "num_ids": 97
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the apothem\n    a = l / (2 * tan(pi / s))\n    # calculate the area\n    area = (0.25 * pi * a * a) / tan(pi / s)\n    return area",
        "num_ids": 94
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the apothem of the polygon using the formula 1/2 * a * tan(pi/n)\n    a = l / (2 * tan(pi / s))\n    # calculate the area using the formula A = (0.5 * n * s^2) / tan(pi/n)\n    area = (0.5 * s * l ** 2) / tan(pi / s)\n    return area",
        "num_ids": 136
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l * tan(pi / s))\n    return area",
        "num_ids": 65
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculates the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter\n    s = s / 2\n    # Calculate the area\n    area = (0.25 * l * s**2) / tan(pi / s)\n    # Return the area\n    return area",
        "num_ids": 89
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Get all the divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n%i == 0]\n    if n in divisors:\n        divisors.remove(n)\n    # Check if the sum of divisors of n and n/2 are equal\n    if sum(divisors) == sum([i for i in range(1, int(math.sqrt(n/2))+1) if n/2%i == 0]):\n        return True\n    else:\n        return False",
        "num_ids": 164
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = [x for x in range(1, n+1) if n % x == 0]\n    div2 = [x for x in range(1, n+1) if n % x == 0]\n    if sum(div1) == sum(div2):\n        return True\n    else:\n        return False\n\nprint(div_sum(12)) # Output: True\nprint(div_sum(13)) # Output: False",
        "num_ids": 138
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            div_sum += i \n    return div_sum ",
        "num_ids": 77
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of two integers\n    are the same, and False otherwise.\n    '''\n    # Find all the divisors of n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    # Check if the sum of the divisors is the same for all pairs of divisors\n    for i in range(len(divisors)):\n        for j in range(i+1, len(divisors)):\n            if divisors[i] + divisors[j] == n:\n                return True\n    \n    # If no such pair of divisors is found, return False\n    return False",
        "num_ids": 182
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i == n // i:\n                return True\n            else:\n                return False\n    return False\n\nprint(div_sum(12))  # True\nprint(div_sum(13))  # True\nprint(div_sum(15))  # False",
        "num_ids": 124
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            if math.gcd(i, n//i) == 1:\n                return True\n    return False",
        "num_ids": 78
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum\n\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nsum1 = div_sum(num1)\nsum2 = div_sum(num2)\n\nif sum1 == sum2:\n    print(\"Sum of divisors of\", num1, \"and\", num2, \"are the same.\")\nelse:\n    print(\"Sum of divisors of\", num1, \"and\", num2, \"are not the same.\")",
        "num_ids": 186
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Find the divisors of the given integer\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    # Check if the sum of the divisors is equal to the given integer\n    if sum(divisors) == n:\n        return True\n    else:\n        return False",
        "num_ids": 121
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            divisor_sum.append(i)\n            if i!= n/i:\n                divisor_sum.append(n//i)\n    divisor_sum.sort()\n    return divisor_sum[-1] == divisor_sum[-2]\n",
        "num_ids": 121
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum",
        "num_ids": 76
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string and check if it is in the English alphabet (case insensitive)\n    for char in str1:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            # Increment the count of the character in the dictionary\n            if char.lower() in char_count:\n                char_count[char.lower()] += 1\n            else:\n                char_count[char.lower()] = 1\n    \n    # Loop through the dictionary and count the number of characters in the same position as the English alphabet\n    count = 0\n    for i in range(26):\n        if chr(i+97).lower() in char_count:\n            count += 1\n    \n    return count",
        "num_ids": 184
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # create a dictionary to store the character counts at each position\n    char_counts = {}\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # convert the character to lowercase and check if it is a letter in the alphabet\n        if str1[i].isalpha() and str1[i].islower():\n            # if the character is a letter in the alphabet, increment its count in the dictionary at the position\n            if str1[i] in char_counts:\n                char_counts[str1[i]].append(i)\n            else:\n                char_counts[str1[i]] = [i]\n    # loop through the dictionary and count the number of characters that occur at the same position as a letter in the alphabet\n    count = 0\n    for key in char_counts:\n        if len(char_counts[key]) > 1:\n            count += 1\n    return count",
        "num_ids": 209
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * 26  # create a list of 26 zeros to keep track of the count of each character at each position\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count[alphabet.index(str1[i].lower())] += 1  # if the character is in the English alphabet, increment the count for its position in the list\n    \n    return count\n",
        "num_ids": 154
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    count = [0] * 26  # initialize a list with 26 zeros\n    for i, c in enumerate(str1.lower()):  # loop over the lowercase characters in the string\n        if c.isalpha():  # ignore non-alphabetic characters\n            count[ord(c) - ord('a')] += 1  # increment the corresponding count in the list\n    return count\n",
        "num_ids": 97
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to store the count of each character at each position\n    char_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in char_dict:\n            char_dict[str1[i]].append(i)\n        else:\n            char_dict[str1[i]] = [i]\n    # Count the number of characters at the same position as in the English alphabet (case insensitive)\n    count = 0\n    for i in range(26):\n        if chr(i+97) in char_dict:\n            count += len(char_dict[chr(i+97)])\n    return count",
        "num_ids": 170
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    char_count = [0] * 26\n    str1 = str1.lower()\n    for char in str1:\n        if char in alpha_list:\n            char_count[alpha_list.index(char)] += 1\n    return char_count",
        "num_ids": 185
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.lower() in \"abcdefghijklmnopqrstuvwxyz\":\n            count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * 26\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count[alphabet.index(str1[i].lower())] += 1\n    return count",
        "num_ids": 111
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n        # Convert the character to lowercase to make it case-insensitive\n        char = char.lower()\n        # Check if the character is a letter in the English alphabet\n        if char.isalpha():\n            # Check if the character has already been counted at this position\n            if char_count.get(i):\n                # Increment the count if the character has been counted\n                char_count[i] += 1\n            else:\n                # Add the character to the dictionary with a count of 1\n                char_count[i] = 1\n    \n    # Loop through the dictionary and count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for i in range(len(str1)):\n        if char_count.get(i) and char_count[i] == 1:\n            count += 1\n    \n    return count",
        "num_ids": 229
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            count += 1\n    return count",
        "num_ids": 100
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    # Create a list of even numbers in A\n    even_numbers = [x for x in A if x % 2 == 0]\n    \n    # Loop through the even numbers and find pairs that xor to an even number\n    pair_count = 0\n    for i in range(len(even_numbers)):\n        for j in range(i+1, len(even_numbers)):\n            if even_numbers[i] ^ even_numbers[j] == 0 and even_numbers[i]!= even_numbers[j]:\n                pair_count += 1\n    \n    return pair_count",
        "num_ids": 135
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 94
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is a power of 2, return it\n    if n and not (n & (n - 1)):\n        return n\n    \n    # Find the smallest power of 2 greater than n\n    m = 1\n    while m < n:\n        m *= 2\n    \n    return m",
        "num_ids": 92
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n-1).bit_length()",
        "num_ids": 64
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(len(bin(n))-2)\n",
        "num_ids": 51
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Base case: if n is already a power of 2, return it\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power",
        "num_ids": 104
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power",
        "num_ids": 50
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(len(bin(n))-2)\n\nprint(next_power_of_2(10))  # Output: 16\nprint(next_power_of_2(12))  # Output: 16\nprint(next_power_of_2(8))   # Output: 8",
        "num_ids": 112
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function returns the smallest power of 2 greater than or equal to n.\n\n    Args:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n\n    \"\"\"\n\n    # Check if n is a power of 2.\n    if (n & (n-1)) == 0:\n        return n\n\n    # Calculate the smallest power of 2 greater than n.\n    else:\n        return 2**(len(bin(n))-2)",
        "num_ids": 123
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n))-2)",
        "num_ids": 64
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list 'a' and a number 'x' as inputs and returns the frequency of number 'x' in the list 'a'.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in a list and a number as input and returns the number of times the number appears in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments:\n    a: list - the list of elements to search in\n    x: int - the number to search for\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    This function takes a list 'a' and a number 'x' as input and returns the number of times 'x' appears in 'a'.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a,x):\n    '''\n    This function takes two arguments:\n    - a: a list of integers\n    - x: an integer to be counted in the list\n    \n    This function returns the number of times the integer x occurs in the list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count",
        "num_ids": 51
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a,x):\n    '''\n    This function takes two arguments: a list and a number x. It returns the number of occurrences of x in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    return a.count(x)",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    This function takes a list and two indices m and n as inputs and returns the sum of all numbers in the list within the range [m, n] (inclusive).\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 82
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 54
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    This function takes in a list of integers and two integers, m and n.\n    It then returns the sum of all the integers in the list within the range of m and n (inclusive).\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total",
        "num_ids": 87
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Create an empty variable to store the sum\n    sum = 0\n    \n    # Loop through the range specified by m and n and add the numbers to the sum\n    for i in range(m, n+1):\n        sum += list1[i]\n        \n    # Return the sum\n    return sum",
        "num_ids": 101
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i]\n    return sum_list",
        "num_ids": 74
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the range specified by m and n\n    for i in range(m, n+1):\n        # add the i-th element of the list to the sum variable\n        sum += list1[i]\n    # return the sum variable\n    return sum",
        "num_ids": 109
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m-1:n])",
        "num_ids": 53
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Returns the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total",
        "num_ids": 64
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(lst, m, n):\n    '''\n    This function takes a list and two indices m and n as arguments and returns the sum of all the numbers in the list within the range [m, n].\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += lst[i]\n    return total",
        "num_ids": 78
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "num_ids": 46
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p\n\na = float(input(\"Enter the length of one side of the pentagon: \"))\n\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))",
        "num_ids": 90
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Count the number of occurrences of the string'std' in a given string.\n    \"\"\"\n    count = s.count('std')\n    return count",
        "num_ids": 43
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    if s.count('std') == 1:\n        count = 1\n    elif s.count('std') > 1:\n        count = s.count('std')\n    else:\n        count = 0\n    return count",
        "num_ids": 91
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    \"\"\"\n    This function will count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count",
        "num_ids": 80
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    \n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n        \n    return count",
        "num_ids": 82
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.lower().count('std')\n    return count",
        "num_ids": 51
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string's' as input and returns the count of the number of occurence of the string'std' in the given string.\n    '''\n    count = s.count('std')\n    return count",
        "num_ids": 58
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    count = 0\n    if'std' in s:\n        count += 1\n        if s.count('std') > 1:\n            for i in range(s.count('std')-1):\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and checks if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n        return True",
        "num_ids": 103
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        print(\"All elements in tuple have same data type.\")\n    else:\n        print(\"Not all elements in tuple have same data type.\")",
        "num_ids": 79
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 85
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements have same data type, False otherwise.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "num_ids": 85
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True  # Empty tuple is considered a valid tuple\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False  # If any element has a different data type, return False\n    return True  # If all elements have the same data type, return True",
        "num_ids": 120
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2",
        "num_ids": 101
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the middle index of the array\n    mid = n // 2\n    \n    # If x is present at the middle index or x is the only element in the array, return True\n    if arr[mid] == x or (arr[mid-1] == arr[mid] == x):\n        return True\n    \n    # If x is greater than the middle element, check if x is present in the right half of the array\n    elif x > arr[mid]:\n        count = 0\n        for i in range(mid, n):\n            if arr[i] == x:\n                count += 1\n        \n        # If x is present more than n/2 times, return True\n        if count > n // 2:\n            return True\n    \n    # If x is less than the middle element, check if x is present in the left half of the array\n    else:\n        count = 0\n        for i in range(mid):\n            if arr[i] == x:\n                count += 1\n        \n        # If x is present more than n/2 times, return True\n        if count > n // 2:\n            return True\n    \n    # If x is not found, return False\n    return False",
        "num_ids": 312
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False",
        "num_ids": 55
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize variables for counting the occurrences of x and the middle index\n    count = 0\n    mid = n//2\n    \n    # Traverse the array from left to right\n    i = 0\n    while i < n:\n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n        \n        # If the count becomes greater than or equal to half the length of the array, return True\n        if count >= mid:\n            return True\n        \n        # Increment the index\n        i += 1\n    \n    # If the element is not found to be the majority element, return False\n    return False",
        "num_ids": 199
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    i = 0\n    j = n - 1\n    \n    while i <= j:\n        if arr[i] == x:\n            count += 1\n            i += 1\n        elif arr[j] == x:\n            count += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n            \n    if count > n/2:\n        return True\n    else:\n        return False",
        "num_ids": 158
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize count variable to 0\n    count = 0\n\n    # Traverse through the array\n    for i in range(n):\n        # If the current element is equal to x, increment count by 1\n        if arr[i] == x:\n            count += 1\n\n    # Check if count is greater than or equal to n/2\n    if count >= n//2:\n        return True\n    else:\n        return False",
        "num_ids": 156
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x == arr[n//2]:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False",
        "num_ids": 111
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n\n    if arr[0] == x:\n        count = 1\n    else:\n        count = 0\n\n    for i in range(1, n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n        elif count > 0:\n            count -= 1\n\n    return False",
        "num_ids": 150
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # find the index of the first occurrence of x in the array\n    i = arr.index(x)\n    \n    # check if the number of occurrences of x is greater than n/2\n    if arr.count(x) > n // 2:\n        return True\n    else:\n        return False",
        "num_ids": 129
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes a number as input and returns the number of set bits in it.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "num_ids": 58
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')",
        "num_ids": 49
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "num_ids": 36
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes a number as input and returns the number of set bits in the binary representation of the number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 67
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters with odd index values from a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 63
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string",
        "num_ids": 70
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes the characters which have odd index values of that string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 69
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)",
        "num_ids": 60
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(s):\n    return s[::2]",
        "num_ids": 17
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes the characters which have odd index values.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 72
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)",
        "num_ids": 39
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c",
        "num_ids": 57
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 66
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c ",
        "num_ids": 68
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check if all the bits in the range [l, r] are set to 1.\n    :param n: An integer representing the number to check.\n    :param l: An integer representing the left endpoint of the range.\n    :param r: An integer representing the right endpoint of the range.\n    :return: True if all the bits are set, False otherwise.\n    \"\"\"\n    mask = ((1 << (r+1)) - 1) ^ ((1 << l) - 1)  # create a mask that has 1s in the range [l, r] and 0s outside it\n    return (n & mask) == mask  # check if the masked number is equal to the mask itself",
        "num_ids": 175
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # To check whether the number of bits set in a range is equal to the range itself, we can use the \n    # formula: range = 2^number of bits set. Therefore, we need to find the number of bits set in the \n    # given range. We can do this using the bitwise AND operator and the bitwise NOT operator. \n    # The bitwise AND operator returns a new number with only the bits that are set in both operands, \n    # while the bitwise NOT operator returns a new number with all the bits flipped. \n    # For example, if we have a number 11010101 and we want to count the number of bits set in the \n    # range 2-4, we can do the following:\n    # 1. Shift the number to the right by 2 bits (2^2 = 4) to get a new number with the 4th bit set\n    # 2. Perform a bitwise AND with the original number to get a new number with only the bits in the range\n    # 3. Perform a bitwise NOT with the new number to get a new number with all the bits flipped\n    # 4. Return the number of bits set in the new number\n\n    # To count the number of bits set in the range 2-4, we need to first shift the number to the right by 2 bits\n    shift_bits = 2 * (r - l + 1)\n    # Then perform a bitwise AND with the original number to get a new number with only the bits in the range\n    bit_range = n >> shift_bits << shift_bits\n    # Then perform a bitwise NOT with the new number to get a new number with all the bits flipped\n    inverted_bit_range = ~bit_range\n    # Finally, count the number of bits set in the new number\n    return bin(inverted_bit_range).count('1')",
        "num_ids": 453
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n > 1:\n        return \"The number n is greater than 1, which means it has some bits set\"\n    else:\n        binary_l = bin(l)[2:]\n        binary_r = bin(r)[2:]\n        if len(binary_l)!= len(binary_r):\n            return \"The length of the binary strings of l and r is not equal, which means they do not represent a range\"\n        else:\n            for i in range(len(binary_l)):\n                if binary_l[i] == '1' or binary_r[i] == '1':\n                    return \"The bits are set in the given range\"\n            return \"All bits are unset in the given range\"",
        "num_ids": 200
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes in three parameters - n (an integer), l (left index of the range) and r (right index of the range). \n    It returns True if all the bits are set in the given range or False if any of the bits is not set.\n    '''\n\n    # To check whether n is a power of 2 or not\n    if (n & (n-1))!= 0:\n        return False\n\n    # To check whether all the bits are set in the given range or not\n    for i in range(l, r+1):\n        if (n & (1 << i)) == 0:\n            return False\n\n    return True",
        "num_ids": 160
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Calculate the mask to unset all the bits in the range\n    mask = ((1 << (r + 1)) - 1) - ((1 << l) - 1)\n    \n    # Check whether all the bits are unset or not\n    return (n & mask) == 0",
        "num_ids": 101
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # calculate the number of bits set in the range\n    num_bits_set = bin(n & ((1 << r) - (1 << l)))[2:].count('1')\n    # if the number of bits set is equal to the number of bits in the range,\n    # all the bits are set in the range\n    return num_bits_set == r - l + 1",
        "num_ids": 106
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    This function checks whether all the bits are set in the given range or not.\n    \"\"\"\n    # convert n to binary\n    binary_n = bin(n)[2:]\n\n    # check if all bits are set in the given range\n    if binary_n[l-1:r] == '0'*(r-l+1):\n        return True\n    else:\n        return False",
        "num_ids": 104
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three arguments:\n    n: the number whose binary representation needs to be checked\n    l: the starting index of the range\n    r: the ending index of the range\n    It returns True if all bits are set in the given range, False otherwise.\n    '''\n    # convert n to binary string\n    binary_string = bin(n)[2:]\n\n    # if binary string length is less than r-l+1, pad with zeros\n    if len(binary_string) < r-l+1:\n        binary_string = '0'*(r-l+1-len(binary_string)) + binary_string\n    \n    # check if all bits are set\n    for i in range(l, r+1):\n        if binary_string[i-l] == '0':\n            return False\n    return True",
        "num_ids": 196
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Check whether all the bits are set in the given range or not.\n\n    Parameters:\n    n (int): A positive integer\n    l (int): Left endpoint of the range (inclusive)\n    r (int): Right endpoint of the range (inclusive)\n\n    Returns:\n    bool: True if all the bits are set in the given range, False otherwise\n    '''\n\n    # Convert the given range to binary representation\n    binary_str = bin(n)[2:]\n\n    # Check whether all the bits are set or not\n    for i in range(l, r + 1):\n        if binary_str[i - 1] == '0':\n            return False\n\n    return True",
        "num_ids": 163
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the mask and shift the bits to the right position\n    mask = (2**r - 1) - (2**(l-1) - 1)\n    # Check if all the bits in the range are set or not\n    if ((n & mask) == mask):\n        return True\n    else:\n        return False",
        "num_ids": 115
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two empty arrays to hold negative and positive elements\n    neg = []\n    pos = []\n    \n    # loop through the input array and separate negative and positive elements into two arrays\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    # sort the negative and positive arrays in descending order\n    neg.sort(reverse=True)\n    pos.sort(reverse=True)\n    \n    # combine the two sorted arrays to get the final output\n    arr[:n] = neg + pos\n    \n    return arr",
        "num_ids": 140
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # Separate negative and positive elements\n    neg_elems = sorted([x for x in arr[:n] if x < 0], reverse=True)\n    pos_elems = sorted([x for x in arr[:n] if x >= 0])\n    # Re-arrange the array\n    arr[:n] = neg_elems + pos_elems\n    return arr",
        "num_ids": 89
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one at the beginning of the array and one at the end\n    left = 0\n    right = n - 1\n    \n    # Loop through the array and move negative elements to the left of the array\n    while left < right:\n        if arr[left] >= 0:\n            left += 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            right -= 1\n    \n    # Return the re-arranged array\n    return arr[:n]",
        "num_ids": 174
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones, \n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Separate the array into positive and negative elements\n    pos_arr = []\n    neg_arr = []\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n\n    # Sort the positive array in descending order\n    pos_arr.sort(reverse=True)\n\n    # Re-arrange the original array\n    arr = neg_arr + pos_arr\n\n    return arr",
        "num_ids": 159
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    for i in range(len(negatives)):\n        arr[i] = negatives[i]\n    for i in range(len(negatives), n):\n        arr[i] = positives[i-len(negatives)]\n    return arr",
        "num_ids": 158
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    for num in arr:\n        if num < 0:\n            negatives.append(num)\n        else:\n            positives.append(num)\n    negatives = negatives[:n]\n    positives = positives[:n]\n    result = negatives + positives\n    return result",
        "num_ids": 83
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Separate negative and positive elements\n    negative_elements = sorted([x for x in arr[:n] if x < 0], reverse=True)\n    positive_elements = sorted([x for x in arr[:n] if x >= 0])\n\n    # Re-arrange array with negative elements first\n    rearranged_arr = negative_elements + positive_elements\n\n    # Fill remaining elements with zeros\n    rearranged_arr += [0] * (n - len(rearranged_arr))\n\n    return rearranged_arr",
        "num_ids": 166
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_elements = []\n    positive_elements = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            positive_elements.append(arr[i])\n            \n    negative_elements.sort(reverse=True)\n    positive_elements.sort()\n    \n    for i in range(n):\n        if i < len(negative_elements):\n            arr[i] = negative_elements[i]\n        else:\n            arr[i] = positive_elements[i - len(negative_elements)]\n            \n    return arr",
        "num_ids": 193
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = n-1\n    \n    # Loop through the array from left to right\n    while left < right:\n        # If the element at the left pointer is positive, move the left pointer to the right\n        if arr[left] >= 0:\n            left += 1\n        # If the element at the right pointer is negative, move the right pointer to the left\n        elif arr[right] < 0:\n            right -= 1\n        # If the element at the left pointer is negative and the element at the right pointer is positive, swap them\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n            \n    # Return the modified array\n    return arr",
        "num_ids": 188
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # Find the indices of the negative and positive elements\n    neg_idx = [i for i in range(n) if arr[i] < 0]\n    pos_idx = [i for i in range(n) if arr[i] >= 0]\n    \n    # Re-arrange the array\n    arr[0:n] = sorted(arr[0:n], key=lambda x: (x >= 0, abs(x)))\n    \n    # Return the new array\n    return arr",
        "num_ids": 116
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a given string with the given character.\n\n    :param str1: the given string\n    :param char: the character to replace blank spaces with\n    :return: the modified string\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 68
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)",
        "num_ids": 21
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replaces blank spaces in a string with the given character.\n\n    :param str1: The input string.\n    :param char: The character to replace the blank spaces with.\n    :return: The modified string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 70
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "num_ids": 50
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1",
        "num_ids": 56
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces with given character in a string.\n    '''\n    return str1.replace(\" \", char)",
        "num_ids": 36
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef largest_numbers(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for num in lst[n:]:\n        if num > heap[0]:\n            heapq.heappushpop(heap, num)\n    return heap\n",
        "num_ids": 82
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "num_ids": 89
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]",
        "num_ids": 97
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    \n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    \n    return heap",
        "num_ids": 118
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)",
        "num_ids": 94
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef largest_numbers(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a max heap\n    heapq.heapify(list1)\n    \n    # Extract the n largest items from the heap and return them as a list\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(heapq.heappop(list1))\n        \n    return largest_nums",
        "num_ids": 115
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Returns a list containing the n largest items from the list.\n    '''\n    if n > len(lst):\n        raise ValueError(\"n must be smaller than or equal to the length of the list\")\n\n    # Use a min heap of size n to keep track of the n largest elements\n    heap = lst[:n]\n    heapq.heapify(heap)\n\n    # Iterate over the remaining elements in the list and update the heap if necessary\n    for x in lst[n:]:\n        if x > heap[0]:\n            heapq.heapreplace(heap, x)\n\n    return heap",
        "num_ids": 140
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap",
        "num_ids": 118
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, lst)",
        "num_ids": 57
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        n = len(list1)\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap",
        "num_ids": 135
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns its lateral surface area.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area",
        "num_ids": 64
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface_area = 2 * math.pi * r * h\n    return lateralsurface_area",
        "num_ids": 62
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2",
        "num_ids": 61
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes in the radius r and height h of a cylinder and returns its lateral surface area.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2",
        "num_ids": 66
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Function to find the lateral surface area of a cylinder.\n    Args:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    Returns:\n    float: The lateral surface area of the cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r ** 2",
        "num_ids": 103
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    This function takes the radius (r) and height (h) of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    # Calculate the lateral surface area of a cylinder\n    lateralsurface_area = 2 * math.pi * r * (r + h)\n    return lateralsurface_area",
        "num_ids": 93
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    Input:\n    r: radius of the cylinder (float)\n    h: height of the cylinder (float)\n    Output:\n    The lateral surface area of the cylinder (float)\n    '''\n    \n    # Calculate the lateral surface area of the cylinder using the formula\n    SA = 2 * math.pi * r * (r + h)\n    \n    return SA",
        "num_ids": 111
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2*3.14*r*h + 2*3.14*r**2\n    return lateralsurface",
        "num_ids": 77
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area",
        "num_ids": 78
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2",
        "num_ids": 59
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 38
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    volume = l ** 3  # Cube's volume formula\n    return volume  # Returns the volume of the cube",
        "num_ids": 53
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length of a cube and returns its volume.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 37
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length as input and returns the volume of a cube with that side length.\n    '''\n    volume = l**3 # volume of cube is the cube of its side length\n    return volume # return the volume of cube",
        "num_ids": 59
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes a number as input and sets all even bits to 1.\n    \"\"\"\n    return (n | 0x5555555555555555) & 0xAAAAAAAAAAAAAAA\n",
        "num_ids": 66
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all even bits of the number.\n    '''\n    set_bits = 0b11111111 & n # set all bits of n to 1, except the odd bits\n    return set_bits << 1 # shift the set bits to the left by one position",
        "num_ids": 84
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Using bitwise AND operator to check even bits\n    # Adding 1 to set all even bits\n    return n & ~0b1010 # Setting the least significant bit to 0",
        "num_ids": 72
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number to 1.\n    '''\n    mask = 0xAAAAAAAA # binary representation of 0x55555555\n    return (n & ~mask) | (n & mask)",
        "num_ids": 65
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    This function sets all even bits of a given number.\n    \"\"\"\n    mask = 0xAAAAAAAA # This is a binary number with 0b01010101... repeated 4 times\n    return n & mask # This applies the mask to the number and sets the even bits",
        "num_ids": 76
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    # To set all even bits, we need to clear all odd bits and set all even bits.\n    # We can do this by using bitwise AND operator with a mask of 0xAAAAAAAA and \n    # bitwise OR operator with a mask of 0x55555555.\n    mask = 0xAAAAAAAA\n    n = (n & mask) | ((n & ~mask) >> 1)\n    return n",
        "num_ids": 119
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number to 1.\n    '''\n    # create a mask with only even bits set to 1\n    mask = 0xAAAAAAAA\n    # apply the mask to the number to set even bits\n    return n | mask",
        "num_ids": 66
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes an integer n as input and sets all even bits of the number to 1.\n    '''\n    # Convert the number to binary representation\n    binary_rep = bin(n)[2:]\n\n    # Initialize the new number with all bits set to 0\n    new_num = 0\n\n    # Iterate over each bit of the binary representation\n    for i in range(len(binary_rep)):\n        # Check if the bit is even\n        if int(binary_rep[i]) % 2 == 0:\n            # Set the corresponding bit in the new number to 1\n            new_num += 2**i\n\n    return new_num",
        "num_ids": 150
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number.\n    '''\n    # Use bitwise AND to get even bits\n    even_bits = n & 0xAAAAAAAA # or n & 0b10101010101010101010101010101010\n    # Use bitwise OR to set even bits\n    n = n | even_bits\n    return n",
        "num_ids": 107
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Bitwise AND with 0x55555555 to set even bits to 1\n    n = n & 0x55555555\n    \n    # Bitwise AND with 0xaaaaaaaa to set odd bits to 0\n    n = n & 0xaaaaaaaa\n    \n    # Shift even bits to the right by 1 position\n    n = n >> 1\n    \n    # Bitwise XOR with original number to get even bits set\n    n = n ^ n\n    \n    # Return the final result\n    return n",
        "num_ids": 142
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict",
        "num_ids": 68
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict",
        "num_ids": 68
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n",
        "num_ids": 61
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as input and returns the number of non-empty substrings in the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count",
        "num_ids": 46
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    \n    # Traverse through all substrings of given string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    \n    return count",
        "num_ids": 99
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a counter for the number of sequences\n    count = 0\n    \n    # Iterate through each possible value of the first element\n    for first in range(m//2+1, m+1):\n        # Initialize a list to store the previous element\n        previous = [first]\n        \n        # Iterate through the remaining elements\n        for i in range(1, n):\n            # Generate a possible value for the next element\n            next_value = previous[-1] * 2\n            # Check if the value is valid\n            while next_value > m or next_value in previous:\n                next_value -= 1\n            \n            # Add the valid value to the list\n            previous.append(next_value)\n        \n        # Increment the count if the list has n elements\n        if len(previous) == n:\n            count += 1\n    \n    # Return the total count of sequences\n    return count",
        "num_ids": 196
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m - 1\n    else:\n        total = 0\n        for i in range(m):\n            total += get_total_number_of_sequences(m, n - 1) * (m - i)\n        return total // (m ** (n - 1))",
        "num_ids": 84
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    \n    if m == 1:\n        return 1\n    \n    # Initialize a list to store the number of possible sequences for each position\n    count = [0] * n\n    \n    # The first element is always 2, so we can start with that\n    count[0] = 1\n    \n    # For each position, we calculate the number of possible sequences by adding the number of possible sequences for the previous position\n    for i in range(1, n):\n        count[i] = (count[i-1] * (m - count[i-1] + 1)) // (i + 1)\n    \n    # The total number of sequences is the last element in the list\n    return count[-1]",
        "num_ids": 172
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a variable to store the number of sequences\n    count = 0\n    \n    # Initialize a list to store the previous element\n    prev = [0]\n    \n    # Loop through each element starting from the second one\n    for i in range(1, n):\n        # Initialize a variable to store the number of sequences for this element\n        num_seq = 0\n        \n        # Loop through each previous element\n        for j in prev:\n            # Check if the current element is valid (greater than twice the previous one)\n            if j*2 <= m and j*2 + 1 <= m and j*2 + 2 <= m:\n                # Increment the number of sequences\n                num_seq += 1\n        \n        # Increment the total number of sequences by the number of sequences for this element\n        count += num_seq\n        \n        # Append the current element to the previous list\n        prev.append(i)\n        \n        # If the length of the previous list exceeds n, remove the first element\n        if len(prev) > n:\n            prev.pop(0)\n    \n    return count",
        "num_ids": 234
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n\n    total_sequences = 0\n    for i in range(1, m+1):\n        if i > 2*n:\n            break\n\n        total_sequences += get_total_number_of_sequences(m, n-1)\n\n    return total_sequences",
        "num_ids": 82
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the count to 1\n    count = 1\n    \n    # Loop through the numbers from 2 to n\n    for i in range(2,n+1):\n        # Initialize the previous number to 2\n        prev = 2\n        \n        # Loop through the numbers from 2 to i-1\n        for j in range(2,i):\n            # Multiply the previous number by 2 and check if it is less than or equal to m\n            if prev*2 <= m:\n                # Increment the count\n                count += 1\n                # Set the previous number to the new value\n                prev = prev*2\n            else:\n                # Break out of the loop since the sequence is impossible\n                break\n    \n    # Return the count\n    return count",
        "num_ids": 222
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        total = 0\n        prev_prev = 1\n        prev = 2\n        for i in range(n-1):\n            total += prev - prev_prev - 1\n            prev_prev = prev\n            prev = prev + 2\n        total += prev - prev_prev\n        return total",
        "num_ids": 145
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    count = 0\n    i = 2 ** (n - 1)\n    # Iterate through all possible starting numbers\n    while i <= m:\n        # Check if the current number is valid\n        if i == 2:\n            count += 1\n        elif i >= 3:\n            prev_num = 2\n            # Iterate through all remaining numbers\n            for j in range(1, n):\n                # Check if the current number is valid\n                current_num = prev_num + 2 * j\n                if current_num > m or current_num < prev_num + 2:\n                    break\n                prev_num = current_num\n            else:\n                count += 1\n        # Increment to the next starting number\n        i *= 2\n    return count",
        "num_ids": 178
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    if n == 2:\n        return (m-1)*(m//2)\n    \n    res = 0\n    for i in range(1, m//2+1):\n        res += get_total_number_of_sequences(m-2*i, n-1)\n        \n    return res",
        "num_ids": 143
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m // 2 + 1\n    elif n == 2:\n        return sum(range(2, m+1, 2))\n    else:\n        prev = 2\n        curr = 2\n        count = 1\n        for i in range(3, n+1):\n            count = 0\n            prev_squared = prev**2\n            for j in range(prev_squared, m+1, prev_squared):\n                count += 1\n            curr = prev + prev_squared\n            prev = curr\n        return count",
        "num_ids": 135
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n",
        "num_ids": 52
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        print(\"Error: The length of list1 should be greater than or equal to the length of list2.\")\n        return\n    \n    list1[-1] = list2\n    \n    return list1",
        "num_ids": 91
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of list1 with the elements of list2.\n    \"\"\"\n    list1[-1] = list2\n",
        "num_ids": 41
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "num_ids": 51
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as an argument and returns the total number of characters in the string.\n    \"\"\"\n    return len(str1)",
        "num_ids": 41
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_chars(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \"\"\"\n    return len(str1)",
        "num_ids": 40
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if root**2 == N:\n        root += 1\n    return root**2",
        "num_ids": 65
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))**2\n\nprint(next_Perfect_Square(10)) # Output: 16\nprint(next_Perfect_Square(20)) # Output: 25",
        "num_ids": 89
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number as input and returns the next perfect square greater than it.\n    '''\n    # Check if the number is a perfect square\n    if math.sqrt(N) == int(math.sqrt(N)):\n        return int(math.pow(int(math.sqrt(N))+1, 2))\n    else:\n        # If the number is not a perfect square, find the nearest perfect square greater than it\n        return int(math.pow(int(math.sqrt(N))+1, 2))",
        "num_ids": 128
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.ceil(math.sqrt(N))   # round up to the nearest integer\n    return x*x\n",
        "num_ids": 63
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root): # if root is an integer, N is already a perfect square\n        return int(root)**2\n    else:\n        return int(math.ceil(root))**2 # return the next integer square",
        "num_ids": 94
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculate the square root of the given number\n    sqrt_N = math.sqrt(N)\n    \n    # Check if the square root is an integer or not\n    if sqrt_N.is_integer():\n        # If the square root is an integer, then return the square of the square root plus one\n        return int(sqrt_N) + 1\n    else:\n        # If the square root is not an integer, then return the square of the square root plus one\n        return int(math.ceil(sqrt_N))**2",
        "num_ids": 148
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    # round the square root up to the nearest integer\n    sqrt_N = math.ceil(sqrt_N)\n    # add 1 to the square root to get the next perfect square\n    next_square = sqrt_N**2\n    return next_square",
        "num_ids": 109
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N and returns the next perfect square greater than N.\n    '''\n    # Finding the square root of the given number N\n    sqrt_N = math.sqrt(N)\n    \n    # If the square root is an integer, return the next integer greater than N.\n    if int(sqrt_N) == sqrt_N:\n        return int(sqrt_N) + 1\n    \n    # If the square root is not an integer, return the next integer greater than N.\n    else:\n        return int(math.ceil(sqrt_N))**2",
        "num_ids": 137
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N).is_integer():\n        N = int(math.sqrt(N)) + 1\n    else:\n        N = int(math.sqrt(N)) + 2\n    return N**2",
        "num_ids": 84
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return 1\n    else:\n        sqrt_N = math.floor(math.sqrt(N))\n        return (sqrt_N+1)**2",
        "num_ids": 75
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Create a list to store the intermediate results\n    dp = [0] * n\n    # Find the maximum sum for increasing bitonic sequence ending at each index of the array\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    # Find the maximum sum for decreasing bitonic sequence starting at each index of the array\n    max_sum = -float('inf')\n    for i in range(n):\n        if arr[i] > arr[n-i-1]:\n            max_sum = max(max_sum, dp[n-i-1])\n    return max_sum",
        "num_ids": 227
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize variables to keep track of the current sum and the maximum sum seen so far\n    current_sum = arr[0]\n    max_sum = arr[0]\n    # Traverse the array\n    for i in range(1, n):\n        # If the current element is greater than the previous element, add it to the current sum\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        # Otherwise, reset the current sum to the current element\n        else:\n            current_sum = arr[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum seen so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
        "num_ids": 174
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize the maximum sum variable to -infinity\n    max_sum = float('-inf')\n    # Initialize the maximum sum ending at i variable to arr[i]\n    max_ending_here = arr[0]\n    # Traverse through the array from the second element\n    for i in range(1, n):\n        # Check if the current element is greater than the maximum sum ending at the previous element\n        if arr[i] > max_ending_here + arr[i]:\n            # Update the maximum sum variable with the maximum sum ending at the current element\n            max_sum = max(max_sum, max_ending_here)\n            # Update the maximum sum ending at the current element with the current element\n            max_ending_here = arr[i]\n        else:\n            # Update the maximum sum ending at the current element with the current element added to the maximum sum ending at the previous element\n            max_ending_here += arr[i]\n    # Update the maximum sum variable with the maximum sum ending at the last element\n    max_sum = max(max_sum, max_ending_here)\n    # Return the maximum sum variable\n    return max_sum",
        "num_ids": 259
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        dp = [0] * n\n        dp[0] = arr[0]\n        dp[1] = max(arr[0], arr[1])\n        for i in range(2, n):\n            dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n        return dp[n-1]",
        "num_ids": 119
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize the dp table with the first element of the array.\n    dp = [0] * n\n    dp[0] = arr[0]\n    # Fill the dp table for the remaining elements.\n    for i in range(1, n):\n        if i == 1:\n            dp[i] = max(dp[i-1], arr[i])\n        elif i == 2:\n            dp[i] = max(dp[i-1], arr[i], dp[i-2])\n        else:\n            dp[i] = max(dp[i-1], arr[i], dp[i-2] + arr[i], dp[i-3])\n    # Return the maximum sum of a bitonic subsequence.\n    return dp[n-1]",
        "num_ids": 227
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # Finding the maximum sum for the increasing sequence.\n    for i in range(1, n):\n        dp[i][i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i][j] = max(dp[i][j], dp[j][j]) + arr[i]\n\n    # Finding the maximum sum for the decreasing sequence.\n    for i in range(n-2, -1, -1):\n        dp[i][i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                dp[i][j] = max(dp[i][j], dp[j][j]) + arr[i]\n\n    # Finding the maximum sum of the bitonic subsequence.\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i+2, n):\n            if dp[i][j] > max_sum:\n                max_sum = dp[i][j]\n\n    return max_sum",
        "num_ids": 321
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    # Create a list to store the maximum sum for each increasing subsequence\n    inc = [0] * n\n    # Create a list to store the maximum sum for each decreasing subsequence\n    dec = [0] * n\n    # Initialize the maximum sum for each subsequence to the first element\n    inc[0] = arr[0]\n    dec[0] = 0\n    # Compute the maximum sum for each increasing and decreasing subsequence\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc[i] = arr[i] + max(dec[i-1], inc[i-1])\n        else:\n            inc[i] = 0\n        if arr[i] < arr[i-1]:\n            dec[i] = arr[i] + max(dec[i-1], inc[i-1])\n        else:\n            dec[i] = 0\n    # Return the maximum of the maximum sums for the increasing and decreasing subsequences\n    return max(inc[n-1], dec[n-1])",
        "num_ids": 269
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if arr[i] < arr[j]:\n                dp[i][j] = max(dp[i][j-1], arr[i] + dp[i+1][j])\n            else:\n                dp[i][j] = max(dp[i+1][j], arr[j] + dp[i][j-1])\n    return dp[0][n-1]",
        "num_ids": 212
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], arr[i]+dp[i-1])\n    return dp[n-1]",
        "num_ids": 109
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize variables\n    max_sum = float('-inf')\n    increasing_sum = 0\n    decreasing_sum = 0\n\n    # Iterate over the array from left to right\n    for i in range(n):\n        # Add current element to increasing sum\n        increasing_sum += arr[i]\n        # Update maximum sum if current increasing sum is greater\n        if increasing_sum > max_sum:\n            max_sum = increasing_sum\n        # Subtract current element from decreasing sum\n        decreasing_sum += arr[i]\n        # Update maximum sum if current decreasing sum is greater\n        if decreasing_sum > max_sum:\n            max_sum = decreasing_sum\n\n    return max_sum",
        "num_ids": 163
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the Babylonian method.\n    \"\"\"\n    guess = number\n    while abs(guess*guess - number) > 0.00001:\n        guess = (guess + number/guess) / 2\n    return guess",
        "num_ids": 73
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None # Cannot compute square root of negative number\n    \n    guess = number/2\n    while abs(guess*guess - number) > 0.0001:\n        guess = (guess + number/guess)/2\n    \n    return guess",
        "num_ids": 90
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    # Initial guess for the square root\n    x = number / 2.0\n    \n    # Iterate until the difference between the square of the current value\n    # and the target value is less than a tolerance value\n    while abs(x*x - number) > 0.000001:\n        # Update the guess using the Babylonian method\n        x = (x + number / x) / 2.0\n    \n    # Return the computed square root\n    return x",
        "num_ids": 133
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes square roots using the Babylonian method.\n    \"\"\"\n\n    # Initialize variables\n    approx = number / 2\n    epsilon = 0.00001\n    guess = 0\n\n    # Loop until the difference between the approximated square root and the actual square root is less than the epsilon value\n    while abs(approx**2 - number) >= epsilon:\n        guess = approx\n        approx = (approx + number / approx) / 2\n\n    # Return the approximated square root\n    return approx",
        "num_ids": 122
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while True:\n        new_guess = (guess + number/guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            return new_guess\n        guess = new_guess",
        "num_ids": 89
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    if number < 0:\n        return None  # square root is not defined for negative numbers\n    \n    guess = number\n    while True:\n        approx = (guess + number / guess) / 2  # compute the approximation\n        if abs(approx - guess) < 0.0001:  # check if the approximation is accurate enough\n            return approx\n        guess = approx  # update the guess",
        "num_ids": 117
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    for i in range(10):\n        x = (x + (number / x)) / 2\n    return x",
        "num_ids": 63
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while abs(guess**2 - number) > 0.0000001:\n        guess = (guess + number/guess) / 2.0\n    return guess",
        "num_ids": 81
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2\n    while abs(approx ** 2 - number) > 0.0001:\n        approx = (approx + number / approx) / 2\n    return approx",
        "num_ids": 76
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while abs(guess*guess - number) > 0.0000001:\n        guess = (guess + number/guess)/2\n    return guess",
        "num_ids": 75
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n    # Return the maximum length palindrome subsequence\n    return max(max(row) for row in dp)",
        "num_ids": 235
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    # LPS for single characters is always 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check for subsequence of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    \n    # Check for subsequence of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]",
        "num_ids": 250
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]",
        "num_ids": 267
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence for all prefixes of the string\n    dp = [[0] * n for i in range(n)]\n\n    # Initialize the diagonal elements to 1 because a single character is always a palindrome\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table in a bottom-up manner\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    # Return the length of the longest palindromic subsequence in the entire string\n    return dp[0][n-1]",
        "num_ids": 252
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of palindromic subsequences of substrings\n    # of the given string.\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # All substrings of length 1 have a palindromic subsequence of length 1.\n    for i in range(n):\n        dp[i][i] = 1\n\n    # For substrings of length greater than 1, check if the first and last characters\n    # are equal, and assign the minimum value to dp[i][j] where dp[i+1][j-1] is\n    # the palindromic subsequence of the substring str[i+1:j].\n    for len_ in range(2, n+1):\n        for i in range(n-len_+1):\n            j = i + len_ - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]",
        "num_ids": 276
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            if str[i] == str[j] and gap == 1:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]",
        "num_ids": 204
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i + len - 1\n            \n            if str[i] == str[j] and len == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]",
        "num_ids": 208
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a table to store lengths of longest palindromic subsequences\n    table = [[0 for x in range(n)] for x in range(n)] \n  \n    # All substrings of length 1 are palindrome of length 1 \n    for i in range(n): \n        table[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            table[i][i+1] = 2\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 3: \n                table[i][j] = 2\n            elif str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2\n  \n    # The longest palindromic subsequence will be the maximum value in the table \n    return max(max(row) for row in table) ",
        "num_ids": 265
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]",
        "num_ids": 245
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n        \n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n                \n    return dp[0][n - 1]",
        "num_ids": 186
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Returns the harmonic sum of n-1, which is the sum of the reciprocals of the first n natural numbers.\n    \"\"\"\n    return sum(1.0 / i for i in range(1, n+1))",
        "num_ids": 62
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = sum([1/i for i in range(1, n+1)])\n    return harmonic_sum",
        "num_ids": 62
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n\n    Parameters:\n        n (int): The upper limit of the sum.\n\n    Returns:\n        float: The harmonic sum of n-1.\n    \"\"\"\n    return sum(1.0 / i for i in range(1, n))",
        "num_ids": 72
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum",
        "num_ids": 70
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/i for i in range(1, n)])",
        "num_ids": 50
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += 1/i\n        return sum",
        "num_ids": 77
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)",
        "num_ids": 64
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "num_ids": 69
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))",
        "num_ids": 71
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Returns a list containing the common elements in both arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    common_nums = set_nums1.intersection(set_nums2)\n    return list(common_nums)",
        "num_ids": 83
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n    # Convert the arrays into sets to make it easy to find the intersection\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the two sets and convert it back into an array\n    intersection = list(set_nums1.intersection(set_nums2))\n    \n    return intersection",
        "num_ids": 114
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1 & set_nums2)",
        "num_ids": 72
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)",
        "num_ids": 79
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the unique values in array_nums1\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the intersection of array_nums1 and array_nums2\n    intersection_list = []\n    # Loop through array_nums2 and check if the value is in the set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_list.append(num)\n    return intersection_list",
        "num_ids": 138
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "num_ids": 69
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns their intersection.\n    '''\n    # Create an empty set to store the intersection of the two arrays\n    intersection = set()\n    \n    # Loop over each element in the first array\n    for num in array_nums1:\n        # If the element is also present in the second array, add it to the intersection set\n        if num in array_nums2:\n            intersection.add(num)\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection)",
        "num_ids": 124
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection",
        "num_ids": 64
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes a tuple and an element and returns the number of times the element occurs in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and returns the count of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result",
        "num_ids": 76
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result",
        "num_ids": 76
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the element before each element in the list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result",
        "num_ids": 58
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    '''\n    Insert an element before each element in a list and return the resulting list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst",
        "num_ids": 71
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result",
        "num_ids": 68
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element of a list.\n\n    :param lst: the list of elements\n    :param elem: the element to insert\n    :return: the resulting list\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result",
        "num_ids": 77
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
        "num_ids": 68
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    result = result[1:]\n    return result",
        "num_ids": 75
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result[1:]",
        "num_ids": 77
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function converts complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result",
        "num_ids": 61
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        print(cmath.polar(complex(number)))",
        "num_ids": 45
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"The polar coordinates of {} are: r = {}, phi = {}\".format(num, polar[0], polar[1]))",
        "num_ids": 55
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r, theta = cmath.polar(num)\n        # Format the output string and print it\n        print(f\"{num} = {r} * e^(i * {theta} rad)\")",
        "num_ids": 85
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coordinates.append(polar)\n    return polar_coordinates",
        "num_ids": 64
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of tuples containing the\n    polar coordinates (magnitude and phase) of each complex number.\n    \"\"\"\n    polar_coordinates = []\n    for num in numbers:\n        polar_coord = (abs(num), cmath.phase(num))\n        polar_coordinates.append(polar_coord)\n    return polar_coordinates",
        "num_ids": 92
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar = []\n    for num in numbers:\n        polar.append(cmath.polar(num))\n    return polar",
        "num_ids": 52
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(f\"The polar form of {num} is {cmath.polar(num)}.\")",
        "num_ids": 55
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(f\"Polar coordinates of {num} are {polar}\")",
        "num_ids": 60
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of tuples containing their polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coords.append(polar)\n    return polar_coords",
        "num_ids": 73
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as an input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 37
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = list(combinations_with_replacement(l, n))\n    return comb",
        "num_ids": 84
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]",
        "num_ids": 81
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 35
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, n+1):\n        result += combinations_with_replacement(l, i)\n    return [(combination) for combination in result]",
        "num_ids": 103
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 106
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    # Create a list of numbers from 2 to n\n    nums = list(range(2, n))\n\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n)]\n    p = 0\n    while p * p < n:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p]:\n            # Update all multiples of p\n            for i in range(p * 2, n, p):\n                prime[i] = False\n        p += 1\n\n    # Count the number of prime numbers less than n\n    count = 0\n    for p in range(2, n):\n        if prime[p]:\n            count += 1\n\n    return count",
        "num_ids": 202
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, int(i**(0.5))+1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
        "num_ids": 144
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count",
        "num_ids": 96
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0  # variable to keep track of the number of prime numbers found\n    for num in range(2, n):  # iterate through all numbers from 2 to n-1\n        if all(num % i!= 0 for i in range(2, num)):  # check if num is prime by checking if it is divisible by any number from 2 to num-1\n            count += 1  # increment the count variable if num is prime\n    return count  # return the count of prime numbers",
        "num_ids": 151
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 96
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    A function to count the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 132
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        # check if num is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 113
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple containing the \n    maximum elements from both tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "num_ids": 114
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of equal length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup2[i],)\n    \n    return result_tup",
        "num_ids": 134
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup = (max(max_tup[i], test_tup1[i]),)\n    for i in range(len(test_tup2)):\n        max_tup += (max(max_tup[i], test_tup2[i]),)\n    return max_tup",
        "num_ids": 114
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup",
        "num_ids": 82
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = (test_tup1[i],)\n        else:\n            max_tup = (test_tup2[i],)\n    return max_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_sum = 0\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            # Compute the sum of the current elements\n            curr_sum = test_tup1[i] + test_tup2[j]\n            # If the sum is greater than the current maximum sum, update max_tup and max_sum\n            if curr_sum > max_sum:\n                max_tup = (test_tup1[i], test_tup2[j])\n                max_sum = curr_sum\n    return max_tup",
        "num_ids": 165
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (max(test_tup1[i], test_tup2[i]),)\n    return max_tup",
        "num_ids": 80
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup2[i],)\n    return result_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must have the same length\"\n    else:\n        max_tup = ()\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                max_tup += (test_tup1[i],)\n            else:\n                max_tup += (test_tup2[i],)\n        return max_tup",
        "num_ids": 134
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initializing the maximum value to the first element of the first tuple\n    max_value = test_tup1[0]\n    \n    # Checking if the second element of the first tuple is greater than the maximum value\n    if test_tup1[1] > max_value:\n        max_value = test_tup1[1]\n        \n    # Checking if the first element of the second tuple is greater than the maximum value\n    if test_tup2[0] > max_value:\n        max_value = test_tup2[0]\n        \n    # Checking if the second element of the second tuple is greater than the maximum value\n    if test_tup2[1] > max_value:\n        max_value = test_tup2[1]\n        \n    return max_value",
        "num_ids": 194
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"Return the nth newman-shanks-williams prime number.\"\"\"\n    count = 0\n    k = 1\n    while True:\n        if is_prime(k):\n            count += 1\n        if count == n:\n            return k\n        k += 2",
        "num_ids": 134
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = []  # initialize an empty list to store prime numbers\n    candidate = 2  # start with the first prime number\n\n    while len(primes) < n:  # keep finding primes until we have n of them\n        is_prime = True  # assume the current number is prime until proven otherwise\n        for i in range(2, int(candidate ** 0.5) + 1):\n            if candidate % i == 0:  # if the candidate is divisible by i, it's not prime\n                is_prime = False\n                break\n\n        if is_prime:  # if the candidate is prime, add it to the list of primes\n            primes.append(candidate)\n\n        candidate += 1  # try the next candidate number\n\n    return primes[-1]  # return the nth prime number in the list",
        "num_ids": 213
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i - 1) and is_prime(i + 1):\n            count += 1\n        i += 1\n    return i - 2",
        "num_ids": 117
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        '''\n        Function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        count = 1  # Count the number of prime numbers found\n        num = 3   # Start with the first prime number\n        while count < n:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 2  # Check odd numbers only for primality\n",
        "num_ids": 210
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    \n    if n > 728:\n        raise ValueError(\"n must be less than or equal to 728\")\n    \n    return p[n-1]",
        "num_ids": 895
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 1000000\n    while count < n:\n        if is_prime(i) and is_prime(2*i) and is_prime(5*i):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n\nprint(newman_prime(10))",
        "num_ids": 142
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 79\n    if n == 23:\n        return 83\n    if n == 24:\n        return 89\n    if n == 25:\n        return 97\n    if n == 26:\n        return 101\n    if n == 27:\n        return 103\n    if n == 28:\n        return 107\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 127\n    if n == 32:\n        return 131\n    if n == 33:\n        return 137\n    if n == 34:\n        return 139\n    if n == 35:\n        return 149\n    if n == 36:\n        return 151\n    if n == 37:\n        return 157\n    if n == 38:\n        return 163\n    if n == 39:\n        return 167\n    if n == 40:\n        return 173\n    if n == 41:\n        return 179\n    if n == 42:\n        return 181\n    if n == 43:\n        return 191\n    if n == 44:\n        return 193\n    if n == 45:\n        return 197\n    if n == 46:\n        return 199\n    if n == 47:\n        return 211\n    if n == 48:\n        return 223\n    if n == 49:\n        return 227\n    if n == 50:\n        return 229\n    if n == 51:\n        return 233\n    if n == 52:\n        return 239\n    if n == 53:\n        return 241\n    if n == 54:\n        return 251\n    if n == 55:\n        return 257\n    if n == 56:\n        return 263\n    if n == 57:\n        return 269\n    if n == 58:\n        return 271\n    if n == 59:\n        return 277\n    if n == 60:\n        return 281\n    if n == 61:\n        return 283\n    if n == 62:\n        return 293\n    if n == 63:\n        return 307\n    if n == 64:\n        return 311\n    if n == 65:\n        return 313\n    if n == 66:\n        return 317\n    if n == 67:\n        return 331\n    if n == 68:\n        return 337\n    if n == 69:\n        return 347\n    if n == 70:\n        return 349\n    if n == 71:\n        return 353\n    if n == 72:\n        return 359\n    if n == 73",
        "num_ids": 1010
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    else:\n        p = 11\n        count = 4\n        while count < n:\n            p += 2\n            is_prime = True\n            for i in range(2, int(p**0.5) + 1):\n                if p % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n        return p",
        "num_ids": 159
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(i) and is_prime(bin(i).count('1')):\n            count += 1\n    return i",
        "num_ids": 114
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    if n == 1:\n        return 2\n\n    # Initialize variables\n    num_primes = 1  # count of primes found\n    current_num = 3  # current number to check\n    previous_num = 2  # previous number to check\n    next_num = 5  # next number to check\n\n    # Loop until nth prime is found\n    while num_primes < n:\n        # Check if current number is prime\n        is_prime = True\n        for i in range(2, int(current_num ** 0.5) + 1):\n            if current_num % i == 0:\n                is_prime = False\n                break\n\n        # If current number is prime, increment count and update variables\n        if is_prime:\n            num_primes += 1\n            previous_num = current_num\n            current_num = next_num\n            next_num = 4 * current_num + previous_num\n\n    return current_num",
        "num_ids": 257
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup",
        "num_ids": 87
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples are not equal\")\n        return None\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i]/test_tup2[i]),)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # initialize an empty tuple to store the results\n    result_tup = ()\n\n    # perform division operation element-wise across the given tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup",
        "num_ids": 108
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup",
        "num_ids": 87
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        raise ValueError(\"L is greater than the length of the list\")\n\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    return (part1, part2)",
        "num_ids": 110
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]",
        "num_ids": 72
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list.\"\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 100
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 73
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]",
        "num_ids": 70
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "num_ids": 92
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return (list1[:L], list1[L:])",
        "num_ids": 71
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 73
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return list1[:L], list1[L:]",
        "num_ids": 70
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L cannot be greater than the length of the list\"\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 101
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = h_age * 7\n    return dogs_years",
        "num_ids": 47
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    return years",
        "num_ids": 41
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Calculate the age of a dog in dog's years.\n\n    Args:\n    h_age (int): The age of the dog in human years.\n\n    Returns:\n    float: The age of the dog in dog's years.\n    '''\n\n    # Convert human years to dog's years\n    # 1 human year = 7 dog's years\n    d_age = h_age * 7\n\n    return d_age",
        "num_ids": 98
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in dog's years\n    d_age = h_age / 7\n\n    # Return the dog's age in dog's years\n    return d_age",
        "num_ids": 67
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 66
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Split a list S into sublists of size step.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 50
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        return \"The input is not a list.\"\n    if not isinstance(step, int):\n        return \"The step is not an integer.\"\n    if step <= 0:\n        return \"The step must be a positive integer.\"\n    n = step - 1\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list",
        "num_ids": 147
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        return []\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result",
        "num_ids": 91
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 77
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Initialize an empty list to hold the resulting lists\n    result = []\n    # Loop through the list, starting at the nth element\n    for i in range(step-1, len(S), step):\n        # Append the sublist starting at index i to the result list\n        result.append(S[i-step+1:i+1])\n    # Return the resulting list of sublists\n    return result",
        "num_ids": 128
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list S into sublists every step elements.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 51
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function calculates the lateral surface area of a cube with side length \"l\".\n    '''\n    return 6 * l ** 2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    return 6*l**2",
        "num_ids": 44
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)",
        "num_ids": 44
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Calculates the lateral surface area of a cube with side length l.\n    '''\n    return 6 * l**2",
        "num_ids": 37
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a parameter l which represents the side length of the cube. \n    It returns the lateral surface area of the cube.\n    '''\n    return 6 * l ** 2",
        "num_ids": 51
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    lateralsurface = 6 * (l ** 2)\n    return lateralsurface",
        "num_ids": 56
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum",
        "num_ids": 68
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # Add the square of each odd number to the sum variable\n        sum += i*i\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum",
        "num_ids": 111
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Loop through first n odd natural numbers\n    for i in range(1, (2*n)+1, 2):\n        # Add the square of the current number to sum\n        sum += i**2\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum",
        "num_ids": 112
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "num_ids": 80
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of the squares\n    sum_of_squares = 0\n    \n    # loop through the first n odd numbers\n    for i in range(1, 2*n+1, 2):\n        # square each odd number and add it to the sum\n        sum_of_squares += i**2\n        \n    # return the sum of the squares\n    return sum_of_squares",
        "num_ids": 123
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum",
        "num_ids": 68
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop over odd numbers from 1 to n\n    for i in range(1, 2*n, 2):\n        # add square of i to sum\n        sum += i**2\n    # return sum of squares\n    return sum",
        "num_ids": 100
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= 2*n:\n        if i % 2 == 1:\n            sum += i**2\n        i += 1\n    return sum",
        "num_ids": 81
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    while True:\n        if count == n:\n            return count\n        elif count % 2!= 0:\n            count += 1\n        else:\n            count += 2",
        "num_ids": 67
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Returns the nth star number.\n    \"\"\"\n    num = 1\n    for i in range(n):\n        num += 2*i + 1\n    return num",
        "num_ids": 47
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    for i in range(1, n + 1):\n        num = num * i\n    return num",
        "num_ids": 53
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        if '**' in str(num):\n            count += 1\n        num += 1\n    return num - 1",
        "num_ids": 68
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n    count = 0\n    result = 0\n    while count < n:\n        result += 1\n        if result % 2!= 0:\n            count += 1\n    return result",
        "num_ids": 70
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        print(num, end=\" \")\n        num += 2\n        count += 1",
        "num_ids": 60
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        print(num, end=' ')\n        num += 1\n        count += 1\n    return num - 1",
        "num_ids": 66
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize a list with the first star number\n    star_nums = [1]\n    \n    # loop over the numbers from 2 to n\n    for i in range(2, n+1):\n        # calculate the sum of the previous star numbers\n        prev_sum = sum(star_nums[:i])\n        # append the sum to the list\n        star_nums.append(prev_sum)\n    \n    # return then'th star number\n    return star_nums[n-1]",
        "num_ids": 127
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    for i in range(n):\n        num = num * 2 + 1\n    return num",
        "num_ids": 52
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + find_star_num(n-1)\n\nprint(find_star_num(5)) # Output: 15",
        "num_ids": 72
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "num_ids": 32
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 89
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function finds the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 77
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes in a list and returns the sum of even numbers at even positions in the list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
        "num_ids": 82
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 65
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even",
        "num_ids": 89
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            result += arr[i]\n    return result",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 86
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
        "num_ids": 80
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**5\n    return total",
        "num_ids": 63
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    \n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n        \n    return sum\n",
        "num_ids": 84
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through first n even numbers\n    for i in range(2, n+2, 2):\n        # Raise the even number to the fifth power and add it to the sum\n        sum += i**5\n        \n    # Return the sum\n    return sum",
        "num_ids": 111
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum",
        "num_ids": 86
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += pow(count, 5)\n            count += 1\n        else:\n            count += 1\n    return sum",
        "num_ids": 94
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            total += count ** 5\n        count += 1\n    return total",
        "num_ids": 86
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum",
        "num_ids": 74
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total",
        "num_ids": 39
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i ** 5\n    return sum",
        "num_ids": 41
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i ** 5\n    return sum",
        "num_ids": 75
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]",
        "num_ids": 51
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]",
        "num_ids": 51
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]",
        "num_ids": 51
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = [x[-1] for x in test_list]\n    return rear_list",
        "num_ids": 58
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 95
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 95
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 92
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(1, n+1, 2):\n        result += math.comb(n, i)\n    return result",
        "num_ids": 75
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0  # initialize sum to zero\n    for i in range(0, n+1, 2):  # iterate over even indices\n        s += math.comb(n, i)  # add the binomial coefficient to sum\n    return s",
        "num_ids": 96
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, n, 2):\n        c = math.comb(n, i)\n        even_sum += c\n    return even_sum",
        "num_ids": 83
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(0, n+1, 2):\n        result += math.comb(n, i)\n    return result",
        "num_ids": 75
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    even_sum = 0\n    for i in range(0, n, 2):\n        even_sum += math.comb(n, i)\n    return even_sum",
        "num_ids": 55
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 51
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    even_binomial_Coeff_Sum = 0\n    \n    # Loop through all even indices from 0 to n-2\n    for i in range(0, n-2, 2):\n        # Calculate the binomial coefficient for the current index\n        binomial_coeff = math.comb(n-1, i)\n        \n        # Add the binomial coefficient to the sum if it is even\n        if binomial_coeff % 2 == 0:\n            even_binomial_Coeff_Sum += binomial_coeff\n            \n    return even_binomial_Coeff_Sum",
        "num_ids": 136
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(2, n+1, 2):\n            sum += math.comb(n, i)\n        return sum",
        "num_ids": 103
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 76
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume",
        "num_ids": 56
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14 * r ** 2) * h",
        "num_ids": 51
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h",
        "num_ids": 53
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "num_ids": 54
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "num_ids": 55
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h",
        "num_ids": 50
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "num_ids": 52
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2 * h)\n    return volume",
        "num_ids": 54
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14 * r**2 * h)",
        "num_ids": 50
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14159265359 * r ** 2 * h\n    return volume",
        "num_ids": 61
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict",
        "num_ids": 69
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}",
        "num_ids": 59
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 77
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 77
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n",
        "num_ids": 64
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "num_ids": 70
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    This function takes a tuple as an argument and returns the number of elements\n    that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count",
        "num_ids": 79
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "num_ids": 79
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            return count\n        count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == test_tup.index(test_tup[test_tup.index(test_tup[i])]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            count += 1\n            break\n    return count",
        "num_ids": 77
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n        else:\n            return count",
        "num_ids": 71
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_numbers = []\n    for i in range(1, 1000000):\n        decagonal_numbers.append(i*(10**5))\n    if n > len(decagonal_numbers):\n        return \"n is greater than the total number of decagonal numbers.\"\n    return decagonal_numbers[n-1]",
        "num_ids": 110
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    count = 1\n    while count <= n:\n        decagonal_num += count\n        count += 1\n    return decagonal_num",
        "num_ids": 69
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 0\n    while count < n:\n        decagonal += 10*count\n        count += 1\n    return decagonal",
        "num_ids": 67
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function checks if a given number is a decagonal number or not.\n    A decagonal number is a number that is the nth term of the sequence of decimal numbers:\n    D(n) = 10*n*(3*n-1)/2.\n\n    Parameters:\n    n (int): A positive integer\n\n    Returns:\n    bool: True if the given number is a decagonal number, False otherwise.\n    \"\"\"\n\n    # Calculate the nth decagonal number\n    decagonal_num = 10*n*(3*n-1)//2\n\n    # Check if the given number is equal to the nth decagonal number\n    if decagonal_num == n:\n        return True\n    else:\n        return False",
        "num_ids": 170
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer n as input and returns True if the nth decagonal number exists, False otherwise.\n    '''\n    i = 1\n    decagonal_num = 0\n    while True:\n        decagonal_num = i * (10 ** (i-1)) + (i-1) * (10 ** (i-1))\n        if decagonal_num >= n:\n            return decagonal_num == n\n        i += 1",
        "num_ids": 116
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 1\n    while count <= n:\n        decagonal += count\n        count += 1\n    return decagonal",
        "num_ids": 63
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 1\n    while count <= n:\n        decagonal += count\n        count += 1\n    return decagonal",
        "num_ids": 63
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal_num = 0\n    while count <= n:\n        decagonal_num += (count * 10)\n        count += 1\n    return decagonal_num",
        "num_ids": 75
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    decagonal = 0\n    while count < n:\n        decagonal += 10*count\n        count += 1\n    return decagonal",
        "num_ids": 67
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 10 * (1 + (n - 1) // 10)\n    return d + (n - 1) % 10",
        "num_ids": 64
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and an element and returns a tuple containing a boolean value indicating whether the element is in the array and the index position of the element in the array (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 109
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in a list are unique.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "num_ids": 56
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n    :param test_list: list to be checked\n    :return: True if all elements are unique, False otherwise\n    \"\"\"\n    # Check if the list has at least one element\n    if len(test_list) < 1:\n        return True\n    # Check if all elements in the list are unique\n    return len(test_list) == len(set(test_list))",
        "num_ids": 106
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Check if all elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)",
        "num_ids": 45
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique,\n    otherwise it returns False.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "num_ids": 66
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all elements in the list are unique, False otherwise.\n    '''\n\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # iterate through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # return True if the length of the list and the length of the set are the same, indicating all elements are unique\n    if len(test_list) == len(unique_set):\n        return True\n    else:\n        return False",
        "num_ids": 133
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing the element-wise subtraction of the two lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 74
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise and return the result.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result",
        "num_ids": 85
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        nums1: list of integers\n        nums2: list of integers of the same length as nums1\n\n    Returns:\n        A list of integers that are the element-wise subtraction of nums1 and nums2.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 106
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 58
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    return [a - b for a, b in zip(nums1, nums2)]",
        "num_ids": 66
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    \n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]",
        "num_ids": 70
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must be of equal length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result",
        "num_ids": 92
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the number to a string to be able to iterate through its digits\n    n = str(n)\n    \n    # iterate through the digits and check their frequency\n    for digit in n:\n        if n.count(digit) > int(digit):\n            return False\n    \n    return True",
        "num_ids": 96
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself, else it returns False.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True",
        "num_ids": 83
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Check if each digit's frequency is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True",
        "num_ids": 104
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    freq = [0] * 10  # initialize frequency array with zeros for digits 0-9\n    while n > 0:\n        freq[n % 10] += 1  # increment frequency of digit at rightmost position\n        n //= 10  # remove rightmost digit from n\n    return all(f <= d for f, d in zip(freq, range(10)))  # check if all frequencies are less than or equal to their digit",
        "num_ids": 108
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n): \n    freq = [0]*10\n    while n>0: \n        freq[n%10]+=1\n        n//=10\n    for i in freq: \n        if i>i: \n            return False\n    return True",
        "num_ids": 54
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True",
        "num_ids": 78
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    while n > 0:\n        digit = n % 10\n        if digit > 1 and n % digit!= 0:\n            return False\n        n //= 10\n    return True",
        "num_ids": 80
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = [0]*10 # initialize a list of 10 zeros to keep track of the frequency of each digit\n    while n > 0:\n        digit = n % 10 # get the last digit of the number\n        digit_freq[digit] += 1 # increment the frequency count for that digit\n        n //= 10 # remove the last digit from the number\n    for i in digit_freq:\n        if i > i:\n            return False # if any frequency count is greater than the digit itself, return False\n    return True # if all frequency counts are less than or equal to the digit itself, return True",
        "num_ids": 175
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for digit in str(n):\n        if str(n).count(digit) > int(digit):\n            return False\n    return True",
        "num_ids": 69
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_frequency = {}\n    for digit in str(n):\n        digit_frequency[int(digit)] = digit_frequency.get(int(digit), 0) + 1\n    return all(digit_frequency[i] <= i for i in range(10))",
        "num_ids": 100
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Checks if all elements in a list are equal to a given element.\n    \"\"\"\n    if all(x == elem for x in lst):\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    '''\n    Check if all items in the list are equal to the given element.\n    \n    Args:\n    lst (list): List to be checked.\n    element (any): Element to compare all items in the list with.\n    \n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    '''\n    for item in lst:\n        if item!= element:\n            return False\n    return True",
        "num_ids": 98
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for i in lst:\n        if i!= elem:\n            return False\n    return True",
        "num_ids": 56
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True",
        "num_ids": 58
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input and returns True if all the elements in the list are equal to the given element.\n    \"\"\"\n    if len(set(lst)) == 1:\n        return lst[0] == elem\n    else:\n        return False",
        "num_ids": 68
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)",
        "num_ids": 52
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n\n    Args:\n    lst: A list of elements.\n    element: An element to check against.\n\n    Returns:\n    True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    for i in lst:\n        if i!= element:\n            return False\n    return True",
        "num_ids": 97
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements of a list are equal to a given element.\n\n    Args:\n        lst: list of elements\n        elem: the expected element\n\n    Returns:\n        True if all elements of the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(elem == x for x in lst)",
        "num_ids": 77
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(i == elem for i in lst)",
        "num_ids": 55
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n\n    Parameters:\n        lst (list): A list of elements.\n        elem (any): An element to be checked.\n\n    Returns:\n        bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n\n    for item in lst:\n        if item!= elem:\n            return False\n    return True",
        "num_ids": 103
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    return bool(re.search(pattern, text))",
        "num_ids": 70
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    return bool(re.search(pattern, text))",
        "num_ids": 41
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\w{1,2}b\\w{1,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 86
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\bb{2,3}'\n    return re.search(pattern, text) is not None",
        "num_ids": 42
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(bb{2,3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Find the sum of the first array\n    max_sum = sum(a[:n])\n\n    # Iterate from 2 to k (inclusive)\n    for i in range(2, k+1):\n        temp_sum = 0\n        for j in range(n):\n            # Calculate the sum of the array for each i-th iteration\n            temp_sum += (a[j]*i)\n        # Update the maximum sum if required\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n    return max_sum",
        "num_ids": 133
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    temp_sum = max_sum = 0\n\n    for i in range(n): \n        temp_sum += a[i] \n\n        if i >= k-1: \n            max_sum = max(max_sum, temp_sum) \n            temp_sum -= a[i-(k-1)] \n\n    return max_sum",
        "num_ids": 120
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = 0\n    for i in range(k):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += a[j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum",
        "num_ids": 80
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 > k:\n                break\n            sub_array_sum = sum(a[i:j+1])\n            if sub_array_sum > max_sum:\n                max_sum = sub_array_sum\n    return max_sum\n",
        "num_ids": 136
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the maximum sum variable\n    max_sum = float('-inf')\n    \n    # loop through the array and repeat it k times\n    for i in range(n):\n        new_a = a[i]*k\n        # find the maximum sum subarray in the repeated array\n        max_sum = max(max_sum, max_sub_array_sum(new_a, k))\n    \n    # return the maximum sum\n    return max_sum",
        "num_ids": 144
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    :param a: A list of integers representing the given array.\n    :param n: An integer representing the length of the given array.\n    :param k: An integer representing the number of times the array needs to be repeated.\n    :return: An integer representing the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Initializing the maximum sum to the first element of the array\n    max_sum = a[0]\n\n    # Finding the sum of the first k elements of the array\n    curr_sum = sum(a[:k])\n\n    # Updating the maximum sum if the current sum is greater than it\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\n    # Calculating the sum of the remaining elements in the array by adding the last element of the previous subarray to the sum of the first k-1 elements of the current subarray\n    curr_sum = sum(a[:k]) - a[k-1]\n\n    # Updating the maximum sum if the current sum is greater than it\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\n    # Repeating the above steps for the remaining subarrays of size k\n    for i in range(k, n):\n        curr_sum = curr_sum + a[i] - a[i-k]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum",
        "num_ids": 366
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # First, we need to repeat the array k times.\n    repeated_array = a * k\n\n    # Now, we can find the maximum subarray sum using Kadane's algorithm.\n    max_so_far = 0\n    max_ending_here = 0\n\n    for i in range(len(repeated_array)):\n        max_ending_here += repeated_array[i]\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far",
        "num_ids": 187
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    end = 0\n    for i in range(k):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n            end = i\n    for i in range(k, n):\n        curr_sum += a[i] - a[i-k]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i-k+1\n            end = i\n    return max_sum, start, end",
        "num_ids": 185
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Initialize the sum of the first array as the maximum sum\n    max_sum = sum(a)\n\n    # Repeat the array k-1 times to form the modified array\n    for i in range(k-1):\n        modified_array = a + a\n        # Update the maximum sum if the sum of the modified array is greater\n        max_sum = max(max_sum, sum(modified_array))\n\n    return max_sum",
        "num_ids": 142
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        sum_i = 0\n        for j in range(n):\n            sum_i += a[j]\n            if i == k-1:\n                max_sum = max(max_sum, sum_i)\n            else:\n                max_sum = max(max_sum, sum_i)\n                sum_i -= a[j-n]\n    return max_sum",
        "num_ids": 149
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(2, 2*n, 2):\n        # Add the square of the current even number to the sum\n        sum += i**2\n        \n    # Return the sum of squares of first n even numbers\n    return sum",
        "num_ids": 106
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum",
        "num_ids": 64
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 63
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of squares of first\", n, \"even natural numbers is:\", square_Sum(n))",
        "num_ids": 102
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 65
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum",
        "num_ids": 65
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count**2\n        count += 2\n    return sum",
        "num_ids": 65
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through first n even natural numbers and add square of each number to sum variable\n    for i in range(2, n*2+1, 2):\n        sum += i*i\n\n    return sum",
        "num_ids": 92
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    for i in list1:\n        if len(i) == max_len:\n            return i",
        "num_ids": 85
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_lst = lst\n            max_len = len(lst)\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n\n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            result = sub_list\n        elif len(sub_list) == max_len:\n            result.append(sub_list)\n\n    return result",
        "num_ids": 105
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(lst):\n    '''\n    Returns a list of the maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for sub_lst in lst:\n        if len(sub_lst) > max_len:\n            max_len = len(sub_lst)\n            max_lst = sub_lst\n    return max_lst",
        "num_ids": 84
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    result = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n            result = [list1[i]]\n        elif len(list1[i]) == max_length:\n            result.append(list1[i])\n    return result",
        "num_ids": 114
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    if n < 0 or k < 0:\n        return 0\n    \n    if n == 0 or k == 1:\n        return 1\n    \n    if n == 1:\n        return k\n    \n    dp = [[0] * k for _ in range(n+1)]\n    \n    for i in range(k):\n        dp[1][i] = 1\n        \n    for i in range(2, n+1):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1]\n            \n    return dp[n][k-1]",
        "num_ids": 148
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        # We can paint the first post k ways, then the second post k ways, and so on.\n        # So the total number of ways is k * count_no_of_ways(n-1, k).\n        # We can also paint the first and second posts together (in any order) as a special case.\n        return k * k * count_no_of_ways(n-2, k) + k * count_no_of_ways(n-1, k)",
        "num_ids": 145
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array to store the number of ways of painting each post\n    ways = [[0] * k for _ in range(n)]\n\n    # The first post can be painted in k different ways\n    for i in range(k):\n        ways[0][i] = 1\n\n    # For each post after the first one, there are k - 1 colors to choose from\n    for i in range(1, n):\n        for j in range(k):\n            # If the previous post has the same color, then there are no ways of painting this one\n            if j == 0 or ways[i-1][j-1] == 0:\n                ways[i][j] = k - 1\n            else:\n                # Otherwise, there are k - 1 - j ways of painting this one\n                ways[i][j] = k - 1 - j\n\n    # The total number of ways of painting the entire fence is the product of the ways of painting each post\n    return ways[n-1][k-1]",
        "num_ids": 243
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n\n    # Base case when only one color is available\n    for i in range(1, n+1):\n        dp[i][1] = 1\n\n    # Fill the dp table\n    for i in range(1, n+1):\n        for j in range(2, k+1):\n            for m in range(1, j+1):\n                dp[i][j] += dp[i-1][j-m]\n\n    return dp[n][k]",
        "num_ids": 177
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k + 1) for _ in range(n)]\n\n    # Base cases\n    for i in range(n):\n        dp[i][1] = 1\n\n    for i in range(k + 1):\n        dp[0][i] = 1\n\n    # Recursive case\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= 2:\n                dp[i][j] += dp[i - 2][j - 2]\n\n    return dp[n - 1][k]\n",
        "num_ids": 160
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * k for _ in range(n)]\n    dp[0][0] = 1\n    \n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = sum(dp[i-1][:j])\n    \n    return sum(dp[n-1])",
        "num_ids": 85
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    if k == 1: \n        return n\n    if k == 2: \n        return n * n\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in range(3, n + 1): \n        dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1) + dp[i - 3] * (k - 1)\n    return dp[n]",
        "num_ids": 134
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 1:\n        return 1\n    \n    dp = [[0 for i in range(k)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][0] = 1\n        dp[i][1] = 1\n\n    for i in range(1, n):\n        for j in range(2, k):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n\n    return dp[n-1][k-1]",
        "num_ids": 181
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Base case: one color can be painted on the first post\n    for j in range(1, k+1):\n        dp[1][j] = 1\n\n    # For each post, we can either paint it with the same color or a different color\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n\n    # The number of ways to paint the fence with at most 2 adjacent posts having the same color is given by dp[n][2]\n    return dp[n][2]",
        "num_ids": 183
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n < 2:\n        return 0\n    elif n == 2:\n        return k\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = k\n        dp[2] = k * k\n        for i in range(3, n + 1):\n            dp[i] = (dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1)) * (k - 1)\n        return dp[n]",
        "num_ids": 174
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as arguments and returns the quotient of them rounded down to the nearest integer.\n    \"\"\"\n    return n // m",
        "num_ids": 39
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two arguments: n and m.\n    It returns the quotient of n and m, rounded down to the nearest integer.\n    \"\"\"\n    quotient = n / m\n    return int(quotient)",
        "num_ids": 55
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    if m == 0:\n        print(\"Cannot divide by zero!\")\n    else:\n        result = n // m\n        print(f\"The quotient of {n} and {m} is {result}\")",
        "num_ids": 76
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ValueError(\"Division by zero error!\")\n    else:\n        return n // m",
        "num_ids": 56
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n,m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m",
        "num_ids": 42
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    \"\"\"\n    return n // m",
        "num_ids": 41
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    a = math.sqrt(w**2 + h**2)\n    return a",
        "num_ids": 54
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    This function takes the width and height of a right angled triangle as input and returns the third side of the triangle.\n    \"\"\"\n    s = (w**2 + h**2) ** 0.5\n    return s",
        "num_ids": 65
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes in two parameters w and h representing the lengths of the two sides of a right angled triangle.\n    It returns the length of the third side of the triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 75
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes the base and height of a right-angled triangle and returns the third side.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 54
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the third side using the Pythagorean theorem\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 71
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 <= 2*(w*h):\n        print(\"The third side of the right angled triangle cannot be found.\")\n    else:\n        third_side = math.sqrt(w**2 + h**2 - 2*(w*h))\n        print(f\"The third side of the right angled triangle is {third_side:.2f}.\")",
        "num_ids": 120
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes two arguments, w and h, representing the length of the two sides of a right-angled triangle.\n    It returns the length of the third side of the triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 76
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 54
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function finds the maximum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 78
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a list.\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 55
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function takes a list of different data types as input and returns the maximum value in the list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n        elif isinstance(val, float) and val > max_val:\n            max_val = val\n        elif isinstance(val, str) and val > max_val:\n            max_val = val\n        elif isinstance(val, bool) and val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 140
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list of integers or floats as input and returns the maximum value in the list.\n    \"\"\"\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val",
        "num_ids": 67
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a list of heterogeneous values.\n    \"\"\"\n    if not lst:\n        return None\n    \n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 68
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]  # Assume first element as max_num\n\n    for num in listval:\n        if num > max_num:  # If current element is greater than max_num\n            max_num = num  # Update max_num\n\n    return max_num",
        "num_ids": 92
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n\n    max_val = listval[0]\n\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    return max_val",
        "num_ids": 75
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 63
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "num_ids": 73
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes in a number as an argument and returns the sum of all the divisors of that number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 69
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its divisors.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 64
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its divisors.\n    \"\"\"\n    # Initialize a variable to store the sum of divisors\n    sum_div = 0\n    \n    # Loop through all numbers from 1 to the given number\n    for i in range(1, number+1):\n        # Check if the number is a divisor of the given number\n        if number % i == 0:\n            # Add the divisor to the sum of divisors\n            sum_div += i\n    \n    # Return the sum of divisors\n    return sum_div",
        "num_ids": 130
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as input and returns the sum of all its divisors.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum += i\n    return sum",
        "num_ids": 64
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 63
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n    temp_arr = []\n    \n    # Merge sort algorithm to get the inversion count\n    def merge_sort(arr, temp_arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_arr = arr[:mid]\n            right_arr = arr[mid:]\n            merge_sort(left_arr, temp_arr)\n            merge_sort(right_arr, temp_arr)\n            i = j = k = 0\n            while i < len(left_arr) and j < len(right_arr):\n                if left_arr[i] <= right_arr[j]:\n                    arr[k] = left_arr[i]\n                    i += 1\n                else:\n                    arr[k] = right_arr[j]\n                    j += 1\n                    inv_count += len(left_arr[i:])\n                k += 1\n            while i < len(left_arr):\n                arr[k] = left_arr[i]\n                i += 1\n                k += 1\n            while j < len(right_arr):\n                arr[k] = right_arr[j]\n                j += 1\n                k += 1\n    \n    # Call the merge_sort function to get the inversion count\n    merge_sort(arr, temp_arr)\n    \n    # Return the inversion count\n    return inv_count",
        "num_ids": 337
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in a given array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    # Initialize a temporary array of same length as arr\n    temp = [0] * n\n    # Call mergeSort function to sort the array\n    mergeSort(arr, temp, 0, n-1, count)\n    return count\n\ndef mergeSort(arr, temp, left, right, count):\n    if left < right:\n        # Find the middle point\n        mid = (left + right) // 2\n        # Sort first and second halves\n        mergeSort(arr, temp, left, mid, count)\n        mergeSort(arr, temp, mid+1, right, count)\n        # Merge the sorted halves\n        merge(arr, temp, left, mid, right, count)\n\ndef merge(arr, temp, left, mid, right, count):\n    # Copy data to temporary array\n    for i in range(left, right+1):\n        temp[i] = arr[i]\n    # Initialize pointers for left and right subarrays\n    i = left\n    j = mid + 1\n    k = left\n    # Merge the temporary array back to arr[left..right]\n    while k <= right:\n        if i > mid:\n            arr[k] = temp[j]\n            j += 1\n        elif j > right:\n            arr[k] = temp[i]\n            i += 1\n        elif temp[i] <= temp[j]:\n            arr[k] = temp[i]\n            i += 1\n        else:\n            arr[k] = temp[j]\n            count += (mid - i + 1) # Count number of inversions\n            j += 1\n        k += 1",
        "num_ids": 387
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in an array using merge sort algorithm.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left_arr, left_inv = get_Inv_Count(arr[:mid])\n    right_arr, right_inv = get_Inv_Count(arr[mid:])\n\n    inv_count = left_inv + right_inv\n    i = j = 0\n    res_arr = []\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            res_arr.append(left_arr[i])\n            i += 1\n        else:\n            res_arr.append(right_arr[j])\n            j += 1\n            inv_count += len(left_arr[i:])\n\n    res_arr += left_arr[i:]\n    res_arr += right_arr[j:]\n\n    return res_arr, inv_count\n",
        "num_ids": 238
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    count = 0\n    for i in range(len(sorted_arr)):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[j] < sorted_arr[i]:\n                count += 1\n    return count",
        "num_ids": 236
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "num_ids": 81
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function counts the number of inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Merge Sort algorithm\n    def merge(left, right):\n        result = []\n        i = j = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv_count += len(left[i:])\n        \n        result += left[i:]\n        result += right[j:]\n        \n        return result\n    \n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        left = merge_sort(left)\n        right = merge_sort(right)\n        \n        return merge(left, right)\n    \n    merge_sort(arr)\n    \n    return inv_count",
        "num_ids": 233
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "num_ids": 64
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "num_ids": 64
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    \n    # Merge sort algorithm to count inversions\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n            merge_sort(left_half)\n            merge_sort(right_half)\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] < right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                    count += len(left_half[i:])\n                k += 1\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n    \n    merge_sort(arr)\n    return count",
        "num_ids": 265
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 69
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list into a single list.\n\n    Parameters:\n    lst (list): A list of possibly nested lists.\n\n    Returns:\n    list: A flattened list.\n\n    Example:\n    >>> flatten_list([1, 2, 3, [4, 5, [6, 7]]])\n    [1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 151
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for sublist in list1:\n        if type(sublist) == list:\n            flat_list += flatten_list(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 79
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 82
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened_list.extend(flatten_list(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "num_ids": 84
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for elem in list1:\n        if type(elem) == list:\n            flat_list += flatten_list(elem)\n        else:\n            flat_list.append(elem)\n    return flat_list",
        "num_ids": 75
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for sublist in list1:\n        if type(sublist) == list:\n            flat_list.extend(flatten_list(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list",
        "num_ids": 81
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flattened = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened",
        "num_ids": 67
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the sum of the tuples by value\n    sums = defaultdict(int)\n    max_agg = 0\n    for i, j in stdata:\n        # add the current tuple to the sum of its value\n        sums[i] += j\n        sums[j] += i\n        # calculate the current aggregate\n        curr_agg = max(sum(sums.values()) - sums[i] - sums[j], 0)\n        # update the maximum aggregate if necessary\n        max_agg = max(max_agg, curr_agg)\n    return max_agg",
        "num_ids": 157
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a defaultdict to store the counts of each student\n    counts = defaultdict(int)\n    \n    # Loop through the list of tuples and update the counts\n    for student, score in stdata:\n        counts[student] += score\n    \n    # Calculate the maximum aggregate\n    max_agg = max(counts.values())\n    \n    return max_agg",
        "num_ids": 84
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    dp = defaultdict(int)\n    dp[0] = stdata[0][1]\n    dp[1] = max(stdata[0][1], stdata[1][1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + stdata[i][1])\n    return dp[n-1]",
        "num_ids": 130
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return 0\n\n    # Group the transactions by customer\n    customers = defaultdict(list)\n    for transaction in stdata:\n        customers[transaction[0]].append(transaction[1])\n\n    # Calculate the maximum aggregate for each customer\n    max_aggs = []\n    for customer, transactions in customers.items():\n        # Calculate the aggregate for each transaction type\n        transaction_types = defaultdict(int)\n        for transaction in transactions:\n            transaction_types[transaction[1]] += transaction[2]\n\n        # Calculate the maximum aggregate for the customer\n        max_agg = 0\n        for transaction_type, transaction_amount in transaction_types.items():\n            max_agg = max(max_agg, transaction_amount)\n\n        max_aggs.append(max_agg)\n\n    # Return the maximum aggregate for all customers\n    return max(max_aggs)",
        "num_ids": 219
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each distinct set of categories\n    max_agg_dict = defaultdict(lambda: float('-inf'))\n    # Iterate over the list of tuples\n    for transaction in stdata:\n        # Calculate the sum of the transaction's categories\n        category_sum = sum(transaction)\n        # Calculate the set of categories for this transaction\n        categories = set(transaction)\n        # Check if there is already a maximum aggregate for this set of categories\n        current_max = max_agg_dict[categories]\n        # If there is, check if the current transaction's aggregate is greater than the current maximum\n        if category_sum > current_max:\n            # If it is, update the maximum aggregate for this set of categories\n            max_agg_dict[categories] = category_sum\n    # Return the maximum aggregate over all sets of categories\n    return max(max_agg_dict.values())",
        "num_ids": 224
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each value\n    freq = defaultdict(int)\n    for value in stdata:\n        freq[value] += 1\n        \n    # Create a dictionary to store the prefix sums of each value\n    prefix_sum = defaultdict(int)\n    for value in stdata:\n        prefix_sum[value] += prefix_sum[value - 1] + freq[value]\n        \n    # Create a dictionary to store the prefix sums of the maximum aggregate for each length of the aggregate\n    max_aggregate_prefix_sum = defaultdict(int)\n    for length in range(1, len(stdata) + 1):\n        for i in range(len(stdata) - length + 1):\n            max_aggregate_prefix_sum[length] = max(max_aggregate_prefix_sum[length], prefix_sum[i + length] - prefix_sum[i])\n            \n    # Calculate the maximum aggregate\n    max_aggregate = max_aggregate_prefix_sum[1]\n    for length in range(2, len(stdata) + 1):\n        max_aggregate = max(max_aggregate, max_aggregate_prefix_sum[length] - max_aggregate_prefix_sum[length - 1])\n        \n    return max_aggregate",
        "num_ids": 303
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the frequency of each element in the list.\n    frequency = defaultdict(int)\n    for elem in stdata:\n        frequency[elem[0]] += 1\n\n    # Sort the dictionary by the values in descending order.\n    sorted_dict = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n\n    # Calculate the maximum aggregate by multiplying the first k elements with the first k-1 elements,\n    # where k is the length of the list.\n    max_agg = 1\n    for i in range(len(sorted_dict)):\n        for j in range(i):\n            max_agg *= sorted_dict[i][0] ** j\n\n    return max_agg",
        "num_ids": 189
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the count of each element\n    count = defaultdict(int)\n    # create a dictionary to store the sum of each element\n    sums = defaultdict(int)\n    # iterate over the list of tuples\n    for i in stdata:\n        # count the number of occurrences of each element\n        count[i[0]] += 1\n        # add the value of each element to its respective sum\n        sums[i[0]] += i[1]\n    # initialize the maximum aggregate to 0\n    max_agg = 0\n    # iterate over the dictionary of sums\n    for k in sums:\n        # calculate the maximum aggregate for each element\n        agg = sums[k] / count[k]\n        # update the maximum aggregate if necessary\n        if agg > max_agg:\n            max_agg = agg\n    # return the maximum aggregate\n    return max_agg",
        "num_ids": 215
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for name, score in stdata:\n        data[name].append(score)\n    max_aggregate = {}\n    for name, scores in data.items():\n        max_aggregate[name] = max(scores)\n    return max_aggregate",
        "num_ids": 92
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    if n == 0:\n        return 0\n    \n    # create a dictionary to store the frequency of each city pair\n    freq = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n):\n            city1, city2, dist = stdata[i]\n            city3, city4, dist = stdata[j]\n            if city1 == city3 and city2 == city4:\n                freq[(city1, city2)] += 1\n                freq[(city2, city1)] += 1\n    \n    # calculate the maximum aggregate\n    max_agg = 0\n    for k, v in freq.items():\n        city1, city2 = k\n        max_agg += v * (dist ** 2)\n    \n    return max_agg",
        "num_ids": 208
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(n)\n        if bin_str[-n:].count('1') == n and bin_str[:n].count('1') == n:\n            count += 1\n    return count\n\nprint(count_binary_seq(3))",
        "num_ids": 91
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if sum(int(binary[:n])) == sum(int(binary[n:])):\n            count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # convert i to binary string of length 2n\n        binary = bin(i)[2:].zfill(2*n)\n        # check if first n bits and last n bits have same sum\n        if sum(int(binary[i:i+n], 2) for i in range(0, 2*n, n)) == sum(int(binary[i:i+n], 2) for i in range(n, 2*n, n)):\n            count += 1\n    return count",
        "num_ids": 174
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(1<<n):\n        bits = bin(i)[2:].zfill(n)\n        if int(bits[:n], 2) == int(bits[n:], 2):\n            count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(n) # convert decimal to binary and pad with leading zeroes to ensure length of n\n        if bin_str.count('1') == n and bin_str.count('0') == n:\n            first_n_bits = int(bin_str[:n], 2) # get the first n bits as integer\n            last_n_bits = int(bin_str[n:], 2) # get the last n bits as integer\n            if first_n_bits == last_n_bits:\n                count += 1\n    return count",
        "num_ids": 193
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(n)\n        if bin_str.count('1') == bin_str.count('0'):\n            count += 1\n    return count\n\nn = int(input(\"Enter the length of binary sequence: \"))\nprint(\"Count of binary sequences:\", count_binary_seq(n))",
        "num_ids": 101
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    \n    # loop over all possible combinations of first n bits\n    for first_bits in range(2**n):\n        # convert first_bits to binary string and remove leading '0b'\n        first_bits_str = bin(first_bits)[2:]\n        \n        # compute the sum of first n bits\n        first_bits_sum = sum(int(digit) for digit in first_bits_str[:n])\n        \n        # loop over all possible combinations of last n bits\n        for last_bits in range(2**n):\n            # convert last_bits to binary string and remove leading '0b'\n            last_bits_str = bin(last_bits)[2:]\n            \n            # compute the sum of last n bits\n            last_bits_sum = sum(int(digit) for digit in last_bits_str[:n])\n            \n            # if the sums are equal, add 1 to the count\n            if first_bits_sum == last_bits_sum:\n                count += 1\n    \n    return count",
        "num_ids": 262
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        bits = bin(i)[2:].zfill(n)\n        if bits[0:n] == bits[n:2*n]:\n            count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    count = 0 \n    for i in range(2**n): \n        # convert i to binary string of length n and check if it starts with '1'\n        if bin(i)[2:].startswith('1') and bin(i)[-n:].count('1') == n: \n            # convert i to binary string of length 2n and check if the sum of first n bits is equal to the sum of last n bits\n            if bin(i)[-n-n:-n].count('1') == n and bin(i)[-n:].count('1') == n: \n                count += 1 \n    return count ",
        "num_ids": 147
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[:n], 2) == int(binary[n:], 2):\n            count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d, level=0):\n    \"\"\"\n    Recursively find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict) or not d:\n        return level\n    return max(dict_depth(v, level+1) for v in d.values())",
        "num_ids": 63
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Returns the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 53
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    Write a function to find the depth of a dictionary.\n\n    Parameters:\n        d (dict): The dictionary to find the depth of.\n        depth (int, optional): The current depth of the dictionary. Defaults to 1.\n\n    Returns:\n        int: The depth of the dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return depth - 1\n\n    return max(dict_depth(v, depth + 1) for v in d.values())",
        "num_ids": 116
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return depth\n    max_depth = depth\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value, depth+1))\n    return max_depth",
        "num_ids": 88
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    \n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    \n    return max_depth",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n",
        "num_ids": 58
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = dict_depth(v) + 1\n            max_depth = max(max_depth, depth)\n    return max_depth\n",
        "num_ids": 85
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            max_depth = max(max_depth, depth)\n    return max_depth",
        "num_ids": 90
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after number of rotations.\n\n    Args:\n    arr: A list of integers.\n    ranges: A list of tuples representing the range of each sublist.\n    rotations: A list of integers representing the number of rotations for each sublist.\n    index: An integer representing the index of the element to be found.\n\n    Returns:\n    An integer representing the element at the given index after number of rotations.\n\n    \"\"\"\n    result = []\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n        rotation = rotations[i]\n        sublist = arr[start:end+1]\n        if rotation > 0:\n            sublist = sublist[-rotation:] + sublist[:-rotation]\n        result.append(sublist[index])\n    return result",
        "num_ids": 192
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr_length = len(arr)\n    rotations = rotations % arr_length # to handle cases where rotations > arr_length\n    if index >= arr_length :\n        index = index % arr_length # to handle cases where index >= arr_length\n        \n    arr = arr[rotations:] + arr[:rotations] # rotate the array\n    \n    for i in range(ranges) :\n        if index < len(arr) :\n            return arr[index]\n        index -= len(arr)\n    \n    return None # if element not found",
        "num_ids": 151
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges == 1 :\n        # if the array is already sorted\n        return arr[index]\n    else :\n        # divide the array into two halves\n        mid = int(ranges/2)\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        \n        # find the element in the left half\n        left_element = find_Element(left_half,mid,rotations,index)\n        \n        # find the number of rotations required to bring the element in the left half to the right half\n        if left_element == right_half[0] :\n            rotations = rotations + mid\n        else :\n            for i in range(mid):\n                if left_element == right_half[i]:\n                    rotations = rotations + i\n                    break\n        \n        # find the index of the element in the right half\n        index = index - mid\n        \n        # if the index is negative, it means the element is in the left half\n        if index < 0 :\n            return left_element\n        \n        # if the index is positive, it means the element is in the right half\n        else :\n            return find_Element(right_half,ranges-mid,rotations,index)",
        "num_ids": 288
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    # Determine the rotation period\n    period = ranges // rotations\n    # Determine the rotation index\n    rotation_index = index // period\n    # Determine the actual index after rotation\n    actual_index = index % period\n    # Find the element at the actual index after rotation\n    element = arr[(rotation_index + actual_index) % n]\n    return element",
        "num_ids": 95
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    low, high = 0, n - 1\n    for i in range(rotations):\n        mid = (low + high) // 2\n        if index >= arr[mid]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[(low + high) // 2]",
        "num_ids": 88
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, rotations and index as input.\n    It returns the element at the given index after rotating the array 'rotations' times.\n    '''\n\n    # if rotations is zero, then simply return the element at index.\n    if rotations == 0:\n        return arr[index]\n\n    # if rotations is not zero, then rotate the array.\n    arr = arr[ranges:] + arr[:ranges]\n    rotations -= 1\n\n    # if the index is less than the ranges, then return the element at index.\n    if index < ranges:\n        return arr[index]\n\n    # if the index is greater than or equal to ranges, then return the element at new index.\n    return find_Element(arr, ranges, rotations, index-ranges)\n",
        "num_ids": 186
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # calculate the total length of the array after rotations\n    total_length = sum(ranges)\n    # calculate the length of each range after rotations\n    rotated_ranges = [range_length + (total_length - index) % range_length for range_length in ranges]\n    # calculate the start and end indexes of the range containing the given index\n    range_index = 0\n    start_index = 0\n    for range_length in rotated_ranges:\n        if index < range_length:\n            break\n        start_index += range_length\n        range_index += 1\n    # calculate the actual index of the element\n    actual_index = start_index + (index - sum(rotated_ranges[:range_index])) % rotated_ranges[range_index]\n    return arr[actual_index]",
        "num_ids": 188
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Convert ranges and rotations to list of tuples\n    ranges = [(int(x.split('-')[0]), int(x.split('-')[1])) for x in ranges.split(',')]\n    rotations = [(int(x.split('-')[0]), int(x.split('-')[1])) for x in rotations.split(',')]\n\n    # Find range of elements to rotate\n    min_range = 0\n    max_range = len(arr) - 1\n    for r in rotations:\n        if r[0] < min_range:\n            min_range = r[0]\n        if r[1] > max_range:\n            max_range = r[1]\n\n    # Rotate the array based on number of rotations\n    rot_arr = arr[min_range:max_range+1]\n    rot_arr = rot_arr[-rotations[0][0]:] + rot_arr[:rotations[0][0]]\n    for i in range(1, len(rotations)):\n        rot_arr = rot_arr[-rotations[i][0]:] + rot_arr[:-rotations[i][0]]\n\n    # Find the element at the given index\n    if index < min_range or index > max_range:\n        return \"Index out of range\"\n    return rot_arr[index-min_range]",
        "num_ids": 304
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_element(arr, ranges, rotations, index):\n    n = len(arr)\n    arr = arr[ranges[0]:ranges[1]] + arr[:ranges[0]] + arr[ranges[1]:]  # rotate the array\n    arr = arr[rotations:] + arr[:rotations]  # rotate the array again\n    return arr[index]",
        "num_ids": 81
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # calculate the rotation index\n    rotation_index = index + ranges * rotations\n    # check if rotation index is within the array bounds\n    if rotation_index >= len(arr):\n        return None\n    # calculate the actual index\n    actual_index = rotation_index % len(arr)\n    return arr[actual_index]",
        "num_ids": 83
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    This function takes a list of words as input and returns two words from the list starting with letter 'p'.\n    '''\n    pattern = r\"p\\w+\"\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None",
        "num_ids": 71
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p\\w+', word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p' found\"\n    else:\n        return p_words[0], p_words[1]",
        "num_ids": 113
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p[a-z]*', word):\n            p_words.append(word)\n    return p_words[:2]",
        "num_ids": 82
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'\\bp\\w*')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return None",
        "num_ids": 68
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p'\"\n    else:\n        return p_words[:2]",
        "num_ids": 101
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'p\\w+\\s\\w+')\n    matches = pattern.findall(str(words))\n    return matches",
        "num_ids": 67
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w*\\s') # pattern to match words starting with 'p'\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None # if no word matches the pattern",
        "num_ids": 88
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p')\n    results = [word for word in words if pattern.match(word)]\n    return results[:2]",
        "num_ids": 46
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    first_word = None\n    second_word = None\n    for word in words:\n        if pattern.match(word):\n            if first_word is None:\n                first_word = word\n            elif second_word is None:\n                second_word = word\n                break\n    return first_word, second_word",
        "num_ids": 112
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(\"^p\")\n    words_start_with_p = [word for word in words if pattern.match(word)]\n    return words_start_with_p[:2]",
        "num_ids": 56
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize a list to store the increasing subsequence sum up to ith index\n    subseq_sum = [0] * n\n\n    # Initialize the maximum sum to the first element\n    max_sum = a[0]\n\n    # Initialize the maximum sum index to the first element index\n    max_sum_index = 0\n\n    # Traverse through the array from the first element to the given index\n    for i in range(1, index + 1):\n        # Find the maximum subsequence sum including the current element\n        subseq_sum[i] = max(subseq_sum[j] + a[i] for j in range(i))\n\n        # If the maximum subsequence sum including the current element is greater than the current maximum sum, update the maximum sum and the maximum sum index\n        if subseq_sum[i] > max_sum and i < k:\n            max_sum = subseq_sum[i]\n            max_sum_index = i\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum, max_sum_index",
        "num_ids": 246
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # create a dictionary to store the prefix sum and the sum of increasing subsequence\n    prefix_sum = {}\n    max_sum = float('-inf')\n\n    # loop through all the prefix sums up to the ith index\n    for i in range(n):\n        if a[i] <= a[index]:\n            # calculate the prefix sum and store it in the dictionary\n            prefix_sum[a[i]] = a[i] if i == 0 else prefix_sum[a[i-1]] + a[i]\n            # update the maximum sum if the current prefix sum has a larger sum of increasing subsequence\n            if prefix_sum[a[i]] > max_sum:\n                max_sum = prefix_sum[a[i]]\n            # add the prefix sum of the kth element if it is after the ith index and also larger than the prefix sum of the ith index\n            if k > i and a[k] > a[i] and prefix_sum[a[k]] > prefix_sum[a[i]]:\n                max_sum += prefix_sum[a[k]]\n\n    return max_sum",
        "num_ids": 261
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0]*n\n    for i in range(k-1, index):\n        dp[i] = a[i]\n    for i in range(k-2, -1, -1):\n        for j in range(k-1, i, -1):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j]+a[i])\n    return max(dp)\n",
        "num_ids": 118
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = max(dp[j] + a[i] for j in range(index) if a[i] > a[j])\n    return max(dp[i] + a[k] for i in range(n))",
        "num_ids": 90
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the variables to keep track of the maximum sum and the maximum subsequence found so far\n    max_sum = 0\n    max_subseq = []\n\n    # Create a dictionary to store the maximum sum of increasing subsequence ending at each index\n    dp = {i: 0 for i in range(n)}\n\n    # Traverse the array from left to right and update the dp dictionary\n    for i in range(n):\n        if i < index:\n            dp[i] = max(dp[j] for j in range(i) if a[j] < a[i])\n        else:\n            dp[i] = max(dp[j] for j in range(i) if a[j] < a[i] and j <= index)\n\n        if i == index:\n            dp[i] += k\n\n    # Traverse the dp dictionary to find the maximum sum of increasing subsequence ending at the ith index\n    for i in range(n):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n            max_subseq = [a[i]]\n        elif dp[i] == max_sum:\n            max_subseq.append(a[i])\n\n    return max_sum, max_subseq",
        "num_ids": 333
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    kth_index = -1\n    \n    # Iterate through the array\n    for i in range(index + 1):\n        if i == k:\n            continue\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            kth_index = i\n    \n    return max_sum + a[kth_index]",
        "num_ids": 120
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a dp array of size n\n    dp = [0] * n\n\n    # Initialize the dp array with the first element\n    dp[0] = a[0]\n\n    # Traverse through the array from 1st element to kth element (k > i)\n    for i in range(1, k - index + 1):\n        # Find the maximum element in the dp array that is less than a[i]\n        max_element = -1\n        for j in range(i):\n            if dp[j] < a[i] and dp[j] > max_element:\n                max_element = dp[j]\n\n        # If max_element is -1, then the current element cannot be part of the increasing subsequence, so dp[i] = a[i]\n        if max_element == -1:\n            dp[i] = a[i]\n        else:\n            # Otherwise, the current element can be part of the increasing subsequence, so dp[i] = max_element + a[i]\n            dp[i] = max_element + a[i]\n\n    # Traverse through the array from kth element to last element\n    max_sum = -1\n    for i in range(k - index + 1, n):\n        # Find the maximum element in the dp array that is less than a[i]\n        max_element = -1\n        for j in range(k - index + 1):\n            if dp[j] < a[i] and dp[j] > max_element:\n                max_element = dp[j]\n\n        # If max_element is -1, then the current element cannot be part of the increasing subsequence, so dp[i] = a[i]\n        if max_element == -1:\n            dp[i] = a[i]\n        else:\n            # Otherwise, the current element can be part of the increasing subsequence, so dp[i] = max_element + a[i]\n            dp[i] = max_element + a[i]\n\n        # Update max_sum if the current sum is greater than max_sum\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum",
        "num_ids": 499
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    for i in range(n):\n        if i < index:\n            dp[i] = a[i]\n        elif i == index:\n            dp[i] = a[i] + a[k]\n        else:\n            dp[i] = a[i] + max(dp[j] for j in range(i))\n    return max(dp)",
        "num_ids": 106
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index):\n        # Check if we can include a[k] in the increasing subsequence up to a[i]\n        if k > i and dp[i] + a[k] > dp[k]:\n            dp[k] = dp[i] + a[k]\n    return max(dp)",
        "num_ids": 157
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        if i == index + 1:\n            dp[i] = a[i] + dp[i-1]\n        else:\n            dp[i] = max(dp[i-1], a[i] + dp[i-1])\n\n        if k > i:\n            for j in range(i):\n                if a[j] < a[i] and dp[j] + a[i] > dp[i]:\n                    dp[i] = dp[j] + a[i]\n\n    return dp[n-1]",
        "num_ids": 209
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    # create a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # slice the tuple using the given indices\n    return tuplex_copy[m-1:n]",
        "num_ids": 75
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Return a colon of a tuple, with given start and end indices.\n    '''\n    colon = deepcopy(tuplex)\n    colon = colon[m:n]\n    return colon",
        "num_ids": 59
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    colon = deepcopy(tuplex)\n    for i in range(m-1,n):\n        colon[i] = None\n    return colon",
        "num_ids": 66
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        return None\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[m-1:n]\n    return new_tuplex",
        "num_ids": 79
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a deep copy of the original tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Slice the copy to get the colon\n    colon = tuplex_copy[m-1:n]\n\n    return colon",
        "num_ids": 83
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    # Create a deep copy of the original tuple\n    tupl = deepcopy(tuplex)\n    \n    # Slice the tuple from index m to index n+1\n    colon = tupl[m:n+1]\n    \n    # Return the colon\n    return colon",
        "num_ids": 84
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex):\n        return \"Invalid index\"\n    new_tuplex = deepcopy(tuplex[m-1:n])\n    return new_tuplex",
        "num_ids": 82
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a colon of a tuple.\n    '''\n    # Create a copy of the original tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Get the length of the tuple\n    length = len(tuplex_copy)\n    \n    # Slice the tuple\n    tuplex_colon = tuplex_copy[m-1:n]\n    \n    # Return the colon\n    return tuplex_colon",
        "num_ids": 103
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Slice the tuple to get the colon\n    colon = tuplex_copy[m-1:n]\n\n    return colon",
        "num_ids": 79
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    # Make a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Slice the tuple from index m to index n\n    colon_tuplex = tuplex_copy[m:n+1]\n    \n    return colon_tuplex",
        "num_ids": 85
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    result = []\n    for i in range(N):\n        result.append(nums1[-1]*nums2[-1-i])\n    return result",
        "num_ids": 86
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize variables\n    largest_products = []\n    max_product = float('-inf')\n    \n    # Loop through each combination of factors from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the current factors\n            product = nums1[i] * nums2[j]\n            # If the product is larger than the current largest product, update the largest products list\n            if product > max_product:\n                max_product = product\n                largest_products = [product]\n            # If the product is equal to the current largest product, add it to the list\n            elif product == max_product:\n                largest_products.append(product)\n    \n    # Return the specified number of largest products\n    return sorted(largest_products, reverse=True)[:N]",
        "num_ids": 216
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    # create a list to store the products\n    products = []\n    # iterate over the first list\n    for i in range(len(nums1)):\n        # iterate over the second list\n        for j in range(len(nums2)):\n            # calculate the product\n            product = nums1[i] * nums2[j]\n            # check if the product is larger than the Nth largest product\n            if len(products) < N or product > products[-N]:\n                # if yes, add it to the list of products\n                products.append(product)\n                # and remove the smallest product if the list exceeds N\n                if len(products) > N:\n                    products.remove(min(products))\n    # return the list of N largest products\n    return products",
        "num_ids": 172
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    products.sort(reverse=True)\n    return products[:N]",
        "num_ids": 62
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products\n    products = []\n    # Iterate over the lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Check if the factors are valid (i.e. not zero)\n            if nums1[i]!= 0 and nums2[j]!= 0:\n                # Compute the product and append it to the list\n                products.append(nums1[i] * nums2[j])\n    # Sort the list in descending order and return the specified number of elements\n    return sorted(products, reverse=True)[:N]",
        "num_ids": 174
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize the result list and the two largest values from each list\n    result = []\n    max1 = max(nums1)\n    max2 = max(nums2)\n    \n    # Iterate through the first N factors from nums1 and the first N factors from nums2\n    for i in range(N):\n        for j in range(N):\n            # Check if the product of the i-th factor from nums1 and the j-th factor from nums2 is greater than both the current largest product and the product of the largest factors from both lists\n            if nums1[i] * nums2[j] > max1 * max2 and nums1[i] * nums2[j] > result[-1]:\n                # If it is, add it to the result list and update the largest values from each list\n                result.append(nums1[i] * nums2[j])\n                max1 = max(nums1[i], max1)\n                max2 = max(nums2[j], max2)\n    \n    # Return the result list\n    return result",
        "num_ids": 236
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        result.append(max(nums1[i] * nums2[i], nums1[i] * nums2[N-1-i], nums1[N-1-i] * nums2[i], nums1[N-1-i] * nums2[N-1-i]))\n    return sorted(result, reverse=True)[:N]",
        "num_ids": 134
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize variables\n    max_product = float('-inf')\n    factors = set()\n    \n    # Loop through each possible pair of numbers from the two lists\n    for i in range(N):\n        for j in range(N):\n            # Calculate the product of the two numbers\n            product = nums1[i] * nums2[j]\n            \n            # Check if the product is larger than the current maximum and store its factors\n            if product > max_product:\n                max_product = product\n                factors = {(nums1[i], nums2[j])}\n            elif product == max_product:\n                factors.add((nums1[i], nums2[j]))\n                \n    # Sort the factors by their absolute values in descending order\n    sorted_factors = sorted(factors, key=lambda x: abs(x[0]), reverse=True)\n    \n    # Return the largest N factors\n    return [factor[0] * factor[1] for factor in sorted_factors[:N]]",
        "num_ids": 217
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]",
        "num_ids": 77
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_product = -float('inf')\n        for j in range(len(nums1)):\n            if nums1[j] <= nums2[i]:\n                product = nums1[j] * nums2[i]\n                if product > max_product:\n                    max_product = product\n        max_products.append(max_product)\n    return max_products",
        "num_ids": 134
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two arguments a and b and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 45
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(10, 20))  # Output: 20\nprint(maximum(20, 10))  # Output: 20\nprint(maximum(10, 10))  # Output: 10",
        "num_ids": 98
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    # Convert the string to a tuple of characters\n    char_tuple = tuple(str1)\n    return char_tuple",
        "num_ids": 55
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as an input and returns a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 38
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function converts a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 35
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function converts a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 35
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number with the leftmost unset bit set to 1.\n    \"\"\"\n    # Loop until a leftmost unset bit is found\n    while (n & (n - 1))!= 0:\n        n &= (n - 1)\n    \n    # Set the leftmost unset bit to 1\n    n |= (n + 1)\n    \n    return n",
        "num_ids": 100
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of an integer.\n    \"\"\"\n    return n | (n >> 1)",
        "num_ids": 39
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer n as input and returns the integer with its left most unset bit set.\n    '''\n    # Find the rightmost bit that is set to 1\n    rightmost_set_bit = 1 << 31\n    while (n & rightmost_set_bit) == 0:\n        rightmost_set_bit >>= 1\n    # Set the left most unset bit\n    n |= (rightmost_set_bit - 1)\n    return n",
        "num_ids": 117
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes a number `n` as input and returns the number with its left most unset bit set.\n    For example, if n = 4 (100), the function returns 5 (101).\n    \"\"\"\n    # check if n is 0\n    if n == 0:\n        return 1\n    \n    # check if the left most bit is set\n    if n & 1 == 0:\n        # if the left most bit is set, unset it\n        n = n - 1\n    # else, do nothing\n    \n    # shift the number to the right to set the left most bit\n    n = n >> 1\n    \n    # set all the bits to the left of the left most set bit\n    n = n | (n >> 1)\n    \n    return n",
        "num_ids": 179
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the number with the leftmost unset bit set.\n    \"\"\"\n    # Set the leftmost bit to 1\n    n |= (1 << 0)\n    \n    # Shift the number to the right until the leftmost bit is 0\n    while (n & (1 << 0))!= 0:\n        n >>= 1\n    \n    return n",
        "num_ids": 98
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    return n | (n + 1)",
        "num_ids": 52
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the left most unset bit of the given integer n.\n    '''\n    # First check if n is negative, in which case we need to return -1\n    if n < 0:\n        return -1\n    \n    # Check if the left most bit is already set, in which case we need to return 0\n    if n & 1 == 1:\n        return 0\n    \n    # We need to find the left most unset bit, so we keep shifting the bits to the left until we find a 0 bit\n    while n & 1 == 0:\n        n = n << 1\n    \n    # At this point, n is the left most unset bit, so we return its value\n    return n",
        "num_ids": 163
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns the left most unset bit of that integer.\n    \"\"\"\n    # Set the rightmost bit to 1\n    n |= (n >> 1)\n    \n    # Set all the bits to the left of the rightmost bit to 0\n    n &= ~(n >> 1)\n    \n    # Return the modified integer\n    return n",
        "num_ids": 91
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer as input and returns the integer with the left most unset bit set.\n    '''\n    # Find the rightmost 1-bit in the binary representation of n\n    i = 1\n    while n & i == 0:\n        i = i << 1\n\n    # Set the left most 0-bit in the binary representation of n\n    return n | i",
        "num_ids": 96
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit of a number.\n    '''\n    return n | (n + 1)",
        "num_ids": 39
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two arguments:\n    r: radius of the base of the cone\n    h: height of the cone\n    \n    It returns the volume of the cone.\n    '''\n    return (1 / 3) * math.pi * r ** 2 * h",
        "num_ids": 74
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 58
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes in the radius of the base of the cone (r) and the height (h) of the cone\n    and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 76
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone.\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 90
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments: r, the radius of the base of the cone, and h, the height of the cone.\n    The function calculates and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "num_ids": 82
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius (r) and height (h) of a cone and returns its volume.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V",
        "num_ids": 62
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two parameters: the radius r and the height h of a cone and returns the volume of the cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V",
        "num_ids": 67
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone as inputs and returns its volume.\n    '''\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume",
        "num_ids": 61
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 52
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume",
        "num_ids": 61
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2",
        "num_ids": 60
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_power_of_2(n):\n    power = 1\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** (power - 1)",
        "num_ids": 42
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2",
        "num_ids": 64
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        p = 1\n        while p <= n:\n            p *= 2\n        return p // 2",
        "num_ids": 74
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2",
        "num_ids": 59
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while (2 ** count) <= n:\n        count += 1\n    return (2 ** (count-1))",
        "num_ids": 68
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2 // 2\n",
        "num_ids": 77
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 1\n        while i < n:\n            i = i << 1  # shift left by 1 bit\n        return i - 1  # return the previous number, which is the highest power of 2 less than or equal to n",
        "num_ids": 120
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power = power * 2\n    return power // 2",
        "num_ids": 62
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n = n - power\n        power *= 2\n    return power // 2",
        "num_ids": 63
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 55
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    \"\"\"\n    This function finds then'th Lucas number.\n    \"\"\"\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 70
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(6)) # Output: 13",
        "num_ids": 90
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 70
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list",
        "num_ids": 63
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list",
        "num_ids": 63
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list",
        "num_ids": 63
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(lst, fmt):\n    '''\n    Apply the format string to all elements in the list.\n    '''\n    return [fmt.format(x) for x in lst]",
        "num_ids": 40
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for i in list_:\n        result.append(string.format(i))\n    return result",
        "num_ids": 57
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(lst, string):\n    \"\"\"\n    A function to apply a given format string to all of the elements in a list.\n\n    Args:\n    lst: A list of values.\n    string: A string format to apply to each element of the list.\n\n    Returns:\n    A new list with the formatted elements.\n    \"\"\"\n    return [string.format(x) for x in lst]",
        "num_ids": 84
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "num_ids": 62
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]",
        "num_ids": 47
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = []\n    for i, j, k in zip(l1, l2, l3):\n        result.append({'id': i, 'name': j, 'age': k})\n    return result",
        "num_ids": 80
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert three lists into a nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result",
        "num_ids": 77
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = dict(zip(l1, l2))\n    dict2 = dict(zip(l3, l2))\n    return {'list1': dict1, 'list2': dict2}",
        "num_ids": 79
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        sub_dict = {l2[i]:l3[i]}\n        if l1[i] in result_dict:\n            result_dict[l1[i]].update(sub_dict)\n        else:\n            result_dict[l1[i]] = sub_dict\n    return result_dict",
        "num_ids": 118
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        dictionary = {}\n        dictionary[l2[i]] = l3[i]\n        result.append(dictionary)\n    return result",
        "num_ids": 78
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key1 = l1[i]\n        key2 = l2[i]\n        value = l3[i]\n        if key1 not in result:\n            result[key1] = {}\n        result[key1][key2] = value\n    return result",
        "num_ids": 106
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes three lists and converts them to a nested dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = {l2[i]: l3[i]}\n    return dict1",
        "num_ids": 76
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes in three lists and converts them to a nested dictionary.\n    '''\n    # create an empty dictionary to store the nested dictionary\n    result = {}\n    \n    # iterate through each list and add them as key-value pairs in the nested dictionary\n    for i, l in enumerate([l1, l2, l3]):\n        result[f'list_{i+1}'] = {f'item_{j+1}': val for j, val in enumerate(l)}\n    \n    return result",
        "num_ids": 121
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "num_ids": 131
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n",
        "num_ids": 73
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    if n % 2 == 0 or n % 3 == 0 or n % 4 == 0 or n % 5 == 0:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "num_ids": 99
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    elif n % 3 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    elif n % 4 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 307
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n\n    arr = []\n    arr.append(n)\n\n    while n > 1:\n        n /= 2\n        arr.append(int(n))\n\n    arr.sort(reverse=True)\n\n    res = 0\n    for i in range(len(arr)):\n        res += arr[i]\n\n    return res",
        "num_ids": 142
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n % 2 == 0:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n    elif n % 3 == 0:\n        return max((get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n    elif n % 4 == 0:\n        return max((get_max_sum(n//4) + get_max_sum(n//5)), n)\n    elif n % 5 == 0:\n        return max(get_max_sum(n//5), n)\n    else:\n        return n",
        "num_ids": 242
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        # Use dynamic programming to store the maximum sum for all the smaller sub-problems\n        # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n        f = [0] * (n+1)\n        f[1] = 1\n        \n        for i in range(2, n+1):\n            f[i] = max((f[i//2] + f[i//3] + f[i//4] + f[i//5]), i)\n            \n        return f[n]",
        "num_ids": 155
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n\nprint(get_max_sum(10))",
        "num_ids": 86
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)",
        "num_ids": 129
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    max_sum = n\n    \n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            sum_1 = get_max_sum(n//i)\n            sum_2 = get_max_sum(i)\n            sum_3 = get_max_sum(n//(i*i))\n            sum_4 = get_max_sum(n//(i*i*i))\n            sum_5 = get_max_sum(n//(i*i*i*i))\n            \n            max_sum = max(max_sum, sum_1 + sum_2 + sum_3 + sum_4 + sum_5)\n            \n            if i!= n//i and i!= n//(i*i) and i!= n//(i*i*i) and i!= n//(i*i*i*i):\n                max_sum = max(max_sum, sum_1 + sum_2 + sum_3 + sum_4 + n//i)\n                max_sum = max(max_sum, sum_1 + sum_2 + sum_3 + n//(i*i) + n//(i*i*i))\n                max_sum = max(max_sum, sum_1 + sum_2 + n//(i*i*i) + n//(i*i*i*i) + n//(i*i*i*i*i))\n                max_sum = max(max_sum, sum_1 + n//(i*i*i*i) + n//(i*i*i*i*i) + n//(i*i*i*i*i*i) + n//(i*i*i*i*i*i*i))\n                max_sum = max(max_sum, n//(i*i*i*i*i) + n//(i*i*i*i*i*i) + n//(i*i*i*i*i*i*i) + n//(i*i*i*i*i*i*i*i) + n//(i*i*i*i*i*i*i*i*i))\n    \n    return max_sum",
        "num_ids": 520
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list",
        "num_ids": 97
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        length = len(lst)\n        if length > max_length:\n            max_length = length\n            max_list = lst\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list",
        "num_ids": 84
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    return [x for x in input_list if len(x) == max_length]",
        "num_ids": 65
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list",
        "num_ids": 106
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for lst in input_list[1:]:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 94
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function finds the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list",
        "num_ids": 78
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_lst = lst\n            max_len = len(lst)\n    return max_lst",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    This function finds the list with maximum length from a given list of lists.\n    '''\n    max_len = len(input_list[0])\n    max_lst = input_list[0]\n\n    for lst in input_list[1:]:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n\n    return max_lst",
        "num_ids": 98
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function checks if a given tuple contains no duplicates.\n\n    Parameters:\n    test_tup (tuple): The tuple to be checked.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 76
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return \"All characters are repeated.\"",
        "num_ids": 100
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None # if no non-repeated character is found",
        "num_ids": 104
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return None  # If all characters are repeating",
        "num_ids": 103
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    return None",
        "num_ids": 96
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # Convert the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n\n    # Create an empty dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # Loop through each character in the string and update the frequency dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Loop through each character in the string again and find the first non-repeated character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n\n    # If no non-repeated characters are found, return None\n    return None",
        "num_ids": 166
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None",
        "num_ids": 107
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the string again to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None",
        "num_ids": 148
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None",
        "num_ids": 95
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in freq_dict:\n            freq_dict[char] = 1\n        # If the character is already in the dictionary, increment its frequency\n        else:\n            freq_dict[char] += 1\n    # Loop through each character in the string again\n    for char in str1:\n        # If the frequency of the character is 1 (i.e. it is the first non-repeated character), return it\n        if freq_dict[char] == 1:\n            return char\n    # If no non-repeated character is found, return None\n    return None",
        "num_ids": 214
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as an argument and returns the first non-repeated character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the string again to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None",
        "num_ids": 151
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    This function checks whether the given string starts and ends with the same character or not.\n    \"\"\"\n    # Check if the string starts and ends with the same character\n    if re.match(regex, string):\n        print(\"True\")\n    else:\n        print(\"False\")",
        "num_ids": 70
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re  \n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False",
        "num_ids": 95
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_char(string):\n    print(\"The string starts and ends with the same character.\")\nelse:\n    print(\"The string does not start and end with the same character.\")",
        "num_ids": 103
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(regex, string)\n    return match is not None",
        "num_ids": 50
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    match = re.match(regex, string)\n    if match:\n        return True\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if len(string) == 1:\n        return True\n    elif re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and finds the median of them.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the sorted list is even, take the average of the middle two numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2] + sorted_numbers[len(sorted_numbers) // 2 - 1]) / 2\n    else:\n        # If the length of the sorted list is odd, take the middle number\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median",
        "num_ids": 171
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return (numbers[n//2-1] + numbers[n//2]) / 2\n    else:\n        return numbers[n//2]",
        "num_ids": 88
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median",
        "num_ids": 106
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median value.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    median = sorted_numbers[1]\n    return median",
        "num_ids": 55
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # check if the length of the sorted list is odd or even\n    length = len(sorted_numbers)\n    if length % 2 == 0:\n        # if the length is even, take the average of the two middle numbers\n        median = (sorted_numbers[length//2 - 1] + sorted_numbers[length//2]) / 2\n    else:\n        # if the length is odd, take the middle number\n        median = sorted_numbers[length//2]\n\n    # return the median\n    return median",
        "num_ids": 159
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median",
        "num_ids": 100
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    numbers = [a, b, c]\n    sorted_numbers = sorted(numbers)\n    length = len(sorted_numbers)\n    if length % 2 == 0:\n        # if there are even numbers, take the average of the middle two\n        median = (sorted_numbers[length//2 - 1] + sorted_numbers[length//2]) / 2\n    else:\n        # if there are odd numbers, take the middle number\n        median = sorted_numbers[length//2]\n    return median",
        "num_ids": 138
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median",
        "num_ids": 123
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "num_ids": 53
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    arr = [a, b, c]\n    arr.sort()\n    if len(arr) % 2 == 0:\n        median = (arr[len(arr)//2] + arr[len(arr)//2 - 1])/2\n    else:\n        median = arr[len(arr)//2]\n    return median",
        "num_ids": 98
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n    \"\"\"\n    sum_digits = []\n    for num in nums:\n        sum_digit = 0\n        for digit in str(num):\n            sum_digit += int(digit)\n        sum_digits.append(sum_digit)\n    return sum_digits",
        "num_ids": 80
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_list.append(sum(int(digit) for digit in str(num)))\n    return sum_list",
        "num_ids": 69
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        result.append(sum)\n    return result",
        "num_ids": 79
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of the sum of digits of each number in the list.\n    \"\"\"\n    result = []\n    for num in nums:\n        total = 0\n        for digit in str(num):\n            total += int(digit)\n        result.append(total)\n    return result",
        "num_ids": 80
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total_sum = 0\n        while num > 0:\n            digit = num % 10\n            total_sum += digit\n            num //= 10\n        result.append(total_sum)\n    return result",
        "num_ids": 89
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "num_ids": 62
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of integers as input and returns a list of integers,\n    where each integer is the sum of digits of the corresponding number in the input list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num //= 10\n        result.append(sum_of_digits)\n    return result",
        "num_ids": 112
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result",
        "num_ids": 72
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        sum_list.append(sum_digits)\n    return sum_list",
        "num_ids": 84
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list containing the sum of digits of each number in the list.\n    \"\"\"\n    return [sum(int(digit) for digit in str(num)) for num in nums]",
        "num_ids": 61
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1):\n            result += (test_tup1[i] ^ test_tup2[i],)\n        else:\n            result += (test_tup1[i],)\n    return result",
        "num_ids": 114
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i], )\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i >= len(test_tup1):\n            result += (test_tup2[i],)\n        elif i >= len(test_tup2):\n            result += (test_tup1[i],)\n        else:\n            result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 137
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    freq = set()\n    for item in test_list:\n        freq.add(tuple(sorted(item)))\n    return len(freq)",
        "num_ids": 40
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)",
        "num_ids": 91
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)\n",
        "num_ids": 75
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    freq = set()\n    for t in test_list:\n        freq.add(tuple(sorted(t)))\n    return len(freq)",
        "num_ids": 40
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    '''\n    unique_tuples = set(test_list) #convert the list to a set to remove duplicates\n    return len(unique_tuples) #return the length of the set, which gives us the number of unique tuples.",
        "num_ids": 81
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for item in test_list:\n        freq.add(tuple(sorted(item)))\n    return len(freq)",
        "num_ids": 60
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for t in test_list:\n        freq.add(t)\n    return len(freq)",
        "num_ids": 56
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for tup in test_list:\n        freq.add(tup)\n    return len(freq)",
        "num_ids": 56
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)",
        "num_ids": 82
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes in a list of tuples as an argument and returns the number of unique tuples in the list.\n    '''\n    freq = {}\n    for tup in test_list:\n        freq[tup] = freq.get(tup, 0) + 1\n    return len(freq)",
        "num_ids": 73
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        nested_result = []\n        for j in range(len(test_tup1[i])):\n            nested_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(nested_result))\n    return tuple(result)",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(tuple(x+y for x,y in zip(test_tup1[i], test_tup2[i])))\n    return tuple(result_tup)",
        "num_ids": 101
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        result_tup += tuple(i+j for i, j in zip(tup1, tup2))\n    return result_tup",
        "num_ids": 95
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        row = ()\n        for j in range(len(test_tup1[0])):\n            row += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (row,)\n    return result_tup",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers a and b.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 38
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    \"\"\"\n    This function returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 37
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two tuples as input: tuplex and tuple1. It returns True if the element exists within tuple1, and False otherwise.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 64
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two arguments, `tuplex` and `tuple1`.\n    The function checks whether `tuplex` exists within `tuple1` and returns `True` if it does, or `False` if it doesn't.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check if an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists within {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist within {tuple1}\")",
        "num_ids": 68
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if set(tuplex) >= set(tuple1):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n\n    Args:\n    tuplex (tuple): The tuple to be searched.\n    tuple1 (tuple): The tuple containing the element to be searched.\n\n    Returns:\n    bool: True if the element exists in the tuple, else False.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False",
        "num_ids": 97
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")",
        "num_ids": 64
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1:\n        print(\"The element exists within the tuple.\")\n    else:\n        print(\"The element does not exist within the tuple.\")",
        "num_ids": 62
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns True if the parity of the input number is odd, and False otherwise.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Returns True if the parity of the given number is odd, and False otherwise.\n    \"\"\"\n    return x % 2 == 1",
        "num_ids": 39
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")",
        "num_ids": 61
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        print(\"The parity of the given number is odd.\")\n    else:\n        print(\"The parity of the given number is even.\")",
        "num_ids": 67
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'",
        "num_ids": 32
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")",
        "num_ids": 53
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    n_str = str(n)\n    n_lst = list(n_str)\n    i = len(n_lst) - 1\n    while i > 0 and n_lst[i-1] >= n_lst[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = i - 1\n    k = len(n_lst) - 1\n    while n_lst[k] < n_lst[i-1]:\n        k -= 1\n    n_lst[i-1], n_lst[k] = n_lst[k], n_lst[i-1]\n    n_lst[j+1:k+1] = reversed(n_lst[j+1:k+1])\n    return int(''.join(n_lst))",
        "num_ids": 190
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string to manipulate its digits\n    n_str = str(n)\n    \n    # Reverse the string to start from the rightmost digit\n    n_str_rev = n_str[::-1]\n    \n    # Find the next bigger number by rearranging the digits\n    next_bigger = ''\n    carry = 1\n    for digit in n_str_rev:\n        if digit == '9':\n            next_bigger += '0'\n        else:\n            next_bigger += str(int(digit) + carry)\n            carry = 0\n    \n    # Reverse the next bigger number and convert it back to an integer\n    return int(next_bigger[::-1])",
        "num_ids": 157
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Find the largest index i such that digits[i] < digits[i+1]\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    # If no such index exists, return -1\n    if i < 0:\n        return -1\n    \n    # Find the largest number that is greater than n and has the same digit at index i as digits[i+1]\n    candidate = n\n    while candidate <= n:\n        candidate = int(''.join(str(d) if i!= j else str(digits[i+1]) for j, d in enumerate(str(candidate))))\n        if candidate > n:\n            return candidate\n    \n    return -1",
        "num_ids": 195
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = sorted(digits[i:])\n    return int(''.join(str(d) for d in digits))",
        "num_ids": 176
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string and a list of digits\n    n_str = str(n)\n    n_digits = [int(d) for d in n_str]\n\n    # Sort the digits in descending order\n    n_digits.sort(reverse=True)\n\n    # Check if the digits can be rearranged to create a bigger number\n    # If there is no bigger number, return -1\n    for i in range(len(n_digits)):\n        if n_digits[i] == 9:\n            n_digits[i] = 0\n            continue\n        else:\n            n_digits[i] += 1\n            break\n    else:\n        return -1\n\n    # Convert the list of digits back to a string\n    n_next = int(\"\".join([str(d) for d in n_digits]))\n\n    return n_next",
        "num_ids": 216
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # create a list of the digits in the number\n    num_list = list(num_str)\n    # sort the digits in descending order\n    num_list.sort(reverse=True)\n    # create a new list of the digits in the sorted order\n    sorted_list = sorted(num_list)\n    # find the index of the first digit in the original number\n    index = num_list.index(sorted_list[0])\n    # create a new list of the digits in the original number, but with the first digit replaced with the next larger digit\n    new_list = num_list[:index] + [sorted_list[1]] + num_list[index+1:]\n    # convert the new list back to a string and convert it back to an integer\n    new_num = int(''.join(new_list))\n    return new_num",
        "num_ids": 234
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    \n    # Initialize variables to keep track of the indices of the digits to swap\n    i = 0\n    j = len(n) - 1\n    \n    # Loop through the digits of the number from left to right\n    while i < j:\n        # If the current digit is greater than the next digit, swap them and return the result\n        if int(n[i]) > int(n[j]):\n            n = n[:i] + n[j] + n[i+1:j] + n[i] + n[j+1:]\n            return int(n)\n        \n        # If the current digit is not greater than the next digit, move on to the next digit\n        i += 1\n        j -= 1\n    \n    # If no swaps were made, the number is already in increasing order and there is no next bigger number\n    return -1",
        "num_ids": 229
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    This function will rearrange the digits of a given number and return the next bigger number.\n\n    Args:\n        n (int): The number whose next bigger number is to be found.\n\n    Returns:\n        int: The next bigger number.\n    \"\"\"\n\n    # convert the number into a string\n    n_str = str(n)\n\n    # find the index of the last digit in the string\n    last_digit_index = len(n_str) - 1\n\n    # find the first digit from the right that is smaller than its adjacent digit\n    for i in range(last_digit_index - 1, -1, -1):\n        if int(n_str[i]) < int(n_str[i+1]):\n            break\n\n    # if no such digit is found, the number is already the largest possible\n    if i == -1:\n        return -1\n\n    # find the index of the digit in the original string that is adjacent to the digit found above\n    j = i + 1\n    while j < last_digit_index and int(n_str[j]) == int(n_str[i]):\n        j += 1\n\n    # swap the digits at the indices i and j\n    n_str_list = list(n_str)\n    n_str_list[i], n_str_list[j] = n_str_list[j], n_str_list[i]\n\n    # sort the digits to the right of the swapped digit\n    n_str_list[i+1:] = sorted(n_str_list[i+1:], reverse=True)\n\n    # convert the list back to a string and return the result\n    return int(''.join(n_str_list))",
        "num_ids": 379
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(digits))",
        "num_ids": 136
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = list(n)\n    n.sort(reverse=True)\n    if n == list(map(int, n)):\n        return -1\n    n = list(map(str, n))\n    n = int(\"\".join(n))\n    return n",
        "num_ids": 98
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    while k > 0:\n        pairs.append((nums1[heap[0][1]], nums2[heap[0][2]]))\n        heapq.heappop(heap)\n        k -= 1\n    return pairs",
        "num_ids": 125
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(heap, pair)\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap",
        "num_ids": 89
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1+num2, num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return [(pair[1], pair[2]) for pair in pairs]",
        "num_ids": 132
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(heap, pair)\n\n    for i in range(k):\n        pairs.append(heapq.heappop(heap))\n\n    return pairs\n",
        "num_ids": 94
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n    heapq.heapify(pairs)\n    return [heapq.heappop(pairs) for _ in range(k)]",
        "num_ids": 81
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heapq.nsmallest(k, heap, key=lambda x: x[0])",
        "num_ids": 113
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(heap))\n\n    return result",
        "num_ids": 141
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1+num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap",
        "num_ids": 87
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [(pair[1], pair[2]) for pair in heap]",
        "num_ids": 147
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap",
        "num_ids": 84
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Returns the minimum product of two tuples in a list of tuples.\n\n    :param lst: list of tuples\n    :return: minimum product of two tuples\n    \"\"\"\n    min_product = None\n    for t1 in lst:\n        for t2 in lst:\n            if t1!= t2:\n                product = t1[0] * t1[1] * t2[0] * t2[1]\n                if min_product is None or product < min_product:\n                    min_product = product\n    return min_product",
        "num_ids": 124
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
        "num_ids": 81
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = float('inf')\n    for tup in list1:\n        if len(tup) == 2:\n            product = tup[0] * tup[1]\n            if product < minimum:\n                minimum = product\n    if minimum == float('inf'):\n        return None\n    else:\n        return minimum",
        "num_ids": 97
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if product < minimum_product:\n                minimum_product = product\n    return minimum_product",
        "num_ids": 119
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if min_product is None or (list1[i][0] * list1[i][1]) * (list1[j][0] * list1[j][1]) < min_product:\n                min_product = (list1[i][0] * list1[i][1]) * (list1[j][0] * list1[j][1])\n    \n    return min_product",
        "num_ids": 155
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 68
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for value in listval:\n        if value < min_value:\n            min_value = value\n    return min_value",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val == None or val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 68
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in listval:\n        if type(i) == int:\n            if i < minimum:\n                minimum = i\n        elif type(i) == float:\n            if i < minimum:\n                minimum = i\n        elif type(i) == str:\n            if len(i) < len(minimum):\n                minimum = i\n        else:\n            print(\"Invalid input\")\n    return minimum",
        "num_ids": 119
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 80
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val",
        "num_ids": 80
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value",
        "num_ids": 78
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)",
        "num_ids": 37
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value",
        "num_ids": 80
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 63
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string as input and returns a camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 64
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string by \"_\"\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first word\n    camel_case_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join the capitalized words and return the camel case string\n    return ''.join(camel_case_words)",
        "num_ids": 115
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and returns a camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n\n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0]] + [word.capitalize() for word in words[1:]]\n\n    # Join the words and return the camel case string\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string",
        "num_ids": 125
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 46
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 46
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 63
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 46
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using regex\n    words = re.findall(r'\\w+', word)\n    \n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    \n    # Join the words with capitalized first letters\n    return ''.join(word.title() for word in words)",
        "num_ids": 100
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a snake case string and converts it to camel case string.\n    '''\n    # Split the word into words using underscores as the separator\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first word\n    camel_case_words = [words[0]]\n    for word in words[1:]:\n        camel_case_words.append(word.capitalize())\n    # Join the words into a single string with camel case capitalization\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string",
        "num_ids": 141
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    :param l: A list of integers.\n    :return: A new list with all odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 61
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [i for i in l if i % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "num_ids": 44
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 37
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and returns a new list containing only even numbers.\n    '''\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 47
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Removes odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function removes all odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 60
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n    :param lst: List of tuples.\n    :param n: Index of the element to extract.\n    :return: Nth element of the list of tuples.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be a positive integer\")\n    return lst[n-1][n-1]",
        "num_ids": 92
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    Args:\n        lst (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        The nth element from the list of tuples.\n    \"\"\"\n    return lst[n-1][1]",
        "num_ids": 77
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from the list of tuples.\n    '''\n    return [lst[i][n] for i in range(len(lst))]\n",
        "num_ids": 47
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    :param lst: List of tuples.\n    :param n: Index of the element to be extracted (starting from 1).\n    :return: The nth element from the list of tuples.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Index should be greater than or equal to 1.\")\n    return [lst[i][n-1] for i in range(len(lst))][0]",
        "num_ids": 113
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes in a list of tuples and an integer n,\n    and returns the nth element from each tuple.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result",
        "num_ids": 66
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for item in list1:\n        result.append(item[n-1])\n    return result",
        "num_ids": 58
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Using list comprehension to extract the nth element from the list of tuples\n    return [lst[n] for lst in list1]",
        "num_ids": 62
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return [i[n-1] for i in list1]",
        "num_ids": 48
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "num_ids": 44
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n    \"\"\"\n    return [t[n] for t in lst]",
        "num_ids": 40
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two sequences as inputs and returns True if there are any common values between them.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (list): The first sequence.\n    list2 (list): The second sequence.\n\n    Returns:\n    bool: True if any value in `list1` exists in `list2`, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "num_ids": 96
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))",
        "num_ids": 64
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in list1 exists in list2 or not.\n    \"\"\"\n    return any(elem in list2 for elem in list1)",
        "num_ids": 43
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in list1 exists in list2 or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 57
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in the first list exists in the second list,\n    otherwise it returns False.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 64
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # convert list1 to set to make it faster for searching\n    set1 = set(list1)\n    for value in list2:\n        if value in set1:\n            return True\n    return False",
        "num_ids": 76
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in the first list exists in the second list,\n    otherwise, it returns False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    This function takes two lists as input and returns True if any value in the first list exists in the second list, else returns False.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False",
        "num_ids": 62
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    max_num_index = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_num_index = i\n    \n    second_max_num = arr[0]\n    for i in range(len(arr)):\n        if i!= max_num_index:\n            if arr[i] > second_max_num:\n                second_max_num = arr[i]\n    \n    product = max_num * second_max_num\n    return product",
        "num_ids": 159
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n    return max_pair, max_product",
        "num_ids": 136
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -float('inf')\n    max_pair = None\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair, max_product",
        "num_ids": 123
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None # not enough elements in the array\n    max_product = arr[0] * arr[1] # initialize max_product with the first two elements\n    if max_product < 0: # if the product of the first two elements is negative, initialize max_pair with the first two elements\n        max_pair = [arr[0], arr[1]]\n    else: # if the product of the first two elements is positive or zero, initialize max_pair with the first element\n        max_pair = [arr[0]]\n    for i in range(2, n):\n        if arr[i] > max_product: # if the current element is greater than max_product, update max_product and max_pair\n            max_product = arr[i] * arr[max_pair[0]]\n            max_pair = [i]\n        elif arr[i] * max_pair[0] > max_product: # if the product of the current element and the current max_pair element is greater than max_product, update max_product and max_pair\n            max_product = arr[i] * max_pair[0]\n            max_pair = [i, max_pair[0]]\n    return max_pair",
        "num_ids": 308
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 93
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function finds the pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = []\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    return max_pair, max_product",
        "num_ids": 119
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function finds the pair with the highest product from a given array of integers.\n    \"\"\"\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair",
        "num_ids": 130
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    second_max = arr[1]\n    max_product = max_num * second_max\n    \n    for i in range(2, len(arr)):\n        if arr[i] > max_num:\n            second_max = max_num\n            max_num = arr[i]\n            max_product = max_num * second_max\n        elif arr[i] > second_max:\n            second_max = arr[i]\n            if max_num * second_max > max_product:\n                max_product = max_num * second_max\n    \n    return max_product",
        "num_ids": 164
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_prod = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "num_ids": 112
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "num_ids": 92
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = set([Input[0][0]])\n    for i in range(1, len(Input)):\n        if Input[i][0] in result:\n            continue\n        else:\n            result.add(Input[i][0])\n    return list(result)",
        "num_ids": 83
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input:\n        return None\n\n    common_first_element = Input[0][0]\n    for tup in Input:\n        if tup[0]!= common_first_element:\n            return None\n    return common_first_element",
        "num_ids": 77
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    # initialize an empty dictionary to store the first elements as keys and the tuples as values\n    first_elements = {}\n    \n    # iterate over the input list of tuples\n    for tup in Input:\n        # extract the first element of the tuple\n        first_element = tup[0]\n        \n        # check if the first element is already a key in the dictionary\n        if first_element in first_elements:\n            # if yes, append the current tuple to the list of tuples for that key\n            first_elements[first_element].append(tup)\n        else:\n            # if not, create a new key-value pair with the first element as the key and a list containing the current tuple as the value\n            first_elements[first_element] = [tup]\n    \n    # iterate over the dictionary of first elements and find the first element that appears in more than one tuple\n    for key, value in first_elements.items():\n        if len(value) > 1:\n            return key\n    \n    # if no common first element is found, return None\n    return None",
        "num_ids": 225
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = set()\n    for tup in Input:\n        common_element.add(tup[0])\n    return common_element",
        "num_ids": 56
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                result.append(Input[i][0])\n    return result",
        "num_ids": 84
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    # Using set comprehension to find common first element in given list of tuple\n    common_elements = {i[0] for i in Input}\n    return common_elements",
        "num_ids": 44
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    \n    for tup in Input:\n        if tup[0] not in result:\n            result[tup[0]] = []\n        result[tup[0]].append(tup)\n        \n    return result",
        "num_ids": 70
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for tup in Input:\n        common_elements.add(tup[0])\n    return common_elements",
        "num_ids": 56
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = Input[0][0]  # assign the first element of the first tuple to common_element\n    for i in range(1, len(Input)):\n        if Input[i][0]!= common_element:  # check if the first element of the i-th tuple is not equal to common_element\n            return None  # if not, return None\n    return common_element  # if all the first elements are equal to common_element, return it.",
        "num_ids": 129
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for t in Input:\n        if common_element is None:\n            common_element = t[0]\n        elif common_element!= t[0]:\n            return None\n    return common_element",
        "num_ids": 74
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element",
        "num_ids": 82
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list of strings as input and returns the string having maximum length.\n    \"\"\"\n    max_string = \"\"\n    for string in lst:\n        if len(string) > len(max_string):\n            max_string = string\n    return max_string",
        "num_ids": 66
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(i) for i in lst)\n    for i in lst:\n        if len(i) == max_len:\n            return i",
        "num_ids": 64
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element of the list having maximum length.\n    \"\"\"\n    max_length = 0\n    result = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            result = element\n    return result",
        "num_ids": 75
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    This function will find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element",
        "num_ids": 76
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    This function takes a list as an input and returns the element with maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem",
        "num_ids": 79
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list of strings as input and returns the string having maximum length.\n    '''\n    max_len = 0\n    max_str = ''\n    for s in lst:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str",
        "num_ids": 80
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_max(lst):\n    \"\"\"\n    This function finds the element of a list having maximum length.\n    \"\"\"\n    max_length = len(lst[0])\n    max_element = lst[0]\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n            \n    return max_element\n    \n",
        "num_ids": 83
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element of the list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n            \n    return max_element",
        "num_ids": 81
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element of the list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 81
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    total_sum = sum(list(map(round, list1)))\n    return total_sum * len(list1)",
        "num_ids": 38
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, 2*n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes",
        "num_ids": 76
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, 2*n, 2):\n        cube_sum += i**3\n    return cube_sum",
        "num_ids": 65
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, 2*n, 2):\n        cube_sum += i**3\n    return cube_sum",
        "num_ids": 65
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, 2*n+1, 2):\n        cube_sum += i**3\n    return cube_sum",
        "num_ids": 67
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function calculates the sum of cubes of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of first\", n, \"even natural numbers is:\", cube_Sum(n))",
        "num_ids": 96
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function finds the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum",
        "num_ids": 56
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of first\", n, \"even natural numbers is\", cube_Sum(n))",
        "num_ids": 96
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1] # remove the last delimiter from the result",
        "num_ids": 65
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)",
        "num_ids": 48
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function concatenates each element of a tuple by a specified delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of strings to be concatenated.\n    delimiter (str): A string to be used as a delimiter for concatenation.\n\n    Returns:\n    str: A concatenated string.\n    '''\n    # Initialize an empty string to store the concatenated string\n    concatenated_string = \"\"\n\n    # Loop through each element of the tuple and concatenate it with the delimiter\n    for i in range(len(test_tup)):\n        concatenated_string += test_tup[i] + delimiter\n\n    # Return the concatenated string\n    return concatenated_string[:-1]  # Remove the last delimiter from the concatenated string",
        "num_ids": 165
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]",
        "num_ids": 65
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]",
        "num_ids": 57
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    This function takes a tuple as input and concatenates each element of the tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]",
        "num_ids": 64
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    concatenated_string = concatenated_string[:-1] # Remove the last delimiter\n    return concatenated_string",
        "num_ids": 83
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    This function takes a tuple and a delimiter as arguments, and returns the concatenated string with the delimiter in between.\n    '''\n    concatenated_string = ''\n    for i in test_tup:\n        concatenated_string += str(i) + delimiter\n    return concatenated_string[:-1]",
        "num_ids": 77
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    This function takes a tuple as input and concatenates each element by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1] # Removing the last delimiter from the result string",
        "num_ids": 71
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    This function takes a tuple as input and concatenates each element of tuple\n    by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1] # remove the extra delimiter at the end of the result",
        "num_ids": 75
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    average_of_cubes = sum_of_cubes / n\n    \n    return average_of_cubes",
        "num_ids": 91
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average",
        "num_ids": 66
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes/n\n    return average",
        "num_ids": 81
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n\nprint(find_Average_Of_Cube(10)) # Output: 22.833333333333332",
        "num_ids": 103
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n",
        "num_ids": 77
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the cube of the current number to the sum\n        sum += i**3\n        # increment the count\n        count += 1\n    # return the average of cubes of first n natural numbers\n    return sum / count",
        "num_ids": 124
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n*n)",
        "num_ids": 65
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n",
        "num_ids": 62
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    return sum_cubes/n",
        "num_ids": 75
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average",
        "num_ids": 81
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    rear_tuple = tuple([test_tuple[i][rear_index] for i in range(len(test_tuple))])\n    return rear_tuple",
        "num_ids": 83
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 40
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    return tuple([test_string[rear_index] for test_string in test_tuple])",
        "num_ids": 70
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple",
        "num_ids": 67
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple",
        "num_ids": 67
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        rear = string[-1]\n        result.append(rear)\n    return tuple(result)",
        "num_ids": 65
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function extracts only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)",
        "num_ids": 59
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)",
        "num_ids": 60
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list and x in list1[i]:\n            count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list as input and an element to search for.\n    It returns the number of sublists in the list that contain the element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function counts the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count",
        "num_ids": 96
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the input list.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 68
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 58
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function will take a list of numbers as input and return a new list containing only the odd numbers from the input list.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 69
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 58
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 51
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function filters out the odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]",
        "num_ids": 44
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None",
        "num_ids": 112
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)",
        "num_ids": 78
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None",
        "num_ids": 112
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 102
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        groups = match.groups()\n        return '{}-{}-{}'.format(groups[2], groups[1], groups[0])\n    else:\n        return None",
        "num_ids": 114
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    replacement = r'\\3-\\2-\\1'\n    new_dt = re.sub(pattern, replacement, dt)\n    return new_dt",
        "num_ids": 96
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return new_dt",
        "num_ids": 86
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date of yyyy-mm-dd format as input and converts it to dd-mm-yyyy format.\n    '''\n    # Extracting the year, month, and day from the input date\n    year = dt[0:4]\n    month = dt[5:7]\n    day = dt[8:10]\n\n    # Converting the date from yyyy-mm-dd to dd-mm-yyyy format\n    new_date = day + '-' + month + '-' + year\n\n    return new_date",
        "num_ids": 127
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re.sub() function to replace the pattern with the desired date format\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    \n    return new_dt",
        "num_ids": 121
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 109
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    \n    # Start with a gap of n/2 and reduce the gap until it becomes 1\n    gap = n//2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n            \n            # shift earlier gap-sorted elements up until the correct location for a[i] is found\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            \n            # put temp (the original a[i]) in its correct location\n            my_list[j] = temp\n        \n        # Reduce the gap for the next iteration\n        gap //= 2\n    \n    return my_list",
        "num_ids": 235
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    This function takes a list as an argument and sorts it using shell sort algorithm.\n    '''\n    \n    n = len(my_list)\n\n    # Start with a big gap, then reduce the gap\n    gap = n//2\n    while gap > 0:\n        \n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap,n):\n            \n            # Insert my_list[i] into the sorted sequence my_list[0..i-gap]\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n\n        # Reduce the gap for the next element\n        gap //= 2\n    \n    return my_list",
        "num_ids": 190
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    \n    # Calculate the gap between elements\n    gap = n // 2\n    \n    # Perform insertion sort on the subarrays\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list",
        "num_ids": 147
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "num_ids": 113
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # add a[i] to the elements that have been gap sorted\n            # up to position i\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap for the next pass\n        gap //= 2\n\n    return my_list",
        "num_ids": 186
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function takes an unsorted list and sorts it using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2",
        "num_ids": 128
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # Add a[i] to the elements that have been gap sorted\n            # up to position i\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap for the next iteration\n        gap //= 2\n    return my_list",
        "num_ids": 186
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given list using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 128
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Function to sort the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 128
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple containing the elementwise and values of the two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i], )\n    return result_tup",
        "num_ids": 90
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result += (test_tup1[i],)\n        else:\n            result += (None,)\n    return result",
        "num_ids": 95
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function extracts the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] and test_tup2[i],)\n    return result_tup",
        "num_ids": 82
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup",
        "num_ids": 83
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += ((test_tup1[i] and test_tup2[i]),)\n    return and_tup",
        "num_ids": 83
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes the coefficients of a parabola in standard form, ax^2 + bx + c = 0,\n    and returns the value of the directrix, where the parabola intersects the x-axis.\n    '''\n    if b**2 - 4*a*c < 0:\n        print(\"The directrix is not a real number.\")\n        return None\n    else:\n        directrix = -b/(2*a)\n        print(\"The value of the directrix is:\", directrix)",
        "num_ids": 126
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes the coefficients of the equation of a parabola \n    (a*x^2 + b*x + c = 0) and returns the value of the directrix of the parabola.\n    \"\"\"\n    delta = b**2 - 4*a*c  # Calculate the discriminant\n    if delta < 0:  # If the discriminant is negative, the parabola does not have a directrix\n        return \"The parabola does not have a directrix.\"\n    else:\n        x = (-b + delta**0.5) / (2*a)  # Calculate the value of the directrix\n        return x",
        "num_ids": 158
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x = (-b + discriminant**0.5)/(2*a)\n        return x\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        return None",
        "num_ids": 107
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b - discriminant**0.5) / (2*a)\n        x2 = (-b + discriminant**0.5) / (2*a)\n        return [x1, x2]\n    else:\n        return None",
        "num_ids": 115
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    elif discriminant == 0:\n        x = (-b)/(2*a)\n        return x\n    else:\n        print(\"The equation has no real roots.\")",
        "num_ids": 138
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return x\n    else:\n        print(\"The equation has no real roots\")",
        "num_ids": 145
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes the coefficients of a parabola equation in the form of:\n    y = ax^2 + bx + c\n    \n    and returns the value of the directrix (x-axis intersection) of the parabola.\n    '''\n    return (-b)/(2*a)",
        "num_ids": 76
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    directrix = -b/(2*a)\n    return directrix",
        "num_ids": 49
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes in the coefficients of the equation of a parabola and returns the value of its directrix.\n    \"\"\"\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is greater than 0\n    if discriminant > 0:\n        # calculate the values of x1 and x2\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    else:\n        return \"The equation has no real roots\"",
        "num_ids": 156
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"The parabola has no real directrix.\")\n        return None\n    else:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The parabola has two real roots:\", x1, x2)\n        return (x1, x2)",
        "num_ids": 146
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Check if two lists have at least one common element.\n    \n    Parameters:\n    - list1: First list\n    - list2: Second list\n    \n    Returns:\n    - True if at least one common element, False otherwise.\n    \"\"\"\n    return bool(set(list1).intersection(list2))",
        "num_ids": 75
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return any(elem in list1 for elem in list2)",
        "num_ids": 50
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Returns True if there is at least one common element in the two lists.\n    \"\"\"\n    return bool(set(list1).intersection(set(list2)))",
        "num_ids": 48
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as inputs and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1.intersection(set2)\n    if len(common) > 0:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2) / 2\n    return median_length",
        "num_ids": 57
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function finds the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height",
        "num_ids": 53
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the half-perimeter\n    s = (base1 + base2) / 2\n    # Calculate the median length\n    median = height * s\n    return median",
        "num_ids": 73
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = ((base1 + base2) / 2) * height\n    return median_length",
        "num_ids": 60
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 + height",
        "num_ids": 51
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median",
        "num_ids": 53
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes in the lengths of the bases of the trapezium and its height,\n    and returns the median length of the trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median",
        "num_ids": 70
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    total_area = (base1 + base2) * height / 2\n    median_length = 2 * total_area / (base1 + base2)\n    return median_length",
        "num_ids": 78
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height/2\n    median_length = (base1+base2)/2 + half_height\n    return median_length",
        "num_ids": 67
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium with the given base1, base2, and height.\n    '''\n    if base1 <= 0 or base2 <= 0 or height <= 0:\n        raise ValueError(\"All inputs must be positive.\")\n    if base1 + base2 <= height:\n        raise ValueError(\"The sum of bases must be greater than the height.\")\n    median = (base1 + base2) / 2\n    return median",
        "num_ids": 116
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 48
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    :param arr: list of numbers\n    :param number: number to compare to the array elements\n    :return: True if the number is greater than all the array elements, False otherwise\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False",
        "num_ids": 86
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and checks whether the number is greater than the elements of the array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False",
        "num_ids": 63
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function takes two arguments:\n    arr - an array of numbers\n    number - a number to be checked\n    \n    It checks whether the number is greater than the elements of the array.\n    \n    If the number is greater than any element of the array, it returns True.\n    If the number is not greater than any element of the array, it returns False.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 111
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 52
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 48
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[b]+\\w\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 53
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\Sb+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 78
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    return re.search(pattern, text) is not None",
        "num_ids": 36
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Returns the last digit of a given number.\n    \"\"\"\n    if n < 0:\n        n = -n\n    return n % 10",
        "num_ids": 41
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n % 10",
        "num_ids": 50
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "num_ids": 34
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    return n % 10",
        "num_ids": 33
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an argument and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10",
        "num_ids": 51
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    # Extract the last digit of the given number\n    last_digit = n % 10\n    \n    return last_digit",
        "num_ids": 33
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Returns the last digit of the given number n.\n    \"\"\"\n    return n % 10",
        "num_ids": 30
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = n * -1\n    last_digit = n % 10\n    return last_digit",
        "num_ids": 58
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n.\n    '''\n    return n % 10",
        "num_ids": 36
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10",
        "num_ids": 36
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "num_ids": 55
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    negative_numbers = []\n    for i in list1:\n        if i < 0:\n            negative_numbers.append(i)\n    return negative_numbers",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "num_ids": 55
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the negative numbers.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 68
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list containing only the negative numbers from the input list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result",
        "num_ids": 53
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Returns a list of all negative numbers in a given list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 60
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list with all the negative numbers from the original list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 70
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if ord(i) % 2!= 0:\n            result += i\n    return result",
        "num_ids": 56
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and returns the string with all the odd characters removed.\n    \"\"\"\n    # Create an empty string to store the result\n    result = \"\"\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is odd\n        if char.isdigit() or char.isalpha():\n            # If it is, add it to the result string\n            result += char\n    \n    # Return the result string\n    return result",
        "num_ids": 107
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in str1:\n        if ord(i) % 2 == 0:\n            result += i\n    return result",
        "num_ids": 56
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all odd characters from a string.\n    '''\n    # converting string to list of characters\n    char_list = list(str1)\n    # creating an empty list to store even characters\n    even_chars = []\n    # iterating through each character in the list\n    for char in char_list:\n        # checking if the character is even\n        if int(ord(char)) % 2 == 0:\n            # if the character is even, appending it to the even_chars list\n            even_chars.append(char)\n    # joining the even characters to form a new string\n    new_string = ''.join(even_chars)\n    # returning the new string\n    return new_string",
        "num_ids": 159
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if ord(i) % 2 == 0:\n            new_str += i\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result",
        "num_ids": 52
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Remove all odd characters from a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 59
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and returns the string with all the odd characters removed.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])",
        "num_ids": 57
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            result += char\n    return result",
        "num_ids": 56
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if (test_list[i][0], test_list[j][1]) == (test_list[j][0], test_list[i][1]):\n                    count += 1\n    return count",
        "num_ids": 106
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list of tuples as an argument and returns the number of bidirectional tuple pairs.\n    '''\n\n    count = 0\n\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is bidirectional\n        if (tup[0] in tup[1]) or (tup[1] in tup[0]):\n            count += 1\n\n    return count",
        "num_ids": 98
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n            elif test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count",
        "num_ids": 110
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n            elif test_list[i] < test_list[j]:\n                count += 1\n    \n    return count",
        "num_ids": 87
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] == test_list[j][0] and test_list[i][0] == test_list[j][1]):\n                count += 1\n    return count",
        "num_ids": 90
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count",
        "num_ids": 90
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Counts the number of bidirectional pairs in a list of tuples.\n    A bidirectional pair is a tuple where the elements are in the same order in both tuples.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 128
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "num_ids": 36
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Joins a list of multiple integers into a single integer.\n\n    Args:\n        L (list): List of integers.\n\n    Returns:\n        int: Single integer formed by joining the input list.\n    \"\"\"\n    return int(''.join(str(x) for x in L))",
        "num_ids": 70
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "num_ids": 36
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    single_num = 0\n    for i in L:\n        single_num = single_num * 10 + i\n    return single_num",
        "num_ids": 58
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num = single_num * 10 + num\n    return single_num",
        "num_ids": 62
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in L))",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= 10\n        result += i\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    return reduce(lambda x, y: x | y, L)",
        "num_ids": 25
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Create an empty string to hold the final result\n    result = \"\"\n    \n    # Loop through the list of integers\n    for num in L:\n        # Convert the integer to a string and append it to the result string\n        result += str(num)\n    \n    # Convert the final result string to an integer and return it\n    return int(result)",
        "num_ids": 100
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all adverbs in the text using regular expression\n    adverbs = re.findall(r'\\b(very|extremely|quite|really|rather|really|very|actually)\\b', text)\n    \n    # if there are no adverbs in the text, return None\n    if not adverbs:\n        return None\n    \n    # find the first adverb and its position in the text\n    first_adverb = adverbs[0]\n    first_adverb_position = text.find(first_adverb)\n    \n    # return a tuple containing the adverb and its position\n    return (first_adverb, first_adverb_position)",
        "num_ids": 182
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(really|very|extremely|quite|really|really well|really badly|really well|very well|well)\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None",
        "num_ids": 109
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    pattern = r'\\b(very|extremely|quite|really|mostly|practically)\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb_positions.append((match.start(), match.end()))\n    return adverb_positions",
        "num_ids": 107
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # Find the position of the first adverb\n    first_adverb_pos = text.find(adverbs[0])\n\n    # Return the adverb and its position\n    return adverbs[0], first_adverb_pos",
        "num_ids": 97
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(very|really|extremely|quite)\\b', text.lower())\n    if not adverbs:\n        return \"No adverb found\"\n    else:\n        adverb = adverbs[0]\n        start_pos = text.lower().index(adverb)\n        end_pos = start_pos + len(adverb)\n        return f\"Adverb: {adverb}, Start Position: {start_pos}, End Position: {end_pos}\"",
        "num_ids": 150
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None\n\ntext = 'The movie was enjoyable and thought-provoking, but the acting was lacking.'\nposition = find_adverb_position(text)\nif position:\n    adverb = text[position[0]:position[1]]\n    print(f'The first adverb is \"{adverb}\" and its positions are {position}.')\nelse:\n    print('No adverb found in the given sentence.')",
        "num_ids": 172
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # If no matches are found, return None\n    if not matches:\n        return None\n    \n    # Find the position of the first match\n    start_pos = text.find(matches[0])\n    \n    # Return a tuple containing the adverb and its position\n    return (matches[0], start_pos)",
        "num_ids": 126
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    words = re.findall(pattern, text)\n    adverb_positions = []\n    for i, word in enumerate(words):\n        if word in ['very','really', 'quite', 'rather', 'extremely','moreover', 'unquestionably', 'actually']:\n            adverb_positions.append(i)\n            break\n    if adverb_positions:\n        adverb = words[adverb_positions[0]]\n        return adverb, adverb_positions[0]\n    else:\n        return None, None",
        "num_ids": 167
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b(very|really|extremely|really quite|quite)\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 105
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(very|extremely|really|quite|rather|pretty|most|actually|actually)\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None",
        "num_ids": 111
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "num_ids": 38
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area",
        "num_ids": 47
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2",
        "num_ids": 38
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area",
        "num_ids": 43
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "num_ids": 38
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area",
        "num_ids": 46
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area",
        "num_ids": 43
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a single argument 'l', which is the length of one side of the cube. \n    It returns the surface area of the cube.\n    '''\n    area = 6 * l ** 2  # formula for surface area of a cube\n    return area",
        "num_ids": 66
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        total_count += 1\n    return positive_count / total_count",
        "num_ids": 86
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / total_count * 100",
        "num_ids": 86
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    return pos_count / len(nums)",
        "num_ids": 111
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
        "num_ids": 74
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the ratio of positive numbers to the total numbers in the array.\n    \"\"\"\n    count = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/total",
        "num_ids": 78
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = 0\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n    return positive_nums / len(nums)",
        "num_ids": 73
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < largest and list1[i] < 0:\n            largest = list1[i]\n    return largest",
        "num_ids": 80
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < largest:\n            largest = list1[i]\n    return largest",
        "num_ids": 71
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < largest and list1[i] < 0:\n            largest = list1[i]\n    return largest",
        "num_ids": 80
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for num in list1:\n        if num > 0 and num > max_num:\n            max_num = num\n    if max_num!= list1[0]:\n        return max_num\n    else:\n        return None",
        "num_ids": 87
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    if largest is None:\n        return \"There are no negative numbers in the list.\"\n    else:\n        return largest",
        "num_ids": 84
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    This function finds the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest",
        "num_ids": 58
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Returns the largest negative number from the given list.\n    If there is no negative number, returns None.\n    \"\"\"\n    neg_numbers = [num for num in list1 if num < 0]\n    if len(neg_numbers) == 0:\n        return None\n    else:\n        return max(neg_numbers)",
        "num_ids": 79
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    return largest_negative",
        "num_ids": 69
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    '''\n    largest = None\n    \n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    \n    return largest",
        "num_ids": 68
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for i in test_list:\n        result.append(tuple(i[:K] + i[-K:]))\n    return result",
        "num_ids": 64
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[K:])\n    return result_list",
        "num_ids": 62
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = []\n        for elem in tup:\n            if elem > K:\n                trimmed_tup.append(elem-K)\n            else:\n                trimmed_tup.append(elem)\n        trimmed_list.append(tuple(trimmed_tup))\n    return trimmed_list",
        "num_ids": 105
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple in the given tuple list by k.\n    '''\n    result = []\n    for tpl in test_list:\n        new_tpl = tuple(tpl[K:])\n        result.append(new_tpl)\n    return result",
        "num_ids": 63
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0][K:], x[1][K:]) for x in test_list]",
        "num_ids": 54
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tup[:K] + tup[-K:]\n        result.append(new_tup)\n    return result",
        "num_ids": 70
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(len(tup)) if i!= K)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 87
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[i] for i in range(K)))\n    return result",
        "num_ids": 65
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[:K] + tup[-K:]))\n    return result",
        "num_ids": 64
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tuple(tup[K:]))\n    return trimmed_list",
        "num_ids": 65
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input, test_tup1 and test_tup2, and returns a new tuple\n    where each element is the result of multiplying the corresponding elements in test_tup1 and\n    test_tup2.\n    \"\"\"\n    # Create an empty tuple to store the result.\n    result = ()\n    \n    # Iterate through the indices of the tuples using a for loop.\n    for i in range(len(test_tup1)):\n        # Multiply the corresponding elements and append the result to the result tuple.\n        result += (test_tup1[i] * test_tup2[i],)\n    \n    # Return the result tuple.\n    return result",
        "num_ids": 157
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] * test_tup2[i]),)\n    return result_tup",
        "num_ids": 89
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "num_ids": 82
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for elem in tup:\n        if elem in count:\n            result.append(count[elem])\n        else:\n            result.append(0)\n    return result",
        "num_ids": 83
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count:\n            result.append((i, count[i]))\n    return result",
        "num_ids": 77
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    count_lst = []\n    for i in lst:\n        count_lst.append(counter[i])\n    return count_lst",
        "num_ids": 75
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_tup = Counter(tup)\n    count_lst = Counter(lst)\n    common_elements = set(count_lst.keys()) & set(count_tup.keys())\n    for element in common_elements:\n        print(f\"{element} occurs {count_tup[element]} times in the tuple and {count_lst[element]} times in the list.\")\n",
        "num_ids": 121
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count = 0\n    for i in lst:\n        if i in count_dict:\n            count += count_dict[i]\n    return count",
        "num_ids": 80
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            print(f\"{i}: {count[i]}\")\n        else:\n            print(f\"{i}: 0\")",
        "num_ids": 85
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input, and returns a dictionary containing the count of each element in the list in the tuple.\n    '''\n    count_dict = Counter(lst)\n    for item in tup:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict",
        "num_ids": 100
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tup = Counter(tup)\n    \n    result = [count_tup[elem] for elem in count_dict]\n    \n    return result",
        "num_ids": 78
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for item in tup:\n        if item in count:\n            print(f\"{item} : {count[item]}\")",
        "num_ids": 73
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input, and returns a dictionary with the count of each element of the list in the tuple.\n    '''\n    count_dict = Counter(lst)\n    for item in tup:\n        if item in count_dict:\n            count_dict[item] += 1\n    return count_dict",
        "num_ids": 87
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes",
        "num_ids": 57
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubed_nums = []\n    for num in nums:\n        cubed_nums.append(num ** 3)\n    return cubed_nums",
        "num_ids": 59
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]",
        "num_ids": 38
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of the numbers in the original list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 64
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result",
        "num_ids": 49
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of cubes of the individual elements.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result",
        "num_ids": 57
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of cubes of each number.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes",
        "num_ids": 63
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of the first n perrin numbers.\n    \"\"\"\n    sum = 0\n    p = 1\n    for i in range(n):\n        sum += p\n        p = (p * (3 * p - 1)) // 2\n    return sum\n\nprint(cal_sum(10))  # Output: 286",
        "num_ids": 88
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [1, 1]\n    for i in range(2, n):\n        p.append(2*p[i-1] + p[i-2])\n    return p[n-1]\n\nn = int(input(\"Enter the number of terms you want to add: \"))\nprint(\"The sum of the first\", n, \"Perrin numbers is:\", cal_sum(n))",
        "num_ids": 116
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)",
        "num_ids": 52
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of first n Perrin numbers.\n\n    :param n: An integer\n    :return: The sum of first n Perrin numbers\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through first n Perrin numbers and add them to sum variable\n    for i in range(1, n + 1):\n        sum += (3 * i * i - i) // 2\n\n    # Return the sum of Perrin numbers\n    return sum",
        "num_ids": 123
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers up to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (1/i)\n    return sum",
        "num_ids": 55
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(n):\n        sum += p\n        p = (p * 10) + 1\n    return sum",
        "num_ids": 64
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\nprint(cal_sum(5)) # Output: 15 (1 + 2 + 3 + 5 + 8)",
        "num_ids": 83
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all Perrin numbers up to n.\n    \"\"\"\n    p = 1\n    sum = 0\n    while p <= n:\n        sum += p\n        p += 1\n    return sum",
        "num_ids": 63
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculates the sum of perrin numbers up to n.\n    \"\"\"\n    perrin_sum = 0\n    i = 2\n    while i <= n:\n        perrin_sum += i\n        i += 2\n    return perrin_sum",
        "num_ids": 65
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1: \n        return 1 \n    else: \n        return 2*n*n - 1 + cal_sum(n-1)",
        "num_ids": 60
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result",
        "num_ids": 61
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    count = 0\n    for s in l:\n        if len(s) == str:\n            result.append(s)\n            count += 1\n            if count == str:\n                break\n    return result",
        "num_ids": 79
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result",
        "num_ids": 64
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result_list.append(str_list[i])\n    return result_list",
        "num_ids": 82
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extracts a given size of strings from a list of strings.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), size):\n        result.append(' '.join(lst[i:i+size]))\n    return result",
        "num_ids": 65
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            result.append(str[i])\n    return result",
        "num_ids": 69
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of string values.\n    size (int): The size of the strings to extract.\n\n    Returns:\n    list: A list of extracted string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(''.join(str_list[i:i+size]))\n    return result",
        "num_ids": 114
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str), l):\n        result.append(str[i:i+l])\n    return result",
        "num_ids": 66
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size and returns a list of strings of specified size.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(''.join(str_list[i:i+size]))\n    return result",
        "num_ids": 78
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == l:\n            result.append(s)\n    return result",
        "num_ids": 64
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(remove_whitespaces(text))",
        "num_ids": 78
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+', '', text1)\n    return text2",
        "num_ids": 54
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)",
        "num_ids": 48
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as an argument and returns the string with all whitespaces removed.\n    '''\n    # Use the re.sub() method to replace all occurrences of whitespace characters with an empty string\n    text2 = re.sub('\\s+', '', text1)\n    return text2",
        "num_ids": 79
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove whitespaces from the given string\n    # \\s matches any whitespace character (space, tab, newline)\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 80
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 66
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "num_ids": 44
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates loss amount on a sale if the given amount has loss else returns 0.\n\n    Args:\n    actual_cost (float): Actual cost of the product or service\n    sale_amount (float): Amount of the sale\n\n    Returns:\n    float: Loss amount if there is any, else 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount",
        "num_ids": 120
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 66
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0",
        "num_ids": 66
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0",
        "num_ids": 44
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    This function takes two parameters, actual_cost and sale_amount, and returns the loss amount on a sale.\n    If the given sale amount has no loss, it returns 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0",
        "num_ids": 84
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function takes actual cost and sale amount as input and returns loss amount if sale amount has loss else 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n",
        "num_ids": 73
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "num_ids": 70
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments, actual_cost and sale_amount.\n    It returns the loss amount on a sale if the given sale_amount has loss else 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 80
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            sum += i \n            if i!= n//i: \n                sum += n//i \n    return sum ",
        "num_ids": 87
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if i!= int(math.sqrt(n)):\n                if n/i == int(math.sqrt(n)):\n                    sum -= i\n                else:\n                    sum += n/i\n    return sum",
        "num_ids": 120
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum",
        "num_ids": 78
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum_of_factors += i \n            if (n//i) % 2 == 0: \n                sum_of_factors += n//i \n    if n % 2 == 0: \n        sum_of_factors += n \n    return sum_of_factors\n",
        "num_ids": 137
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "num_ids": 76
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i\n    return sum ",
        "num_ids": 78
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "num_ids": 73
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    \n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Check if i is a factor of n\n        if n % i == 0:\n            \n            # Check if i is even\n            if i % 2 == 0:\n                \n                # Add i to sum\n                sum += i\n    \n    # Return the sum of even factors of n\n    return sum",
        "num_ids": 129
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n\n    even_factors = [x for x in factors if x % 2 == 0]\n    return sum(even_factors)",
        "num_ids": 92
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all even factors of that number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n//i!= i:\n                if n//i % 2 == 0:\n                    sum += n//i\n    return sum",
        "num_ids": 113
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 78
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'The quick brown fox jumps over the lazy dog. The dog slept over the veranda.'\nmatches = text_match_wordz(text)\nprint(matches)",
        "num_ids": 86
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    match = regex.search(text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 82
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 68
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in a given text.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    result = pattern.findall(text)\n    return result",
        "num_ids": 65
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in a given text.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches",
        "num_ids": 70
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 58
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function returns a list of all words in the given text that contains the letter 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'  # pattern to match a word containing 'z'\n    words = re.findall(pattern, text)  # find all matches of the pattern in the text\n    return words",
        "num_ids": 99
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))",
        "num_ids": 58
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches\n",
        "num_ids": 63
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        if monthnum % 2 == 0:\n            return True\n        else:\n            return False",
        "num_ids": 88
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month contains 31 days, False otherwise.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number\"",
        "num_ids": 114
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11] or (monthnum2 == 2 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0)):\n        print(\"This month has 31 days.\")\n    else:\n        print(\"This month has less than 31 days.\")",
        "num_ids": 121
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return \"The month number contains 30 days.\"\n    elif monthnum2 == 2:\n        return \"The month number contains 28 or 29 days depending on the year.\"\n    else:\n        return \"The month number contains 31 days.\"",
        "num_ids": 112
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None\n\nmonthnum = int(input(\"Enter a month number: \"))\n\nif check_monthnumb_number(monthnum) == True:\n    print(f\"The month number {monthnum} contains 31 days.\")\nelif check_monthnumb_number(monthnum) == False:\n    print(f\"The month number {monthnum} does not contain 31 days.\")\nelse:\n    print(\"Invalid month number.\")",
        "num_ids": 186
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11] or monthnum2 == 2:\n        print(\"This month has 31 days.\")\n    else:\n        print(\"This month does not have 31 days.\")",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 2 or monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"31 days\")\n    else:\n        print(\"30 days\")",
        "num_ids": 63
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes a month number (1-12) as input and returns True if the month contains 31 days,\n    otherwise it returns False.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return \"Invalid month number\"",
        "num_ids": 151
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_stringlist.append(string[::-1])\n    return reversed_stringlist",
        "num_ids": 64
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\nstringlist = [\"hello\", \"world\", \"python\"]\nprint(reverse_string_list(stringlist))",
        "num_ids": 87
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    This function takes a list of strings as input and returns a new list with the reversed string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 66
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_stringlist.append(string[::-1])\n    return reversed_stringlist",
        "num_ids": 64
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    \n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_lst = lst[i]\n            min_len = len(lst[i])\n            \n    return min_lst",
        "num_ids": 94
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst",
        "num_ids": 96
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n            \n    return min_lst",
        "num_ids": 99
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst",
        "num_ids": 91
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for sublst in lst:\n        if len(sublst) < min_len:\n            min_len = len(sublst)\n            min_lst = sublst\n    \n    return min_lst",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist",
        "num_ids": 90
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist",
        "num_ids": 75
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function will find the sublist with the minimum length in a given list.\n    \"\"\"\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 90
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and finds the sublist having minimum length.\n    '''\n\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist",
        "num_ids": 93
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 35
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 33
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    This function takes two arguments, l (length) and b (breadth),\n    and returns the area of a rectangle with sides of length l and b.\n    '''\n    area = l * b\n    return area",
        "num_ids": 56
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b",
        "num_ids": 31
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as inputs and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 46
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes two arguments, length and breadth of a rectangle and returns its area.\n    \"\"\"\n    area = length * breadth\n    return area",
        "num_ids": 47
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = length * breadth\n    return area",
        "num_ids": 47
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes two arguments, length and breadth, and returns the area of the rectangle.\n    '''\n    return length * breadth",
        "num_ids": 44
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 35
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    This function takes the length and breadth of a rectangle as inputs and returns its area.\n    '''\n    area = l * b\n    return area",
        "num_ids": 43
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Regular expression to match all uppercase substrings in the string\n    pattern = re.compile('[A-Z]+')\n    # Findall method returns all the matches in the string\n    matches = pattern.findall(str1)\n    # Join all the matches into a single string\n    uppercase_str = ''.join(matches)\n    # Remove all uppercase substrings from the original string using the replace method\n    new_str = str1.replace(uppercase_str, '')\n    return new_str",
        "num_ids": 136
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 52
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # find all uppercase substrings using regex\n    uppercase_substrings = re.findall('[A-Z]+', str1)\n    \n    # remove all uppercase substrings from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1",
        "num_ids": 94
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Remove uppercase substrings from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    # Return the updated string\n    return str1",
        "num_ids": 97
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    matches = pattern.findall(str1)\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1",
        "num_ids": 75
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    # Use regular expression to match all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n\n    # Iterate over the list of uppercase substrings and remove them from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1",
        "num_ids": 105
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', string)",
        "num_ids": 46
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)",
        "num_ids": 51
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_first(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    This function extracts the first element of each sublist in a list.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 50
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list with only the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 57
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract(lst):\n    '''\n    This function extracts the first element of each sublist\n    '''\n    return [x[0] for x in lst]",
        "num_ids": 34
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of lists as an argument and returns a new list containing the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst",
        "num_ids": 65
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list containing \n    the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 59
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    This function will extract the first element of each sublist in the input list.\n    '''\n    return [sublist[0] for sublist in lst]",
        "num_ids": 41
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Count the number of uppercase characters in a string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the count of uppercase characters in it.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in it.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as an input and returns a list of all possible combinations of the elements of the list.\n    \"\"\"\n    result = []\n    n = len(lst)\n    for i in range(2**n):\n        combo = []\n        for j in range(n):\n            if i & (1<<j):\n                combo.append(lst[j])\n        result.append(combo)\n    return result",
        "num_ids": 97
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append((lst[i], lst[j]))\n    return result",
        "num_ids": 79
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of its elements.\n    \"\"\"\n    # Initialize an empty list to store all combinations\n    combs = []\n\n    # Iterate over all possible lengths of the combinations\n    for i in range(len(lst) + 1):\n        # Generate all combinations of the current length\n        for comb in itertools.combinations(lst, i):\n            # Add the combination to the list of all combinations\n            combs.append(comb)\n\n    # Return the list of all combinations\n    return combs",
        "num_ids": 122
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result",
        "num_ids": 77
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(lst)\n    combinations = []\n    for i in range(2**n):\n        combination = []\n        for j in range(n):\n            if i & (1 << j):\n                combination.append(lst[j])\n        combinations.append(combination)\n    return combinations",
        "num_ids": 90
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store all possible combinations\n    combinations = []\n    \n    # Find all possible combinations of length 1 to the length of the list\n    for i in range(1, len(list1)+1):\n        # Use the built-in combinations function from itertools to find all possible combinations of length i\n        for comb in itertools.combinations(list1, i):\n            # Add each combination to the list of combinations\n            combinations.append(comb)\n    \n    # Return the list of combinations\n    return combinations",
        "num_ids": 137
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements in lst.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst) + 1):\n        for j in itertools.combinations(lst, i):\n            result.append(j)\n    return result",
        "num_ids": 69
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(lst)\n    combinations = []\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if i & (1 << j):\n                combo.append(lst[j])\n        combinations.append(combo)\n    return combinations",
        "num_ids": 93
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns all possible combinations of the elements of a given list.\n\n    :param lst: the list of elements to generate combinations from\n    :type lst: list\n    :return: a list of all possible combinations\n    :rtype: list\n    \"\"\"\n\n    # initialize an empty list to store the combinations\n    result = []\n\n    # iterate over the indices of the list\n    for i in range(len(lst)):\n        # generate all possible combinations of the remaining elements\n        remaining_elements = lst[:i] + lst[i+1:]\n        for comb in combinations_list(remaining_elements):\n            # add the current element to each combination to form a new combination\n            result.append((lst[i],) + comb)\n\n    # add the original list as a single combination\n    result.append(tuple(lst))\n\n    return result",
        "num_ids": 181
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 116
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        max_so_far = max(max_product, max_so_far)\n    \n    return max_so_far",
        "num_ids": 176
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    curr_sum = 0\n    \n    for num in arr:\n        curr_sum += num\n        \n        if curr_product == 0:\n            curr_product = num\n        else:\n            curr_product *= num\n        \n        if curr_product > max_product:\n            max_product = curr_product\n        \n        if curr_sum < 0:\n            curr_product = 1\n            curr_sum = 0\n            \n    return max_product",
        "num_ids": 136
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = arr[0]\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product*arr[i])\n        max_product = max(max_product, curr_product)\n    return max_product",
        "num_ids": 100
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    max_ending_here = 0\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here + num)\n        curr_product = max(curr_product, max_ending_here)\n        max_product = max(max_product, curr_product)\n        \n    return max_product",
        "num_ids": 118
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    # Initialize variables\n    max_product = float('-inf')\n    product = 1\n    start = end = 0\n    \n    # Iterate over the array\n    for i, num in enumerate(arr):\n        product *= num\n        \n        if product > max_product:\n            max_product = product\n            start = i - (product / arr[i]).bit_length() + 1\n            end = i\n    \n    return arr[start:end+1]",
        "num_ids": 128
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = arr[0]\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product*arr[i])\n        max_product = max(max_product, curr_product)\n    return max_product",
        "num_ids": 100
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    # initialize variables\n    max_product = arr[0]\n    curr_max = arr[0]\n    curr_min = arr[0]\n\n    # loop through the array and update variables as necessary\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max * arr[i], curr_min * arr[i])\n        curr_min = min(arr[i], curr_max * arr[i], curr_min * arr[i])\n        max_product = max(max_product, curr_max)\n\n    return max_product",
        "num_ids": 188
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_product_ending_here = 1\n    for num in arr:\n        max_product_ending_here *= num\n        max_product = max(max_product, max_product_ending_here)\n        max_product_ending_here = max(max_product_ending_here, 1)\n    return max_product",
        "num_ids": 113
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0]*arr[1], arr[0], arr[1])\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        \n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here*arr[i], min_ending_here*arr[i])\n            min_ending_here = min(arr[i], max_ending_here*arr[i], min_ending_here*arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        \n        return max_so_far",
        "num_ids": 227
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if n not in i:\n            return False\n    return True",
        "num_ids": 50
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n\n    Args:\n        d (dict): the dictionary to check\n        n (int): the value to check for\n\n    Returns:\n        bool: True if all values are n, False otherwise\n    \"\"\"\n    return all(v == n for v in d.values())",
        "num_ids": 77
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function checks if all values in a dictionary are the same.\n\n    :param dictionary: A dictionary containing key-value pairs.\n    :param n: The value that all values in the dictionary should match.\n\n    :return: True if all values in the dictionary match n, False otherwise.\n    '''\n\n    # Get a list of all values in the dictionary.\n    values = dictionary.values()\n\n    # Check if all values in the list are the same as the given value.\n    if all(value == n for value in values):\n        return True\n    else:\n        return False",
        "num_ids": 131
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dictionary, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # check if dictionary is empty\n    if not dictionary:\n        return False\n    \n    # check if all values are same\n    values = list(dictionary.values())\n    if len(values) == 1:\n        return True\n    \n    # check if all values are same in the first n values\n    for i in range(n):\n        if values[i]!= values[0]:\n            return False\n        \n    return True",
        "num_ids": 112
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set(dict.values())\n    if len(value_set) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(value == values[0] for value in values)",
        "num_ids": 49
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return len(set(values)) == 1",
        "num_ids": 49
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    for i in range(1, n):\n        if values[0]!= values[i]:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function takes a dictionary and a value n as arguments.\n    It checks if all the values in the dictionary are the same as n.\n    '''\n    value_list = list(dictionary.values())\n    if len(set(value_list)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(values[0] == val for val in values[1:])",
        "num_ids": 55
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with all the empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 68
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary\n    with all the empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 70
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None}",
        "num_ids": 44
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary with empty items removed.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 66
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n\n    # Initialize the maximum product and the current maximum\n    max_product = arr[0]\n    curr_max = arr[0]\n\n    # Iterate through the array and update the maximum product\n    for i in range(1, n):\n        if arr[i] < curr_max:\n            curr_max = arr[i]\n        else:\n            curr_max, prev_max = arr[i], curr_max\n            max_product = max(max_product, prev_max * curr_max)\n\n    return max_product",
        "num_ids": 167
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 1\n        elif max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far",
        "num_ids": 129
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return None\n    max_product = arr[0]\n    curr_max = arr[0]\n    curr_min = arr[0]\n    for i in range(1, n):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n        elif arr[i] < curr_min:\n            curr_min = arr[i]\n        max_product = max(max_product, curr_max * curr_min)\n    return max_product",
        "num_ids": 126
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        max_so_far = arr[0]\n        \n        for i in range(1, n):\n            temp = max_ending_here\n            max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n            min_ending_here = min(arr[i], temp * arr[i], min_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n            \n        return max_so_far",
        "num_ids": 210
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        elif arr[i] > max_so_far:\n            max_so_far = arr[i]\n            \n        if arr[i] < min_ending_here * arr[i]:\n            min_ending_here = arr[i]\n    \n    return max_so_far",
        "num_ids": 179
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far",
        "num_ids": 166
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize variables to store maximum product and maximum subsequence sum\n    max_product = float('-inf')\n    max_subseq_sum = arr[0]\n    \n    # Traverse the array and update maximum subsequence sum and maximum product\n    for i in range(1, n):\n        if arr[i] > max_subseq_sum:\n            max_subseq_sum = arr[i]\n        else:\n            max_product = max(max_product, max_subseq_sum)\n            max_subseq_sum = arr[i]\n            \n    # Check if the maximum product is the maximum possible product\n    if max_subseq_sum > 0:\n        max_product = max(max_product, arr[n-1] * max_subseq_sum)\n        \n    return max_product",
        "num_ids": 198
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return arr[0]\n\n    if n == 2:\n        return max(arr[0] * arr[1], arr[0], arr[1])\n\n    # Initialize the maximum product and the maximum subarray product\n    max_product = arr[0]\n    max_subarray_product = arr[0]\n\n    # Initialize the minimum element and the minimum subarray product\n    min_element = arr[0]\n    min_subarray_product = arr[0]\n\n    # Loop through the array\n    for i in range(1, n):\n        # Update the maximum subarray product if the current element is greater than the previous maximum\n        if arr[i] > max_subarray_product:\n            max_subarray_product = arr[i]\n        else:\n            # Update the minimum subarray product if the current element is less than the previous minimum\n            if arr[i] < min_subarray_product:\n                min_subarray_product = arr[i]\n\n        # Update the maximum product if the maximum subarray product is greater than the current maximum product\n        if max_subarray_product > max_product:\n            max_product = max_subarray_product\n\n        # Update the minimum element and the maximum subarray product if the minimum subarray product is less than the current minimum element\n        if min_subarray_product < min_element:\n            min_element = min_subarray_product\n            max_subarray_product = min_subarray_product\n\n    return max_product",
        "num_ids": 374
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function returns the maximum product of subsequence formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables to store max and min of subsequence\n    max_subseq = arr[0]\n    min_subseq = arr[0]\n\n    # Initialize variables to store the maximum product and maximum subsequence\n    max_product = arr[0]\n    max_subseq_product = arr[0]\n\n    # Traverse the array and update max and min subsequence and max product\n    for i in range(1, n):\n        if arr[i] > max_subseq:\n            max_subseq = arr[i]\n        if arr[i] < min_subseq:\n            min_subseq = arr[i]\n        current_product = max_subseq * min_subseq\n        if current_product > max_product:\n            max_product = current_product\n            max_subseq_product = max_subseq\n\n    return max_subseq_product",
        "num_ids": 255
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Create an empty list to store the increasing subsequence\n    inc_seq = []\n\n    # Initialize variables for the maximum product and the index of the previous element\n    max_prod = arr[0]\n    prev_idx = 0\n\n    # Loop through the array and find the increasing subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[prev_idx]:\n            inc_seq.append(arr[i])\n            max_prod = max(max_prod, arr[i]*max(inc_seq))\n        else:\n            prev_idx = i\n            inc_seq = []\n\n    # Return the maximum product\n    return max_prod",
        "num_ids": 179
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_list = []\n    for i in range(len(test_tup)-1):\n        sum_list.append(test_tup[i] + test_tup[i+1])\n    return sum_list",
        "num_ids": 83
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return res",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return res",
        "num_ids": 77
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "num_ids": 50
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product",
        "num_ids": 54
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product",
        "num_ids": 53
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result",
        "num_ids": 54
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_product_modulo(arr, n):\n    \"\"\"\n    This function takes an array of integers and finds the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n",
        "num_ids": 56
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr: \n        product = (product * i) % n\n    return product\n",
        "num_ids": 55
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product = product % n\n    return product",
        "num_ids": 41
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product",
        "num_ids": 60
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n",
        "num_ids": 37
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers,\n    otherwise it returns False.\n    \"\"\"\n    for i in range(len(l)-1):\n        if abs(l[i] - l[i+1]) == 1:\n            return True\n    return False",
        "num_ids": 74
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and checks whether the list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n\n    return False",
        "num_ids": 77
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False",
        "num_ids": 64
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive_flag = False\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            consecutive_flag = True\n            break\n    return consecutive_flag",
        "num_ids": 76
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n        \n    return False",
        "num_ids": 77
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 62
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 43
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if it contains consecutive numbers, False otherwise.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 72
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the tuple lists into sets to find the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection and return as a list of tuples\n    return list(set1 & set2)",
        "num_ids": 97
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the intersection of tuples in two lists, regardless of order.\n    \"\"\"\n    set1 = set(tuple(sorted(i)) for i in test_list1)\n    set2 = set(tuple(sorted(i)) for i in test_list2)\n    intersection = set1.intersection(set2)\n    return [list(i) for i in intersection]",
        "num_ids": 97
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return intersection",
        "num_ids": 79
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection_set = set1 & set2\n    \n    # Convert the set back to a list of tuples\n    intersection_list = [(x, y) for x, y in intersection_set]\n    \n    return intersection_list",
        "num_ids": 128
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set of tuples from the first list to remove duplicates\n    set1 = set(test_list1)\n\n    # Create a set of tuples from the second list to remove duplicates\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set of tuples back to a list of tuples\n    result_list = list(intersection)\n\n    return result_list",
        "num_ids": 140
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    intersection = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2 or tuple1 == tuple(reversed(tuple2)) or tuple2 == tuple(reversed(tuple1)):\n                intersection.append(tuple1)\n\n    return intersection",
        "num_ids": 107
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return intersection",
        "num_ids": 79
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return intersection",
        "num_ids": 75
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1 & set2",
        "num_ids": 72
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1.intersection(set2))",
        "num_ids": 77
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)",
        "num_ids": 42
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The string in which characters are to be replaced.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old character.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n\n    # Initialize an empty string to store the modified string.\n    new_str = \"\"\n\n    # Iterate through each character in the string.\n    for char in str1:\n        # If the character matches the character to be replaced, replace it with the new character.\n        if char == ch:\n            new_str += newch\n        # If the character doesn't match, add it to the modified string.\n        else:\n            new_str += char\n\n    # Return the modified string.\n    return new_str",
        "num_ids": 189
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str",
        "num_ids": 75
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces the character ch with the character newch in the given string.\n    \"\"\"\n    return str1.replace(ch, newch)\n",
        "num_ids": 48
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 37
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a given string'str1' with a new character 'newch'.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 58
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1",
        "num_ids": 53
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = ''\n    for i in str1:\n        if i == ch:\n            result += newch\n        else:\n            result += i\n    return result",
        "num_ids": 61
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a given character in a string with a new character.\n    \"\"\"\n    new_str = ''\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str",
        "num_ids": 76
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a given character ch in a string str1 with a new character newch.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 53
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "num_ids": 62
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))",
        "num_ids": 54
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "num_ids": 69
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    return counter.most_common()",
        "num_ids": 46
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))",
        "num_ids": 50
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "num_ids": 62
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num",
        "num_ids": 59
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]",
        "num_ids": 48
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum((min(nums), max(nums)))",
        "num_ids": 44
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    return smallest + largest",
        "num_ids": 77
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest",
        "num_ids": 51
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes in a list of numbers and returns the sum of the largest and smallest value in the list.\n    \"\"\"\n    return max(nums) + min(nums)",
        "num_ids": 46
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num\n\nprint(big_sum([1, 2, 3, 4, 5])) # Output: 10\nprint(big_sum([5, 4, 3, 2, 1])) # Output: 10\nprint(big_sum([10, 20, 30, 40, 50])) # Output: 150",
        "num_ids": 147
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as an input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    # Find the minimum and maximum values in the array\n    min_num = min(nums)\n    max_num = max(nums)\n    # Return the sum of the minimum and maximum values\n    return min_num + max_num",
        "num_ids": 86
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest",
        "num_ids": 51
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest",
        "num_ids": 51
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n    \"\"\"\n    return string.lower()",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns a string in lower case.\n    '''\n    return string.lower()",
        "num_ids": 34
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lower case.\n    '''\n    return string.islower()",
        "num_ids": 42
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and returns True if the string is in lowercase, otherwise, it returns False.\n    '''\n    if string.lower() == string:\n        return True\n    else:\n        return False",
        "num_ids": 55
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as an argument and returns True if the string is in lower case and False if it is not.\n    \"\"\"\n    return string.islower()",
        "num_ids": 45
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 29
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Use regex to find all substrings that contain at least one lowercase letter\n    lowercase_substrings = re.findall(r'(?i)[a-z]+', string)\n    \n    # Replace each lowercase substring with an empty string\n    for substring in lowercase_substrings:\n        string = string.replace(substring, '')\n    \n    return string",
        "num_ids": 82
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?<!\\w)[a-z]+(?!\\w)')\n    return pattern.sub('', str1)",
        "num_ids": 62
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Find all lowercase substrings using regex\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    # Create a list of all non-lowercase substrings\n    non_lowercase_substrings = [s for s in re.split(r'\\b[a-z]+\\b', str1) if s.strip()!= '']\n    # Combine the non-lowercase substrings with the lowercase substrings\n    result = ''.join(non_lowercase_substrings + lowercase_substrings)\n    return result",
        "num_ids": 131
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[a-z]+\\b')  # pattern to match lowercase substrings\n    return pattern.sub('', str1)  # replace matched substrings with empty string",
        "num_ids": 75
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)",
        "num_ids": 65
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)",
        "num_ids": 58
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)",
        "num_ids": 50
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)",
        "num_ids": 39
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b\\w*[a-z]\\w*\\b')\n    return pattern.sub('', str1)",
        "num_ids": 61
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    # Find all substrings that contain only lowercase letters\n    matches = re.findall(r'\\b[a-z]+\\b', str1, re.IGNORECASE)\n    # Remove the matches from the original string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1",
        "num_ids": 97
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10 ** (len(str(n)) - 1) % 10",
        "num_ids": 50
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function returns the first digit of the given number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)",
        "num_ids": 55
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:  # If the number is negative, remove the minus sign\n        n *= -1\n    return n // 10**((len(str(n)))-1)  # Get the first digit by dividing by 10 raised to the power of the number of digits minus 1.",
        "num_ids": 97
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_digit(n):\n    \"\"\"\n    Returns the first digit of a given number.\n    \"\"\"\n    return n // 10**((len(str(n))) - 1)",
        "num_ids": 41
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its first digit.\n\n    :param n: integer\n    :return: first digit of n\n    \"\"\"\n    if n < 0:\n        n = -n\n    return n // 10**(len(str(n))-1)",
        "num_ids": 69
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10**((len(str(n)))-1)",
        "num_ids": 47
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    This function finds the first digit of a given number.\n\n    Args:\n    n: integer, the number whose first digit needs to be found.\n\n    Returns:\n    int: the first digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)",
        "num_ids": 86
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return int(str(n)[0])",
        "num_ids": 39
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_digit(n):\n    '''\n    This function returns the first digit of a given number.\n    '''\n    # Convert the given number to string\n    n = str(n)\n    # Extract the first digit of the number\n    first_digit = n[0]\n    # Return the first digit\n    return first_digit",
        "num_ids": 68
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_digit(n):\n    \"\"\"\n    Returns the first digit of a number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "num_ids": 64
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_nums = []\n    for num in list:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 61
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_odd(lst):\n    \"\"\"\n    Takes a list of integers and returns a new list containing only the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]",
        "num_ids": 46
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd numbers.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst",
        "num_ids": 63
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, lst))",
        "num_ids": 44
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers",
        "num_ids": 61
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers",
        "num_ids": 64
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_odd(lst):\n    \"\"\"\n    Takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(lst):\n    \"\"\"\n    Returns a list of odd integers from the input list.\n    \"\"\"\n    return [n for n in lst if n % 2 == 1]",
        "num_ids": 39
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list",
        "num_ids": 64
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 96
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_n - sum_cubes",
        "num_ids": 92
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer as an argument and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    return ((n*(n+1)//2)**2) - (n*(n+1)*(2*n+1)//6)",
        "num_ids": 74
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize the sum of cubes and the sum of the first n natural numbers to 0.\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Loop through the first n natural numbers and add them to the sum_natural variable.\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    # Loop through the first n natural numbers and add the cube of each number to the sum_cubes variable.\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Return the difference between the sum of cubes and the sum of the first n natural numbers.\n    return sum_natural - sum_cubes",
        "num_ids": 194
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n",
        "num_ids": 101
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n\n    # calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n\n    # find the difference between the two sums\n    result = abs(sum_numbers - sum_cubes)\n\n    return result",
        "num_ids": 129
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 61
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 100
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 105
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # First n natural numbers\n    natural_numbers = list(range(1, n+1))\n    # Sum of the first n natural numbers\n    sum_natural_numbers = sum(natural_numbers)\n    # Sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    # Difference between the sum of cubes and the sum of natural numbers\n    return sum_cubes - sum_natural_numbers",
        "num_ids": 146
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    # initialize count to 0\n    count = 0\n    \n    # iterate through all pairs of elements in A\n    for i in range(N):\n        for j in range(i+1, N):\n            # check if the xor value of the pair is odd\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    \n    return count",
        "num_ids": 90
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    This function will count the number of pairs whose xor value is odd.\n    A: List of integers\n    N: Length of the list A\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 94
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])&1:\n                count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    This function takes a string as an argument and returns a new string with the case of all characters toggled.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 98
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "num_ids": 75
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "num_ids": 75
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function finds the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    for digit in str(n1) + str(n2):\n        diff_sum += abs(int(digit) - int(n1) // 10**(len(str(n1)) - 1))\n    return diff_sum",
        "num_ids": 94
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    # Check if the integers have different lengths\n    if len(str1)!= len(str2):\n        print(\"Error: the two integers must have the same number of digits.\")\n        return\n    # Compute the sum of the per-digit differences\n    diff_sum = 0\n    for i in range(len(str1)):\n        diff_sum += abs(int(str1[i]) - int(str2[i]))\n    return diff_sum",
        "num_ids": 157
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    # convert n1 and n2 to strings\n    n1 = str(n1)\n    n2 = str(n2)\n    # iterate through each digit in n1 and n2\n    for i in range(len(n1)):\n        # find the absolute difference between the two digits\n        diff = abs(int(n1[i]) - int(n2[i]))\n        # add the absolute difference to the sum\n        sum += diff\n    return sum",
        "num_ids": 139
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_digits = [int(digit) for digit in n1_str]\n    n2_digits = [int(digit) for digit in n2_str]\n    diff_sum = sum([abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits)])\n    return diff_sum",
        "num_ids": 144
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers into strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Initialize variables for the sum and the number of digits\n    digit_sum = 0\n    num_digits = 0\n\n    # Loop through each digit in the strings and calculate the difference\n    for i in range(len(str1)):\n        digit_diff = abs(int(str1[i]) - int(str2[i]))\n        digit_sum += digit_diff\n        num_digits += 1\n\n    # Return the sum of the per-digit differences\n    return digit_sum",
        "num_ids": 165
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Calculate the sum of per-digit differences\n    diff_sum = 0\n    for i in range(len(n1_str)):\n        diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n\n    return diff_sum",
        "num_ids": 126
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    # convert the integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # find the length of the strings\n    len1 = len(s1)\n    len2 = len(s2)\n    \n    # initialize a variable to store the sum of the per-digit difference\n    total_diff = 0\n    \n    # loop through the digits of the strings\n    for i in range(len1):\n        # get the digit at index i from both strings\n        digit1 = int(s1[i])\n        digit2 = int(s2[i])\n        \n        # add the absolute difference of the digits to the total difference\n        total_diff += abs(digit1 - digit2)\n    \n    # return the total difference\n    return total_diff",
        "num_ids": 200
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between the two integers.\n    '''\n    # Convert the integers to strings to be able to iterate over the characters\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Initialize a variable to store the sum of the per-digit difference\n    distance = 0\n\n    # Iterate over the characters of the strings and compute the per-digit difference\n    for i in range(len(s1)):\n        distance += abs(int(s1[i]) - int(s2[i]))\n\n    return distance",
        "num_ids": 144
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    diff_sum = 0\n    for i in range(len(n1_digits)):\n        diff_sum += abs(n1_digits[i] - n2_digits[i])\n    return diff_sum",
        "num_ids": 122
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    # Find the absolute difference between n1 and n2\n    diff = abs(n1 - n2)\n    # Convert diff to a string so we can iterate over its digits\n    diff_str = str(diff)\n    # Iterate over each digit in diff_str and add the absolute difference between the digit and 0 to the sum\n    for digit in diff_str:\n        sum_diff += abs(int(digit) - 0)\n    return sum_diff",
        "num_ids": 142
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function finds the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 118
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    max_end = a[0]\n    for i in range(1, size):\n        max_end = max(a[i], max_end + a[i])\n        max_sum = max(max_sum, max_end)\n    return max_sum",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n        \n    return max_sum",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 97
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')  # Initialize max_so_far to negative infinity\n    max_ending_here = 0  # Initialize max_ending_here to zero\n\n    for i in range(size):\n        max_ending_here += a[i]  # Add the element to the current sublist\n        if max_ending_here > max_so_far:  # If the current sublist is greater than max_so_far\n            max_so_far = max_ending_here  # Update max_so_far\n\n    return max_so_far  # Return max_so_far",
        "num_ids": 148
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far",
        "num_ids": 97
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n    current_sum = 0  # Initialize current_sum to 0\n    \n    for i in range(size):\n        current_sum += a[i]  # Add the current element to current_sum\n        \n        # If current_sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If current_sum becomes negative, reset it to 0 (as we are looking for contiguous sublist)\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum",
        "num_ids": 178
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the union of the elements of two given tuples and outputs them in sorted order.\n    \"\"\"\n    # Finding the union of the elements of the two tuples\n    union_tup = tuple(set(test_tup1).union(set(test_tup2)))\n    \n    # Sorting the elements of the union tuple\n    sorted_tup = sorted(union_tup)\n    \n    # Outputting the sorted union tuple\n    print(sorted_tup)",
        "num_ids": 112
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples as input and returns the union of the elements of the two tuples.\n    The union of two sets is the set of all elements that are present in either of the sets.\n    \"\"\"\n    # Convert the tuples to sets to find the union of the elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # Convert the union set to a sorted list and return it\n    union_list = sorted(list(union_set))\n    return union_list",
        "num_ids": 142
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_tup = tuple(set(test_tup1) | set(test_tup2))\n    \n    # Sort the union tuple in ascending order and print it\n    union_tup = sorted(union_tup)\n    print(union_tup)",
        "num_ids": 103
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple to a set (to remove duplicates) and back to a tuple\n    unique_tup = tuple(sorted(set(combined_tup)))\n    \n    # Return the unique tuple\n    return unique_tup",
        "num_ids": 109
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    return sorted(list(union_set))",
        "num_ids": 73
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    # Convert the combined tuple to a set to remove any duplicates\n    combined_set = set(combined_tup)\n    # Convert the set back to a tuple and sort it in ascending order\n    sorted_tup = tuple(sorted(combined_set))\n    # Output the sorted tuple\n    return sorted_tup",
        "num_ids": 127
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Finding the union of the elements of two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Converting the union set to a sorted tuple\n    union_tuple = tuple(sorted(union_set))\n    \n    return union_tuple",
        "num_ids": 104
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    sorted_union = sorted(list(union_set))\n    return sorted_union",
        "num_ids": 95
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their union of elements in sorted order.\n    \"\"\"\n    # Converting the tuples to sets to get the union of their elements\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Converting the set back to a sorted tuple and returning it\n    return tuple(sorted(union_set))",
        "num_ids": 98
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples\n    union_tup = tuple(set(test_tup1).union(set(test_tup2)))\n    # sort the elements of the union tuple in ascending order\n    union_tup = sorted(union_tup)\n    # print the sorted tuple\n    print(union_tup)",
        "num_ids": 110
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max(max_length, current_length)",
        "num_ids": 107
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_len:\n                max_len = len(lst[i:j])\n                \n    return max_len",
        "num_ids": 96
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            length = len(sub_lst)\n            if length > max_length:\n                max_length = length\n    return max_length",
        "num_ids": 82
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_max_length(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len",
        "num_ids": 78
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Find the length of the longest sublists in a given list.\n\n    Args:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The length of the longest sublist in the given list.\n    \"\"\"\n    max_len = 1  # initialize the maximum length to 1\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]  # get the sublist\n            if len(sublist) > max_len:\n                max_len = len(sublist)  # update the maximum length if necessary\n    return max_len",
        "num_ids": 155
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_max_length(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len",
        "num_ids": 76
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length",
        "num_ids": 78
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length",
        "num_ids": 95
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        current_length += 1\n        \n        if current_length > max_length:\n            max_length = current_length\n        \n        if i+1 == len(lst) or lst[i+1]!= lst[i]:\n            current_length = 0\n    \n    return max_length",
        "num_ids": 107
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    \n    return max_length",
        "num_ids": 76
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    # Use regex to find all occurrences of quotes and their corresponding values\n    values = re.findall(r'\"([^\"]*)\"', text)\n    \n    # Return the list of values\n    return values",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 50
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 54
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"', text)\n    return values",
        "num_ids": 49
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values",
        "num_ids": 54
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 50
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    count = 0 \n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count ",
        "num_ids": 57
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n):\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    count = 0\n\n    # Check all possible unordered pairs\n    for i in range(n):\n        for j in range(i+1, n):\n\n            # If both elements are unequal, increment count\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count\n",
        "num_ids": 100
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    This function takes a string as an input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 32
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters in the string.\n    \"\"\"\n    return list(word)\n",
        "num_ids": 35
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 23
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n    \"\"\"\n    return list(word)",
        "num_ids": 23
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    '''\n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        \n        # Add the digit to the sum\n        total += digit\n        \n        # Remove the last digit from the number\n        n = n // 10\n    \n    # Return the total sum of digits\n    return total",
        "num_ids": 116
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum",
        "num_ids": 73
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    else:\n        sum_n = 0\n        while n > 0:\n            sum_n += n % 10\n            n //= 10\n        return sum_n",
        "num_ids": 79
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Number should be non-negative.\")\n    else:\n        return sum(int(digit) for digit in str(n))",
        "num_ids": 61
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input should be a non-negative integer\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        while n!= 0:\n            digit = n % 10\n            sum += digit\n            n = n // 10\n        return sum",
        "num_ids": 98
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # convert n to string\n    n_str = str(n)\n    \n    # loop through each digit in the string and add it to sum\n    for digit in n_str:\n        sum += int(digit)\n        \n    return sum",
        "num_ids": 89
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Please provide a non-negative integer.\"\n    else:\n        sum = 0\n        while n!= 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum",
        "num_ids": 88
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 62
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum",
        "num_ids": 60
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    # Convert the integer to a string to iterate over its characters\n    digits = str(n)\n    # Initialize the sum variable to zero\n    sum_of_digits = 0\n    # Iterate over the characters in the string and add the corresponding integer value to the sum\n    for digit in digits:\n        sum_of_digits += int(digit)\n    # Return the final sum of digits\n    return sum_of_digits",
        "num_ids": 118
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(0, n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    :param list1: list to check\n    :return: True if the list is sorted, False otherwise\n    \"\"\"\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))",
        "num_ids": 76
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True",
        "num_ids": 64
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Returns True if the given list is sorted, False otherwise.\n    \"\"\"\n    return lst == sorted(lst)",
        "num_ids": 34
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function will check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n\n    # Check for the first element\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    return True",
        "num_ids": 75
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True",
        "num_ids": 91
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 77
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(0, n - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True",
        "num_ids": 72
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "num_ids": 45
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts",
        "num_ids": 51
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = {}\n    empty_list = []\n    for i in range(length):\n        empty_list.append(empty_dict)\n    return empty_list",
        "num_ids": 61
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function takes a list of lists as input and sorts each sublist of strings in it.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 57
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()",
        "num_ids": 46
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()",
        "num_ids": 46
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n",
        "num_ids": 47
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "num_ids": 61
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1",
        "num_ids": 55
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return list(unique_nums)",
        "num_ids": 64
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums",
        "num_ids": 75
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums = unique_nums.union(set(num_list))\n    return list(unique_nums)",
        "num_ids": 70
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return unique_nums",
        "num_ids": 61
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.update(num)\n    \n    unique_nums = list(unique_nums)\n    return unique_nums\n",
        "num_ids": 69
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes in a list of lists as input. It removes any duplicate numbers from the list and returns a tuple of two unique numbers from each list.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Loop through each list in the input list of lists\n    for lst in nums:\n        # Loop through each number in the list\n        for num in lst:\n            # Add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # Create two empty lists to store the unique numbers from each list\n    unique_nums1 = []\n    unique_nums2 = []\n    \n    # Loop through each list in the input list of lists\n    for lst in nums:\n        # Loop through each number in the list\n        for num in lst:\n            # Check if the number is in the set of unique numbers\n            if num in unique_nums:\n                # If it is, add it to the appropriate list based on which list it's in\n                if lst == nums[0]:\n                    unique_nums1.append(num)\n                else:\n                    unique_nums2.append(num)\n    \n    # Return a tuple of the two unique numbers from each list\n    return (unique_nums1[0], unique_nums2[0])",
        "num_ids": 290
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of numbers as an argument and returns two unique numbers from the list.\n    '''\n\n    # Create an empty set to store unique numbers from the list\n    unique_nums = set()\n\n    # Iterate over the list of numbers\n    for num in nums:\n        # Check if the number is already in the set\n        if num not in unique_nums:\n            # If not, add it to the set\n            unique_nums.add(num)\n\n    # Create a list of unique numbers from the set\n    unique_nums_list = list(unique_nums)\n\n    # If there are at least two unique numbers, return the first two\n    if len(unique_nums_list) >= 2:\n        return unique_nums_list[:2]\n    else:\n        # Otherwise, return an empty list\n        return []",
        "num_ids": 184
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)",
        "num_ids": 60
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns two unique numbers from it.\n    '''\n    unique_nums = list(set(nums))\n    return unique_nums[0], unique_nums[1]",
        "num_ids": 57
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(lst)\n    unique_nums = list(unique_nums)\n    return unique_nums",
        "num_ids": 48
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)  # get the unique numbers in the list\n    product = 1\n    for num in unique_numbers:\n        product *= num  # multiply the product with each unique number\n    return product",
        "num_ids": 85
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "num_ids": 86
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_list = list(set(list_data))  # creating a list of unique elements\n    product = 1\n    for num in unique_list:\n        product *= num  # multiplying all unique elements\n    return product",
        "num_ids": 58
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set()\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 85
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Function to find the surface area of a cylinder.\n    Input: radius r (float), height h (float)\n    Output: surface area of the cylinder (float)\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area",
        "num_ids": 79
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    '''\n    area = 2 * math.pi * r * (r + h)\n    return area",
        "num_ids": 91
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area",
        "num_ids": 65
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes in two arguments, the radius and height of a cylinder, and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area",
        "num_ids": 85
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area",
        "num_ids": 65
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 66
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n    '''\n    area_base = 2 * 3.14159 * r * h\n    area_side = 2 * 3.14159 * r**2\n    surface_area = area_base + 2 * area_side\n    return surface_area",
        "num_ids": 86
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Function to find the surface area of a cylinder.\n\n    Args:\n    r: float, radius of the cylinder.\n    h: float, height of the cylinder.\n\n    Returns:\n    float, the surface area of the cylinder.\n    '''\n\n    # Calculate the surface area of the cylinder using the formula\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n\n    return surface_area",
        "num_ids": 116
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Computes the surface area of a cylinder given its radius r and height h.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    '''\n\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area",
        "num_ids": 110
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the surface area of the cylinder.\n    '''\n    area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return area",
        "num_ids": 72
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks if the given list B is a sublist of the given list A.\n    \"\"\"\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == B[0]:\n            i = j = 0\n            while i < len(B) and j < len(A):\n                if A[j] == B[i]:\n                    i += 1\n                j += 1\n            if i == len(B):\n                return True\n        if A[mid] < B[0]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False",
        "num_ids": 163
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as input, A and B. \n    It returns True if A is a sublist of B, else it returns False.\n    '''\n    i = 0 \n    j = 0 \n    n = len(B) \n    m = len(A) \n  \n    # Loop through all substrings of B \n    while i < n: \n  \n        # If the current substring of B matches with A \n        if B[i:i+m] == A: \n            return True\n  \n        # If B's length is less than A's length \n        if m > n - i: \n            return False\n  \n        # If the current character doesn't match with A's first character \n        if B[i]!= A[0]: \n            i += 1\n            continue\n  \n        # Move the pointers to match the next characters in A and B \n        i += 1\n        j = 0 \n  \n        # If all characters in A and B match, then A is a sublist of B \n        while j < m and i < n and B[i] == A[j]: \n            i += 1\n            j += 1\n  \n    # If we reach here, it means A is not a sublist of B \n    return False",
        "num_ids": 266
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as input, A and B.\n    It checks whether A is a sublist of B or not.\n    '''\n    if len(A) > len(B): \n        return False \n    for i in range(len(B)-len(A)+1): \n        for j in range(len(A)): \n            if B[i+j]!= A[j]: \n                break \n        else: \n            return True \n    return False ",
        "num_ids": 108
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and checks whether the first list is a sublist of the second list or not.\n    \"\"\"\n    if len(B) < len(A):\n        return False\n\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n\n    return False",
        "num_ids": 95
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    if n>m:\n        return False\n    for i in range(n):\n        if A[i]!= B[i]:\n            return False\n    return True",
        "num_ids": 82
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function takes two lists A and B as input and returns True if B is a sublist of A, else False.\n    '''\n\n    if len(B) > len(A): \n        return False\n\n    for i in range(len(A)-len(B)+1): \n        for j in range(len(B)): \n            if A[i+j]!= B[j]: \n                break\n        else: \n            return True\n\n    return False",
        "num_ids": 106
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function checks whether B is a sublist of A or not.\n    \"\"\"\n    if B == []:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False",
        "num_ids": 91
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(B).issubset(set(A)): \n        return True \n    else: \n        return False",
        "num_ids": 56
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if A is a sublist of B, and False otherwise.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    \n    start = 0\n    for i in range(len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n        \n    return False",
        "num_ids": 99
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list B is a sublist of list A or not.\n    \"\"\"\n    if B == []:\n        return True\n    if A == []:\n        return False\n    \n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n    else:\n        return is_Sub_Array(A[1:], B)",
        "num_ids": 96
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function returns the last digit in factorial of a given number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact % 10",
        "num_ids": 85
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10",
        "num_ids": 64
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    # Find the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # Return the last digit of the factorial\n    return int(str(fact)[-1])",
        "num_ids": 72
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the factorial variable to 1\n    factorial = 1\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Multiply the factorial by the current number\n        factorial *= i\n    # Convert the factorial to a string and take the last digit\n    last_digit = int(str(factorial)[-1])\n    # Return the last digit\n    return last_digit",
        "num_ids": 127
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    # Finding the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        \n    # Finding the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit",
        "num_ids": 71
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        \n    last_digit = factorial % 10\n    return last_digit",
        "num_ids": 72
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Returns the last digit in the factorial of a given number n.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "num_ids": 61
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit",
        "num_ids": 72
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "num_ids": 64
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact % 10",
        "num_ids": 75
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check that the input lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('The input lists must have the same length.')\n        \n    # Create an empty list to store the interleaved values\n    result = []\n    \n    # Loop over the input lists and append their values to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        \n    return result",
        "num_ids": 162
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('All lists must have the same length')\n\n    # Create a list to hold the interleaved values\n    interleaved_list = []\n\n    # Iterate over the indices of the first list\n    for i in range(len(list1)):\n        # Append the values from the three lists at this index\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list",
        "num_ids": 181
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for tup in zip(list1, list2, list3) for x in tup]",
        "num_ids": 63
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 88
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Interleaves the three input lists into a single flat list.\n    '''\n    # Check that all three lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('All three input lists must have the same length.')\n    \n    # Create an empty list to store the interleaved elements\n    result = []\n    \n    # Loop through the three input lists, appending each element to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result",
        "num_ids": 158
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All input lists must be of the same length.\")\n    return [x for pair in zip(list1, list2, list3) for x in pair]",
        "num_ids": 100
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n    return dissimilar_list",
        "num_ids": 90
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Convert the tuples to sets to easily compare them\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n    \n    # Find the dissimilar elements by comparing the sets\n    dissimilar_elements = set_tup1.symmetric_difference(set_tup2)\n    \n    return dissimilar_elements",
        "num_ids": 111
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(i)\n    return result",
        "num_ids": 81
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop over the elements in the first tuple\n    for elem1 in test_tup1:\n        # Check if the element is not in the second tuple\n        if elem1 not in test_tup2:\n            # Add the element to the set\n            dissimilar_set.add(elem1)\n\n    # Loop over the elements in the second tuple\n    for elem2 in test_tup2:\n        # Check if the element is not in the first tuple\n        if elem2 not in test_tup1:\n            # Add the element to the set\n            dissimilar_set.add(elem2)\n\n    # Return the set of dissimilar elements\n    return dissimilar_set",
        "num_ids": 196
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty set to store the dissimilar elements\n    dissimilar_elements = set()\n\n    # Loop through each element in the first tuple\n    for elem1 in test_tup1:\n        # Check if the element is not in the second tuple\n        if elem1 not in test_tup2:\n            dissimilar_elements.add(elem1)\n\n    # Loop through each element in the second tuple\n    for elem2 in test_tup2:\n        # Check if the element is not in the first tuple\n        if elem2 not in test_tup1:\n            dissimilar_elements.add(elem2)\n\n    # Return the set of dissimilar elements\n    return dissimilar_elements",
        "num_ids": 180
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of dissimilar elements.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 96
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the dissimilar elements.\n    '''\n    dissimilar_tup = tuple(set(test_tup1) ^ set(test_tup2))\n    return dissimilar_tup",
        "num_ids": 69
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the dissimilar elements in both the tuples.\n    '''\n    dissimilar_tup1 = ()\n    dissimilar_tup2 = ()\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_tup1 += (test_tup1[i],)\n            dissimilar_tup2 += (test_tup2[i],)\n    \n    return dissimilar_tup1, dissimilar_tup2",
        "num_ids": 131
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            result.append(even_fnc(i))\n        elif even_fnc(i):\n            result.append(i)\n    return tuple(result)\n",
        "num_ids": 90
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_fnc(item))\n        else:\n            new_tuple.append(item)\n    return tuple(new_tuple)\n\ndef is_even(num):\n    '''\n    Check if the given number is even.\n    '''\n    return num % 2 == 0\n\ndef test_even_ele():\n    '''\n    Test the function even_ele().\n    '''\n    test_tuple = ((1, 2, 3), 4, (5, 6, 7))\n    print(\"Original tuple:\", test_tuple)\n    new_tuple = even_ele(test_tuple, is_even)\n    print(\"New tuple:\", new_tuple)\n\nif __name__ == \"__main__\":\n    test_even_ele()",
        "num_ids": 222
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        new_list = []\n        for ele in tup:\n            if even_fnc(ele):\n                new_list.append(ele)\n        new_tuple.append(tuple(new_list))\n    return tuple(new_tuple)",
        "num_ids": 99
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n        elif isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            new_list = []\n            for sub_item in item:\n                if even_fnc(sub_item):\n                    new_list.append(sub_item)\n            new_tuple.append(new_list)\n        else:\n            new_tuple.append(item)\n    return new_tuple",
        "num_ids": 164
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes a nested tuple as input and applies the even_fnc to every element.\n    If the even_fnc returns True for an element, it is kept in the new tuple.\n    If the even_fnc returns False for an element, it is removed from the new tuple.\n    \"\"\"\n    new_tuple = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            new_tuple.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return tuple(new_tuple)\n",
        "num_ids": 149
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], list):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        elif even_fnc(test_tuple[i]):\n            continue\n        else:\n            test_tuple.pop(i)\n    return test_tuple",
        "num_ids": 109
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == tuple:\n            new_tuple.append(even_ele(test_tuple[i], even_fnc))\n        elif even_fnc(test_tuple[i]):\n            new_tuple.append(test_tuple[i])\n    return tuple(new_tuple)",
        "num_ids": 121
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return ([[even_fnc(elem) for elem in sub_tuple] for sub_tuple in test_tuple if all(isinstance(elem, int) for elem in sub_tuple)])",
        "num_ids": 76
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            sub_tuple = even_fnc(i)\n            if len(sub_tuple) > 0:\n                new_tuple.append(sub_tuple)\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return tuple(new_tuple)",
        "num_ids": 117
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        if type(i) == tuple:\n            new_tuple += even_ele(i, even_fnc)\n        elif even_fnc(i):\n            new_tuple += (i,)\n    return new_tuple",
        "num_ids": 95
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b,h):\n    '''\n    This function takes the base edge b and height h of a square pyramid as input and returns its surface area.\n    '''\n    area = (6*b*h) + (4*b*b)\n    return area",
        "num_ids": 59
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    base_area = b * b\n    \n    # Calculate the area of the square on top of the base\n    square_area = (b * s) - (b * b) / 2\n    \n    # Calculate the area of the pyramid\n    pyramid_area = (b * b * s) / 3\n    \n    # Calculate the total surface area\n    total_area = 4 * base_area + 2 * square_area + 4 * pyramid_area\n    \n    return total_area",
        "num_ids": 148
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    base_area = 2 * b * s\n\n    # Calculate the area of the slant of the pyramid\n    slant_area = 2 * b * s * 2/3\n\n    # Calculate the area of the top of the pyramid\n    top_area = b * b\n\n    # Calculate the total surface area\n    total_area = base_area + slant_area + top_area\n\n    return total_area",
        "num_ids": 135
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 6 * (b**2) + 4 * (s**2)\n    return area",
        "num_ids": 60
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Calculates the surface area of a square pyramid with base edge b and height s.\n    '''\n    area = 4 * b * s + 2 * (b * b + s * s)\n    return area",
        "num_ids": 57
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s) + (2*s*b)",
        "num_ids": 54
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of each face of the square pyramid\n    area1 = b * s\n    area2 = (b * s) / 2\n    area3 = b * b\n    area4 = (b * s) / 2\n    # calculate the total surface area of the pyramid\n    total_area = 4 * area1 + 4 * area2 + 2 * area3 + 2 * area4\n    return total_area",
        "num_ids": 132
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(base_edge, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid with a given base edge and height.\n\n    Parameters:\n    base_edge (float): The length of one side of the square base of the pyramid.\n    height (float): The height of the pyramid.\n\n    Returns:\n    float: The surface area of the pyramid.\n    \"\"\"\n    # Calculate the area of the square base\n    area_base = base_edge ** 2\n\n    # Calculate the area of the square faces\n    area_face = 4 * (base_edge ** 2) / 3\n\n    # Calculate the area of the triangular faces\n    area_tri = 2 * base_edge * height\n\n    # Calculate the total surface area\n    surface_area = 2 * area_base + area_face + 4 * area_tri\n\n    return surface_Area",
        "num_ids": 189
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes two arguments: b, the base edge of the square pyramid; s, the height of the pyramid. \n    The function returns the surface area of the pyramid.\n    '''\n    # Calculate the area of the square base\n    area_base = 4 * (b ** 2)\n    # Calculate the area of the square face of the pyramid\n    area_face = 2 * (b ** 2)\n    # Calculate the area of the triangle on the top of the pyramid\n    area_triangle = (b * s) / 2\n    # Calculate the total surface area of the pyramid\n    total_area = area_base + area_face + area_triangle\n    # Return the total surface area\n    return total_area",
        "num_ids": 170
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes in the base edge and height of a square pyramid and returns the surface area of the pyramid.\n    '''\n    # Calculate the surface area of the base\n    base_area = 4 * base_edge**2\n\n    # Calculate the surface area of the slant of the pyramid\n    slant_area = (base_edge/2) * height\n\n    # Calculate the surface area of the pyramid\n    pyramid_area = (base_edge**2) + (base_edge/2) * height\n\n    # Calculate the total surface area of the pyramid\n    total_area = base_area + 2*slant_area + pyramid_area\n\n    return total_area",
        "num_ids": 162
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty.\n    If the dictionary is empty, it returns True, else it returns False.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 39
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and returns True if it is empty, otherwise, it returns False.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")",
        "num_ids": 48
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not bool(dict1):\n        return True\n    else:\n        return False",
        "num_ids": 41
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 39
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \"\"\"\n    if dict1:\n        print(\"Dictionary is not empty.\")\n    else:\n        print(\"Dictionary is empty.\")",
        "num_ids": 46
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        return True\n    else:\n        return False",
        "num_ids": 41
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result",
        "num_ids": 85
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    :param n: The index of the Catalan number to return (0-indexed).\n    :return: The nth Catalan number.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        c = [0] * (n + 1)\n        c[0] = 1\n        c[1] = 1\n        for i in range(2, n + 1):\n            c[i] = 0\n            for j in range(i):\n                c[i] += c[j] * c[i - j - 1]\n        return c[n]",
        "num_ids": 163
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result",
        "num_ids": 79
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (2*num-1) / num",
        "num_ids": 73
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    c = [1] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1):\n            c[i + 1] += c[j] * c[i - j]\n\n    return c[n]\n",
        "num_ids": 83
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result",
        "num_ids": 85
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = [1] * (num+1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num+1):\n            for j in range(i):\n                catalan[i] = catalan[i] + ((2*j+1)*(catalan[j]))\n        return catalan[num]",
        "num_ids": 139
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number using a recursive approach.\n\n    :param n: An integer indicating the position of the Catalan number in the sequence.\n    :return: An integer representing the nth Catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result",
        "num_ids": 115
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, num+1):\n            result *= (2*i)/(i+1)\n        return result",
        "num_ids": 72
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    c = 1\n    for i in range(2, n+1):\n        c = (2*i - 1)*c//i\n    return c",
        "num_ids": 59
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.group(), match.start()))\n    return adverbs",
        "num_ids": 71
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns the first adverb ending with \"ly\" and its starting and ending positions in the string.\n    '''\n    adverb = re.search(r'\\b\\w+ly\\b', text)\n    if adverb:\n        return f\"Adverb ending with 'ly' found at positions {adverb.start()} to {adverb.end()-1}.\"\n    else:\n        return \"No adverb ending with 'ly' found in the string.\"",
        "num_ids": 121
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    \"\"\"\n    # Use regex to find all adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # If no adverbs ending with \"ly\" are found, return None\n    if not adverbs:\n        return None\n\n    # Find the position of the first adverb ending with \"ly\"\n    pos = text.index(adverbs[0])\n\n    return pos, adverbs[0]",
        "num_ids": 138
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match.group())\n        print(match.start(), match.end())",
        "num_ids": 84
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        adverb = match.group()\n        print(f\"Adverb: {adverb}, Position: {start}-{end}\")\n        return",
        "num_ids": 106
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all adverbs ending with \"ly\"\n    adverbs = re.findall(r\"\\b(\\w*ly)\\b\", text)\n    \n    # If no adverbs ending with \"ly\" are found, return an empty list\n    if not adverbs:\n        return []\n    \n    # Find the positions of the first adverb ending with \"ly\"\n    positions = [m.start() for m in re.finditer(re.escape(adverbs[0]), text)]\n    \n    # Return the first adverb and its positions as a tuple\n    return (adverbs[0], positions[0])",
        "num_ids": 145
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group() +'found at index'+ str(match.start())\n    else:\n        return 'No adverb ending with \"ly\" found in the text.'",
        "num_ids": 104
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "num_ids": 88
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    \"\"\"\n    pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start, end = match.span()\n        return adverb, start, end\n    else:\n        return None",
        "num_ids": 96
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns the first adverb ending with 'ly' and its positions in the string.\n    '''\n\n    # Use regular expression to find all adverbs ending with 'ly'\n    adverb_pattern = re.compile(r'\\b\\w+ly\\b')\n    adverbs = adverb_pattern.findall(text)\n\n    # If no adverbs ending with 'ly' are found, return None\n    if not adverbs:\n        return None\n\n    # Extract the first adverb ending with 'ly' and its position in the string\n    first_adverb = adverbs[0]\n    position = text.find(first_adverb)\n\n    # Return the first adverb and its position\n    return first_adverb, position",
        "num_ids": 181
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in two arguments:\n    1. items - a list of dictionaries, where each dictionary represents a product and contains its name and price.\n    2. n - an integer indicating the number of most expensive items to be returned.\n    \n    It returns a list of the n most expensive items in the dataset.\n    '''\n\n    # Create a heap to store the items based on their price.\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    # Pop the n most expensive items from the heap and append them to the result list.\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result",
        "num_ids": 174
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): a list of tuples where each tuple contains the name of an item and its price\n    n (int): the number of most expensive items to return\n\n    Returns:\n    list: a list of the n most expensive items, sorted by price in descending order\n    '''\n\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n\n    # Iterate over the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, (item[1], item[0]))\n\n        # If the heap size exceeds n, remove the least expensive item\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items, sorted by price in descending order\n    return [item[1] for item in sorted(heap, reverse=True)]",
        "num_ids": 215
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return [item for item in reversed(heap)]",
        "num_ids": 90
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n\n    return [heapq.heappop(heap)[1] for i in range(n)]\n\nitems = [\n    {'name': 'banana', 'price': 1.5},\n    {'name': 'apple', 'price': 2},\n    {'name': 'orange', 'price': 1.8},\n    {'name': 'pear', 'price': 3},\n    {'name': 'grape', 'price': 2.5},\n    {'name': 'pineapple', 'price': 2.2},\n    {'name': 'watermelon', 'price': 4},\n    {'name': 'kiwi', 'price': 3.5},\n]\n\nprint(expensive_items(items, 3))",
        "num_ids": 226
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the items in order of increasing price\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    \n    # Pop the n most expensive items off the heap and return them\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result",
        "num_ids": 123
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap with the first n items in the list.\n    heap = items[:n]\n    heapq.heapify(heap)\n\n    # Iterate through the remaining items in the list and compare their price to the smallest item in the heap.\n    for item in items[n:]:\n        if item[1] > heap[0][1]:\n            # If the item is more expensive than the smallest item in the heap, replace it.\n            heapq.heapreplace(heap, item)\n\n    # Sort the heap in descending order and return the n most expensive items.\n    return sorted(heap, key=lambda x: x[1], reverse=True)[:n]",
        "num_ids": 179
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 82
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    return [heapq.heappop(heap)[1] for i in range(n)]\n\nitems = [\n    {'name': 'banana', 'price': 1.5},\n    {'name': 'apple', 'price': 2.5},\n    {'name': 'orange', 'price': 1.7},\n    {'name': 'pear', 'price': 2.2},\n    {'name': 'grape', 'price': 3.2},\n    {'name': 'watermelon', 'price': 5.0},\n]\n\nprint(expensive_items(items, 3))",
        "num_ids": 197
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n    \n    return [heapq.heappop(heap) for _ in range(n)]",
        "num_ids": 76
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and returns the n most expensive items in the list.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result",
        "num_ids": 89
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 42
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list as input and a value n. It splits the list at the nth element and adds the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l[n:] + l[:n]",
        "num_ids": 69
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part",
        "num_ids": 37
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Split a list at the nth element and add the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]",
        "num_ids": 42
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 1 or n > len(l):\n        return \"Invalid n value\"\n    else:\n        return l[n:] + l[:n]",
        "num_ids": 72
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as an input and returns a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 34
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as an argument and returns a tuple.\n    '''\n    return tuple(lst)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(lst)",
        "num_ids": 31
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 31
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex",
        "num_ids": 38
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 26
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple\n    '''\n    return tuple(lst)",
        "num_ids": 25
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns a tuple containing the elements of the list.\n    '''\n    return tuple(lst)",
        "num_ids": 37
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n\n    Parameters:\n        lst (list): A list to be converted to a tuple.\n\n    Returns:\n        tuple: The converted tuple.\n\n    \"\"\"\n\n    # Convert the list to a tuple\n    tpl = tuple(lst)\n\n    # Return the tuple\n    return tpl",
        "num_ids": 75
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    tuplex = tuple(listx)\n    return tuplex",
        "num_ids": 38
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(nums)\n    max_val = max(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Return the difference\n    return diff",
        "num_ids": 94
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            result.append(i)\n    return result",
        "num_ids": 67
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function finds all the perfect squares between two given numbers\n    \"\"\"\n    # Check if a is greater than b\n    if a > b:\n        a, b = b, a  # swap a and b\n\n    # Initialize a list to store the perfect squares\n    squares = []\n\n    # Loop through the numbers from a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = num ** 0.5\n        if root == int(root):\n            squares.append(num)\n\n    # Return the list of perfect squares\n    return squares",
        "num_ids": 136
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = num ** 0.5\n        if root == int(root):\n            result.append(num)\n    return result",
        "num_ids": 70
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i > 0 and i**0.5 == int(i**0.5):\n            result.append(i)\n    return result",
        "num_ids": 74
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for num in range(a, b+1):\n        sqrt = int(num ** 0.5)\n        if sqrt ** 2 == num:\n            perfect_squares.append(num)\n    return perfect_squares",
        "num_ids": 80
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 1 or b < 1:\n        return \"Please enter positive integers for a and b\"\n    \n    result = []\n    for num in range(a, b+1):\n        square_root = num ** 0.5\n        if square_root == int(square_root):\n            result.append(num)\n    \n    return result",
        "num_ids": 100
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of all the perfect squares between the two numbers (inclusive).\n    '''\n    result = []\n    for num in range(a, b+1):\n        square_root = int(num ** 0.5)\n        if square_root ** 2 == num:\n            result.append(num)\n    return result",
        "num_ids": 89
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    result = []\n    for num in range(a, b+1):\n        root = int(num**0.5)\n        if root**2 == num:\n            result.append(num)\n    return result",
        "num_ids": 86
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n\n    squares = []\n\n    for num in range(a, b+1):\n        if num > 0:\n            root = int(num**0.5)\n            if root*root == num:\n                squares.append(num)\n\n    return squares",
        "num_ids": 93
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b+1):\n        if i > 0 and i == int(i**0.5)**2:\n            result.append(i)\n    return result",
        "num_ids": 86
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(rho,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "num_ids": 61
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates (rho, theta) to rectangular coordinates (x, y).\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "num_ids": 66
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "num_ids": 57
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(complex(x,y))\n    theta = cmath.phase(complex(x,y))\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect",
        "num_ids": 94
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)",
        "num_ids": 59
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y",
        "num_ids": 57
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    r, phi = cmath.polar(complex(x, y))\n    return r*cmath.cos(phi), r*cmath.sin(phi)",
        "num_ids": 62
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    :param rho: distance from origin\n    :param theta: angle in radians\n    :return: tuple of rectangular coordinates (x, y)\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "num_ids": 87
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n        rho (float): distance from the origin\n        theta (float): angle from the positive x-axis in radians\n\n    Returns:\n        complex: rectangular coordinates (x + yj)\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x + y * 1j",
        "num_ids": 102
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The distance from the origin.\n    theta (float): The angle in radians from the positive x-axis.\n\n    Returns:\n    tuple: The (x, y) rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)",
        "num_ids": 109
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n    # Get the length of the list\n    n = len(newList)\n    # Swap the first and last elements\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    # Return the updated list\n    return newList",
        "num_ids": 93
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function swaps the first and last element of the list and returns the modified list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]  # Swapping the first and last elements\n    return newList",
        "num_ids": 67
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    \"\"\"\n    This function takes a list as an argument and swaps the first and last elements.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length of the list is at least 2\n    if length >= 2:\n        # Get the first element\n        first_element = newList[0]\n        \n        # Get the last element\n        last_element = newList[length-1]\n        \n        # Replace the first element with the last element\n        newList[0] = last_element\n        \n        # Replace the last element with the first element\n        newList[length-1] = first_element\n        \n        # Return the modified list\n        return newList\n    else:\n        # Return the original list if the length is less than 2\n        return newList",
        "num_ids": 174
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and returns a new list with the first and last elements swapped.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 62
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    \"\"\"\n    This function takes a list as input and swaps the first and last elements of the list.\n    \"\"\"\n    if len(newList) < 2: # checks if the list has at least 2 elements\n        return newList\n    else:\n        first_elem = newList[0] # stores the first element in a variable\n        last_elem = newList[-1] # stores the last element in a variable\n        newList[0] = last_elem # swaps the first and last elements of the list\n        newList[-1] = first_elem\n        return newList # returns the modified list",
        "num_ids": 138
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and swaps the first and last elements of the list.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(newList)",
        "num_ids": 86
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeff = 1\n    result = 0\n    for i in range(k):\n        result += coeff\n        coeff = coeff * (n-i) // (i+1)\n    return result",
        "num_ids": 74
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    if k==n:\n        return 1\n    if k==1:\n        return n\n    sum=0\n    for i in range(k):\n        sum+=binomial_Coeff(n-i,i)\n    return sum",
        "num_ids": 94
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\n\nn = int(input(\"Enter a number: \"))\nprint(binomial_Coeff(n, n))",
        "num_ids": 106
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the value of n: \"))\n    k = int(input(\"Enter the value of k: \"))\n    print(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))",
        "num_ids": 131
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function will calculate the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res = res * (n - i) // (i + 1)\n    return res",
        "num_ids": 81
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function takes two arguments n and k and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 1\n    if k == 0:\n        return res\n    for i in range(k):\n        res *= (n-i)\n        res //= (i+1)\n    return res\n",
        "num_ids": 84
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) * n / k\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nsum = 0\n\nfor i in range(k):\n    sum += binomial_Coeff(n, i)\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum)",
        "num_ids": 144
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0 or k==n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) \n",
        "num_ids": 78
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two integers, n and k, as inputs and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    else:\n        numerator = 1\n        denominator = 1\n        for i in range(k):\n            numerator *= (n - i)\n            denominator *= (i + 1)\n        return numerator // denominator",
        "num_ids": 100
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two integers n and k as input and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    else:\n        return (n * (binomial_Coeff(n - 1, k - 1)))\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))",
        "num_ids": 133
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = ''\n    for i in ip_list:\n        if i.startswith('0') and len(i) > 1:\n            i = i.lstrip('0')\n            if not i:\n                new_ip += '0.'\n            else:\n                new_ip += i + '.'\n        else:\n            new_ip += i + '.'\n    return new_ip[:-1]",
        "num_ids": 124
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    return re.sub(r'^0*(\\d+\\.\\d+\\.\\d+\\.\\d+)$', r'\\1', ip)",
        "num_ids": 57
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(?=[1-9])', '', ip)",
        "num_ids": 51
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_parts = ip.split('.')\n    new_ip_parts = []\n    for part in ip_parts:\n        if part.startswith('0') and len(part) > 1:\n            new_ip_parts.append(part[1:])\n        else:\n            new_ip_parts.append(part)\n    return '.'.join(new_ip_parts)",
        "num_ids": 112
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = ''\n    for octet in ip_list:\n        if len(octet) == 1 and octet == '0':\n            continue\n        else:\n            new_ip += octet + '.'\n    return new_ip[:-1]",
        "num_ids": 93
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an ip address as input and removes any leading zeroes.\n    '''\n    # Match the ip address pattern with the given ip address\n    pattern = re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')\n    if pattern.match(ip):\n        # Split the ip address into a list of octets\n        octets = ip.split('.')\n        # Remove any leading zeroes from the octets\n        for i in range(len(octets)):\n            if octets[i].startswith('0') and len(octets[i]) > 1:\n                octets[i] = octets[i].lstrip('0')\n        # Join the octets back into an ip address\n        new_ip = '.'.join(octets)\n        return new_ip\n    else:\n        return 'Invalid IP address'",
        "num_ids": 211
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    return re.sub(r'(?<=\\d)\\.(?=\\d)', '.', re.sub(r'^0+', '', ip))",
        "num_ids": 57
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\d)\\.0(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', r'\\1.\\2', ip)",
        "num_ids": 74
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)",
        "num_ids": 44
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Using regular expression to match leading zeroes\n    pattern = r'^0*(?=\\d)'\n    ip = re.sub(pattern, '', ip)\n    return ip",
        "num_ids": 67
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes in a list of integers and returns the difference between the first even and first odd number in the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n    return even - odd",
        "num_ids": 101
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Returns the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = lst[0]\n    odd = lst[1]\n    if even % 2 == 0:\n        diff = even - odd\n    else:\n        diff = odd - even\n    return diff",
        "num_ids": 73
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                odd_num = num\n                break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return even_num - odd_num",
        "num_ids": 116
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function finds the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = abs(even_num - odd_num)\n    return diff",
        "num_ids": 67
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List should have at least two elements\"\n    \n    if list1[0] % 2 == 0:\n        first_even = list1[0]\n    else:\n        first_even = None\n    \n    if list1[1] % 2!= 0:\n        first_odd = list1[1]\n    else:\n        first_odd = None\n    \n    if first_even is None or first_odd is None:\n        return \"List should have both even and odd elements\"\n    \n    return first_even - first_odd",
        "num_ids": 159
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the difference between the first even and first odd number in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    # Find the first even and odd numbers in the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    # If either even_num or odd_num is None, return None\n    if even_num is None or odd_num is None:\n        return None\n\n    return even_num - odd_num",
        "num_ids": 140
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    \n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n    \n    return abs(even - odd)",
        "num_ids": 98
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number in the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)",
        "num_ids": 112
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number in a given list.\n    \"\"\"\n    even = None\n    odd = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return abs(even - num)\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return abs(odd - num)\n    \n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least two distinct numbers\")\n    \n    return abs(even - odd)",
        "num_ids": 131
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return abs(even - num)\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return abs(odd - num)\n    return abs(even - odd)\n",
        "num_ids": 118
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert str1 to str2.\n    '''\n    # Convert the binary strings to lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # Initialize a variable to keep track of the number of swaps required\n    swaps = 0\n    \n    # Iterate over the lists of integers and compare them\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            # If the digits are not equal, find the next index where they are different and swap them\n            j = i\n            while list1[i]!= list2[j]:\n                j += 1\n            list1[i], list1[j] = list1[j], list1[i]\n            swaps += 1\n            \n    return swaps",
        "num_ids": 213
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # Initialize a dictionary to keep track of the indices of the elements in the list\n    indices = {}\n    \n    # Iterate through the first list and add the indices to the dictionary\n    for i in range(len(list1)):\n        indices[list1[i]] = i\n    \n    # Initialize a list to store the swaps\n    swaps = []\n    \n    # Iterate through the second list and compare each element to the corresponding element in the first list\n    for i in range(len(list2)):\n        if list2[i] in indices:\n            # If the element is in the dictionary, append the difference between the indices to the swaps list\n            swaps.append(abs(i - indices[list2[i]]))\n    \n    # Return the minimum number of swaps\n    return min(swaps)",
        "num_ids": 217
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i + 1\n            while j < n and str2[j] == str1[i]:\n                j += 1\n            if j == n:\n                return \"No solution\"\n            else:\n                count += (n - j + 1)\n                str1 = str1[:i] + str2[j] + str1[i+1:]\n                str2 = str2[:j] + str2[i] + str2[j+1:]\n    return count",
        "num_ids": 151
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # Pad the lists with zeros to ensure they are the same length\n    if len(list1) < len(list2):\n        list1 += [0] * (len(list2) - len(list1))\n    elif len(list2) < len(list1):\n        list2 += [0] * (len(list1) - len(list2))\n    \n    # Initialize variables for tracking the number of swaps and the current position in the lists\n    swaps = 0\n    pos1 = 0\n    pos2 = 0\n    \n    # Loop through the lists, comparing digits and swapping as necessary\n    while pos1 < len(list1) and pos2 < len(list2):\n        if list1[pos1]!= list2[pos2]:\n            # Check if the digits are the same, if not, swap and increment the swap count\n            if list1[pos1] == 0:\n                swaps += 1\n                list2[pos2], list1[pos1] = list1[pos1], list2[pos2]\n                pos1 += 1\n                pos2 += 1\n            elif list2[pos2] == 0:\n                swaps += 1\n                list1[pos1], list2[pos2] = list2[pos2], list1[pos1]\n                pos1 += 1\n                pos2 += 1\n            else:\n                pos1 += 1\n                pos2 += 1\n        else:\n            pos1 += 1\n            pos2 += 1\n    \n    # Return the final number of swaps\n    return swaps",
        "num_ids": 390
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while j < n and str1[j]!= str2[i]:\n                j += 1\n            if j == n:\n                return -1\n            str1[i],str1[j-1] = str1[j-1],str1[i]\n            count += 1\n    return count",
        "num_ids": 117
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert the first binary number to the second binary number.\n    '''\n    n = len(str1)\n    i, j = 0, 0\n    count = 0\n    while i < n and j < n:\n        if str1[i]!= str2[j]:\n            if str1[i] == '1' and str2[j] == '0':\n                if i > 0 and str1[i-1] == '0':\n                    count += 1\n                else:\n                    for k in range(j, -1, -1):\n                        if str2[k] == '1':\n                            str1 = str1[:i] + '0' + str1[i+1:]\n                            count += 1\n                            break\n                    else:\n                        return \"Not possible\"\n            else:\n                if i < n-1 and str1[i+1] == '1':\n                    count += 1\n                else:\n                    for k in range(j+1, n):\n                        if str2[k] == '0':\n                            str1 = str1[:i] + '1' + str1[i+1:]\n                            count += 1\n                            break\n                    else:\n                        return \"Not possible\"\n        i += 1\n        j += 1\n    return count",
        "num_ids": 308
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of digits\n    nums1 = [int(d) for d in str1]\n    nums2 = [int(d) for d in str2]\n    \n    # Initialize variables for swaps and indices\n    swaps = 0\n    i, j = 0, 0\n    \n    # Iterate through the lists until they are equal\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i]!= nums2[j]:\n            # If the digits are not equal, swap them and increment the swaps count\n            nums1[i], nums1[nums2.index(nums1[i])] = nums1[nums2.index(nums1[i])], nums1[i]\n            swaps += 1\n        i += 1\n        j += 1\n    \n    # Return the final swaps count\n    return swaps",
        "num_ids": 201
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Convert the strings to lists of integers\n    num1 = [int(i) for i in str1]\n    num2 = [int(i) for i in str2]\n    \n    # Count the number of differences between the two numbers\n    diff = sum([abs(num1[i] - num2[i]) for i in range(len(num1))])\n    \n    # Initialize the variables for minimum swaps and minimum swap list\n    min_swaps = 0\n    swap_list = []\n    \n    # Loop through each bit of the first number\n    for i in range(len(num1)):\n        \n        # Check if the bit needs to be swapped\n        if num1[i]!= num2[i]:\n            \n            # Calculate the number of swaps needed to make the bit match\n            swaps = 0\n            \n            # Loop through the bits of the second number to find a match\n            for j in range(len(num2)):\n                \n                # If the bit matches, update the number of swaps and the swap list\n                if num1[i] == num2[j]:\n                    \n                    # Swap the bits\n                    num1[i], num1[j] = num1[j], num1[i]\n                    swap_list.append((i,j))\n                    \n                    # Increment the number of swaps\n                    swaps += 1\n                    \n                    # Break out of the loop\n                    break\n            \n            # Check if the current number of swaps is less than the minimum swaps found so far\n            if swaps < min_swaps:\n                \n                # Update the minimum swaps and swap list\n                min_swaps = swaps\n    \n    # Return the minimum number of swaps and the swap list\n    return (min_swaps, swap_list)",
        "num_ids": 402
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    '''\n    # Convert the binary strings to lists of integers\n    num1 = [int(i) for i in str1]\n    num2 = [int(i) for i in str2]\n    \n    # Initialize variables for swaps count and current positions\n    swaps = 0\n    pos1 = 0\n    pos2 = 0\n    \n    # Iterate through the lists until all positions are filled\n    while pos1 < len(num1) and pos2 < len(num2) : \n        # If the current positions are equal, move both pointers forward\n        if num1[pos1] == num2[pos2] : \n            pos1 += 1\n            pos2 += 1\n        else : \n            # If the values at the current positions are different, swap them and increment the swaps count\n            temp = num1[pos1]\n            num1[pos1] = num2[pos2]\n            num2[pos2] = temp\n            swaps += 1\n    \n    # If there are still positions left in either list, fill them with zeroes\n    while pos1 < len(num1) : \n        num1[pos1] = 0\n        pos1 += 1\n        swaps += 1\n    \n    while pos2 < len(num2) : \n        num2[pos2] = 0\n        pos2 += 1\n        swaps += 1\n    \n    return swaps",
        "num_ids": 333
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    \n    for tuple_ in tuple_list:\n        total_size += sys.getsizeof(tuple_)\n        \n    return total_size",
        "num_ids": 66
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size",
        "num_ids": 65
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "num_ids": 59
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple(tuple_list))\n    return size",
        "num_ids": 50
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes in a list of tuples and returns the total size of all the tuples in bytes.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size",
        "num_ids": 71
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size",
        "num_ids": 65
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size",
        "num_ids": 59
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size",
        "num_ids": 59
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "num_ids": 59
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the median of the first array\n    if (n1 % 2 == 0):\n        median1 = (arr1[n1//2] + arr1[n1//2 - 1]) / 2\n    else:\n        median1 = arr1[n1//2]\n\n    # Find the median of the second array\n    if (n2 % 2 == 0):\n        median2 = (arr2[n2//2] + arr2[n2//2 - 1]) / 2\n    else:\n        median2 = arr2[n2//2]\n\n    # If the median of the first array is greater than the median of the second array\n    if (median1 > median2):\n        # Remove the median of the second array from the second array and find the kth element in the first array\n        return find_kth(arr1, arr2[:n2-1], k)\n\n    # If the median of the second array is greater than the median of the first array\n    elif (median1 < median2):\n        # Remove the median of the first array from the first array and find the (n1-k)th element in the second array\n        return find_kth(arr1[:n1-1], arr2, k)\n\n    # If the median of both arrays is the same\n    else:\n        # If k is less than or equal to (n1 + n2) / 2\n        if (k <= (n1 + n2) // 2):\n            # Remove the median of the first array from the first array and find the kth element in the first array\n            return find_kth(arr1, arr2, k)\n\n        # If k is greater than (n1 + n2) / 2\n        else:\n            # Remove the median of the second array from the second array and find the (k - (n1 + n2) // 2)th element in the second array\n            return find_kth(arr1[:n1-1], arr2, k - (n1 + n2) // 2)",
        "num_ids": 501
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the median of the two arrays\n    m1 = (len(arr1) + len(arr2) - 1) // 2\n    m2 = (len(arr1) + len(arr2)) // 2\n\n    if m1 < len(arr1):\n        median1 = arr1[m1]\n    else:\n        median1 = float('inf')\n\n    if m2 < len(arr2):\n        median2 = arr2[m2]\n    else:\n        median2 = float('inf')\n\n    if median1 <= median2:\n        median = median1\n        left = arr1[m1+1:]\n        right = arr2\n    else:\n        median = median2\n        left = arr1\n        right = arr2[m2+1:]\n\n    # Find kth element in the remaining array\n    if k <= len(left):\n        return find_kth(left, right, k)\n    elif k > len(left) + 1:\n        return find_kth(left, right, k-len(left)-1)\n    else:\n        return median\n",
        "num_ids": 270
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Get the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Create a merged array and sort it\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Get the kth element from the merged array\n    kth_element = merged_arr[k-1]\n\n    return kth_element",
        "num_ids": 118
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Get the total length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize the pointers for both arrays\n    i = 0\n    j = 0\n\n    # Loop until the kth element is found\n    while k > 0:\n        # Check if the current element in arr1 is smaller than arr2[j]\n        if i == n1 or (j < n2 and arr1[i] > arr2[j]):\n            # If true, move the pointer of arr1 to the right\n            i += 1\n        else:\n            # If false, move the pointer of arr2 to the right\n            j += 1\n\n        # Decrement k\n        k -= 1\n\n    # If k is still greater than 0, then the element is not present in the arrays\n    if k > 0:\n        return None\n\n    # If both elements are the same, return the element\n    if arr1[i-1] == arr2[j-1]:\n        return arr1[i-1]\n\n    # Otherwise, return the smaller element\n    return min(arr1[i-1], arr2[j-1])",
        "num_ids": 285
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    m, n = len(arr1), len(arr2)\n    if k > m + n:\n        return None\n    if k <= n:\n        return find_kth(arr2, arr1, k)\n    left, right = max(arr1[0], arr2[0]), min(arr1[-1], arr2[-1])\n    while left <= right:\n        mid = (left + right) // 2\n        i, j = bisect_left(arr1, mid), bisect_left(arr2, mid)\n        if i + j == k:\n            return mid\n        elif i + j < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None",
        "num_ids": 217
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    if n > m:\n        arr1, arr2, n, m = arr2, arr1, m, n  # swap arr1 and arr2 if arr1 is larger than arr2\n    if m == 0:\n        raise ValueError(\"Invalid input\")\n    i, j, count = 0, 0, 0\n    while i < n and j < m:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        count += 1\n        if count == k:\n            return min(arr1[i], arr2[j])\n    if i >= n:\n        return arr2[j + k - count]\n    else:\n        return arr1[i + k - count]",
        "num_ids": 214
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Create a merged array by combining both sorted arrays\n    merged_arr = arr1 + arr2\n    # Sort the merged array in ascending order\n    merged_arr.sort()\n    # Return the kth element from the sorted merged array\n    return merged_arr[k-1]",
        "num_ids": 94
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1  # swap arr1 and arr2 to make arr1 shorter\n\n    left = 0\n    right = len(arr1)\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr1[mid] >= arr2[0]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return arr1[left-1]",
        "num_ids": 139
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k > n1 + n2:\n        return -1\n    if k <= n1:\n        return find_kth_helper(arr1, arr2, k, 0, n2 - 1)\n    else:\n        return find_kth_helper(arr2, arr1, k - n1, 0, n1 - 1)\n\ndef find_kth_helper(arr1, arr2, k, i, j):\n    if i > j:\n        return -1\n    if i == j:\n        return arr1[i]\n    mid = (i + j) // 2\n    n1 = mid - i + 1\n    n2 = k - n1\n    if arr1[mid] > arr2[j]:\n        return find_kth_helper(arr1, arr2, k, i, mid - 1)\n    elif arr1[mid] < arr2[j]:\n        return find_kth_helper(arr1, arr2, k, mid + 1, j)\n    else:\n        return arr1[mid]",
        "num_ids": 290
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    if k > n + m:\n        return None\n\n    if n > m:\n        return find_kth(arr2, arr1, k)\n\n    lo = 0\n    hi = n\n\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if arr1[mid] >= arr2[k-1-mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n\n    if k <= n:\n        return arr1[k-1]\n    else:\n        return arr2[k-n-1]",
        "num_ids": 171
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n    # initialize a variable to store the sum of the cube of each digit\n    armstrong_sum = 0\n    # convert the number to string to iterate over its digits\n    num_str = str(number)\n    # iterate over the digits of the number\n    for digit in num_str:\n        # convert the digit to integer and cube it\n        cube = int(digit) ** 3\n        # add the cube to the armstrong_sum variable\n        armstrong_sum += cube\n    # check if the armstrong_sum is equal to the original number\n    if armstrong_sum == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")",
        "num_ids": 181
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    num = str(number)\n\n    # Calculate the length of the number\n    length = len(num)\n\n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = sum([int(digit)**length for digit in num])\n\n    # Check if the sum is equal to the given number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "num_ids": 122
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether a number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    n = number\n    count = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        count += digit ** len(str(n))\n        temp //= 10\n    if count == n:\n        return True\n    else:\n        return False\n\ndef armstrong_number(number):\n    \"\"\"\n    This function prompts the user to input a number and then checks whether it is an Armstrong number or not.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    if is_armstrong(n):\n        print(n, \"is an Armstrong number.\")\n    else:\n        print(n, \"is not an Armstrong number.\")",
        "num_ids": 205
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    n = number\n    while n > 0:\n        digit = n % 10\n        sum += digit ** len(str(number))\n        n = n // 10\n    if sum == number:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    n = number\n    order = len(str(n))\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    order = len(str(temp))\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number, else False.\n    \"\"\"\n    # Convert the number to a string to get its digits\n    num_str = str(number)\n    # Calculate the length of the number\n    num_len = len(num_str)\n    # Calculate the sum of the power of each digit of the number\n    power_sum = sum([int(digit) ** num_len for digit in num_str])\n    # If the sum of the power is equal to the original number, then it is an Armstrong number\n    if power_sum == number:\n        return True\n    else:\n        return False",
        "num_ids": 152
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes a number as input and checks whether it is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n    '''\n    # Convert the number into a string\n    num_str = str(number)\n    \n    # Get the length of the number\n    length = len(num_str)\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Calculate the sum of the cube of each digit\n    for digit in num_str:\n        sum += int(digit) ** length\n    \n    # Check if the sum is equal to the original number\n    if sum == number:\n        print(f\"{number} is an Armstrong number\")\n    else:\n        print(f\"{number} is not an Armstrong number\")",
        "num_ids": 183
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes a number as input and returns True if it is an Armstrong number,\n    otherwise, it returns False.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    '''\n    # Convert the number to string and get the length of the number\n    num_str = str(number)\n    num_len = len(num_str)\n    \n    # Calculate the sum of the power of each digit in the number and compare it with the original number\n    sum_of_power = sum([int(digit)**num_len for digit in num_str])\n    return sum_of_power == number",
        "num_ids": 189
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Calculate the number of digits in the given number\n    num_digits = len(str(number))\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Find the sum of the cube of each digit\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** num_digits\n        temp //= 10\n\n    # Check if the given number is equal to the sum of the cube of each digit\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 141
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count\n    total = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    # calculate average\n    average = total / count\n\n    # return the sum and average\n    return total, average",
        "num_ids": 94
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return (sum, avg)",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes in a number n and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n    average = total_sum/n\n    return total_sum, average",
        "num_ids": 73
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return (sum, average)\n",
        "num_ids": 62
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_num = 0\n    for i in range(1, number + 1):\n        sum_num += i\n    average = sum_num / number\n    return sum_num, average",
        "num_ids": 68
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return None, None\n    else:\n        # Initialize sum and count variables\n        sum = 0\n        count = 1\n\n        # Loop over first n natural numbers and update sum and count\n        while count <= n:\n            sum += count\n            count += 1\n\n        # Compute the average and return both the sum and the average\n        average = sum / n\n        return sum, average",
        "num_ids": 118
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        average = sum/n\n        return f\"The sum of the first {n} natural numbers is {sum} and the average is {average:.2f}\"",
        "num_ids": 105
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum / number\n    return sum, avg",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, number+1):\n        sum_ += i\n    average = sum_ / number\n    return sum_, average\n",
        "num_ids": 63
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as an argument and returns True if it is even, and False if it is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 55
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it's even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it's even, otherwise False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as an input and checks whether it is even or not.\n    If the number is even, it returns True, otherwise, it returns False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 66
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_even(n):\n    \"\"\"\n    Checks whether a given number is even or not.\n    :param n: An integer to be checked\n    :return: True if n is even, False otherwise\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 64
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 27
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found\"",
        "num_ids": 85
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n\n    return None",
        "num_ids": 71
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found\"",
        "num_ids": 85
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return None",
        "num_ids": 68
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = ''\n    for char in str1:\n        if str1.count(char) > 1:\n            repeated_char = char\n            break\n    return repeated_char",
        "num_ids": 70
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
        "num_ids": 62
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None",
        "num_ids": 68
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1 and repeated_char is None:\n            repeated_char = char\n            break\n    return repeated_char",
        "num_ids": 78
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function returns the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None",
        "num_ids": 78
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = \"\"\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            repeated_char = str1[i]\n            break\n    return repeated_char",
        "num_ids": 81
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            ludic.append(i)\n    return ludic",
        "num_ids": 85
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        if i == sum(int(digit) for digit in str(i)):\n            ludics.append(i)\n    return ludics",
        "num_ids": 83
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_lucid(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers\n\nprint(get_lucid(10))",
        "num_ids": 131
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludics.append(1)\n        elif i % 2 == 0 and i % 3 == 0:\n            ludics.append(i)\n    return ludics",
        "num_ids": 100
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for num in range(2, n+1):\n        is_lucid = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(num)\n    return ludics",
        "num_ids": 108
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        if i == 1 or i == 4 or i == 6 or i == 8:\n            ludics.append(i)\n    return ludics",
        "num_ids": 88
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for num in range(1, n+1):\n        if all(num % i!= 0 for i in range(2, num)):\n            ludics.append(num)\n    return ludics",
        "num_ids": 85
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for num in range(1, n+1):\n        if '2' in str(num) or '3' in str(num) or '5' in str(num):\n            if all(num % i!= 0 for i in range(2, num)):\n                ludics.append(num)\n    return ludics",
        "num_ids": 113
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    i = 2\n    while i <= n:\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n        i += 1\n    return ludics",
        "num_ids": 120
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        count = 0\n        for j in range(1, i):\n            if i % j == 0:\n                count += 1\n        if count == 1:\n            ludics.append(i)\n    return ludics",
        "num_ids": 102
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)",
        "num_ids": 55
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip() # remove leading and trailing spaces\n    words = s.split() # split string into words\n    words = [word[::-1] for word in words] # reverse each word\n    s =''.join(words) # join words into a string\n    return s",
        "num_ids": 88
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string separated by spaces\n    reversed_string = \" \".join(reversed_words)\n    # Return the reversed string\n    return reversed_string",
        "num_ids": 107
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence",
        "num_ids": 84
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = ''\n        for i in range(len(word)-1, -1, -1):\n            reversed_word += word[i]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)",
        "num_ids": 101
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)",
        "num_ids": 60
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list and join them back together\n    reversed_words =''.join([word[::-1] for word in words])\n    # Return the reversed string\n    return reversed_words",
        "num_ids": 87
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse each word\n    words = [word[::-1] for word in words]\n    \n    # Join the reversed words into a string\n    return''.join(words)",
        "num_ids": 78
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse the order of the words\n    words.reverse()\n    \n    # Join the words back into a string\n    reversed_string =''.join(words)\n    \n    return reversed_string",
        "num_ids": 79
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n\n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n\n    return reversed_string",
        "num_ids": 96
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    return True",
        "num_ids": 68
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    \n    for i in range(2, int(num**(0.5))+1):\n        if num % i == 0:\n            return False\n    \n    return True",
        "num_ids": 70
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True",
        "num_ids": 58
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a given integer is a prime number.\n\n    Args:\n        num: An integer to check.\n\n    Returns:\n        True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 94
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes degrees as input and returns the equivalent radians.\n    '''\n    radians = (math.pi/180) * degree\n    return radians",
        "num_ids": 47
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "num_ids": 39
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef degree_to_radian(degree):\n    \"\"\"\n    This function converts degrees to radians.\n\n    :param degree: The angle in degrees.\n    :return: The angle in radians.\n    \"\"\"\n    radian = math.radians(degree)\n    return radian\n\nif __name__ == '__main__':\n    # Example usage\n    print(degree_to_radian(30))  # Output: 0.5235987755982988",
        "num_ids": 110
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns the corresponding value in radians.\n    '''\n    return degree * (math.pi / 180)",
        "num_ids": 48
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "num_ids": 42
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians",
        "num_ids": 45
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "num_ids": 39
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees as input and returns the equivalent angle in radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 43
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a value in degrees as input and returns the equivalent value in radians.\n    '''\n    radian = math.radians(degree)\n    return radian",
        "num_ids": 49
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 53
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. \n    The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "num_ids": 84
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 53
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(0), match.end(0)\n    else:\n        return None, None, None",
        "num_ids": 93
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regex pattern and returns the matching substring, the start index and the end index of the matching substring.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 85
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches a string for a regex pattern and returns the matching substring, start index and end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 79
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "num_ids": 50
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]",
        "num_ids": 106
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n    bell = [0] * (n + 1)  # create a list of n+1 elements initialized to 0\n    bell[0] = 1  # initialize first bell number as 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - 1 - j]\n    return bell[n]",
        "num_ids": 128
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    bell = [0] * (n + 1)\n    for i in range(n + 1):\n        bell[i] = 1\n        for j in range(i):\n            bell[i] = bell[i] * (i - j) // (j + 1)\n    return bell[n]",
        "num_ids": 83
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = 1\n        for i in range(2, n+1):\n            bell = bell * i\n        return bell",
        "num_ids": 80
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell * i\n    return bell",
        "num_ids": 55
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_Number(i) for i in range(n)])",
        "num_ids": 40
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell_num = [0] * (n+1)\n        bell_num[0] = 1\n        bell_num[1] = 1\n        for i in range(2, n+1):\n            bell_num[i] = bell_num[i-1] + bell_num[i-2]\n        return bell_num[n]\n",
        "num_ids": 137
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function calculates the nth Bell number.\n\n    Parameters:\n    n (int): The value of n for which the Bell number is calculated.\n\n    Returns:\n    bell_n (int): The nth Bell number.\n    \"\"\"\n\n    # Initialize the list to store the Bell number\n    bell = [0, 1]\n\n    # Calculate the Bell number using the formula\n    for i in range(2, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n\n    # Return the nth Bell number\n    return bell[n]",
        "num_ids": 139
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-1)",
        "num_ids": 60
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))",
        "num_ids": 33
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k:\n            new_list.append(list1[i])\n    return new_list",
        "num_ids": 54
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Removes the k'th element from the list and returns the modified list.\n    \"\"\"\n    return list1[:L-1] + list1[L:]",
        "num_ids": 49
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an index k, and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:k] + list1[k+1:]",
        "num_ids": 61
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an integer k as input and returns a new list with the k'th element removed.\n    \"\"\"\n    return list1[:k] + list1[k+1:]",
        "num_ids": 58
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Remove the k'th element from the given list.\n    '''\n    if k >= len(list1):\n        return None\n    return list1[:k] + list1[k+1:]",
        "num_ids": 57
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input, and returns a new list with the k'th element removed.\n    '''\n    # Create a copy of the original list\n    list2 = list1.copy()\n    \n    # Remove the k'th element\n    list2.pop(k-1)\n    \n    # Return the new list\n    return list2",
        "num_ids": 90
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:k-1] + list1[k:]",
        "num_ids": 56
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and an integer k, and returns a new list with the k-th element removed.\n    \"\"\"\n    return lst[:k-1] + lst[k:]",
        "num_ids": 54
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function removes the k'th element from the list.\n    '''\n    return list1[:k-1] + list1[k:]\n",
        "num_ids": 47
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]",
        "num_ids": 29
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    This function takes a list of lists as input and returns the maximum value of the Nth column.\n    \"\"\"\n    # Get the length of the list\n    n = len(test_list)\n    \n    # Create a list to store the maximum values\n    max_list = []\n    \n    # Iterate over the rows of the list\n    for i in range(n):\n        # Get the Nth element of the row\n        element = test_list[i][N-1]\n        \n        # Add the element to the max_list\n        max_list.append(element)\n    \n    # Find the maximum value in the max_list\n    max_value = max(max_list)\n    \n    return max_value",
        "num_ids": 158
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a list of lists (test_list) and an integer N as arguments.\n    It returns the maximum value of the Nth column of the matrix.\n    '''\n    max_value = float('-inf')  # Initialize max_value to negative infinity\n    for row in test_list:\n        if len(row) > N-1:  # Check if the row has more than N-1 elements\n            if row[N-1] > max_value:  # Check if the Nth element of the row is greater than max_value\n                max_value = row[N-1]  # Update max_value if necessary\n    return max_value",
        "num_ids": 157
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_num:\n            max_num = row[N]\n    return max_num",
        "num_ids": 87
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a list of lists as input and returns the max of the nth column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n    return max_num",
        "num_ids": 83
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = []\n    for i in range(len(test_list)):\n        column.append(test_list[i][N-1])\n    return max(column)",
        "num_ids": 78
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, return the maximum value of the Nth column.\n    \"\"\"\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val",
        "num_ids": 85
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the matrix\n    rows = len(test_list)\n    cols = len(test_list[0])\n\n    # Initialize the max value to the first element in the column\n    max_val = test_list[0][N-1]\n\n    # Iterate through the matrix to find the max value in the column\n    for i in range(rows):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n\n    return max_val",
        "num_ids": 156
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val",
        "num_ids": 107
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = [row[N-1] for row in test_list]\n    return max(column)",
        "num_ids": 64
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        max_value = max(max_value, row[N-1])\n    return max_value",
        "num_ids": 80
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]",
        "num_ids": 32
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_lst = [lst[i][0] for i in range(len(lst))]\n    second_lst = [lst[i][1] for i in range(len(lst))]\n    return [first_lst, second_lst]",
        "num_ids": 107
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Initialize the two empty lists\n    first_list = []\n    second_list = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of each sublist to the first list\n        first_list.append(sublist[0])\n        # Append the second element of each sublist to the second list\n        second_list.append(sublist[1])\n    \n    # Return the two lists as a list of lists\n    return [first_list, second_list]",
        "num_ids": 165
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]",
        "num_ids": 108
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    for sublist in lst:\n        res.append(sublist[1])\n    return [res[:len(lst)], res[len(lst):]]",
        "num_ids": 108
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 85
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Initialize the two output lists\n    left = []\n    right = []\n\n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of each sublist to the left list\n        left.append(sublist[0])\n        # Append the second element of each sublist to the right list\n        right.append(sublist[1])\n\n    # Return a list of the two output lists\n    return [left, right]",
        "num_ids": 152
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # initialize the two empty lists\n    first_list = []\n    second_list = []\n    \n    # loop through each sublist in the input list\n    for sublist in lst:\n        # append the first element of the sublist to the first list\n        first_list.append(sublist[0])\n        # append the second element of the sublist to the second list\n        second_list.append(sublist[1])\n    \n    # return the two lists as a tuple\n    return (first_list, second_list)",
        "num_ids": 163
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n        result.append(sublist[1])\n    return [result[i:i+2] for i in range(0, len(result), 2)]",
        "num_ids": 110
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 82
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a list as an input and returns the cumulative sum of all the values in the list.\n    \"\"\"\n    sum_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            sum_list.append(test_list[i])\n        else:\n            sum_list.append(sum_list[i-1] + test_list[i])\n    return sum_list",
        "num_ids": 106
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for value in test_list:\n        total += value\n    return total",
        "num_ids": 58
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Returns the cumulative sum of all values in the given tuple list.\n    \"\"\"\n    total = 0\n    for tup in test_list:\n        total += sum(tup)\n    return total",
        "num_ids": 53
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        total += tup[1]\n    return total",
        "num_ids": 61
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i][1]\n    return sum",
        "num_ids": 69
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum",
        "num_ids": 70
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        total += tup[1]\n    return total",
        "num_ids": 61
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        total = sum(t)\n        avg = total / len(t)\n        result.append(avg)\n    return result",
        "num_ids": 70
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list",
        "num_ids": 71
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list",
        "num_ids": 71
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = 0\n        count = 0\n        for n in num:\n            total += n\n            count += 1\n        averages.append(total/count)\n    return averages",
        "num_ids": 84
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result",
        "num_ids": 66
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result",
        "num_ids": 64
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for i in nums:\n        total = 0\n        for j in i:\n            total += j\n        avg = total / len(i)\n        result.append(avg)\n    return result",
        "num_ids": 76
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for item in num:\n            total += item\n        result.append(total/len(num))\n    return result",
        "num_ids": 73
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg = total / len(tup)\n        result.append(avg)\n    return result",
        "num_ids": 74
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg_tup = sum_tup / len(tup)\n        result.append(avg_tup)\n    return result",
        "num_ids": 76
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 89
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i], )\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))",
        "num_ids": 90
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length.')\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
        "num_ids": 90
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of the same length!\")\n        return\n    \n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n        \n    return result",
        "num_ids": 111
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    if steps == 1:\n        return 0\n    dp = [float('inf')] * (d+1)\n    dp[0] = 0\n    dp[1] = 1\n    \n    for i in range(2, d+1):\n        for j in range(1, steps+1):\n            if i >= j:\n                dp[i] = min(dp[i], dp[i-j]+1)\n    \n    return dp[d]",
        "num_ids": 108
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0 or d == 0: # base case\n        return 0\n    \n    if steps < d: # no jump possible\n        return float('inf')\n    \n    jumps = min_Jumps(steps-d, d) + 1 # recursive call with decremented steps and incremented jumps\n    \n    return jumps # return the minimum number of jumps\n    \nprint(min_Jumps(10, 5)) # expected output: 2",
        "num_ids": 145
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # check if the number of steps is less than or equal to 1\n    if steps <= 1:\n        return steps\n    # initialize a dictionary to store the minimum jumps for each possible position\n    dp = {0: 0}\n    # loop through each step\n    for step in range(1, steps+1):\n        # initialize the minimum jump for this step to infinity\n        dp[step] = float('inf')\n        # loop through each possible position\n        for i in range(step):\n            # check if we can jump to this position from the current position\n            if i + step <= steps and dp[i]!= float('inf'):\n                # calculate the minimum jump for this position\n                dp[step] = min(dp[step], dp[i] + 1)\n    return dp[d]",
        "num_ids": 180
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n    steps (int): The number of steps available in the 2d plane\n    d (int): The length to reach the point of form (d, 0) from origin\n\n    Returns:\n    int: The minimum number of jumps required to reach the point of form (d, 0) from origin in a 2d plane\n\n    \"\"\"\n    if steps < 1 or d < 1:\n        return 0\n\n    dp = [float('inf')]*(steps+1)\n    dp[0] = 0\n\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if i-j >= 0:\n                dp[i] = min(dp[i], dp[i-j]+1)\n\n    return dp[steps]",
        "num_ids": 220
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    dp = [float('inf')] * (d+1)\n    dp[0] = 0\n    for i in range(1, d+1):\n        for j in range(1, steps+1):\n            if i-j >= 0:\n                dp[i] = min(dp[i], dp[i-j] + 1)\n    return dp[d]",
        "num_ids": 94
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    dp = [float('inf')] * n\n    dp[0] = 0\n\n    for i in range(n):\n        for j in range(i):\n            if steps[j] >= i - j:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    return dp[d]",
        "num_ids": 89
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0 for i in range(d+1)] for j in range(steps+1)]\n    for i in range(steps+1):\n        dp[i][0] = i\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if i == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-i]\n            if dp[i][j] >= steps:\n                return dp[i][j]\n    return dp[steps][d]",
        "num_ids": 148
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    jumps = 0\n    current_pos = 0\n    \n    # Traverse through the given number of steps\n    for i in range(steps):\n        # Check if current position is at (d, 0)\n        if current_pos == d:\n            return jumps\n        # Check if current position is within the range of (0, d)\n        if current_pos < d:\n            # Increment the current position by 1 and check if it can reach (d, 0)\n            current_pos += 1\n            jumps += 1\n            if current_pos == d:\n                return jumps\n        else:\n            # Decrement the current position by 1 and try again\n            current_pos -= 1\n            jumps += 1\n    \n    # If we reach here, it means we couldn't reach (d, 0)\n    return -1",
        "num_ids": 189
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes two arguments, the number of steps and the distance between the points.\n    It returns the minimum number of jumps required to reach the point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d == 0:\n        return 0\n    if d < 0:\n        return -1\n\n    # Initialize the variables\n    jumps = 1\n    prev_jump = 0\n    curr_jump = 0\n\n    # Iterate through the steps\n    for i in range(1, steps):\n        # Calculate the next jump\n        curr_jump = max(prev_jump, i-prev_jump)\n        # Increment the number of jumps\n        jumps += 1\n        # Update the previous jump\n        prev_jump = curr_jump\n    \n    return jumps",
        "num_ids": 177
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    dp = [float('inf')] * n\n    dp[0] = 0\n    \n    for i in range(n):\n        if i + steps[i] >= d:\n            dp[i] = 1\n        else:\n            for j in range(1, steps[i] + 1):\n                if i + j >= d:\n                    dp[i] = min(dp[i], dp[i + j] + 1)\n    \n    return dp[0]",
        "num_ids": 118
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists should be of equal length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result",
        "num_ids": 88
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 59
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns the result of dividing each element of the two lists element-wise.\n    \"\"\"\n    if len(nums1) == len(nums2):\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result\n    else:\n        print(\"Lists must be of equal length\")",
        "num_ids": 101
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns the element-wise division of the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 70
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list with each element being the quotient of the corresponding elements of the two input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 80
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to hold the numbers\n    nums = []\n    # Initialize an empty string to hold the words without numbers\n    result = \"\"\n    # Iterate over each word in the list of words\n    for word in words:\n        # Check if the word is a number\n        if word.isnumeric():\n            # If it is, add it to the list of numbers\n            nums.append(word)\n        else:\n            # If it is not a number, add it to the result string\n            result += word + \" \"\n    # Add a space at the end of the result string\n    result += \" \"\n    # Iterate over each number in the list of numbers\n    for num in nums:\n        # Add the number to the end of the result string\n        result += num + \" \"\n    # Remove the extra space at the end of the result string\n    result = result[:-1]\n    # Return the final string\n    return result",
        "num_ids": 237
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # split the string into words\n    words = test_str.split()\n    # create two empty lists: one for the words containing letters, and one for the numbers\n    letters = []\n    numbers = []\n    # iterate over the words\n    for word in words:\n        # check if the word contains a number\n        if any(char.isdigit() for char in word):\n            numbers.append(word)\n        else:\n            letters.append(word)\n    # join the lists into a single string with numbers moved to the end\n    result =''.join(letters + numbers)\n    return result",
        "num_ids": 153
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    alpha_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            alpha_str += char\n    return alpha_str + num_str",
        "num_ids": 81
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    other_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            other_str += char\n    return num_str + other_str",
        "num_ids": 81
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function will move all the numbers to the end of the given string.\n    \"\"\"\n    # Create an empty string to store the numbers\n    num_str = \"\"\n\n    # Loop through each character of the given string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # If it is a number, add it to the num_str string\n            num_str += char\n        else:\n            # If it is not a number, add the character to the end of the string\n            test_str = test_str.replace(char, \"\", 1)\n            test_str += char\n\n    # Append the num_str string to the end of the test_str string\n    test_str += num_str\n\n    return test_str",
        "num_ids": 175
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    # Split the string into words and store them in a list\n    words = test_str.split()\n    \n    # Create two empty lists, one for numbers and the other for non-numbers\n    num_list = []\n    non_num_list = []\n    \n    # Loop through each word in the list and separate the numbers from the non-numbers\n    for word in words:\n        if word.isdigit():\n            num_list.append(word)\n        else:\n            non_num_list.append(word)\n    \n    # Join the non-number words with a space and add them to the end of the string\n    non_num_str =''.join(non_num_list)\n    num_str =''.join(num_list)\n    return non_num_str + num_str",
        "num_ids": 175
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num = ''\n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num += char\n        else:\n            new_str += char\n    new_str += num\n    return new_str",
        "num_ids": 79
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a list to store the words with numbers removed\n    new_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the word contains a number\n        if any(char.isdigit() for char in word):\n            # If it does, add the word to a new list without the numbers\n            new_words.append(word.translate(str.maketrans('', '', '0123456789')))\n        else:\n            # If it doesn't, add the word to the new list as is\n            new_words.append(word)\n\n    # Join the words back into a string\n    new_str =''.join(new_words)\n\n    # Return the new string with numbers moved to the end\n    return new_str",
        "num_ids": 213
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # convert the string into list of characters\n    str_list = list(test_str)\n    \n    # initialize two pointers\n    left = 0\n    right = len(str_list) - 1\n    \n    # loop through the list and move all numbers to the end\n    while left < right:\n        if str_list[left].isdigit() and not str_list[right].isdigit():\n            # swap the characters\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n        elif str_list[left].isdigit() and str_list[right].isdigit():\n            right -= 1\n        else:\n            left += 1\n    \n    # convert the list back to string and return it\n    return ''.join(str_list)",
        "num_ids": 205
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function moves all the numbers to the end of the given string.\n    \"\"\"\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result + ''.join([char for char in test_str if not char.isdigit()])",
        "num_ids": 71
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    i = 1\n    j = len(a) - 1\n    max_size = 0\n    \n    while i <= j:\n        if a[i] % a[j] == 0:\n            max_size = max(max_size, j - i + 1)\n            j -= 1\n        else:\n            i += 1\n            \n    return max_size",
        "num_ids": 121
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    max_size = 1\n    for size in range(2, n+1):\n        for i in range(n-size+1):\n            j = i + size - 1\n            if size == 2:\n                dp[i][j] = a[i] % a[j] == 0\n            else:\n                dp[i][j] = any(dp[i][k] and dp[k+1][j] for k in range(i, j))\n            if dp[i][j] and size > max_size:\n                max_size = size\n    return max_size",
        "num_ids": 210
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [True] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j])\n\n    return sum(dp)",
        "num_ids": 91
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the array in ascending order\n    a.sort()\n\n    # Initialize variables\n    left = 0\n    right = len(a) - 1\n    result = 0\n\n    # Loop through the array and find the largest subset\n    while left < right:\n        # Check if the current pair is divisible\n        if a[left] % a[right] == 0:\n            # Update the result if the current subset is larger\n            result = max(result, right - left + 1)\n            # Move left pointer to the right to find a larger subset\n            left += 1\n        else:\n            # Move right pointer to the left to find a larger subset\n            right -= 1\n\n    return result",
        "num_ids": 183
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    \n    # base case: every pair is divisible by the largest number\n    dp[n-1] = 1\n    \n    # check all pairs except the last one\n    for i in range(n-2, -1, -1):\n        # check if the pair is divisible by the largest number\n        if a[i+1] % a[n-1] == 0:\n            dp[i] = dp[i+1] + 1\n    \n    return max(dp)",
        "num_ids": 159
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * n\n    dp[0] = True\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j]:\n                dp[i] = True\n                break\n    return dp.count(True)",
        "num_ids": 113
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[i-1] % a[j] == 0 and dp[i-1] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return dp[n]",
        "num_ids": 127
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as input and returns the size of the largest subset of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [[0 for i in range(n)] for j in range(n)] # create a 2D array to store the maximum subset size at each index\n\n    # base case when the size of the list is 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill the dp array using dynamic programming\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            dp[i][j] = 1\n            for k in range(i, j):\n                if a[j] % a[k] == 0 and dp[i][k] + 1 > dp[i][j]:\n                    dp[i][j] = dp[i][k] + 1\n\n    # return the maximum subset size\n    return dp[0][n-1]",
        "num_ids": 240
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    # Initialize variables\n    n = len(a)\n    dp = [0] * n\n    # Loop through the list and check if every pair is divisible\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    # Return the maximum subset size\n    return max(dp)",
        "num_ids": 105
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1]*n # initialize the dp array to 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1) # update dp[i] if we can include a[i] to the subset\n    \n    return max(dp) # return the maximum value in dp",
        "num_ids": 111
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    # sort the merged array in ascending order\n    merged_arr.sort()\n\n    # find the median of the merged array\n    if n % 2 == 0:\n        median = (merged_arr[n//2] + merged_arr[n//2 - 1]) / 2\n    else:\n        median = merged_arr[n//2]\n\n    return median",
        "num_ids": 130
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    median = []\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n    while i < n:\n        median.append(arr1[i])\n        i += 1\n    while j < n:\n        median.append(arr2[j])\n        j += 1\n    if n % 2 == 0:\n        return (median[n//2 - 1] + median[n//2]) / 2.0\n    else:\n        return median[n//2]",
        "num_ids": 187
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted arrays and their size as input and returns their median value.\n    \"\"\"\n    # merging two sorted arrays\n    arr3 = arr1 + arr2\n    \n    # finding median of merged array\n    if n % 2 == 0:\n        median = (arr3[n//2] + arr3[n//2 - 1])/2\n    else:\n        median = arr3[n//2]\n    \n    return median",
        "num_ids": 107
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize the merged array and index variables\n    merged_arr = [0] * (n * 2)\n    i = j = 0\n    k = 0\n    \n    # Merge the two arrays\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr[k] = arr1[i]\n            i += 1\n        else:\n            merged_arr[k] = arr2[j]\n            j += 1\n        k += 1\n    \n    # Copy remaining elements of arr1\n    while i < n:\n        merged_arr[k] = arr1[i]\n        i += 1\n        k += 1\n    \n    # Copy remaining elements of arr2\n    while j < n:\n        merged_arr[k] = arr2[j]\n        j += 1\n        k += 1\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (merged_arr[n // 2 - 1] + merged_arr[n // 2]) / 2\n    else:\n        median = merged_arr[n // 2]\n    \n    return median",
        "num_ids": 279
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists as input and returns their median.\n    '''\n    # Initialize the result variable\n    result = []\n    \n    # Check if both lists have even number of elements\n    if n % 2 == 0:\n        # Find the median index in both lists\n        median_index1 = n//2\n        median_index2 = n//2 - 1\n        \n        # Get the median values from both lists\n        median1 = arr1[median_index1]\n        median2 = arr2[median_index2]\n        \n        # Append the median values to the result list\n        result.append(median1)\n        result.append(median2)\n        \n    # If both lists have odd number of elements\n    else:\n        # Find the median index in both lists\n        median_index1 = n//2\n        median_index2 = n//2\n        \n        # Get the median values from both lists\n        median1 = arr1[median_index1]\n        median2 = arr2[median_index2]\n        \n        # Append the median values to the result list\n        result.append(median1)\n    \n    return result",
        "num_ids": 246
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size as input and returns the median value.\n    \"\"\"\n    # Merge the two lists\n    merged_list = arr1 + arr2\n    \n    # Find the middle index\n    mid_index = n // 2\n    \n    # Check if n is odd or even\n    if n % 2 == 0:\n        # If n is even, the median is the average of the middle two elements\n        median = (merged_list[mid_index-1] + merged_list[mid_index])/2\n    else:\n        # If n is odd, the median is the middle element\n        median = merged_list[mid_index]\n        \n    return median\n",
        "num_ids": 158
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    median = []\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n    while i < n:\n        median.append(arr1[i])\n        i += 1\n    while j < n:\n        median.append(arr2[j])\n        j += 1\n    if n % 2 == 0:\n        return (median[n//2-1] + median[n//2]) / 2\n    else:\n        return median[n//2]",
        "num_ids": 188
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    median = []\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n    \n    while i < n:\n        median.append(arr1[i])\n        i += 1\n    \n    while j < n:\n        median.append(arr2[j])\n        j += 1\n    \n    if n % 2 == 0:\n        return (median[n//2 - 1] + median[n//2]) / 2\n    else:\n        return median[n//2]",
        "num_ids": 189
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    i = 0\n    j = 0\n    median = 0\n\n    while i <= n and j <= n:\n        if arr1[i] < arr2[j]:\n            median += arr1[i]\n            i += 1\n        else:\n            median += arr2[j]\n            j += 1\n\n    if (n+1) % 2 == 0:\n        median /= 2\n    else:\n        if i == n+1:\n            median += arr2[j-1] / 2\n        else:\n            median += arr1[i-1] / 2\n\n    return median",
        "num_ids": 163
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = n - 1\n    while i <= j:\n        mid1 = (i + j) // 2\n        mid2 = (n + i + j) // 2 - mid1\n        if arr1[mid1] <= arr2[mid2] and arr2[mid2] <= arr1[mid1+1]:\n            return (max(arr1[mid1], arr2[mid2]) + min(arr1[mid1+1], arr2[mid2-1])) / 2\n        elif arr2[mid2] <= arr1[mid1]:\n            i = mid1 + 1\n        else:\n            j = mid1 - 1\n    return None # should never happen",
        "num_ids": 192
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]",
        "num_ids": 39
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]",
        "num_ids": 43
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Computes the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]",
        "num_ids": 39
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes in a list of numbers and a value n and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 63
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 50
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 50
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are uppercase, else False.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True",
        "num_ids": 54
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    return string.upper()",
        "num_ids": 14
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and returns True if the string is in uppercase, else False.\n    '''\n    return string.isupper()",
        "num_ids": 41
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of it.\n    '''\n    return string.upper()",
        "num_ids": 34
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase,\n    else it returns False.\n    \"\"\"\n    for char in string:\n        if char.islower():\n            return False\n    return True",
        "num_ids": 58
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 32
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    return string.upper()",
        "num_ids": 14
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 68
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"New List after swapping: \", newList)",
        "num_ids": 66
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The new list after swapping is: \", newList)",
        "num_ids": 68
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)",
        "num_ids": 59
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 75
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function swaps the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList",
        "num_ids": 72
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last element of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] #swapping the elements\n    return newList",
        "num_ids": 64
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (math.pi * r**2) / 2\n    return area",
        "num_ids": 62
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the angle at the vertex of the largest triangle\n    angle = math.asin(r/math.sqrt(2))\n    # Calculate the length of the opposite leg\n    opposite_leg = r / math.sin(angle)\n    # Calculate the area of the triangle\n    area = 0.5 * opposite_leg * math.tan(angle)\n    return area",
        "num_ids": 90
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle that can be inscribed in the semicircle.\n    '''\n    # Calculate the area of the semicircle\n    area = math.pi * r ** 2\n\n    # Calculate the length of the diameter of the semicircle\n    diameter = 2 * r\n\n    # Calculate the length of each side of the triangle\n    side1 = diameter / 2\n    side2 = math.sqrt(r ** 2 - (diameter / 2) ** 2)\n\n    # Calculate the area of the triangle\n    area_triangle = side1 * side2\n\n    # Return the area of the largest triangle\n    if area_triangle > area:\n        return area_triangle\n    else:\n        return area",
        "num_ids": 209
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # The area of a triangle is given by 1/2 * base * height, where the base is equal to 2 * pi * r\n    # and the height is given by the ratio of the radius to the midpoint of the semicircle\n    height = r / (math.sqrt(2) - 1)\n    # The area of the largest triangle is then given by the product of the height and the base\n    area = 0.5 * math.pi * height * r\n    return area",
        "num_ids": 151
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    :param r: the radius of the semicircle\n    :return: the area of the largest triangle\n    \"\"\"\n    # The radius of the inscribed circle is half the radius of the semicircle\n    c = r / 2\n    \n    # The length of the hypotenuse of the triangle is the length of the chord connecting the two vertices of the triangle\n    h = 2 * r / 3\n    \n    # The height of the triangle is the distance between the two vertices of the triangle and the inscribed circle\n    a = sqrt(r**2 - h**2)\n    \n    # The area of the triangle is the area of the triangle formed by the chord connecting the two vertices of the triangle\n    # and the height of the triangle\n    area = 0.5 * h * a\n    \n    return area",
        "num_ids": 201
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the angle at the vertex of the triangle\n    angle = math.asin(r / 2)\n    \n    # Calculate the length of the hypotenuse of the triangle\n    hypotenuse = 2 * r * math.sin(angle)\n    \n    # Calculate the area of the triangle using Heron's formula\n    area = 0.5 * r * hypotenuse\n    \n    return area",
        "num_ids": 96
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    \"\"\"\n    # Calculate the length of the diameter of the semicircle\n    diameter = 2*r\n    # Calculate the length of a side of the triangle\n    side = r/math.sqrt(3)\n    # Calculate the area of the triangle\n    area = (math.sqrt(3)/4)*math.pow(side, 2)\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = (1/2)*math.pow(diameter, 2)\n    # Return the area of the largest triangle\n    return area if area < max_area else max_area",
        "num_ids": 177
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes the radius of a semicircle as an argument and returns the area of the largest triangle that can be inscribed in it.\n\n    Parameters:\n    r (float): the radius of the semicircle\n\n    Returns:\n    float: the area of the largest triangle that can be inscribed in the semicircle\n\n    \"\"\"\n    # Calculate the diameter of the circle\n    d = r * 2\n\n    # Calculate the area of the semicircle\n    A = math.pi * r**2 / 2\n\n    # Calculate the perimeter of the triangle that can be formed\n    P = r * math.sin(math.pi/3) * 2\n\n    # Calculate the area of the triangle\n    A_triangle = (P * (r - P/2)) / 2\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    A_max = A - A_triangle\n\n    return A_max",
        "num_ids": 212
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the area of the semicircle\n    semicircle_area = math.pi * r**2\n    \n    # Calculate the length of the largest triangle's hypotenuse\n    largest_triangle_hypotenuse = 2*r\n    \n    # Calculate the length of the largest triangle's leg\n    largest_triangle_leg = math.sqrt(r**2 - largest_triangle_hypotenuse**2/2)\n    \n    # Calculate the area of the largest triangle\n    largest_triangle_area = largest_triangle_leg**2\n    \n    # Calculate the ratio of the area of the largest triangle to the area of the semicircle\n    ratio = largest_triangle_area/semicircle_area\n    \n    # Return the area of the largest triangle\n    return largest_triangle_area",
        "num_ids": 208
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = math.pi * r**2 / 2\n    return area",
        "num_ids": 50
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] <= 0 or array[i] > end:\n            return \"Invalid input\"\n\n    missing = 1\n\n    for i in range(start, end + 1):\n        if array[i] == missing:\n            missing += 1\n\n    return missing",
        "num_ids": 125
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers.\n    :param start: The index of the first element to consider. Default value is 0.\n    :param end: The index of the last element to consider. Default value is None, which means to consider all the elements.\n    :return: The smallest missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    n = end - start + 1\n    if n < 1:\n        return 1\n    \n    # Check for negative numbers and non-integers\n    for num in array[start:end+1]:\n        if num < 1 or num!= int(num):\n            return 1\n    \n    # Check for missing numbers\n    missing = False\n    for i in range(start, end+1):\n        if array[i]!= i - start + 1:\n            missing = True\n            break\n    \n    if not missing:\n        return end - start + 2\n    \n    # Check for missing number in the middle\n    for i in range(start+1, end+1):\n        if array[i] == array[i-1]:\n            continue\n        if array[i]!= array[i-1] + 1:\n            return array[i] - 1\n    \n    # Check for missing number at the end\n    if array[end]!= end - start + 1:\n        return array[end] + 1\n    \n    # If all numbers are present, the missing number must be at the end\n    return end - start + 2",
        "num_ids": 363
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] <= 0:\n            return 1\n        elif array[i] > end:\n            return end + 1\n\n    for i in range(start, end+1):\n        j = array[i] - start\n        if array[j]!= i+start:\n            return i+start\n\n    return end+1",
        "num_ids": 140
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    length = end - start + 1\n    \n    for i in range(length):\n        if array[i] < start or array[i] > end:\n            return start\n            \n    for i in range(start,end+1):\n        if array[i-start] == i:\n            continue\n        elif array[i-start] == i-1:\n            array[i-start],array[i-start-1] = array[i-start-1],array[i-start]\n        else:\n            return i-start\n    \n    return end+1",
        "num_ids": 174
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    n = end - start + 1\n    # Initialize a list of size n+1 with all elements as True.\n    missing = [True] * (n + 1)\n    # Traverse the input array and mark the corresponding index as False.\n    for i in range(n):\n        if array[i] >= start and array[i] <= end:\n            missing[array[i] - start] = False\n    # Traverse the list and return the first index with value True.\n    for i in range(n + 1):\n        if missing[i]:\n            return i + start",
        "num_ids": 183
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i] == i+start:\n            continue\n        elif array[i] == i+start+1:\n            array[i], array[i+start] = array[i+start], array[i]\n        else:\n            return i+start\n    \n    return end+1",
        "num_ids": 130
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Traverse through the array to find the smallest missing number\n    for i in range(start, end+1):\n        if array[i] == i+1 or array[i] == array[array[i]-1]:\n            continue\n        else:\n            j = i + 1\n            temp = array[j]\n            while temp!= i+1:\n                k = array[temp-1]\n                array[temp-1] = -1\n                temp = k\n            array[i] = i+1\n            \n    # Traverse through the array again to find the smallest missing number\n    for i in range(start, end+1):\n        if array[i] == -1:\n            return i+1\n    \n    return end+1",
        "num_ids": 211
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Find the smallest missing number\n    smallest_missing = end + 1\n    for i in range(start, end+1):\n        if array[i] - i - 1 < 0:\n            continue\n        if array[i] - i - 1 < smallest_missing:\n            smallest_missing = array[i] - i - 1\n\n    return smallest_missing",
        "num_ids": 114
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n        \n    for i in range(start, end+1):\n        if array[i] < 0 or array[i] > end:\n            return \"Invalid input\"\n            \n    missing = 0\n    \n    for i in range(start, end+1):\n        if array[i]!= i:\n            j = abs(array[i]) - 1\n            if array[j] > 0:\n                array[j] = -array[j]\n    \n    for i in range(start, end+1):\n        if array[i] > 0:\n            missing = i\n            break\n    \n    return missing+1",
        "num_ids": 161
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i] > 0:\n            if array[i] == array[i-1]:\n                return array[i]\n            elif array[i] > array[i-1]+1:\n                return array[i-1]+1\n    return end + 1",
        "num_ids": 126
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')",
        "num_ids": 36
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers and returns a new list with even numbers only.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "num_ids": 64
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_even(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "num_ids": 66
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list): \n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "num_ids": 67
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
        "num_ids": 62
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers and returns a tuple containing two lists:\n    - The first list contains all the even numbers from the original list, in the order they appeared.\n    - The second list contains all the odd numbers from the original list, in the order they appeared.\n    \"\"\"\n    even_numbers = []\n    odd_numbers = []\n    \n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n        else:\n            odd_numbers.append(number)\n    \n    return (even_numbers, odd_numbers)",
        "num_ids": 128
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    \"\"\"\n    evens = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens",
        "num_ids": 64
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(numbers):\n    '''\n    Splits the list of numbers into two lists: one with even numbers and another with odd numbers.\n\n    :param numbers: list of integers\n    :return: tuple of two lists: even_numbers, odd_numbers\n    '''\n\n    even_numbers = []\n    odd_numbers = []\n\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n\n    return (even_numbers, odd_numbers)",
        "num_ids": 115
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_even_odd(lst):\n    even_lst = []\n    odd_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n        else:\n            odd_lst.append(num)\n    return even_lst, odd_lst",
        "num_ids": 68
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_even_numbers(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 68
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple as an argument which represents a coordinate.\n    The function then finds all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent_coordinates = [(x+i, y+j) for i in [-1, 0, 1] for j in [-1, 0, 1] if (i!= 0 or j!= 0) and (i!= j) and (i, j)!= (0, 0)]\n    return adjacent_coordinates",
        "num_ids": 122
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    This function takes a tuple representing a coordinate (ele) as input and returns all the adjacent coordinates of the given coordinate tuple as a list of tuples.\n    \n    If a sublist of adjacent coordinates is provided as input, it returns all the coordinates that are not in the sublist as a list of tuples.\n    '''\n    # Initialize the list of adjacent coordinates\n    adj = [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n    \n    # Remove coordinates from the sublist if provided\n    if sub:\n        adj = [coord for coord in adj if coord not in sub]\n    \n    # Return the list of adjacent coordinates\n    return adj",
        "num_ids": 172
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Create a list of adjacent coordinates\n    adj_coords = []\n\n    # Loop through the four adjacent directions\n    for direction in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n        # Add the adjacent coordinate to the list if it is within the bounds of the grid\n        if (ele[0] + direction[0], ele[1] + direction[1]) not in sub:\n            adj_coords.append((ele[0] + direction[0], ele[1] + direction[1]))\n    \n    return adj_coords",
        "num_ids": 155
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacents = [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n    if sub:\n        return [adj for adj in adjacents if adj not in sub]\n    else:\n        return adjacents",
        "num_ids": 108
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    if len(ele) == 2:\n        for i in [-1, 0, 1]:\n            for j in [-1, 0, 1]:\n                if i!= 0 or j!= 0:\n                    adj.append((ele[0] + i, ele[1] + j))\n    else:\n        for i in [-1, 0, 1]:\n            for j in [-1, 0, 1]:\n                for k in [-1, 0, 1]:\n                    if i!= 0 or j!= 0 or k!= 0:\n                        adj.append((ele[0] + i, ele[1] + j, ele[2] + k))\n    if sub:\n        adj = [x for x in adj if all(y in x for y in sub)]\n    return adj",
        "num_ids": 213
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacents = [(x+1, y), (x, y-1), (x-1, y), (x, y+1)]\n    if sub:\n        return [coord for coord in adjacents if coord not in sub]\n    else:\n        return adjacents",
        "num_ids": 97
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a tuple of integers (x,y) and returns a list of tuples containing all the adjacent coordinates of the given coordinate tuple.\n\n    :param ele: A tuple of integers (x,y) representing a coordinate.\n    :param sub: A list of tuples to store the adjacent coordinates. Default is an empty list.\n    :return: A list of tuples containing all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    \n    # Adding adjacent coordinates to the sub list\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    \n    return sub",
        "num_ids": 164
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # create a list to store the adjacent coordinates\n    adjac_coords = []\n    # add the adjacent coordinates to the list\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            else:\n                # add the adjacent coordinate to the list\n                adjac_coords.append((ele[0]+i, ele[1]+j))\n    # remove the original coordinate from the list\n    adjac_coords.remove(ele)\n    # check if there are any sub-coordinates to add to the list\n    if sub:\n        for coord in sub:\n            # check if the sub-coordinate is adjacent to the original coordinate\n            if abs(coord[0]-ele[0]) <= 1 and abs(coord[1]-ele[1]) <= 1:\n                # add the sub-coordinate to the list\n                adjac_coords.append(coord)\n    # return the list of adjacent coordinates\n    return adjac_coords",
        "num_ids": 246
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(coord):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extracting the row and column values from the coordinate tuple\n    row, col = coord\n    \n    # Creating an empty list to store the adjacent coordinates\n    adj = []\n    \n    # Adding adjacent coordinates to the list\n    adj.append((row-1, col))\n    adj.append((row+1, col))\n    adj.append((row, col-1))\n    adj.append((row, col+1))\n    \n    # Returning the list of adjacent coordinates\n    return adj",
        "num_ids": 125
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row = ele[0]\n    col = ele[1]\n    \n    if row-1 >= 0:\n        sub.append((row-1, col))\n        \n    if row+1 < 6:\n        sub.append((row+1, col))\n        \n    if col-1 >= 0:\n        sub.append((row, col-1))\n        \n    if col+1 < 6:\n        sub.append((row, col+1))\n        \n    return sub",
        "num_ids": 128
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text",
        "num_ids": 72
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text",
        "num_ids": 84
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "num_ids": 60
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 47
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        print(new_text)\n    elif '_' in text:\n        new_text = text.replace('_','')\n        print(new_text)\n    else:\n        print(text)",
        "num_ids": 91
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with underscores and vice versa in a given string.\n    '''\n    if'' in text:  # check if there are any spaces in the string\n        if text.islower():  # check if the string is all lowercase\n            return text.replace(' ', '_')\n        else:  # the string is not all lowercase\n            return text.replace(' ', '').replace('_','')\n    else:  # there are no spaces in the string\n        return text",
        "num_ids": 110
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "num_ids": 56
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        else:\n            new_text += text[i]\n    return new_text",
        "num_ids": 82
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        return new_text\n    elif '_' in text:\n        new_text = text.replace('_','')\n        return new_text\n    else:\n        return text",
        "num_ids": 85
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text",
        "num_ids": 72
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    for num in num_list:\n        if num!= 0:\n            zeroes.append(num)\n        else:\n            zeroes.insert(0, num)\n    return zeroes",
        "num_ids": 82
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n            num_list.append(num_list.pop(i))\n    return num_list",
        "num_ids": 95
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create two lists: one for zeroes and one for non-zeroes\n    zeroes = []\n    non_zeroes = []\n\n    # Iterate through the original list\n    for num in num_list:\n        if num == 0:\n            # If the number is zero, append it to the zeroes list\n            zeroes.append(num)\n        else:\n            # If the number is non-zero, append it to the non_zeroes list\n            non_zeroes.append(num)\n\n    # Combine the non-zeroes and zeroes lists to get the final result\n    result = non_zeroes + zeroes\n\n    # Return the final result\n    return result",
        "num_ids": 174
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count_zero = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            count_zero += 1\n    for i in range(count_zero):\n        num_list.append(0)\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            num_list.pop()\n    return num_list",
        "num_ids": 151
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all the zeros in the given list to the end of the list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n\n    # Separate the zeroes from the non-zeroes\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    # Append the zeroes to the end of the non-zeroes list\n    non_zeroes.extend(zeroes)\n\n    return non_zeroes",
        "num_ids": 126
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    for i in range(zero_count):\n        num_list.append(0)\n    for j in range(non_zero_count):\n        num_list.append(num_list[j])\n        num_list[j] = 0\n\n    return num_list",
        "num_ids": 141
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Creating two lists to store zeros and non-zero values\n    zeros = []\n    non_zeros = []\n    \n    # Separating the zeros and non-zero values into two different lists\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n            \n    # Appending the non-zero values to the end of the list\n    num_list = non_zeros + zeros\n    \n    return num_list",
        "num_ids": 138
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n\n    # Separating the elements into two lists based on their value\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    # Replacing the original list with the non-zeroes list\n    num_list[:] = non_zeroes + zeroes\n\n    return num_list",
        "num_ids": 126
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zeroes.append(num_list[i])\n            num_list.remove(num_list[i])\n    num_list += zeroes\n    return num_list",
        "num_ids": 103
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as an argument and moves all the zeroes to the end of the list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list",
        "num_ids": 103
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 79
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers as input and returns the sum of XOR of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "num_ids": 87
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function finds the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum",
        "num_ids": 76
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    # Initialize the sum variable to zero\n    xor_sum = 0\n\n    # Iterate through the list\n    for i in range(n):\n        # Find the xor of all numbers in the list except the current number\n        for j in range(i+1,n):\n            # Add the xor of the current pair to the sum variable\n            xor_sum += arr[i] ^ arr[j]\n\n    # Return the sum variable\n    return xor_sum",
        "num_ids": 106
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s += arr[i] ^ arr[j]\n    return s",
        "num_ids": 77
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function returns the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor",
        "num_ids": 80
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = xor_sum + (arr[i] ^ arr[j])\n    return xor_sum\n",
        "num_ids": 94
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through each pair of elements in the list and calculate their xor\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    \n    # Return the sum of xor of all pairs of numbers in the list\n    return sum",
        "num_ids": 117
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result",
        "num_ids": 74
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts a list using heap sort algorithm.\n    \"\"\"\n    heap = iterable[:]\n    n = len(heap)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(heap, n, i)\n    for i in range(n-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap, i, 0)\n    return heap",
        "num_ids": 125
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts a list using heap sort algorithm.\n    '''\n\n    # Create a max heap from the given iterable\n    heap = iterable\n    hq.heapify(heap)\n\n    # Sort the iterable using heap sort\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list",
        "num_ids": 92
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable (list, tuple, etc.) as input and returns a sorted list using heap sort.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 90
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and returns a sorted list using heap sort algorithm.\n    '''\n    heap = iterable[:]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 73
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 70
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable and returns a sorted list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 82
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given list using heap sort algorithm.\n    \n    Args:\n    - iterable: A list of elements to be sorted.\n    \n    Returns:\n    - A new sorted list.\n    \"\"\"\n    heap = iterable\n    hq.heapify(heap)\n    n = len(heap)\n    sorted_list = []\n    for i in range(n):\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 110
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using the heap sort algorithm.\n    '''\n    # Convert the iterable to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # Sort the heap in place\n    n = len(heap)\n    for i in range(n-1, 0, -1):\n        # Move the maximum element to the end of the heap\n        hq.heappop(heap)\n\n    # Convert the heap back to a list and return it\n    return list(heap)",
        "num_ids": 125
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort.\n    '''\n    heap = iterable[:]  # make a copy of the iterable\n    heapq.heapify(heap)  # convert the list into a heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))  # remove and return largest element\n    return result[::-1]  # reverse the result to get sorted order",
        "num_ids": 105
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 63
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount < actual_cost:\n        return False\n    else:\n        return True",
        "num_ids": 48
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    This function will check whether the given sale amount has no profit and no loss.\n    If the sale amount is greater than the actual cost, it will return True, otherwise, it will return False.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 80
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost <= sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit or loss exists\")",
        "num_ids": 66
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    \n    if profit > 0:\n        return False\n    elif profit < 0:\n        return False\n    else:\n        return True",
        "num_ids": 72
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given sale amount has no profit and no loss.\n    :param actual_cost: The actual cost of the item.\n    :param sale_amount: The amount sold.\n    :return: True if the sale amount has no profit and no loss, False otherwise.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return False\n    else:\n        return True",
        "num_ids": 97
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print(\"There is profit\")\n    elif sale_amount == actual_cost:\n        print(\"There is no profit and no loss\")\n    else:\n        print(\"There is loss\")",
        "num_ids": 84
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    :param actual_cost: float or int, the actual cost of the item.\n    :param sale_amount: float or int, the amount obtained after selling the item.\n    :return: True if the sale has no profit and no loss, otherwise False.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit >= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 118
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    This function takes in two arguments: actual_cost and sale_amount.\n    It returns True if sale_amount has no profit and no loss, otherwise False.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True",
        "num_ids": 86
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        print(\"The sale has a profit.\")\n    elif sale_amount < actual_cost:\n        print(\"The sale has a loss.\")\n    else:\n        print(\"There is no profit or loss.\")",
        "num_ids": 67
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given sale amount has no profit and no loss.\n    :param actual_cost: the actual cost of the item before selling\n    :param sale_amount: the amount sold for\n    :return: True if there is no profit and no loss, False otherwise\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 96
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index for a given wind velocity (v) in km/h and temperature (t) in Celsius.\n    Returns the wind chill index rounded to the nearest integer.\n    \"\"\"\n    # convert wind velocity to m/s\n    v = v / 3.6\n    \n    # calculate wind chill index using formulas\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # round to nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "num_ids": 187
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t_f - 35.75 * (v ** 0.16) + 0.4275 * t_f * (v ** 0.16)\n    \n    # Round wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "num_ids": 180
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to kelvin\n    t += 273.15\n    \n    # Calculate the wind chill index using the formula\n    wci = 13.12 + 0.6215 * v - 11.37 * math.pow(t,0.16) + 0.3965 * v * math.pow(t,0.16)\n    \n    # Convert the wind chill index from kelvin to celsius\n    wci -= 273.15\n    \n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    \n    return wci",
        "num_ids": 193
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert velocity and temperature from km/h to m/s and celsius respectively\n    v = v / 3.6\n    t = (t - 32) * 5 / 9\n    \n    # calculate wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n    \n    # round the wind chill index to the next integer\n    return round(wind_chill_index)",
        "num_ids": 186
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert velocity from km/h to m/s\n    v_ms = v / 3.6\n\n    # Calculate the wind chill index using the formulation given in the ASHRAE Handbook - Fundamentals (SI)\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n\n    # Round the wind chill index to the next integer\n    return round(wind_chill_index)",
        "num_ids": 190
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # convert velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # calculate the wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n    \n    # round the wind chill index to the next integer\n    wci = round(wci)\n    \n    return wci",
        "num_ids": 138
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind velocity from km/h to m/s\n    v = v / 3.6\n    \n    # calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v,0.16) + 0.3965 * t * math.pow(v,0.16)\n    \n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "num_ids": 183
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    t_fahrenheit = (t * (9/5)) + 32\n    \n    # Calculate wind chill index using the formula from the National Weather Service\n    wind_chill_index = 35.74 + (0.6215 * t_fahrenheit) - (35.75 * (v**0.16)) + (0.4275 * t_fahrenheit * (v**0.16))\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "num_ids": 195
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the Wind Chill Index (WCI) rounded to the next integer.\n\n    :param v: Wind velocity in km/h\n    :param t: Temperature in celsius\n    :return: Wind Chill Index in celsius\n    \"\"\"\n    # Convert wind velocity from km/h to m/s\n    v = v * 0.27777778\n\n    # Calculate the Wind Chill Index (WCI)\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the Wind Chill Index to the next integer\n    wci = round(wci)\n\n    return wci",
        "num_ids": 198
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    t_f = (t * 1.8) + 32\n    wci = 35.74 + 0.6215 * t_f - 35.75 * (v ** 0.16) + 0.4275 * t_f * (v ** 0.16)\n    return round(wci)",
        "num_ids": 132
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if not name[0].islower():\n            result += len(name)\n    return result",
        "num_ids": 75
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            total_length += len(name)\n    return total_length",
        "num_ids": 85
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            result += len(name)\n    return result",
        "num_ids": 74
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    This function takes a list of names as input and returns the sum of the length of the names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    lower_names = []\n    # create an empty variable to store the sum of the length of the names\n    sum_len = 0\n    \n    # loop through each name in the input list\n    for name in sample_names:\n        # check if the first character of the name is lowercase\n        if name[0].islower():\n            # add the name to the lower_names list\n            lower_names.append(name)\n        else:\n            # calculate the length of the name and add it to the sum_len variable\n            sum_len += len(name)\n    \n    # print the list of names that start with a lowercase letter\n    print(\"Names that start with a lowercase letter:\", lower_names)\n    # print the sum of the length of the names\n    print(\"Sum of the length of the names:\", sum_len)\n    \n    # return the sum of the length of the names\n    return sum_len",
        "num_ids": 248
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length",
        "num_ids": 80
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 52
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^()]*\\)' # regex pattern to match parenthesis and contents inside\n    return re.sub(pattern, '', items) # remove parenthesis and contents from string",
        "num_ids": 52
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)')\n    return pattern.sub('', items)",
        "num_ids": 56
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    result = pattern.sub('', items)\n    return result",
        "num_ids": 62
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    for item in items:\n        item = re.sub(pattern, '', item)\n    return items",
        "num_ids": 67
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes any text inside parentheses and brackets.\n    '''\n    # Use regular expression to match any text inside parentheses and brackets\n    pattern = r'\\([^()]*\\)|\\[[^\\[\\]]*\\]'\n    # Replace all matched patterns with an empty string\n    result = re.sub(pattern, '', items)\n    # Return the modified string\n    return result",
        "num_ids": 95
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 33
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)' # pattern to match parenthesis and what is inbetween\n    return re.sub(pattern, '', items) # substitute pattern with empty string\n    \n",
        "num_ids": 75
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'(\\(.*?\\))')\n    return regex.sub('', items)",
        "num_ids": 58
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)",
        "num_ids": 58
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3 * n - 1) // 2",
        "num_ids": 42
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = (n * (n+1)) * (2*n + 1) // 3\n    return num",
        "num_ids": 53
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    i = 1\n    count = 0\n    while True:\n        # Calculate the current nonagonal number\n        num = (i*(2*i - 1)) // 2\n        \n        # Check if it is the nth nonagonal number\n        if count == n:\n            return num\n        \n        # Increment the counter and the index\n        count += 1\n        i += 1",
        "num_ids": 105
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first two terms of the sequence\n    a = 1\n    b = 1\n    \n    # Calculate the nth nonagonal number\n    for i in range(2, n+1):\n        # Calculate the next term in the sequence\n        c = a + b\n        # Update a and b\n        a = b\n        b = c\n    \n    # Return the nth nonagonal number\n    return a",
        "num_ids": 109
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n        print(total)\n    return total\n",
        "num_ids": 57
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initializing the first and second terms of the sequence\n    a = 1\n    b = 1\n    \n    # Calculating the nth nonagonal number\n    for i in range(2, n+1):\n        # Calculating the next term by adding the previous two terms\n        c = a + b\n        # Updating the values of a and b for the next iteration\n        a = b\n        b = c\n    \n    return c",
        "num_ids": 114
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonals = [1, 1] # first two nonagonal numbers\n    \n    for i in range(2, n):\n        nonagonals.append(nonagonals[i-1] + (i*2))\n        \n    return nonagonals[n-1] # nth nonagonal number\n    \n",
        "num_ids": 93
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonals = []\n    for i in range(1, n+1):\n        nonagonals.append(i*(3*i-1)//2)\n    return nonagonals[n-1]",
        "num_ids": 72
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2",
        "num_ids": 43
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * (3 * n - 1) // 2\n",
        "num_ids": 62
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Check if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"\\b(?!^z)(?=.*z)(?!\\w*z)\\w+\\b\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz\\w*?\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z', except at the start and end of the word.\n\n    Args:\n    text: A string input.\n\n    Returns:\n    A boolean value indicating whether the string contains 'z', except at the start and end of the word.\n    \"\"\"\n\n    pattern = r'\\b(?!z)(?!^)([a-zA-Z]+)(?<!z)(?!$)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 131
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<![\\w\\s])[zZ](?![\\w\\s])\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 65
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\Bz\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?![^ ])z(?![^ ])\\b'\n    return bool(re.search(pattern, text))",
        "num_ids": 47
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\bz\\b'\n    return bool(re.search(pattern, text))",
        "num_ids": 61
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Check if a string contains 'z', except at the start and end of the word.\n    '''\n\n    # Use regular expression to match pattern 'z' except at start and end of word\n    pattern = r'(?<!\\w)z(?!\\w)'\n\n    # Return True if pattern is found in the string, else False\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 106
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*\\b)z(?!.*\\b)\\w*\\b'\n    return re.search(pattern, text) is not None",
        "num_ids": 53
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the input array\n    n = len(input)\n\n    # Reverse the array upto position k\n    for i in range(k//2):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n\n    # Print the reversed array\n    print(input)",
        "num_ids": 106
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    return input[:k][::-1] + input[k:]",
        "num_ids": 29
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_array_upto_k(arr, k):\n    return arr[:k][::-1] + arr[k:]",
        "num_ids": 29
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_array_upto_k(arr, k):\n    return arr[:k+1][::-1] + arr[k+1:]",
        "num_ids": 33
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize empty list to store reversed array\n    reversed_array = []\n    \n    # Loop through the input array and append each element to the reversed array\n    for i in range(len(input)):\n        if i < k:\n            reversed_array.append(input[i])\n        else:\n            reversed_array.insert(0, input[i])\n            \n    # Return the reversed array\n    return reversed_array",
        "num_ids": 118
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_array_upto_k(arr, k):\n    return arr[:k][::-1] + arr[k:]",
        "num_ids": 29
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed_array = []\n    for i in range(k):\n        reversed_array.append(input[i])\n    for i in range(k, len(input)):\n        reversed_array.append(input[i])\n    return reversed_array",
        "num_ids": 87
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k and returns the array reversed up to the kth position.\n    \"\"\"\n    # create two pointers, one at the start of the array and the other at the kth position\n    i = 0\n    j = k - 1\n\n    # swap elements until the pointers meet in the middle\n    while i < j:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n\n    # return the reversed array\n    return input",
        "num_ids": 128
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup = test_tup + (test_dict,)\n    return test_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + (test_dict,)",
        "num_ids": 55
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a list to make it mutable\n    test_list = list(test_tup)\n    # Append the dictionary to the list\n    test_list.append(test_dict)\n    # Convert the list back to a tuple\n    return tuple(test_list)",
        "num_ids": 100
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function adds a dictionary to the tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 43
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # create a 2D matrix to store the maximum average for each path ending at that cell\n    max_avg = [[0 for j in range(n)] for i in range(n)]\n    # initialize the first row and column of the matrix with their respective costs\n    for i in range(n):\n        max_avg[i][0] = cost[i][0]\n        max_avg[0][i] = cost[0][i]\n    # fill in the rest of the matrix using dynamic programming approach\n    for i in range(1, n):\n        for j in range(1, n):\n            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]\n    # find the maximum average path using the final cell in the matrix\n    max_avg_path = max_avg[n-1][n-1]\n    return max_avg_path",
        "num_ids": 317
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n\n    for i in range(n):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            max_avg = max(max_avg, (dp[i][j] + dp[i][j-1] + dp[i-1][j] - cost[i][j]) / 3)\n\n    return max_avg",
        "num_ids": 221
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    n = len(cost)\n    # initialize the max average and the visited cells\n    max_avg = float('-inf')\n    max_cells = []\n    # iterate through all possible paths\n    for i in range(1, n):\n        for j in range(1, n):\n            # compute the total cost of the path\n            total_cost = cost[0][0]\n            visited = [(0, 0)]\n            for k in range(1, n):\n                if k < n-i:\n                    # check right\n                    total_cost += cost[k][j]\n                    visited.append((k, j))\n                if k < n-j:\n                    # check down\n                    total_cost += cost[i][k]\n                    visited.append((i, k))\n            # compute the average cost and check if it is greater than the current max\n            avg_cost = total_cost / len(visited)\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_cells = visited\n    # return the maximum average and the visited cells\n    return max_avg, max_cells",
        "num_ids": 336
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    n = len(cost)\n    \n    # Create a list to store the maximum average for each cell\n    max_avg = [[0] * n for _ in range(n)]\n    \n    # Initialize the first row and column with the cost of the cell\n    for i in range(n):\n        max_avg[i][0] = cost[i][0]\n        max_avg[0][i] = cost[0][i]\n        \n    # Fill in the rest of the table\n    for i in range(1, n):\n        for j in range(1, n):\n            # Compute the maximum average for each cell as the maximum of the average of the two previous cells\n            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]\n            \n            # Compute the maximum average for the top-left cell as the maximum of the average of the two previous cells\n            if i == j == 1:\n                max_avg[0][0] = max(max_avg[0][0], max_avg[0][1], max_avg[1][0], max_avg[1][1]) + cost[0][0]\n    \n    # Return the maximum average of all paths\n    return max_avg[n-1][n-1]",
        "num_ids": 387
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1]/2\n",
        "num_ids": 231
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n\n    # Initialize the maximum average and the maximum path\n    max_avg = 0\n    max_path = []\n\n    # For each cell in the matrix\n    for i in range(n):\n        for j in range(n):\n            # Check if this cell is the start of a path\n            if i == 0 and j == 0:\n                # Compute the average of this path\n                avg = cost[i][j]\n                if i == j == 0:\n                    num_cells = 1\n                else:\n                    num_cells = 2\n            elif i == 0:\n                # Compute the average of this path\n                avg = cost[i][j] + max_avg / 2\n                num_cells = 2\n            elif j == 0:\n                # Compute the average of this path\n                avg = cost[i][j] + max_avg / 2\n                num_cells = 2\n            else:\n                # Compute the average of this path\n                avg = cost[i][j] + max(max_avg / 2, max_avg / 2)\n                num_cells = 3\n\n            # Update the maximum average and path if necessary\n            if avg > max_avg:\n                max_avg = avg\n                max_path = [(i, j)]\n            elif avg == max_avg:\n                max_path.append((i, j))\n\n    return max_avg, max_path",
        "num_ids": 405
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            curr_avg = dp[i][j]/(2 if i == j else 2*2)\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n    return max_avg",
        "num_ids": 203
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # Initialize the maximum average and the corresponding path\n    max_avg = 0\n    max_path = []\n    # Iterate over all possible paths of length n\n    for i in range(n):\n        for j in range(n):\n            # Compute the cost of the current cell\n            cost_here = cost[i][j]\n            # Compute the cost of the path ending at the current cell\n            if i == 0 and j == 0:\n                cost_end = cost[i][j]\n            elif i == 0:\n                cost_end = cost[i][j] + cost[i][j-1]\n            elif j == 0:\n                cost_end = cost[i][j] + cost[i-1][j]\n            else:\n                cost_end = cost[i][j] + max(cost[i-1][j], cost[i][j-1])\n            # Compute the average of the path\n            avg_path = (cost_here + cost_end) / 2\n            # Check if the average of the current path is higher than the maximum average seen so far\n            if avg_path > max_avg:\n                max_avg = avg_path\n                max_path = [[i, j]]\n            elif avg_path == max_avg:\n                max_path.append([i, j])\n    return max_path",
        "num_ids": 306
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    dp = [[0 for i in range(N)] for j in range(N)]\n\n    # Initialize the diagonal elements\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n\n    # Initialize the right and down elements\n    for i in range(N):\n        for j in range(N):\n            if i < j:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n            elif i > j:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average path\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            path_cost = cost[i][j] + dp[i][j]\n            path_length = min(i+1, j+1)\n            avg = path_cost / path_length\n            max_avg = max(max_avg, avg)\n\n    return max_avg",
        "num_ids": 367
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # Base Case\n    dp[0][0] = cost[0][0]\n\n    # Initialize diagonal and horizontal path values\n    for i in range(1, n):\n        dp[i][i] = dp[i-1][i-1] + cost[i][i]\n\n    for i in range(n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    # Fill remaining values using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                dp[i][j] = dp[i-1][j-1] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_cost = float('-inf')\n    max_path = []\n\n    # Find the maximum average path\n    for i in range(n):\n        for j in range(n):\n            path_cost = dp[i][j]\n            path_len = i + j + 1\n            path_avg = path_cost / path_len\n            if path_avg > max_cost:\n                max_cost = path_avg\n                max_path = [(i, j)]\n            elif path_avg == max_cost:\n                max_path.append((i, j))\n\n    return max_path, max_cost",
        "num_ids": 352
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        if details[0] > h and details[1] > w:\n            filtered_students[student] = details\n    return filtered_students",
        "num_ids": 120
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        height, weight = details\n        if height >= h and weight >= w:\n            filtered_students[student] = details\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 60
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 60
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[name] = value\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n\nstudents = {\n    'Alice': (1.65, 50),\n    'Bob': (1.8, 60),\n    'Charlie': (1.7, 55),\n    'David': (1.75, 52),\n    'Emily': (1.6, 45),\n    'Frank': (1.9, 65)\n}",
        "num_ids": 211
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[student] = values\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    \n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n            \n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base**power):\n        total += int(digit)\n    return total",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base)\n        base = str(int(base) ** 2)\n    return sum",
        "num_ids": 78
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base ** power):\n        result += int(digit)\n    return result",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit)**power\n    return base_sum",
        "num_ids": 72
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    \n    return base_sum",
        "num_ids": 71
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for i in range(power):\n        base_sum += int(base)\n        base = str(int(base) ** 2)\n    return base_sum",
        "num_ids": 84
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string to be able to iterate over its digits\n    base_str = str(base)\n    \n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate over each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Raise the digit to the specified power and add it to the sum\n        sum += digit_int ** power\n    \n    # Return the sum\n    return sum",
        "num_ids": 145
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base):\n        result += int(digit) ** power\n    return result",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string and iterate over its digits\n    base_str = str(base)\n    digit_sum = 0\n    for digit in base_str:\n        # Convert the digit back to an integer and multiply it by its position raised to the specified power\n        digit_val = int(digit)\n        digit_sum += digit_val ** power\n    return digit_sum",
        "num_ids": 123
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string\n    base_str = str(base)\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through each digit in the base string\n    for digit in base_str:\n        # Multiply the digit by the specified power and add it to the sum\n        sum += int(digit) ** power\n    # Return the sum\n    return sum",
        "num_ids": 120
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 58
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Extracts all values between quotation marks \" \" from the given string.\n\n    Args:\n        text: A string to search for quotation marks.\n\n    Returns:\n        A list of values between quotation marks.\n    \"\"\"\n    regex = r'\"([^\"]*)\"'\n    matches = re.findall(regex, text)\n    return matches",
        "num_ids": 83
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 60
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of strings containing the values\n    between quotation marks.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 64
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches",
        "num_ids": 61
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches",
        "num_ids": 61
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all matches of pattern between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 48
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result_tup",
        "num_ids": 113
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes a tuple of numbers as input and returns a tuple of length N, where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result_tup",
        "num_ids": 100
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "num_ids": 108
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Takes a tuple of numbers and returns a tuple of length N-1 where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))",
        "num_ids": 83
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result_tup",
        "num_ids": 109
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result",
        "num_ids": 109
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1  # compute the length of the tuple\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)",
        "num_ids": 125
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result_tup",
        "num_ids": 113
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)-1\n    result_tup = tuple(test_tup[i]*test_tup[i+1] for i in range(n))\n    return result_tup",
        "num_ids": 110
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)",
        "num_ids": 111
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists as input and returns the sum of corresponding elements of the lists.\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]",
        "num_ids": 52
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns the element-wise sum of the two lists.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 70
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists and returns the sum of the corresponding elements of the two lists.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 71
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 66
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the element-wise sum of the input lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists should have the same length\")\n    return [a+b for a, b in zip(lst1, lst2)]",
        "num_ids": 109
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"The two lists should have the same length!\")\n        return None\n    else:\n        return [lst1[i] + lst2[i] for i in range(len(lst1))]",
        "num_ids": 119
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]",
        "num_ids": 84
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function removes consecutive duplicates of a given list.\n    '''\n    # group the numbers by their value\n    groups = groupby(nums)\n\n    # iterate over the groups and remove consecutive duplicates\n    result = []\n    for k, g in groups:\n        group_list = list(g)\n        if len(group_list) > 1:\n            # remove consecutive duplicates\n            for i in range(1, len(group_list)):\n                if group_list[i] == group_list[i-1]:\n                    group_list.pop(i)\n                    i -= 1\n        result += group_list\n\n    return result",
        "num_ids": 148
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function removes consecutive duplicates of a given list.\n    '''\n    nums = [key for key, group in groupby(nums)]\n    return nums",
        "num_ids": 48
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby() to group consecutive duplicates together\n    groups = [(k, list(g)) for k, g in groupby(nums)]\n\n    # Remove groups with length 1 (i.e. non-duplicates)\n    groups = [g for g in groups if len(g[1]) > 1]\n\n    # Flatten the list of groups into a single list of duplicates\n    duplicates = [val for group in groups for val in group[1]]\n\n    # Return the original list with duplicates removed\n    return [val for val in nums if val not in duplicates]",
        "num_ids": 153
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "num_ids": 43
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "num_ids": 47
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "num_ids": 42
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a sorted list of tuples (num, count) where count is the number of consecutive duplicates\n    sorted_nums = [(k, len(list(g))) for k, g in groupby(nums)]\n\n    # Remove tuples where count is 1\n    filtered_nums = [(k, v) for k, v in sorted_nums if v > 1]\n\n    # Create a new list with consecutive duplicates removed\n    result = [k for k, _ in filtered_nums]\n\n    return result",
        "num_ids": 137
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    # sort the list in ascending order\n    nums.sort()\n    \n    # group the list by consecutive duplicates\n    groups = [(k, len(list(g))) for k, g in groupby(nums)]\n    \n    # filter the groups with length greater than 1\n    filtered_groups = [group for group in groups if group[1] > 1]\n    \n    # replace the consecutive duplicates with the last element of each group\n    for group in filtered_groups:\n        index = nums.index(group[0])\n        nums[index:index+group[1]] = [nums[-1]] * group[1]\n    \n    # remove the duplicates from the original list\n    nums = list(set(nums))\n    \n    return nums",
        "num_ids": 177
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Find the lateral surface area of a cone given radius r and height h.\n    '''\n    surface_area = math.pi * r * h\n    lateral_surface_area = 2 * math.pi * r * (r + h)\n    return lateral_surface_area / surface_area * 100",
        "num_ids": 89
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone and returns its lateral surface area.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nlateral_surface = lateralsurface_cone(radius, height)\n\nprint(f\"The lateral surface area of the cone is {lateral_surface:.2f}\")",
        "num_ids": 133
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h\n    return lateral_area",
        "num_ids": 62
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+math.sqrt(r**2 + h**2))\n",
        "num_ids": 66
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of a cone using the formula A = (\u03c0r^2 + \u03c0rh)\n    A = (math.pi * r**2) + (math.pi * r * h)\n    return A",
        "num_ids": 94
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in two parameters: radius r and height h.\n    It returns the lateral surface area of a cone with radius r and height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return surface_area",
        "num_ids": 84
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function takes in the radius of a cone and its height and returns the lateral surface area of the cone.\n    \"\"\"\n    surface_area = math.pi * r * h\n    lateral_surface_area = math.pi * r ** 2\n    return surface_area - lateral_surface_area",
        "num_ids": 86
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n    return surface_area",
        "num_ids": 76
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone as inputs and returns the lateral surface area of the cone.\n    '''\n    surface_area = math.pi * r ** 2 + math.pi * r * math.sqrt(r ** 2 + h ** 2)\n    return surface_area",
        "num_ids": 87
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes the radius of the cone and its height as input and returns the lateral surface area of the cone.\n    '''\n    surface_area = math.pi * r * r + math.pi * r * math.sqrt(r**2 + h**2)\n    return surface_area",
        "num_ids": 83
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r'[,.]', ':', text)",
        "num_ids": 46
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n\n    :param text: The text to be replaced\n    :return: The replaced text\n    \"\"\"\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)",
        "num_ids": 73
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[., ]', ':', text)",
        "num_ids": 45
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 48
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[., ]', ':', text)",
        "num_ids": 51
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)",
        "num_ids": 56
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 48
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)",
        "num_ids": 49
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    return re.sub(pattern, ':', text)",
        "num_ids": 54
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colons\n    text = re.sub(r'\\s+', ':', text)\n    # Replace commas with colons\n    text = re.sub(r',+', ':', text)\n    # Replace dots with colons\n    text = re.sub(r'\\.+', ':', text)\n    \n    return text",
        "num_ids": 104
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 139
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 136
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    else:\n        left = 0\n        right = len(A) - 1\n        result = -1\n        while left <= right:\n            mid = (left + right) // 2\n            if A[mid] == x:\n                result = mid\n                right = mid - 1\n            elif A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result",
        "num_ids": 138
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize variables\n    first_occurrence = -1\n    \n    # Traverse through the array and check if the current element is equal to x\n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence = i\n            break\n    \n    # Return the index of the first occurrence of x\n    return first_occurrence",
        "num_ids": 112
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    '''\n    left, right = 0, len(A)-1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "num_ids": 145
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # found the first occurrence\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n    # x not found in A\n    return -1",
        "num_ids": 147
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes an array A and a number x and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    \"\"\"\n    # Initialize variables\n    left = 0\n    right = len(A) - 1\n    \n    # Binary search algorithm\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    # x not found in A\n    return -1",
        "num_ids": 160
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1",
        "num_ids": 138
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_product = [1] * n\n    suffix_product = [1] * n\n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n\n    for i in range(n-2, -1, -1):\n        suffix_product[i] = suffix_product[i+1] * arr[i+1]\n\n    return sum(prefix_product) * sum(suffix_product)",
        "num_ids": 127
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum",
        "num_ids": 68
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    result = 0\n    \n    # Iterate through all sublists of length 1 to n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the product of the sublist\n            sublist_prod = 1\n            for k in range(i, j):\n                sublist_prod *= arr[k]\n            # Add the product of the sublist to the result\n            result += sublist_prod\n    \n    return result",
        "num_ids": 143
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n  # prefix product of all sublists\n    suffix_prod = [1] * n  # suffix product of all sublists\n\n    # Calculate prefix product\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n\n    # Calculate suffix product\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i+1]\n\n    # Calculate sum of products of all possible sublists\n    res = 0\n    for i in range(n):\n        res += prefix_prod[i] * suffix_prod[i]\n\n    return res",
        "num_ids": 181
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            total_sum += prod\n    return total_sum",
        "num_ids": 80
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    # loop through all possible sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # calculate the product of sublist and add to res\n            res += (j-i) * (arr[i-1] if i > 0 else 1)\n    return res",
        "num_ids": 145
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n    prefix_prod = [1] * n\n    suffix_prod = [1] * n\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n    for i in range(n-2, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i+1]\n    for i in range(n):\n        res += prefix_prod[i] * suffix_prod[i]\n        res %= mod\n    return res",
        "num_ids": 160
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n  # prefix products of all sublists\n    \n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n        \n    postfix_prod = [1] * n  # postfix products of all sublists\n    \n    for i in range(n-2, -1, -1):\n        postfix_prod[i] = postfix_prod[i+1] * arr[i+1]\n        \n    subarray_prod = [prefix_prod[i] * postfix_prod[i] for i in range(n)]  # subarray products\n    \n    return sum(subarray_prod)",
        "num_ids": 169
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_subarray_prod(arr):\n    n = len(arr)\n    res = 0\n    left = [0] * n\n    right = [0] * n\n    left[0] = arr[0]\n    for i in range(1, n):\n        left[i] = left[i-1] * arr[i]\n\n    right[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1] * arr[i]\n\n    for i in range(n):\n        res += left[i] * right[i]\n\n    return res",
        "num_ids": 148
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function returns the sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    # Initialize the sum of products to zero\n    sum_of_prod = 0\n    # Iterate through all possible sublists of the given list\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the product of the sublist and add it to the sum of products\n            sublist = arr[i:j]\n            product = 1\n            for num in sublist:\n                product *= num\n            sum_of_prod += product\n    return sum_of_prod",
        "num_ids": 152
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    This function will toggle the bits of the number except the first and last bit.\n    '''\n    # To toggle the bits, we will XOR the number with a mask that will toggle the bits.\n    mask = (1 << len(bin(n)[2:]) - 3) - 1 # We use the binary representation of the number and get the number of bits excluding the first and last two, which are always 0 and 1. We then subtract 1 to get the mask.\n    return n ^ mask # We XOR the number with the mask to toggle the bits.",
        "num_ids": 132
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Convert n to binary string\n    binary = bin(n)[2:]\n    \n    # Toggle all bits except the first and the last\n    toggled = ''\n    for bit in binary:\n        if bit == '0':\n            toggled += '1'\n        else:\n            toggled += '0'\n    \n    # Convert toggled string to integer\n    toggled_int = int(toggled, 2)\n    \n    return toggled_int",
        "num_ids": 100
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # To toggle bits of a number, we need to toggle all the bits except the first and the last bit.\n    # For example, toggling bits in the binary representation of 1101 will give 1011.\n    # We can get the binary representation of the number using bin() function.\n    # We can convert it to a string, slice the first and last characters, and then convert it back to an integer.\n    binary = bin(n)[2:]\n    middle_bits = binary[1:-1]\n    toggled_bits = ''.join(['1' if bit == '0' else '0' for bit in middle_bits])\n    return int('1' + toggled_bits + '1', 2)",
        "num_ids": 217
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    mask = ~(0b11 << 1)  # create a mask with all bits except the first and last set to 1\n    result = (n & mask) ^ (n >> 1)  # toggle the bits in the middle by XORing with the shifted bits\n    return result",
        "num_ids": 90
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11111100   # mask to clear the first and last bits\n    return (n & mask) ^ 0b11111111   # toggle the middle bits using XOR and the complement of the mask\n",
        "num_ids": 116
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggles the middle bits of a number.\n    '''\n    mask = (1 << (len(bin(n))-3)) - 1  # creates a bit mask with all bits set except the first and last ones\n    return (n ^ mask)  # toggles the middle bits of the number using the bit mask",
        "num_ids": 80
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # toggle the bits of n except the first and the last bit\n    toggle_mask = (1 << (n.bit_length() - 2)) - 1 # create a mask that toggles all bits except the first and the last\n    return (n ^ toggle_mask) # apply the toggle mask to n",
        "num_ids": 125
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n\n    Args:\n    - n: an integer\n\n    Returns:\n    - an integer with the same binary representation as n, but with the first and last bits toggled.\n    \"\"\"\n    # First, get the binary representation of n\n    binary = bin(n)[2:]\n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in binary]\n    # Toggle the first and last bits\n    bits[0] = (bits[0] + 1) % 2\n    bits[-1] = (bits[-1] + 1) % 2\n    # Convert the list of bits back to a binary string\n    binary = ''.join(str(bit) for bit in bits)\n    # Convert the binary string back to an integer\n    result = int(binary, 2)\n    return result",
        "num_ids": 204
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes a number as input and toggles the bits of the number except the first and the last bit.\n    \"\"\"\n    # calculate the number of bits in the number\n    num_bits = len(bin(n)) - 2\n    \n    # get the value of the first bit\n    first_bit = n & 1\n    \n    # get the value of the last bit\n    last_bit = (n >> num_bits) & 1\n    \n    # get the value of the middle bits\n    middle_bits = (n >> 1) & ((1 << (num_bits - 2)) - 1)\n    \n    # toggle the middle bits\n    middle_bits = ~middle_bits\n    \n    # combine the first, middle, and last bits\n    result = first_bit | (middle_bits << 1) | (last_bit << num_bits)\n    \n    return result",
        "num_ids": 194
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # extract the first and last bit of the number\n    first_bit = (n >> 0) & 1\n    last_bit = (n >> (len(bin(n)) - 2)) & 1\n\n    # toggle the bits of the number except the first and the last bit\n    n = (n >> 1) & ~1\n    n = n << 1\n    n = n | (1 - first_bit)\n\n    # toggle the last bit of the number\n    last_bit = (last_bit ^ 1) << (len(bin(n)) - 1)\n    n = n | last_bit\n\n    return n",
        "num_ids": 196
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    if i == 0 or a[i-1] < x:\n        return i\n    else:\n        return i-1",
        "num_ids": 57
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 89
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return -1",
        "num_ids": 78
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    if a[i] == x:\n        return i\n    return i - 1",
        "num_ids": 118
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif a[index-1] < x:\n        return index\n    else:\n        return index-1",
        "num_ids": 85
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n",
        "num_ids": 90
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 90
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 51
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    This function takes a string as input and checks whether the string starts with a vowel or not using regex.\n    '''\n    match = re.match(regex, string) \n    if match: \n        return True \n    else: \n        return False ",
        "num_ids": 87
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*$'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 78
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    This function takes a string as input and returns True if the string starts with a vowel, False otherwise.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 85
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)\n\nprint(geometric_sum(5)) # Output: 20.833333333333332",
        "num_ids": 76
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)",
        "num_ids": 56
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)",
        "num_ids": 39
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + geometric_sum(n - 1)",
        "num_ids": 45
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Returns the sum of the first n numbers in the geometric series.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * geometric_sum(n - 1)",
        "num_ids": 61
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) + geometric_sum(n - 1)",
        "num_ids": 92
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1-n) * geometric_sum(n-1) + n\n\nprint(geometric_sum(5))",
        "num_ids": 70
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Returns the sum of the first n natural numbers using the formula:\n    sum = (n / (1 - r))\n\n    where r is the ratio of consecutive natural numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        r = 1\n        for i in range(2, n+1):\n            r *= i\n        return (n / (1 - r))",
        "num_ids": 94
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1-n**-1) + geometric_sum(n-1)",
        "num_ids": 62
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)",
        "num_ids": 89
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef find_index(n):\n    num = (math.pow(10, n) - 1) * (math.pow(10, n - 1) - 1) // 8 + 1\n    return num\n\nprint(find_index(5)) # Output: 153",
        "num_ids": 73
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    num_digits = n\n    triangular_numbers = [0]\n    for i in range(1, n+1):\n        triangular_numbers.append(triangular_numbers[-1] + i)\n        \n    smallest_triangular_number = triangular_numbers[-1]\n    index = triangular_numbers.index(smallest_triangular_number)\n    return index",
        "num_ids": 145
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    k = int(n * (n + 1) / 2)\n    return k - 1",
        "num_ids": 53
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    index = 0\n    while True:\n        triangular = int(0.5 * count * (count + 1))\n        if len(str(triangular)) == n:\n            return index\n        elif len(str(triangular)) > n:\n            return -1\n        else:\n            count += 1\n            index += 1",
        "num_ids": 139
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # find the number of digits in the triangular number\n    num_of_digits = n * 2\n\n    # find the largest number with n digits\n    max_num = int(math.pow(10, num_of_digits) / 2)\n\n    # initialize the variables for the loop\n    num = 1\n    count = 1\n\n    # loop through all numbers from 1 to the largest number with n digits\n    while num <= max_num:\n        # check if the number is triangular\n        if is_triangular(num):\n            # if it is triangular, increment the count and continue the loop\n            count += 1\n            continue\n\n        # if the number is not triangular, return the count\n        return count - 1\n\n    # if the loop completes without finding a triangular number, the function has failed to find the index\n    return \"Function failed to find index\"\n\ndef is_triangular(num):\n    '''\n    Helper function to check if a number is triangular\n    '''\n    return ((8 * num + 1) ** 0.5 - 1) % 1 == 0\n",
        "num_ids": 301
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function takes an integer n and returns the index of the smallest triangular number with n digits. \n    '''\n    if n <= 0: \n        return -1\n    else: \n        # We will find the first digit of the triangular number by solving the equation \n        # k^2 + k - 2n = 0\n        # where k is a positive integer. \n        k = 1\n        while True: \n            if math.pow(k, 2) + k - 2*n <= 0: \n                break\n            k += 1\n        \n        # We will now find the number of digits in the triangular number and the number of times \n        # we need to increment k until we get a triangular number with n digits. \n        num_digits = 0\n        while True: \n            num_digits += 1\n            if num_digits * k >= math.pow(10, n): \n                break\n        \n        # We will now increment k until we get a triangular number with n digits. \n        while True: \n            if num_digits * k >= math.pow(10, n): \n                break\n            k += 1\n        \n        # We will now return the index of the triangular number with n digits. \n        return (k - 1) * (k - 2) // 2 + num_digits - 1",
        "num_ids": 292
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # calculate the number of digits in the triangular number\n    num_digits = n * 2\n    \n    # calculate the number of triangular numbers with n digits\n    num_triangular_numbers = math.factorial(num_digits)\n    \n    # subtract 1 from the number of triangular numbers to get the index of the smallest triangular number\n    return num_triangular_numbers - 1",
        "num_ids": 147
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.floor((n * (n+1))/2))",
        "num_ids": 80
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    # The formula to find the smallest triangular number with n digits is:\n    # T(n) = n(n+1)/2\n    \n    # To find the index of the smallest triangular number with n digits, we subtract 1 from n\n    # and take the ceiling of the square root of the difference between T(n) and the largest\n    # triangular number with n digits. This is because the index of the smallest triangular\n    # number with n digits is the largest index of a triangular number that has n digits.\n    \n    largest_triangular = (n*(n+1))//2\n    difference = largest_triangular - n*(n+1)//2\n    index = math.ceil(math.sqrt(difference))\n    \n    return index\n    \n",
        "num_ids": 172
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = n * (n + 1) // 2\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 108
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict",
        "num_ids": 113
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "num_ids": 56
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "num_ids": 81
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict",
        "num_ids": 108
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary with adjacent elements as key-value pairs.\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 82
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes in a tuple and converts it to a dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Tuple length is odd, cannot form key-value pairs\")\n\n    key_val_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_val_dict[test_tup[i]] = test_tup[i+1]\n\n    return key_val_dict",
        "num_ids": 118
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    my_dict = {}\n    for i in range(len(test_tup)-1):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict",
        "num_ids": 80
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function converts the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            result[test_tup[i]] = test_tup[i+1]\n    return result",
        "num_ids": 80
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "num_ids": 81
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all the characters in the string are same, else it returns False.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Check if all the characters in the string are the same or not.\n\n    :param s: A string\n    :return: True if all the characters are the same, False otherwise.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are the same, otherwise False.\n    \"\"\"\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True",
        "num_ids": 67
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 31
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 46
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string s as input and checks whether all the characters in the string are the same or not.\n    '''\n    # Initialize a boolean variable to keep track of whether all characters are the same or not\n    all_same = True\n    \n    # Iterate over each character in the string and check if it is the same as the first character\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            all_same = False\n            break\n    \n    # If all characters are the same, return True. Otherwise, return False.\n    if all_same:\n        return True\n    else:\n        return False",
        "num_ids": 145
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1",
        "num_ids": 41
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function will check whether all the characters in the string are the same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all characters are the same, and False otherwise.\n    \"\"\"\n    return len(set(s)) == 1",
        "num_ids": 47
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = 0.5 * side\n    # calculate the area of the tetrahedron\n    area = math.sqrt(6/2) * s ** 2\n    return area",
        "num_ids": 86
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(3) / 4) * side ** 2) / 3\n    return area",
        "num_ids": 61
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron.\n    '''\n    s = side / math.sqrt(3)\n    area = (3 ** 0.5) / 2 * s ** 2\n    return area",
        "num_ids": 61
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6)/4) * pow(side, 2)\n    return area",
        "num_ids": 58
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (6/math.sqrt(2)) * side ** 2\n    return area\n",
        "num_ids": 53
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron with the given side length.\n    '''\n    volume = (math.sqrt(24 * side ** 2 + 1) + 6 * side) / 36\n    area = (volume * 6) / 4\n    return area",
        "num_ids": 77
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron given its side length.\n    '''\n    # Calculate the semi-perimeter\n    s = (3 * side) / (4 * math.tan(math.pi / 3))\n    \n    # Calculate the area using Heron's formula\n    area = (math.sqrt(3) / 4) * s ** 2\n    \n    return area",
        "num_ids": 95
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    volume = (math.sqrt(2)/3) * side ** 3\n    return 6 * volume",
        "num_ids": 51
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    s = side / (math.sqrt(2) * math.sqrt(3))\n    return math.sqrt(6) * s ** 2",
        "num_ids": 64
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    volume = (math.sqrt(6)/3) * side**3\n    area = (6 * side**2) / (4 * (math.sqrt(2) + 1))\n    return area",
        "num_ids": 72
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list as input and rotates it to the right by the specified number of items.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list",
        "num_ids": 68
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n elements\n    \"\"\"\n    return lst[-n:] + lst[:-n]",
        "num_ids": 35
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function rotates a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    if m > n:\n        m = m % n\n    \n    lst = lst[n-m:] + lst[:n-m]\n    \n    return lst",
        "num_ids": 70
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list to the right by m positions.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list",
        "num_ids": 61
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n  # To handle the case where m > n\n    \n    # Rotate the list by m positions to the right\n    temp = list[-m:] + list[:-m]\n    \n    return temp",
        "num_ids": 105
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list to the right by n positions.\n    \"\"\"\n    return lst[-n:] + lst[:-n]",
        "num_ids": 37
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n positions.\n    \n    :param lst: the list to rotate\n    :param n: the number of positions to rotate\n    :return: the rotated list\n    \"\"\"\n    return lst[-n:] + lst[:-n]",
        "num_ids": 63
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n    lst: The list to be rotated.\n    m: The number of items to be rotated to the right.\n\n    Returns:\n    The rotated list.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst1 = lst[:m][::-1]\n    lst2 = lst[m:]\n    lst2.extend(lst1)\n    return lst2",
        "num_ids": 108
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a list by k positions to the right.\n    \"\"\"\n    n = len(lst)\n    k = k % n  # make sure k is within bounds\n    return lst[-k:] + lst[:-k]",
        "num_ids": 57
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[:n-m], list[n-m:] = list[n-m:], list[:n-m]\n    return list",
        "num_ids": 98
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup",
        "num_ids": 38
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup",
        "num_ids": 38
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Check if the given tuple has any None value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))\n\nstartnum = int(input(\"Enter start number: \"))\nendnum = int(input(\"Enter end number: \"))\n\nprint(\"Numbers divisible by every digit in the range:\", divisible_by_digits(startnum, endnum))",
        "num_ids": 106
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Create a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda num: all(num % int(digit) == 0 for digit in str(num))\n\n    # Loop through the range of numbers and check if each number is divisible by every digit it contains\n    for num in range(startnum, endnum+1):\n        if is_divisible(num):\n            print(num)",
        "num_ids": 143
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "num_ids": 52
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1)))",
        "num_ids": 52
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            print(num)",
        "num_ids": 64
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def check_divisible_by_digits(num):\n        \"\"\"\n        Check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = list(map(int, str(num)))\n        return all(num % digit == 0 for digit in digits)\n    \n    return list(filter(check_divisible_by_digits, range(startnum, endnum + 1)))",
        "num_ids": 133
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    is_divisible = lambda num: all(int(digit) % num == 0 for digit in str(num))\n    return [num for num in range(startnum, endnum+1) if is_divisible(num)]",
        "num_ids": 67
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes two arguments startnum and endnum, and returns a list of all numbers between startnum and endnum\n    that are divisible by every digit they contain.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result",
        "num_ids": 113
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum \n    where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible_list = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible_list.append(num)\n    return divisible_list",
        "num_ids": 116
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))",
        "num_ids": 59
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return round((math.pi * r**2 * a/360), 2)\n\nprint(sector_area(5, 360)) # should return None\nprint(sector_area(5, 180)) # should return 78.54",
        "num_ids": 133
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi",
        "num_ids": 45
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        sector_area = (r**2)*a/360\n        return sector_area",
        "num_ids": 90
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2)*a/360\n        return area",
        "num_ids": 86
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns its area.\n    If the angle is greater than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360",
        "num_ids": 80
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r ** 2) * (a / 360)",
        "num_ids": 50
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360 * math.pi\n",
        "num_ids": 87
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)",
        "num_ids": 89
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a/360)",
        "num_ids": 86
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360\n\nprint(sector_area(5, 180))  # Output: 78.53981633974483\nprint(sector_area(7, 365))  # Output: None",
        "num_ids": 138
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three strings as input and returns their longest common subsequence.\n    \"\"\"\n    # Initialize the matrix with zeros\n    m = [[[0 for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the matrix using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    m[i][j][k] = m[i-1][j-1][k-1] + 1\n                else:\n                    m[i][j][k] = max(m[i-1][j][k], m[i][j-1][k], m[i][j][k-1])\n\n    # Find the LCS by backtracking from the bottom-right corner of the matrix\n    lcs = \"\"\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif m[i-1][j][k] >= m[i][j-1][k] and m[i-1][j][k] >= m[i][j][k-1]:\n            i -= 1\n        elif m[i][j-1][k] >= m[i-1][j][k] and m[i][j-1][k] >= m[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "num_ids": 442
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence of three strings\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 3D array to store lengths of LCS of subsequences of X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the LCS table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    lcs[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] == Z[k-1]):\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # LCS of X[0..m-1], Y[0..n-1] and Z[0..o-1]\n    result = \"\"\n    x = m\n    y = n\n    z = o\n    while (x!= 0 and y!= 0 and z!= 0):\n        if (X[x-1] == Y[y-1] == Z[z-1]):\n            result = X[x-1] + result\n            x -= 1\n            y -= 1\n            z -= 1\n        elif (lcs[x-1][y][z] > lcs[x][y-1][z] and lcs[x-1][y][z] > lcs[x][y][z-1]):\n            x -= 1\n        elif (lcs[x][y-1][z] > lcs[x-1][y][z] and lcs[x][y-1][z] > lcs[x][y][z-1]):\n            y -= 1\n        else:\n            z -= 1\n\n    return result",
        "num_ids": 519
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n  \n    # Create a 3D table to store lengths of LCS of substrings. \n    L = [[[0 for k in range(o + 1)] for j in range(n + 1)] for i in range(m + 1)] \n  \n    # Fill the LCS table in bottom-up manner \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] == Z[k - 1]): \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n  \n    # Find the length of LCS of the given three strings \n    lcs_length = L[m][n][o] \n  \n    # Create a character array to store the LCS of given three strings \n    lcs = [\"\"] * (lcs_length + 1) \n    lcs[lcs_length] = \"\" \n  \n    # Start from the bottom-right corner and one by one store the characters in lcs[] \n    i = m \n    j = n \n    k = o \n    while (i > 0 and j > 0 and k > 0): \n        if (X[i - 1] == Y[j - 1] == Z[k - 1]): \n            lcs[lcs_length - 1] = X[i - 1] \n            lcs_length -= 1\n            i -= 1\n            j -= 1\n            k -= 1\n        elif (L[i - 1][j][k] > L[i][j - 1][k] and L[i - 1][j][k] > L[i][j][k - 1]): \n            i -= 1\n        elif (L[i][j - 1][k] > L[i - 1][j][k] and L[i][j - 1][k] > L[i][j][k - 1]): \n            j -= 1\n        else: \n            k -= 1\n  \n    # Return the LCS of the given three strings \n    return \"\".join(lcs)",
        "num_ids": 589
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function finds the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n  \n    # Create a 3D table to store lengths of LCS of subsequences \n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n  \n    # Fill the table using dynamic programming  \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n  \n    # Find the length of LCS and print it \n    len_LCS = L[m][n][o] \n    return len_LCS\n",
        "num_ids": 310
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of subsequence of X[0..m-1], Y[0..n-1] and Z[0..p-1]\n    L = [[[0] * (p + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # Following steps build L[m+1][n+1][p+1] in bottom up fashion. Note that L[i][j][k] contains length of LCS of X[0..i-1], Y[0..j-1] and Z[0..k-1]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i - 1] == Y[j - 1] == Z[k - 1]):\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # The LCS of X[0..m-1], Y[0..n-1] and Z[0..p-1] is stored in L[m][n][p]\n    return L[m][n][p]",
        "num_ids": 393
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function returns the length of the longest common subsequence (LCS) for the given three string sequence X, Y, and Z.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # create a 2D table to store the LCS lengths\n    lcs_table = [[[0]*(o+1) for j in range(n+1)] for i in range(m+1)]\n    # fill the LCS table in a bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs_table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs_table[i][j][k] = lcs_table[i-1][j-1][k-1] + 1\n                else:\n                    lcs_table[i][j][k] = max(lcs_table[i-1][j][k], lcs_table[i][j-1][k], lcs_table[i][j][k-1])\n    # return the LCS length\n    return lcs_table[m][n][o]",
        "num_ids": 320
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0]*(o+1) for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    lcs = ''\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "num_ids": 401
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create three matrices of size (m+1)x(n+1)x(o+1)\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    # initialize first row and column of each matrix with zeros\n    for i in range(m+1):\n        dp[i][0][0] = 0\n    for j in range(n+1):\n        dp[0][j][0] = 0\n    for k in range(o+1):\n        dp[0][0][k] = 0\n    # fill the matrices\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    # find the LCS using the matrix\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] >= dp[i][j-1][k] and dp[i-1][j][k] >= dp[i][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] >= dp[i-1][j][k] and dp[i][j-1][k] >= dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs",
        "num_ids": 504
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0] * (o+1) for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    lcs = ''\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "num_ids": 386
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the LCS table using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Find the longest common subsequence\n    result = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            result = X[i-1] + result\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k]:\n            i -= 1\n        elif lcs[i-1][j][k] > lcs[i][j][k-1]:\n            k -= 1\n        else:\n            j -= 1\n\n    return result",
        "num_ids": 387
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capitalized words in the string using regex\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Replace each capitalized word with a space followed by the same capitalized word\n    for word in capitalized_words:\n        str1 = re.sub(rf'\\b{word}\\b', rf' {word}', str1)\n\n    # Remove extra spaces\n    str1 = re.sub(r'\\s+','', str1)\n\n    return str1",
        "num_ids": 152
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Splitting the string into a list of words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Joining the words with spaces in between\n    result =''.join(words)\n    \n    return result",
        "num_ids": 72
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    result = \"\"\n    for i in range(len(words)):\n        if i == len(words) - 1:\n            result += words[i]\n        else:\n            result += words[i] + \" \"\n    return result",
        "num_ids": 111
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Regular expression to match words starting with capital letters\n    regex = r\"(?<![\\w'])([A-Z][a-z]+)\"\n    # Replace matched words with spaces\n    result = re.sub(regex, r\" \\1\", str1)\n    return result",
        "num_ids": 74
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regex\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with spaces\n    result =''.join(words)\n    return result",
        "num_ids": 89
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(\\b[A-Z][a-z]+\\b)'\n    return re.sub(pattern, r'\\1 ', str1)",
        "num_ids": 71
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # join the words with spaces in between\n    result =''.join(words)\n\n    return result",
        "num_ids": 89
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Use regex to match words starting with a capital letter\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Capitalize the first letter of each word and add spaces between them\n    result =''.join(word.capitalize() for word in words)\n    return result",
        "num_ids": 86
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = re.findall(r'\\b[A-Z][^A-Z]*', str1)\n    return''.join(words)",
        "num_ids": 69
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][^\\s]*\\b', str1)\n    result =''.join(words)\n    return result",
        "num_ids": 72
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    result = []\n    for num in nums:\n        result.append(str(num))\n    return result",
        "num_ids": 109
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # split the string to convert each string to a list of characters\n    # then convert each character back to an integer\n    nums_int = [int(\"\".join(filter(str.isdigit, s))) for s in nums_str]\n    # sort the integers using the `sorted()` function\n    sorted_nums = sorted(nums_int)\n    # convert the sorted integers back to strings of numbers\n    sorted_nums_str = [str(n) for n in sorted_nums]\n    # return the sorted list of strings of numbers\n    return sorted_nums_str",
        "num_ids": 151
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert each element to int\n    nums = [int(num_str) for num_str in nums_str]\n    \n    # sort the list of integers\n    nums_sorted = sorted(nums)\n    \n    # convert the sorted list of integers back to strings\n    nums_str_sorted = [str(num) for num in nums_sorted]\n    \n    return nums_str_sorted",
        "num_ids": 136
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(i) if i.isdigit() else i for i in x.split()])\n",
        "num_ids": 90
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function will take a list of strings of numbers as input and sort it numerically.\n    \"\"\"\n    # Convert the list to list of tuples where the first element of the tuple is the string and the second element is the integer value of the string\n    nums_int = [(num_str, int(num_str)) for num_str in nums_str]\n    # Sort the list of tuples based on the second element of the tuple (integer value)\n    nums_int.sort(key=lambda x: x[1])\n    # Convert the sorted list of tuples back to a list of strings\n    nums_str = [num_int[0] for num_int in nums_int]\n    return nums_str",
        "num_ids": 165
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "num_ids": 49
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert the strings to integers\n    nums = list(map(int, nums_str))\n    # sort the integers\n    nums.sort()\n    # convert the integers back to strings and return the sorted list\n    return list(map(str, nums))",
        "num_ids": 85
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))",
        "num_ids": 49
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))",
        "num_ids": 49
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str",
        "num_ids": 50
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)",
        "num_ids": 44
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)",
        "num_ids": 44
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Adding the tuple to the list\n    test_list.extend(test_tup)\n    # Returning the modified list\n    return test_list",
        "num_ids": 63
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        # Check if the left child is less than or equal to parent\n        if arr[2 * i + 1] > arr[i]:\n            return False\n        # Check if the right child is less than or equal to parent\n        if arr[2 * i + 2] > arr[i]:\n            return False\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    return True",
        "num_ids": 134
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return True",
        "num_ids": 80
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    \n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    for i in range(len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True",
        "num_ids": 170
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    if left < n or right < n:\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    return True\n\ndef check_min_heap(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True",
        "num_ids": 179
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < len(arr) and arr[i] > arr[left]:\n            return False\n        if right < len(arr) and arr[i] > arr[right]:\n            return False\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 156
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 144
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents a min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents a min heap or not.\n    '''\n    for i in range((len(arr) - 2) // 2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True",
        "num_ids": 175
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    # Check if the given array is valid or not\n    if not isinstance(arr, list) or len(arr) == 0:\n        return False\n    # Check if the given array represents min heap or not\n    if 2*i + 1 < n and arr[2*i + 1] < arr[i]:\n        return False\n    if 2*i + 2 < n and arr[2*i + 2] < arr[i]:\n        return False\n    # Recursively check for left and right children\n    if 2*i + 1 < n:\n        return check_min_heap_helper(arr, 2*i + 1)\n    if 2*i + 2 < n:\n        return check_min_heap_helper(arr, 2*i + 2)\n    return True\n\ndef check_min_heap(arr):\n    if not isinstance(arr, list) or len(arr) == 0:\n        return False\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 247
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 139
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nprint(jacobsthal_num(6)) # output: 21",
        "num_ids": 99
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2) ",
        "num_ids": 166
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j1 = 1\n        j2 = 1\n        for i in range(3, n+1):\n            j = j1 + 2*j2\n            j2 = j1\n            j1 = j\n        return j",
        "num_ids": 130
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Jacobsthal number is\", jacobsthal_num(n))",
        "num_ids": 205
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 82
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sorting the list in ascending order of second element of tuple\n    test_list.sort(key=lambda x:x[1])\n    # printing first k elements of the sorted list\n    for i in range(K):\n        print(test_list[i])",
        "num_ids": 123
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples as input and returns the minimum K elements from the list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "num_ids": 60
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create a min heap with size K\n    heap = []\n    for i in range(K):\n        heap.append(test_list[i])\n    heapq.heapify(heap)\n\n    # Extract the minimum k records from the heap\n    for i in range(K, len(test_list)):\n        if test_list[i][1] < heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, test_list[i])\n\n    # Return the minimum k records\n    return heap",
        "num_ids": 147
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in ascending order based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Return the first K elements from the sorted list\n    return test_list[:K]",
        "num_ids": 118
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list by the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # return the first k tuples\n    return sorted_list[:K]",
        "num_ids": 76
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for i in test_list:\n        if i[0] in freq_dict:\n            freq_dict[i[0]] += 1\n        else:\n            freq_dict[i[0]] = 1\n\n    # Create a list of tuples of form (frequency, element)\n    freq_elem_list = [(v, k) for k, v in freq_dict.items()]\n\n    # Sort the list in decreasing order of frequency\n    freq_elem_list.sort(reverse=True)\n\n    # Select the minimum K elements from the sorted list\n    min_k_list = [i[1] for i in freq_elem_list[:K]]\n\n    # Return the list of minimum K elements\n    return min_k_list",
        "num_ids": 204
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return []\n    test_list = sorted(test_list)\n    return [test_list[i] for i in range(K)]",
        "num_ids": 108
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the test_list by the first element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Return the first K elements of the sorted test_list\n    return test_list[:K]",
        "num_ids": 84
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Find the minimum k records\n    result = []\n    for i in range(K):\n        result.append(test_list[i])\n    \n    # Return the result\n    return result",
        "num_ids": 65
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if len(test_list) < K:\n        return \"Not enough elements in the list\"\n    else:\n        test_list.sort(key=lambda x: x[1])\n        return [x[0] for x in test_list[:K]]",
        "num_ids": 85
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result",
        "num_ids": 116
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 128
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common",
        "num_ids": 64
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 135
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            common.append(l1[i])\n    return common",
        "num_ids": 122
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 122
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers_set = set(numbers)\n    if len(numbers_set) < 2:\n        return None\n    sorted_numbers = sorted(numbers_set)\n    return sorted_numbers[1]",
        "num_ids": 70
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n",
        "num_ids": 45
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 93
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 93
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = min(numbers)\n    numbers.remove(smallest)\n    \n    second_smallest = min(numbers)\n    \n    return second_smallest",
        "num_ids": 71
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 88
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 101
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest",
        "num_ids": 71
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest",
        "num_ids": 118
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest",
        "num_ids": 89
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a+b+'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'abbbabbbcabbbab'\nprint(text_match_zero_one(text)) # Output: ['abbbabbbcabbbab', 'bbbabbbcabbbab']",
        "num_ids": 137
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    return bool(re.match(pattern, text))",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.findall(pattern, text)\n    return match\n\ntext = 'abc, abbc, bbb'\nprint(text_match_zero_one(text))",
        "num_ids": 66
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input and returns the number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 98
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count",
        "num_ids": 93
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Counts the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 91
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\ntest_list = ['abc', 'bca', 'cab', 'abcd', 'dcba', 'bcda']\nprint(count_reverse_pairs(test_list)) # Output: 4",
        "num_ids": 165
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 93
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        if isinstance(sublist, list):\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in sublist_dict:\n                sublist_dict[sublist_tuple] += 1\n            else:\n                sublist_dict[sublist_tuple] = 1\n        else:\n            continue\n    return sublist_dict",
        "num_ids": 148
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    unique_lists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = 1\n            else:\n                unique_lists[sublist] += 1\n    return unique_lists",
        "num_ids": 93
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts",
        "num_ids": 70
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of each unique list\n    counts = {}\n\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is a list, convert it to a tuple and add it to the dictionary\n        if isinstance(elem, list):\n            tuple_elem = tuple(elem)\n            if tuple_elem in counts:\n                counts[tuple_elem] += 1\n            else:\n                counts[tuple_elem] = 1\n\n        # If the element is not a list, add it to the dictionary with a count of 1\n        else:\n            if elem in counts:\n                counts[elem] += 1\n            else:\n                counts[elem] = 1\n\n    return counts",
        "num_ids": 213
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a set to store all unique lists\n    unique_lists = set()\n    \n    # create an empty dictionary to store the count of each unique list\n    count_dict = {}\n    \n    # loop through the list and convert each sublist to a tuple\n    for sublist in list1:\n        # convert the sublist to a tuple and add it to the set of unique lists\n        unique_lists.add(tuple(sublist))\n    \n    # loop through the unique lists and count their occurencies in the original list\n    for unique_list in unique_lists:\n        count = 0\n        for sublist in list1:\n            if tuple(sublist) == unique_list:\n                count += 1\n        count_dict[unique_list] = count\n    \n    return count_dict",
        "num_ids": 222
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    '''\n    Returns a dictionary where every sublist is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    '''\n    result = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in result:\n                result[sublist] = 0\n            result[sublist] += 1\n    return result",
        "num_ids": 114
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    unique_lists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = 1\n            else:\n                unique_lists[sublist] += 1\n    return unique_lists",
        "num_ids": 93
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in unique_lists:\n            unique_lists[sublist_tuple] = 1\n        else:\n            unique_lists[sublist_tuple] += 1\n    return unique_lists",
        "num_ids": 130
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    sublists = set()\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.add(tuple(lst[i:j]))\n    count = {}\n    for s in sublists:\n        count[s] = lst.count(s)\n    return count",
        "num_ids": 81
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    unique_dict = {}\n    for sublist in lst:\n        # Convert each sublist to a tuple to make it hashable\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_dict:\n            unique_dict[sublist_tuple] += 1\n        else:\n            unique_dict[sublist_tuple] = 1\n    return unique_dict",
        "num_ids": 128
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        nums = num.split('.')\n        if len(nums) == 2:\n            if len(nums[1]) <= 2:\n                try:\n                    float(num)\n                    return True\n                except ValueError:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 104
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    else:\n        precision = len(num) - num.index('.') - 1\n        if precision > 2:\n            return False\n        else:\n            return True",
        "num_ids": 77
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if round(float(num), 2) == float(num):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 48
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return round(num,2) == num\n    except ValueError:\n        return False",
        "num_ids": 60
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num_float = float(num)\n        num_str = str(num_float)\n        if num_str == num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 80
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if int(float_num * 100) == float_num * 100:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 84
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    :param num: the string to check\n    :return: True if the string is a decimal number with a precision of 2, False otherwise\n    \"\"\"\n    try:\n        float_num = float(num)\n        return float_num == round(float_num, 2)\n    except ValueError:\n        return False",
        "num_ids": 93
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal_num = float(num)\n        if abs(decimal_num - float(num)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 80
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        if '.' in num:\n            if len(num.split('.')[1]) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    except ValueError:\n        return False",
        "num_ids": 84
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_element(arr):\n    \"\"\"\n    This function will check whether a list of numbers contains only one distinct element or not.\n    :param arr: List of numbers\n    :return: True if the list contains only one distinct element, otherwise False\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in arr:\n        if arr.count(i) > 1:\n            unique = False\n            break\n    return unique",
        "num_ids": 63
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    # converting list to set to remove duplicates\n    unique_set = set(arr)\n    # checking length of set and length of original list\n    if len(unique_set) == len(arr):\n        return True\n    else:\n        return False",
        "num_ids": 80
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_element(arr):\n    '''\n    This function takes in a list of numbers and checks whether it contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element and False otherwise.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_element(arr):\n    \"\"\"\n    Check if a list contains only one distinct element.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"The month has 30 days.\")\n    else:\n        print(\"The month has 31 days.\")",
        "num_ids": 57
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number.\"",
        "num_ids": 122
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"This month has 31 days.\")\n    elif monthnum in [4, 6, 9, 11]:\n        print(\"This month has 30 days.\")\n    else:\n        print(\"Invalid month number.\")",
        "num_ids": 127
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return True",
        "num_ids": 87
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Checks whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in (4, 6, 9, 11):\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum in (1, 3, 5, 7, 8, 10, 12):\n        return False\n    else:\n        return None  # Invalid month number\n",
        "num_ids": 121
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"The month number contains 30 days.\")\n    elif monthnum3 == 2:\n        print(\"February has 28 days in a leap year and 29 days in a non-leap year.\")\n    else:\n        print(\"The month number contains 31 days.\")",
        "num_ids": 133
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and checks if it contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid month number\"",
        "num_ids": 151
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return True  # Leap year check\n    else:\n        return False",
        "num_ids": 98
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"The month number contains 30 days.\")\n    else:\n        print(\"The month number does not contain 30 days.\")",
        "num_ids": 110
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return 'This month contains 30 days.'\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 'This month contains 31 days.'\n    elif monthnum == 2:\n        return 'This month contains 28 or 29 days.'\n    else:\n        return 'Invalid month number.'",
        "num_ids": 150
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n):\n    arr.sort() # Sort the array in ascending order\n    min_diff = float('inf') # Initialize minimum difference as infinity\n\n    # Traverse through all array elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i] # Calculate difference between current and next element\n        if diff < min_diff: # If current difference is less than minimum difference, update minimum difference\n            min_diff = diff\n\n    return min_diff",
        "num_ids": 111
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort() # sort the array in ascending order\n    min_diff = float('inf') # initialize the minimum difference to infinity\n    \n    for i in range(n-1): # loop through all pairs of elements\n        diff = arr[i+1] - arr[i] # calculate the difference between the two elements\n        if diff < min_diff: # if the difference is smaller than the current minimum\n            min_diff = diff # update the minimum difference\n    \n    return min_diff # return the minimum difference found",
        "num_ids": 119
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n < 2:\n        return None\n    \n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    \n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff",
        "num_ids": 182
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # sort the array in ascending order\n    min_diff = float('inf')  # initialize min_diff as infinity\n\n    # iterate through the array and calculate the minimum difference\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff < min_diff:\n                min_diff = diff\n    \n    return min_diff",
        "num_ids": 106
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    It uses bubble sort algorithm to sort the array and then calculates the minimum difference between adjacent elements.\n    \"\"\"\n    # sort the array using bubble sort algorithm\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    # calculate the minimum difference between adjacent elements\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "num_ids": 190
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 96
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and a length n, and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff",
        "num_ids": 110
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_digits(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i) and is_palindrome(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\nn = int(input(\"Enter the value of n: \"))\npolite_num = is_polite(n)\nprint(f\"The {n}th polite number is {polite_num}\")",
        "num_ids": 218
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function will find the nth polite number.\n    '''\n    count = 1 # Start with 1 since 1 is a polite number\n    num = 2 # Start with 2 since the first polite number is 2\n    while count < n: # Loop until we find the nth polite number\n        if is_prime(num): # Check if the current number is prime\n            count += 1 # Increment the count\n        num += 1 # Increment the number\n    return num-1 # Return the nth polite number\n\ndef is_prime(num):\n    '''\n    This function will check if a number is prime or not.\n    '''\n    if num < 2: # 1 is not a prime number\n        return False\n    for i in range(2, int(math.sqrt(num))+1): # Check if num is divisible by any number from 2 to sqrt(num)\n        if num % i == 0: # If num is divisible by i, it's not a prime number\n            return False\n    return True # If num is not divisible by any number from 2 to sqrt(num), it's a prime number",
        "num_ids": 260
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num) and is_coprime(num, count):\n            count += 1\n        num += 1\n    return num - 1\n\ndef is_prime(num):\n    '''\n    Check if a number is prime\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_coprime(num, count):\n    '''\n    Check if a number is coprime to the count\n    '''\n    for i in range(2, count + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 215
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    # Define a list of words that cannot be used in polite numbers\n    non_polite_words = ['the', 'and', 'or', 'but', 'not', 'of', 'in', 'a', 'an', 'to']\n    \n    # Start with the first polite number (2)\n    i = 2\n    \n    # Loop through the first n-1 polite numbers\n    for j in range(n-1):\n        # Check if i is polite by iterating through its digits and checking if each digit is less than or equal to 5\n        is_polite = True\n        for digit in str(i):\n            if int(digit) > 5:\n                is_polite = False\n                break\n        # If i is polite, check if it ends with a vowel\n        if is_polite and i % 10 in [1, 3, 7, 9]:\n            # Check if i has any non-polite words in its name\n            has_non_polite_word = False\n            for word in str(i):\n                if word in non_polite_words:\n                    has_non_polite_word = True\n                    break\n            # If i has no non-polite words, return it\n            if not has_non_polite_word:\n                return i\n        # Increment i by 1\n        i += 1\n    \n    # If n is less than or equal to 1, return None\n    if n <= 1:\n        return None\n    \n    # If no polite number is found, return None\n    return None",
        "num_ids": 358
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    # Initialize variables\n    i = 2\n    count = 1\n    \n    # Loop through numbers starting from 2\n    while count < n:\n        # Check if number is polite\n        is_polite = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        i += 1\n        \n    return i - 1",
        "num_ids": 179
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 0:\n        return False\n    \n    i = 1\n    while True:\n        is_prime = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime and i % (i-1)!= 0:\n            if n == 1:\n                return i\n            else:\n                n -= 1\n        i += 1",
        "num_ids": 112
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        is_polite = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n    return num",
        "num_ids": 125
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    # Define the formula for the nth polite number\n    polite_num = int(math.ceil((math.sqrt(24*n+1)+1)/6))\n    return polite_num",
        "num_ids": 57
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        count = 1\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            if count == n:\n                return num\n            num += 1\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 163
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    \n    while count < n:\n        is_polite = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite and i > 1:\n            count += 1\n        i += 1\n        \n    return i-1",
        "num_ids": 130
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    This function returns a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list",
        "num_ids": 75
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Returns a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 65
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "num_ids": 73
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a target sum and returns the number of pairs whose sum is equal to the target sum.\n\n    Args:\n    arr: A list of numbers\n    sum: An integer representing the target sum\n\n    Returns:\n    An integer representing the number of pairs whose sum is equal to the target sum.\n    \"\"\"\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "num_ids": 139
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    arr_len = len(arr)\n    for i in range(arr_len):\n        for j in range(i+1, arr_len):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 117
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "num_ids": 108
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 101
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            pairs_count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return pairs_count",
        "num_ids": 110
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort() # sorting the array to get O(nlogn) time complexity for finding pairs\n    for i in range(len(arr)):\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == sum:\n                count += 1\n                j += 1\n                k -= 1\n            elif arr[i] + arr[j] + arr[k] < sum:\n                j += 1\n            else:\n                k -= 1\n    return count",
        "num_ids": 179
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        curr_sum = arr[left] + arr[right]\n        if curr_sum == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif curr_sum < sum:\n            left += 1\n        else:\n            right -= 1\n            \n    return count",
        "num_ids": 143
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    arr.sort()\n    i = 0\n    j = n-1\n    while(i<j):\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return count",
        "num_ids": 144
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 102
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list which contains the elements that are present in one list but not in the other.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff",
        "num_ids": 72
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_list(li1, li2):\n    \"\"\"\n    This function returns the difference between two lists.\n    \"\"\"\n    diff = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return diff",
        "num_ids": 55
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "num_ids": 44
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists and returns the difference between the two lists.\n    \"\"\"\n    li_dif = [i for i in li1 + li2 if i not in li2]\n    return li_dif",
        "num_ids": 56
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists.\n    \"\"\"\n    diff_list = [i for i in li1 + li2 if i not in li2]\n    return diff_list",
        "num_ids": 49
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "num_ids": 58
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them as a new list.\n    \"\"\"\n    diff_list = []\n\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n\n    return diff_list",
        "num_ids": 68
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function will return the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))",
        "num_ids": 54
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing all the elements that are present in the first list but not present in the second list.\n    \"\"\"\n    diff_list = [elem for elem in li1 if elem not in li2]\n    return diff_list",
        "num_ids": 69
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # initialize an empty list to store the difference\n    diff_list = []\n    # iterate over the elements of the first list\n    for i in li1:\n        # check if the element is not in the second list\n        if i not in li2:\n            # add the element to the difference list\n            diff_list.append(i)\n    # return the difference list\n    return diff_list",
        "num_ids": 111
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    count = 1\n    total_sum = 0\n    while count <= n:\n        odd_num = 2 * count - 1\n        odd_num_power = odd_num ** 4\n        total_sum += odd_num_power\n        count += 1\n    return total_sum",
        "num_ids": 96
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through first n odd numbers\n    for i in range(1, n*2, 2):\n        # Add the fourth power of the current odd number to the sum variable\n        sum += i ** 4\n    \n    # Return the sum of fourth power of first n odd numbers\n    return sum",
        "num_ids": 104
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum",
        "num_ids": 61
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n\n    Parameters:\n        n (int): The number of odd natural numbers whose fourth power will be added.\n\n    Returns:\n        int: The sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += (count ** 4)\n        count += 2\n    return sum",
        "num_ids": 102
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of fourth power of first n odd natural numbers\n    odd_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of the current odd number to the sum\n        odd_sum += i**4\n        \n    # Return the sum of fourth power of first n odd natural numbers\n    return odd_sum",
        "num_ids": 131
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 68
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum",
        "num_ids": 40
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0\n    count = 0\n    while count < n : \n        odd_sum += (count**4)\n        count += 1\n    return odd_sum",
        "num_ids": 72
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    \n    while count <= n:\n        sum += count ** 4\n        count += 2\n    \n    return sum",
        "num_ids": 61
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(','[','{']:\n            stack.append(i)\n        elif i in [')',']','}']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True",
        "num_ids": 136
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {\")\":\"(\", \"]\":\"[\", \"}\":\"{\"}\n    \n    for char in exp:\n        if char in pairs:\n            if not stack or stack[-1]!= pairs[char]:\n                return False\n            stack.pop()\n        else:\n            stack.append(char)\n    \n    return not stack",
        "num_ids": 82
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 173
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n    \n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                balanced = False\n                break\n            else:\n                if char == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif char == '}' and stack[-1] == '{':\n                    stack.pop()\n                elif char == ']' and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    balanced = False\n                    break\n                \n    if not stack:\n        return balanced\n    else:\n        return False",
        "num_ids": 155
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n    stack = deque()\n    balanced = True\n    \n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(stack) == 0:\n                balanced = False\n                break\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                balanced = False\n                break\n    \n    if len(stack)!= 0:\n        balanced = False\n    \n    return balanced",
        "num_ids": 179
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)",
        "num_ids": 81
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    # Splitting the test string into words\n    words = test_str.split()\n    \n    # Creating a new list to store words with length K\n    result = []\n    \n    # Iterating over each word in the list\n    for word in words:\n        # Checking if the length of the word is equal to K\n        if len(word)!= K:\n            # If not, append the word to the result list\n            result.append(word)\n    \n    # Joining the words in the result list back into a string\n    new_str =''.join(result)\n    \n    # Returning the new string\n    return new_str",
        "num_ids": 138
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()  # Splitting the string into words\n    return \" \".join(word for word in words if len(word)!= K)  # Filtering out words with length K",
        "num_ids": 55
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)",
        "num_ids": 70
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)",
        "num_ids": 54
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n    words = test_str.split() # Splitting the string into words using whitespace as delimiter\n    words = [word for word in words if len(word)!= K] # Filtering out all the words with length equal to K\n    return \" \".join(words) # Joining the remaining words using whitespace as delimiter and returning the modified string",
        "num_ids": 101
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words[i] = \"\"\n    return \" \".join(words)",
        "num_ids": 78
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    return''.join(word for word in words if len(word)!= K)",
        "num_ids": 60
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with length K from the given string.\n    '''\n    # Splitting the string into a list of words\n    words = test_str.split()\n    # Creating an empty list to store the words with length K\n    words_K = []\n    # Looping through the words and adding the words with length K to the empty list\n    for word in words:\n        if len(word) == K:\n            words_K.append(word)\n    # Joining the words in the list back to a string\n    new_str =''.join(words_K)\n    # Returning the new string with removed words with length K\n    return new_str",
        "num_ids": 155
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)",
        "num_ids": 66
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string.\n    It returns None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None",
        "num_ids": 76
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string.\n    Returns None if there is no match.\n    \"\"\"\n    pattern = re.compile(pattern)\n    match_positions = []\n    for match in pattern.finditer(text):\n        match_positions.append((match.group(), match.start()))\n    return match_positions",
        "num_ids": 90
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function finds the occurrence and position of the substrings within a string.\n    '''\n    # find all the occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # create a list to store the position of each match\n    positions = []\n\n    # iterate through each match and store its position in the positions list\n    for match in matches:\n        positions.append(match.start())\n\n    # return None if there are no matches found\n    if not positions:\n        return None\n\n    # return a list of tuples containing the occurrence and position of each match\n    return list(zip(range(1, len(positions)+1), positions))",
        "num_ids": 155
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result if result else None",
        "num_ids": 87
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_regex = re.compile(pattern)\n    matches = pattern_regex.finditer(text)\n    if matches:\n        return [(match.group(), match.start()) for match in matches]\n    else:\n        return None",
        "num_ids": 94
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.start(), match.end()))\n    if matches:\n        return matches\n    else:\n        return None",
        "num_ids": 88
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match_list = []\n    # find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # iterate through the matches and append the occurrence and position to a list\n    for match in matches:\n        match_list.append((match.group(), match.start()))\n    # if there are no matches, return None\n    if not match_list:\n        return None\n    # otherwise, return the list of matches\n    return match_list",
        "num_ids": 144
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Returns a list of tuples, where each tuple contains the position of a substring in the text and the substring itself.\n    Returns None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return [(text.find(match), match) for match in matches]\n    else:\n        return None",
        "num_ids": 89
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        start, end = match.span()\n        matches.append((start, end-1)) # adjusting the end index to exclude the last character\n    return matches if matches else None",
        "num_ids": 100
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Finds the occurrence and position of the substrings within a string.\n    Returns None if there is no match.\n    \"\"\"\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.group(), match.start()))\n    return matches if matches else None",
        "num_ids": 79
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list as an input and checks whether every odd index contains odd numbers of the list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Checks whether every odd index contains odd numbers of a given list.\n    :param nums: list of integers\n    :return: boolean\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 73
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n    :param nums: A list of numbers\n    :return: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 87
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 67
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 115
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "num_ids": 110
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    This function takes a string as input and returns the count of characters which have vowels as their neighbors.\n\n    Args:\n    test_str: A string which needs to be checked for vowels as their neighbors.\n\n    Returns:\n    The count of characters which have vowels as their neighbors in the given string.\n\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "num_ids": 157
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    This function counts the number of vowels that have neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1] in vowels:\n                count += 1\n    return count",
        "num_ids": 143
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count",
        "num_ids": 117
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i].lower() in vowels and test_str[i-1].lower() in vowels:\n            count += 1\n        elif i < len(test_str)-1 and test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 162
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n            \n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u'] and test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n            vowel_count += 1\n    return vowel_count",
        "num_ids": 122
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count",
        "num_ids": 110
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n\n    # Calculate the sum of non-repeated elements\n    total_sum = 0\n    for elem, count in freq.items():\n        if count == 1:\n            total_sum += elem\n\n    return total_sum",
        "num_ids": 103
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements",
        "num_ids": 67
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    This function takes in a list of integers and returns the sum of all non-repeated elements.\n    '''\n    # create an empty dictionary to keep track of non-repeated elements\n    non_repeated_dict = {}\n    \n    # iterate through the input list and add non-repeated elements to the dictionary\n    for num in arr:\n        if num not in non_repeated_dict:\n            non_repeated_dict[num] = 1\n    \n    # calculate the sum of non-repeated elements in the dictionary\n    sum_non_repeated = sum(non_repeated_dict.keys())\n    \n    # return the sum of non-repeated elements\n    return sum_non_repeated",
        "num_ids": 146
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Creating an empty dictionary to keep track of the non-repeated elements and their counts.\n    count_dict = {}\n\n    # Iterating through each element in the list and updating the count dictionary accordingly.\n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n\n    # Summing up all the non-repeated elements.\n    sum_non_repeated = 0\n    for elem, count in count_dict.items():\n        if count == 1:\n            sum_non_repeated += elem\n\n    return sum_non_repeated",
        "num_ids": 167
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # calculate the sum of non-repeated elements\n    sum_non_repeated = 0\n    for i in freq:\n        if freq[i] == 1:\n            sum_non_repeated += i\n\n    return sum_non_repeated",
        "num_ids": 131
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_of_non_repeated = 0\n    non_repeated = []\n    for i in arr:\n        if i not in non_repeated:\n            non_repeated.append(i)\n            sum_of_non_repeated += i\n    return sum_of_non_repeated",
        "num_ids": 91
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = sum(set(arr))\n    return non_repeated_sum",
        "num_ids": 51
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum",
        "num_ids": 63
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    non_repeated_sum = sum(unique_arr)\n    return non_repeated_sum",
        "num_ids": 62
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result",
        "num_ids": 101
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list as input and packs consecutive duplicates of the list elements into sublists.\n    '''\n    # Use the groupby() function to group the list elements by their consecutive duplicates\n    grouped_list = [(k, len(list(g))) for k, g in groupby(list1)]\n\n    # Create a list to store the packed sublists\n    packed_list = []\n\n    # Iterate over each group in the grouped list\n    for group in grouped_list:\n        # If the group contains only one element, add it to the packed list\n        if group[1] == 1:\n            packed_list.append([group[0]])\n        else:\n            # Create a new sublist with the first element of the group\n            new_sublist = [group[0]]\n            # Iterate over the remaining elements of the group\n            for i in range(1, group[1]):\n                # Add the current element to the new sublist\n                new_sublist.append(list1[i])\n            # Add the new sublist to the packed list\n            packed_list.append(new_sublist)\n\n    return packed_list",
        "num_ids": 260
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result",
        "num_ids": 106
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append([group[0], len(group)])\n    return result",
        "num_ids": 101
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(g) for k, g in groupby(lst)]",
        "num_ids": 35
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # sort the list in ascending order\n    lst = sorted(lst)\n    # group consecutive duplicates by index\n    groups = [(k, list(g)) for k, g in groupby(enumerate(lst), lambda x: x[0]-x[1])]\n    # flatten the list of tuples to a list of sublists\n    result = [sublist for group in groups for sublist in group[1]]\n    return result",
        "num_ids": 124
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Sort the input list in ascending order\n    list1.sort()\n\n    # Use groupby() function to group the consecutive duplicates into sublists\n    result = [list(group) for key, group in groupby(list1)]\n\n    return result",
        "num_ids": 92
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [[k] * len(list(g)) for k, g in groupby(lst)]",
        "num_ids": 40
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for k, g in groupby(lst):\n        group = list(g)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group)\n    return result",
        "num_ids": 93
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list as input and returns the list with consecutive duplicates packed into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key!= None:\n            result.append([key] + list(group))\n        else:\n            result.append(list(group))\n    return result",
        "num_ids": 92
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count",
        "num_ids": 130
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    counts = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            counts[sublist] = counts.get(sublist, 0) + 1\n    return counts",
        "num_ids": 78
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result_dict:\n            result_dict[sublist_tuple] += 1\n        else:\n            result_dict[sublist_tuple] = 1\n    return result_dict",
        "num_ids": 127
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    sublists = set()\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.add(tuple(lst[i:j]))\n    sublist_count = {}\n    for sublist in sublists:\n        sublist_count[sublist] = lst.count(sublist)\n    return sublist_count",
        "num_ids": 93
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    unique_dict = {}\n    \n    # Iterate over each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in unique_dict:\n            # If it is, increment the count\n            unique_dict[sublist_tuple] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            unique_dict[sublist_tuple] = 1\n    \n    return unique_dict",
        "num_ids": 190
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    This function takes a list as input and returns a dictionary with tuples as keys and the count of the corresponding sublist as the value.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in count_dict:\n                count_dict[sublist] += 1\n            else:\n                count_dict[sublist] = 1\n    return count_dict",
        "num_ids": 128
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every unique sublist is a key and the value is the number of times it appears in the list.\n    \"\"\"\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in count_dict:\n                count_dict[sublist] = 1\n            else:\n                count_dict[sublist] += 1\n    return count_dict",
        "num_ids": 123
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Loop through each list in the list1\n    for lst in list1:\n        # Convert the list to a tuple and add it to the dictionary with a count of 1\n        counts[tuple(lst)] = counts.get(tuple(lst), 0) + 1\n    \n    # Return the dictionary of counts\n    return counts",
        "num_ids": 93
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    counts = {}\n    for sublist in list1:\n        subtuple = tuple(sublist)\n        if subtuple in counts:\n            counts[subtuple] += 1\n        else:\n            counts[subtuple] = 1\n    return counts",
        "num_ids": 62
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count",
        "num_ids": 149
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for r in range(1, len(test_list)+1):\n        for comb in combinations(test_list, r):\n            sums = [sum(t) for t in comb]\n            if len(set(sums)) == 1:\n                result.append(comb)\n    return result",
        "num_ids": 138
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for tup in combinations(test_list, i):\n            if sum(tup) == 0:\n                print(tup)",
        "num_ids": 112
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == sum(test_list):\n                result.append(j)\n    return result",
        "num_ids": 124
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == sum(test_list) and tuple(combo) not in result:\n                result.append(tuple(combo))\n    return result",
        "num_ids": 135
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    all_combinations = []\n    for i in range(1, len(test_list)+1):\n        all_combinations += list(combinations(test_list, i))\n    result = []\n    for combo in all_combinations:\n        if sum(combo) == 0:\n            result.append(combo)\n    return result",
        "num_ids": 112
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result",
        "num_ids": 123
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        result += list(combinations(test_list, i))\n    return result",
        "num_ids": 76
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combination in combinations(test_list, i):\n            if sum(combination) == len(combination):\n                result.append(combination)\n    return result",
        "num_ids": 125
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    # Get the sum of all tuples in the list\n    total_sum = sum([sum(i) for i in test_list])\n    # Create a list of all possible sums\n    possible_sums = list(range(1, total_sum+1))\n    # Find the combinations of sums with tuples in the list\n    combinations_list = []\n    for tup in test_list:\n        for i in range(1, len(tup)+1):\n            for j in combinations(possible_sums, i):\n                if sum(j) == sum(tup):\n                    combinations_list.append(j)\n    return combinations_list",
        "num_ids": 201
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                all_combinations.append(combo)\n    return all_combinations",
        "num_ids": 130
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the count of divisors of 'n'.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef is_even_divisor_count(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns True if the count of divisors of 'n' is even, else False.\n    \"\"\"\n    count = count_divisors(n)\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 154
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given number and\n    returns True if the count is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 95
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n    \n",
        "num_ids": 49
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\n\nif count_divisors(n) % 2 == 0:\n    print(f\"The number {n} has an even number of divisors.\")\nelse:\n    print(f\"The number {n} does not have an even number of divisors.\")",
        "num_ids": 149
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n) : \n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            divisor_count += 2\n    if n**0.5 == int(n**0.5) :\n        divisor_count -= 1\n    return divisor_count",
        "num_ids": 88
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors of n is even, else returns False.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 96
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(f\"{n} has an even number of divisors.\")\nelse:\n    print(f\"{n} has an odd number of divisors.\")",
        "num_ids": 134
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n) : \n    \"\"\"\n    Returns True if the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            count += 2\n    \n    if count == 0 : \n        return False\n    else : \n        return True",
        "num_ids": 88
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function checks whether the count of divisors of a number is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count % 2 == 0",
        "num_ids": 102
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n    return sum",
        "num_ids": 84
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n\n    # initialize a variable to store the sum of all odd length subarrays\n    sum_odd_length = 0\n\n    # iterate through each element of the array\n    for i in range(len(arr)):\n\n        # iterate through each odd length subarray starting from the current element\n        for j in range(i, len(arr), 2):\n\n            # add the sum of the subarray to the variable\n            sum_odd_length += sum(arr[i:j+1])\n\n    # return the sum of all odd length subarrays\n    return sum_odd_length",
        "num_ids": 173
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Traverse through all the subarrays of odd length\n    for i in range(1, n+1, 2):\n        # Calculate the starting index of the subarray\n        start = i - 1\n        # Calculate the ending index of the subarray\n        end = n\n        # Calculate the length of the subarray\n        length = i\n        # Calculate the sum of the subarray\n        subarray_sum = sum(arr[start:end:length])\n        # Add the sum of the subarray to the main sum\n        sum += subarray_sum\n    return sum",
        "num_ids": 150
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n    return res",
        "num_ids": 82
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd-length subarrays.\n    '''\n    # Initialize the sum of odd-length subarrays\n    odd_sum = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Loop through the array from index i to index len(arr) - 1 (inclusive)\n        for j in range(i, len(arr)):\n            # Check if the length of the subarray is odd\n            if (j - i + 1) % 2!= 0:\n                # Add the sum of the subarray to the odd_sum variable\n                odd_sum += sum(arr[i:j+1])\n    \n    return odd_sum",
        "num_ids": 165
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Finds the sum of all odd length subarrays.\n\n    Args:\n    - arr (list): List of integers\n\n    Returns:\n    - int: Sum of all odd length subarrays\n    \"\"\"\n\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n\n    return total_sum",
        "num_ids": 106
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n            \n    return sum",
        "num_ids": 59
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate through the array and calculate the sum of all odd length subarrays\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarr = arr[i:j]\n            if len(subarr) % 2 == 1:\n                sum += sum(subarr)\n    \n    return sum",
        "num_ids": 122
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays of a given array.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    \n    # Traverse through all possible subarrays\n    for i in range(n):\n        for j in range(i, n, 2):\n            # Calculate sum of current subarray\n            temp_sum = sum(arr[i:j+1])\n            # Check if subarray length is odd and add to sum\n            if (j-i+1) % 2!= 0:\n                sum += temp_sum\n    \n    return sum",
        "num_ids": 134
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    res = 0\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            res += sum(arr[j:j+i])\n    return res",
        "num_ids": 65
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    \n    if diff == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / diff) % 6\n    elif cmax == g:\n        h = (b - r) / diff + 2\n    else:\n        h = (r - g) / diff + 4\n    \n    h = round(h * 60, 2)\n    if h < 0:\n        h += 360\n    \n    if cmax == 0:\n        s = 0\n    else:\n        s = round(diff / cmax, 2)\n    \n    v = round(cmax, 2)\n    \n    return h, s, v",
        "num_ids": 238
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Converting the given RGB values to range 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Finding the maximum and minimum values of the RGB values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Finding the value and saturation of the HSV color\n    value = max_val\n    saturation = (max_val - min_val) / max_val\n    \n    # Finding the hue of the HSV color\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / (max_val - min_val))) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / (max_val - min_val)) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / (max_val - min_val)) + 240) % 360\n        \n    return hue, saturation, value",
        "num_ids": 281
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b)/delta) % 6\n    elif cmax == g:\n        hue = (b - r)/delta + 2\n    else:\n        hue = (r - g)/delta + 4\n    \n    hue = int(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else delta/cmax\n    \n    value = cmax\n    \n    return (hue, saturation, value)",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    # Normalize the RGB values to be between 0 and 1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find the maximum and minimum values of RGB\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the value of H\n    value = max_val\n    \n    # Calculate the saturation of H\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n    \n    # Calculate the hue of H\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / (max_val - min_val)) % 6\n    elif max_val == g:\n        hue = (b - r) / (max_val - min_val) + 2\n    elif max_val == b:\n        hue = (r - g) / (max_val - min_val) + 4\n    \n    hue = round(hue * 60, 2)\n    \n    if hue < 0:\n        hue += 360\n    \n    return hue, saturation, value",
        "num_ids": 309
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "num_ids": 245
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n\n    if delta == 0:\n        hue = 0\n    elif max_color == r:\n        hue = ((g - b) / delta) % 6\n    elif max_color == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if max_color == 0 else round(delta / max_color * 100)\n\n    value = max_color\n\n    return hue, saturation, value",
        "num_ids": 192
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    else:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    v = cmax\n    if cmax == 0:\n        s = 0\n    else:\n        s = 1 - (cmin / cmax)\n    return h, s, v",
        "num_ids": 227
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Normalize the rgb values to be between 0 and 1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the maximum and minimum values of the rgb values\n    cmax, cmin = max(r, g, b), min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = cmax - cmin\n\n    # Calculate the hue value\n    if cmax == r:\n        hue = (g - b) / diff % 6\n    elif cmax == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n\n    # Normalize the hue value to be between 0 and 1\n    hue /= 6.0\n\n    # Calculate the saturation value\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = diff / cmax\n\n    # Calculate the value value\n    value = cmax\n\n    # Return the hsv values as a tuple\n    return (hue, saturation, value)",
        "num_ids": 307
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Converts RGB color to HSV color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else round(delta / cmax * 100)\n    \n    value = round(cmax * 100)\n    \n    return (hue, saturation, value)",
        "num_ids": 236
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    \n    value = cmax\n    \n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    \n    return hue, saturation, value",
        "num_ids": 258
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    count = 0\n    for num in list1:\n        if count == 0:\n            even_num = num\n            count += 1\n        else:\n            odd_num = num\n            break\n    if even_num % 2 == 0 and odd_num % 2 == 1:\n        product = even_num * odd_num\n        print(\"The product of first even and odd number is:\", product)\n    else:\n        print(\"No even and odd number found in the list.\")",
        "num_ids": 152
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                continue\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                continue\n    \n    if even_num is None:\n        return None\n    else:\n        return even_num * odd_num",
        "num_ids": 127
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    if even_num == 0:\n        return \"List doesn't have any even number.\"\n    elif odd_num == 0:\n        return \"List doesn't have any odd number.\"\n    else:\n        return list1[0] * list1[even_num - 1] * list1[odd_num - 1]",
        "num_ids": 154
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 == 1]\n    return even[0] * odd[0]",
        "num_ids": 57
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Returns the product of the first even and odd numbers of the given list.\n    \"\"\"\n    even = None\n    odd = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return even * num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return odd * num\n    \n    return None",
        "num_ids": 96
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_prod *= num\n        else:\n            odd_prod *= num\n            \n    return even_prod, odd_prod",
        "num_ids": 89
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1[::-1]:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return even_num * odd_num",
        "num_ids": 125
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of the first even and odd numbers in a given list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in lst:\n        if num % 2!= 0:\n            odd = num\n            break\n    return even * odd",
        "num_ids": 87
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1[::-1]:\n        if num % 2!= 0:\n            odd_num = num\n            break\n        \n    if even_num is None or odd_num is None:\n        return None\n    \n    return even_num * odd_num",
        "num_ids": 125
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    \n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n            \n    if len(even) == 0:\n        return \"List contains no even numbers.\"\n    elif len(odd) == 0:\n        return \"List contains no odd numbers.\"\n    else:\n        return even[0] * odd[0]",
        "num_ids": 138
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = eval(test_str)\n    integer_tuple = tuple(map(int, test_tuple))\n    return integer_tuple",
        "num_ids": 59
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    :param test_str: A string representing a tuple of integers separated by commas and enclosed in parentheses\n    :type test_str: str\n    :return: A tuple of integers\n    :rtype: tuple\n    \"\"\"\n    # Remove leading and trailing parentheses\n    test_str = test_str.strip('()')\n    # Split the string by commas into a list of strings\n    str_list = test_str.split(',')\n    # Convert each string in the list to an integer and store it in a new list\n    int_list = [int(s.strip()) for s in str_list]\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)",
        "num_ids": 172
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.strip('()').split(',')\n    int_list = []\n    for i in test_list:\n        int_list.append(int(i.strip()))\n    return tuple(int_list)",
        "num_ids": 78
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas\n    test_tuple = test_str.strip('()').split(',')\n    \n    # Convert each element of the tuple to an integer\n    test_int_tuple = tuple(int(num) for num in test_tuple)\n    \n    return test_int_tuple",
        "num_ids": 88
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    # Convert the list of strings to a list of integers\n    int_list = [int(i) for i in str_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    # Return the tuple\n    return int_tuple",
        "num_ids": 105
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list of tuples\n    tuple_list = eval(test_str)\n    \n    # Convert each tuple to a list and convert elements to integers\n    int_tuple_list = []\n    for tuple in tuple_list:\n        int_tuple_list.append(tuple)\n        \n    # Convert each element in each tuple to an integer\n    for i in range(len(int_tuple_list)):\n        for j in range(len(int_tuple_list[i])):\n            int_tuple_list[i][j] = int(int_tuple_list[i][j])\n            \n    # Convert list of tuples to tuple of tuples\n    int_tuple = tuple(int_tuple_list)\n    \n    return int_tuple",
        "num_ids": 181
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Converts a tuple string to integer tuple.\n\n    Parameters:\n        test_str (str): A string representing a tuple of integers separated by commas.\n\n    Returns:\n        tuple: A tuple of integers.\n\n    Raises:\n        ValueError: If `test_str` is not a valid tuple string.\n    \"\"\"\n    try:\n        # remove any whitespaces and split the string by comma\n        values = test_str.replace(' ', '').split(',')\n        # convert each value to integer and create a tuple\n        integer_values = tuple(int(v) for v in values)\n        return integer_values\n    except ValueError:\n        raise ValueError('Invalid tuple string')",
        "num_ids": 150
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string with the comma separator and converting each string element to integer\n    int_tuple = tuple(int(i) for i in test_str.strip('()').split(','))\n    return int_tuple",
        "num_ids": 75
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function converts a tuple string to an integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.strip('()').split(','))",
        "num_ids": 50
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    str_list = test_str.replace('(', '').replace(')', '').split(',')\n\n    # Convert the list of strings to a list of integers\n    int_list = []\n    for num in str_list:\n        int_list.append(int(num.strip()))\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple",
        "num_ids": 123
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "num_ids": 52
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where the value should be inserted using bisect_right\n    index = bisect.bisect_right(a, x)\n    # Return the index\n    return index",
        "num_ids": 76
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i+1",
        "num_ids": 86
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index + 1",
        "num_ids": 84
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    else:\n        return bisect.bisect_right(a[:i+1], x)\n",
        "num_ids": 88
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "num_ids": 55
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 42
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r\"a.*b{3}\")\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b.*b.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a[b]{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an 'a' followed by three 'b's.\n    '''\n    pattern = r'a.b.b.b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple",
        "num_ids": 54
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple",
        "num_ids": 54
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function creates a new tuple from a given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple",
        "num_ids": 54
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    :param test_list: A list of integers.\n    :param test_str: A string of integers separated by spaces.\n    :return: A new tuple with the elements from the string and list.\n    \"\"\"\n    # Convert the string to a list of integers\n    str_list = [int(s) for s in test_str.split()]\n\n    # Combine the two lists and convert to a tuple\n    new_tuple = tuple(test_list + str_list)\n\n    return new_tuple",
        "num_ids": 133
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([test_str] + test_list)",
        "num_ids": 47
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check if every even index contains even numbers in the given list.\n\n    Args:\n    nums: A list of numbers.\n\n    Returns:\n    True if every even index contains even numbers, False otherwise.\n    \"\"\"\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 87
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Removes tuples from the given tuple.\n    \"\"\"\n    return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))",
        "num_ids": 42
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if isinstance(i, tuple):\n            new_tup += remove_nested(i)\n        else:\n            new_tup += (i,)\n    return new_tup",
        "num_ids": 75
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            result.append(i)\n        else:\n            result += remove_nested(i)\n    return tuple(result)",
        "num_ids": 71
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function removes tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result += list(item)\n    return tuple(result)",
        "num_ids": 68
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)",
        "num_ids": 74
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes any tuples that are nested inside it.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            continue\n        else:\n            result.append(item)\n    return tuple(result)",
        "num_ids": 71
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            result.append(elem)\n    return tuple(result)",
        "num_ids": 59
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            for nested_item in item:\n                result.append(nested_item)\n    return tuple(result)",
        "num_ids": 79
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)",
        "num_ids": 69
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n        else:\n            new_tup.extend(remove_nested(item))\n    return tuple(new_tup)",
        "num_ids": 82
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n\ninput_list = [1, 2, 3, [4, 5], 6, [7, [8, 9]]]\nprint(count_list(input_list))  # Output: 3",
        "num_ids": 89
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    x (int): The element to search for in the array.\n\n    Returns:\n    int: The index of the last occurrence of x in the array. If x is not found, returns -1.\n    \"\"\"\n\n    # Find the index of the first occurrence of x in the array\n    left = 0\n    right = len(arr) - 1\n    first = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            first = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Find the index of the last occurrence of x in the array\n    last = -1\n    left = first\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            last = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last",
        "num_ids": 279
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): A sorted list of integers.\n    x (int): An integer to find the last position of in the array.\n\n    Returns:\n    int: The last position of the element in the array.\n\n    Raises:\n    ValueError: If the array is not sorted.\n    \"\"\"\n\n    # Find the first occurrence of x\n    first_occurrence = arr.index(x)\n\n    # Find the last occurrence of x\n    last_occurrence = len(arr) - 1 - arr[::-1].index(x)\n\n    # Check if the array is sorted\n    if first_occurrence!= last_occurrence:\n        raise ValueError(\"Array is not sorted\")\n\n    # Return the last position of x\n    return last_occurrence",
        "num_ids": 179
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function finds the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 121
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n        \n        else:\n            right = mid - 1\n    \n    return -1",
        "num_ids": 120
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array arr and an element x, and returns the last position of x in arr.\n    If x is not in arr, it returns -1.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    last_index = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            last_index = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return last_index",
        "num_ids": 140
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    x (int): The element whose last position is to be found.\n\n    Returns:\n    int: The last position of the element in the array.\n\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # While left is less than right, search for the element in the array\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the element, update the right pointer to search in the right half of the array\n        if arr[mid] == x:\n            right = mid - 1\n        # If the middle element is less than the element, update the left pointer to search in the left half of the array\n        elif arr[mid] < x:\n            left = mid + 1\n        # If the middle element is greater than the element, update the right pointer to search in the right half of the array\n        else:\n            right = mid - 1\n\n    # Return the last position of the element\n    return left\n",
        "num_ids": 256
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1",
        "num_ids": 124
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    :param arr: A sorted array of integers.\n    :param x: An integer to search for.\n    :return: The last position of the element in the array. If the element is not found, return -1.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    last_pos = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_pos",
        "num_ids": 164
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    last_pos = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            last_pos = mid\n            break\n        elif arr[mid] >= x:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return last_pos",
        "num_ids": 138
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element as input and returns the last position of the element in the array.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    result = -1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n        \n        elif arr[mid] < x:\n            start = mid + 1\n        \n        else:\n            end = mid - 1\n    \n    return result",
        "num_ids": 122
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function takes in a string as an argument. It returns True if the string has an 'a' followed by anything, ending in 'b'. Otherwise, it returns False.\n    '''\n    pattern = re.compile(r'^a.*b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 93
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None",
        "num_ids": 80
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(text_starta_endb(text)) # True\n\ntext = \"The quick brown fox jumps over the lazy cat\"\nprint(text_starta_endb(text)) # False",
        "num_ids": 112
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 79
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 53
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    \"\"\"\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum",
        "num_ids": 53
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum",
        "num_ids": 49
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as an argument and returns the sum of all the values in the dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum",
        "num_ids": 59
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes in a dictionary as an argument and returns the sum of all the values in the dictionary.\n    '''\n    sum = 0\n    for value in dictionary.values():\n        sum += value\n    return sum\n",
        "num_ids": 55
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum",
        "num_ids": 48
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum",
        "num_ids": 54
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    This function takes a dictionary as an argument and returns the sum of all the values in the dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum",
        "num_ids": 53
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total",
        "num_ids": 47
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum",
        "num_ids": 48
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all its values.\n    '''\n    return sum(dictionary.values())",
        "num_ids": 37
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n    \n    # loop over the range [l, r]\n    for i in range(l, r+1):\n        \n        # check if i is odd\n        if i % 2 == 1:\n            \n            # add i to the total\n            total += i\n    \n    # return the total\n    return total",
        "num_ids": 102
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    # initialize the sum variable to 0\n    total_sum = 0\n    \n    # loop through the range 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # if the number is odd, add it to the sum variable\n            total_sum += i\n    \n    # return the sum variable\n    return total_sum",
        "num_ids": 125
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum",
        "num_ids": 67
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1): \n        if i % 2!= 0: \n            sum += i\n    return sum",
        "num_ids": 67
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range 1 to n (inclusive).\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "num_ids": 63
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    This function will calculate the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize sum to zero\n    total_sum = 0\n    \n    # Iterate through all odd numbers within the range l to r\n    for i in range(1, n+1, 2):\n        total_sum += i\n    \n    return total_sum",
        "num_ids": 83
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    # loop through all odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        sum += i\n    # return the sum\n    return sum",
        "num_ids": 87
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            sum_odd += i\n    return sum_odd",
        "num_ids": 71
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n (inclusive).\n    '''\n    # initialize a variable to store the sum\n    total = 0\n    \n    # loop through all odd numbers within the range\n    for i in range(1, n+1, 2):\n        # add each odd number to the total\n        total += i\n    \n    # return the total\n    return total",
        "num_ids": 100
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range l and r (inclusive).\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop over the range\n    for i in range(l, r+1):\n        # If the current number is odd, add it to the sum\n        if i % 2 == 1:\n            total += i\n    \n    # Return the total sum\n    return total",
        "num_ids": 99
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result",
        "num_ids": 42
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 37
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total",
        "num_ids": 49
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum",
        "num_ids": 42
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "num_ids": 42
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all its elements.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 35
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n\n    Parameters:\n    arr (list): The array of numbers for which we want to find the sum.\n\n    Returns:\n    int: The sum of the numbers in the array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "num_ids": 78
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function returns the sum of an array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 27
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits of a number by a given number of bits.\n    n: input number (int)\n    d: number of bits to rotate left (int)\n    '''\n\n    # Convert n to binary string and determine length of binary string\n    binary_string = bin(n)[2:].zfill(32)\n\n    # Convert d to binary string and determine length of binary string\n    d_binary_string = bin(d)[2:].zfill(5)\n\n    # Convert d_binary_string to decimal\n    d_decimal = int(d_binary_string, 2)\n\n    # Extract leftmost d bits from binary_string\n    rotated_bits = binary_string[:d]\n\n    # Extract rightmost 32-d bits from binary_string\n    right_bits = binary_string[d:]\n\n    # Concatenate rotated_bits and right_bits to get the rotated number\n    rotated_number = int(rotated_bits + right_bits, 2)\n\n    return rotated_number",
        "num_ids": 228
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    mask = (1<<32)-1\n    d = d % 32\n    return ((n<<d) & mask) | (n>>(32-d))",
        "num_ids": 47
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number.\n    '''\n    mask = 0xFFFFFFFF\n    d = d % 32\n    # create a mask with d set to 1's\n    mask_d = mask << d\n    # create a mask with 32-d set to 0's\n    mask_not_d = mask >> (32 - d)\n    # apply the masks to the number\n    n = (n & mask_not_d) | ((n & mask_d) << (32 - d))\n    return n",
        "num_ids": 131
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | (n >> (32 - d))\n    return n",
        "num_ids": 62
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    \"\"\"\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) & mask | (n & ~mask)",
        "num_ids": 71
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) & mask | (n & ~(2**32-1)) >> (32 - d)",
        "num_ids": 87
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    \"\"\"\n    # get the left-most d bits\n    left_bits = n & ((1 << d) - 1)\n    # shift the right-most 32-d bits to the left\n    right_bits = n >> d\n    # return the left-bits | right-bits\n    return left_bits | right_bits",
        "num_ids": 106
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary string and pad it with zeros if necessary\n    binary_n = bin(n)[2:].zfill(32)\n    # Convert d to binary string and pad it with zeros if necessary\n    binary_d = bin(d)[2:].zfill(5)\n    # Convert d to binary string and pad it with zeros if necessary\n    binary_d = binary_d[-5:]\n    # Pad binary_n with zeros if necessary\n    binary_n = binary_n.zfill(32)\n    # Concatenate binary_n and binary_d\n    binary_n_d = binary_n + binary_d\n    # Convert binary_n_d to integer\n    result = int(binary_n_d, 2)\n    return result",
        "num_ids": 206
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    This function takes two arguments: n (the number to be rotated) and d (the number of bits to be rotated).\n    It returns the rotated number.\n    '''\n    mask = (1 << d) - 1   # Create a mask of d bits with 1's\n    right_shift = n >> d   # Shift n right by d bits\n    left_shift = n << (32-d)   # Shift n left by 32-d bits\n    return (right_shift & mask) | (left_shift & ~mask)   # Combine the shifted n's using a bitwise OR and masking",
        "num_ids": 144
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    # Convert the number to binary and split it into chunks of 8 bits\n    binary_num = bin(n)[2:].zfill(32)\n    binary_chunks = [binary_num[i:i+8] for i in range(0, len(binary_num), 8)]\n    # Rotate each chunk by d bits\n    rotated_chunks = [binary_chunks[i][d:] + binary_chunks[i][:d] for i in range(4)]\n    # Join the rotated chunks into a single binary number\n    rotated_binary_num = ''.join(rotated_chunks)\n    # Convert the binary number back to decimal and return it\n    return int(rotated_binary_num, 2)",
        "num_ids": 166
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext = \"This is a  string with spaces.\"\nprint(remove_all_spaces(text))",
        "num_ids": 68
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 45
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all the whitespaces from it.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 50
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    \n    return count",
        "num_ids": 75
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    This function takes three integers as input and returns the count of the equal numbers\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y:\n        count = 2\n    elif x == z:\n        count = 2\n    elif y == z:\n        count = 2\n    else:\n        count = 0\n    return count",
        "num_ids": 97
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    \n    return count",
        "num_ids": 76
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y and y!= z:\n        count += 2\n    elif x == z and y!= z:\n        count += 2\n    elif y == z and x!= z:\n        count += 2\n    elif x!= y and y!= z:\n        count += 3\n    return count",
        "num_ids": 118
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function will count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers present in the input.\n    \"\"\"\n    count = 0\n    \n    if x == y == z:\n        count += 1\n    \n    if x == y and y == z:\n        count += 1\n    \n    if x == z and y == z:\n        count += 1\n    \n    if x == y and x == z:\n        count += 1\n    \n    if x == y and y == z and x == z:\n        count += 1\n    \n    return count",
        "num_ids": 123
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n\nprint(test_three_equal(1, 2, 3)) # Output: 0\nprint(test_three_equal(1, 1, 1)) # Output: 3\nprint(test_three_equal(2, 2, 3)) # Output: 1",
        "num_ids": 143
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            continue\n        else:\n            j = i\n            while j < n and arr[j] > arr[j-1]:\n                j += 1\n            if j == n:\n                return -1\n            else:\n                count += 1\n                temp = arr[i:j]\n                temp = temp[::-1]\n                arr[i:j] = temp\n    return count",
        "num_ids": 124
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Base case\n    if arr == sorted(arr):\n        return count\n    \n    # Find the minimum element in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    \n    # Find the element to be placed at the beginning\n    for i in range(n):\n        if arr[i] > min_val:\n            break\n    \n    # Rotate the array\n    arr = arr[i:] + arr[:i]\n    \n    # Check if the rotated array is sorted or not\n    if arr == sorted(arr):\n        return count + 1\n    else:\n        return count_rotation(arr)",
        "num_ids": 168
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    \n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    \n    # Find the pivot point\n    pivot = 0\n    for i in range(n):\n        if arr[i] > arr[n-1]:\n            pivot = i\n            break\n    \n    # Rotate the array so that the pivot is at the end\n    arr = arr[pivot:]+arr[:pivot]\n    \n    # Find the rotation count\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n            \n    return count",
        "num_ids": 139
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the minimum element of the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    # Count the number of swaps required to make the minimum element as the first element\n    swaps = 0\n    for i in range(n):\n        if arr[i] > min_element:\n            swaps += 1\n    return swaps",
        "num_ids": 116
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if (mid == 0 or arr[mid] > arr[mid-1]) and (mid == n-1 or arr[mid] > arr[mid+1]):\n            return mid\n        if mid > 0 and arr[mid] < arr[mid-1]:\n            return mid\n        elif arr[low] >= arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1",
        "num_ids": 134
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[i+1]:\n            break\n    else:\n        return 0\n    return count_rotation(arr[i:]) + (n - i)",
        "num_ids": 63
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # If array is already sorted, then no rotation is needed\n    if arr == sorted(arr):\n        return 0\n    # If array is not sorted, then there must be a rotation\n    else:\n        # We can check if the array can be split into two halves and the first half can be sorted\n        # If it can, then the rotation count will be n/2 + 1\n        # Otherwise, the rotation count will be the index of the smallest element after the second half\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        if left == sorted(left):\n            return n // 2 + 1\n        else:\n            return n - min(right) + 1",
        "num_ids": 188
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    left, right = 0, len(arr) - 1\n    count = 0\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n        count += 1\n    \n    return count",
        "num_ids": 78
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    low = 0\n    high = n-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n",
        "num_ids": 72
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if i < n-1 and arr[i] > arr[i+1]:\n            return i+1\n    return 0",
        "num_ids": 51
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n == 0 or n == 1:\n        return True\n\n    left = 2\n    right = n // 2\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False",
        "num_ids": 143
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    return math.sqrt(n) == int(math.sqrt(n))",
        "num_ids": 52
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    \n    left, right = 2, n // 2\n    \n    while left <= right:\n        mid = (left + right) // 2\n        mid_squared = mid ** 2\n        \n        if mid_squared == n:\n            return True\n        elif mid_squared < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False",
        "num_ids": 123
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))",
        "num_ids": 52
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False",
        "num_ids": 92
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes a positive integer n as input and returns True if n is a perfect square,\n    and False otherwise.\n    '''\n    if n == 0 or n == 1:\n        return True\n    x = n // 2\n    y = x\n    while y < n:\n        y = x + y\n        x = y - x\n    return y * y == n",
        "num_ids": 90
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Check whether the given number is a perfect square or not.\n    '''\n    return int(math.sqrt(n))**2 == n",
        "num_ids": 45
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function returns True if the given number is a perfect square, and False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    else:\n        i = 1\n        while i*i <= n:\n            i += 1\n        return i*i == n",
        "num_ids": 70
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        x = 1\n        while x*x <= n:\n            x += 1\n        return x*x == n",
        "num_ids": 78
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False",
        "num_ids": 40
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list as input and returns True if the product of all the numbers in the list is even, otherwise it returns False.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 53
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "num_ids": 90
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_list = None\n    max_sum = float('-inf')\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list",
        "num_ids": 69
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list",
        "num_ids": 60
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 88
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 85
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = [lst]\n        elif sum(lst) == max_sum:\n            max_list.append(lst)\n\n    return max_list",
        "num_ids": 107
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list",
        "num_ids": 85
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list",
        "num_ids": 85
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 88
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return [max_list]",
        "num_ids": 69
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run",
        "num_ids": 101
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n            \n    return max_run",
        "num_ids": 98
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "num_ids": 101
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n            \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    max_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count",
        "num_ids": 99
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in the given string.\n\n    Parameters:\n    test_str (str): The given string.\n\n    Returns:\n    int: The maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run",
        "num_ids": 139
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n            \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and finds the maximum run of uppercase characters in it.\n    \"\"\"\n    # Convert the string to lowercase to ignore case sensitivity\n    test_str = test_str.lower()\n    max_run = 0\n    current_run = 0\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, increment the current run count\n        if test_str[i].isupper():\n            current_run += 1\n            # If the current run count is greater than the maximum run count, update the maximum run count\n            if current_run > max_run:\n                max_run = current_run\n        # If the current character is not uppercase, reset the current run count to 0\n        else:\n            current_run = 0\n    return max_run",
        "num_ids": 195
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run",
        "num_ids": 105
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number from the list.\n    If there is no odd number in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 69
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n\n    Args:\n    nums (list): A list of numbers\n\n    Returns:\n    int: The first odd number in the list.\n\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 80
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function returns the first odd number in a given list of numbers.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 61
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 54
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 66
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup",
        "num_ids": 39
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(\"The tuple contains K\")\n    else:\n        print(\"The tuple does not contain K\")",
        "num_ids": 61
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of equal length.\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(\"Error: Element\", i+1, \"of tuple 2 is not smaller than its corresponding element in tuple 1.\")\n            return False\n    \n    print(\"All elements of tuple 2 are smaller than their corresponding elements in tuple 1.\")\n    return True",
        "num_ids": 159
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 98
    }
]